
SatCube_SAML21E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  000070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020050  2**0
                  CONTENTS
  3 .bss          0000017c  20000050  0000711c  00020050  2**2
                  ALLOC
  4 .stack        00002004  200001cc  00007298  00020050  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022b05  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b45  00000000  00000000  00042bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000887a  00000000  00000000  0004671b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016e0  00000000  00000000  0004ef95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014e8  00000000  00000000  00050675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f12f  00000000  00000000  00051b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a28e  00000000  00000000  00070c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d1cc  00000000  00000000  0008af1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005268  00000000  00000000  001180e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 21 00 20 31 01 00 00 c5 01 00 00 c5 01 00 00     .!. 1...........
	...
      2c:	c5 01 00 00 00 00 00 00 00 00 00 00 c5 01 00 00     ................
      3c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 81 2d 00 00     .............-..
      4c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      5c:	c5 01 00 00 6d 47 00 00 89 47 00 00 c5 01 00 00     ....mG...G......
      6c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      7c:	c5 01 00 00 c5 01 00 00 c1 4e 00 00 c5 01 00 00     .........N......
	...
      94:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      a4:	c5 01 00 00 c5 01 00 00 c5 01 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000050 	.word	0x20000050
      d4:	00000000 	.word	0x00000000
      d8:	000070cc 	.word	0x000070cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000054 	.word	0x20000054
     108:	000070cc 	.word	0x000070cc
     10c:	000070cc 	.word	0x000070cc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11a:	4798      	blx	r3
	sleep_manager_init();
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     11e:	4798      	blx	r3
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	00000d15 	.word	0x00000d15
     12c:	00005465 	.word	0x00005465

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b19      	ldr	r3, [pc, #100]	; (19c <Reset_Handler+0x6c>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x70>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <Reset_Handler+0x74>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b11      	ldr	r3, [pc, #68]	; (1a8 <Reset_Handler+0x78>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0e      	ldr	r3, [pc, #56]	; (1ac <Reset_Handler+0x7c>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0d      	ldr	r3, [pc, #52]	; (1b0 <Reset_Handler+0x80>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x84>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     186:	4a0c      	ldr	r2, [pc, #48]	; (1b8 <Reset_Handler+0x88>)
     188:	6853      	ldr	r3, [r2, #4]
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	430b      	orrs	r3, r1
     18e:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     190:	4b0a      	ldr	r3, [pc, #40]	; (1bc <Reset_Handler+0x8c>)
     192:	4798      	blx	r3

        /* Branch to main function */
        main();
     194:	4b0a      	ldr	r3, [pc, #40]	; (1c0 <Reset_Handler+0x90>)
     196:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     198:	e7fe      	b.n	198 <Reset_Handler+0x68>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	000070cc 	.word	0x000070cc
     1a0:	20000000 	.word	0x20000000
     1a4:	20000050 	.word	0x20000050
     1a8:	20000050 	.word	0x20000050
     1ac:	200001cc 	.word	0x200001cc
     1b0:	00000000 	.word	0x00000000
     1b4:	e000ed00 	.word	0xe000ed00
     1b8:	41004000 	.word	0x41004000
     1bc:	00006cdd 	.word	0x00006cdd
     1c0:	0000528d 	.word	0x0000528d

000001c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	af00      	add	r7, sp, #0
        while (1) {
     1c8:	e7fe      	b.n	1c8 <Dummy_Handler+0x4>

000001ca <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ca:	b580      	push	{r7, lr}
     1cc:	b084      	sub	sp, #16
     1ce:	af00      	add	r7, sp, #0
     1d0:	60f8      	str	r0, [r7, #12]
     1d2:	607a      	str	r2, [r7, #4]
     1d4:	230b      	movs	r3, #11
     1d6:	18fb      	adds	r3, r7, r3
     1d8:	1c0a      	adds	r2, r1, #0
     1da:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1dc:	230b      	movs	r3, #11
     1de:	18fb      	adds	r3, r7, r3
     1e0:	781a      	ldrb	r2, [r3, #0]
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	3220      	adds	r2, #32
     1e6:	0092      	lsls	r2, r2, #2
     1e8:	6879      	ldr	r1, [r7, #4]
     1ea:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1ec:	46c0      	nop			; (mov r8, r8)
     1ee:	46bd      	mov	sp, r7
     1f0:	b004      	add	sp, #16
     1f2:	bd80      	pop	{r7, pc}

000001f4 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     1f4:	b580      	push	{r7, lr}
     1f6:	b082      	sub	sp, #8
     1f8:	af00      	add	r7, sp, #0
     1fa:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	695b      	ldr	r3, [r3, #20]
     200:	2280      	movs	r2, #128	; 0x80
     202:	431a      	orrs	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}

00000210 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     210:	b580      	push	{r7, lr}
     212:	b082      	sub	sp, #8
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	695b      	ldr	r3, [r3, #20]
     21c:	2280      	movs	r2, #128	; 0x80
     21e:	0052      	lsls	r2, r2, #1
     220:	431a      	orrs	r2, r3
     222:	687b      	ldr	r3, [r7, #4]
     224:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     226:	46c0      	nop			; (mov r8, r8)
     228:	46bd      	mov	sp, r7
     22a:	b002      	add	sp, #8
     22c:	bd80      	pop	{r7, pc}

0000022e <hri_mclk_set_APBCMASK_SERCOM0_bit>:
{
	return ((Mclk *)hw)->APBBMASK.reg;
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
     22e:	b580      	push	{r7, lr}
     230:	b082      	sub	sp, #8
     232:	af00      	add	r7, sp, #0
     234:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     236:	687b      	ldr	r3, [r7, #4]
     238:	69db      	ldr	r3, [r3, #28]
     23a:	2201      	movs	r2, #1
     23c:	431a      	orrs	r2, r3
     23e:	687b      	ldr	r3, [r7, #4]
     240:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     242:	46c0      	nop			; (mov r8, r8)
     244:	46bd      	mov	sp, r7
     246:	b002      	add	sp, #8
     248:	bd80      	pop	{r7, pc}

0000024a <hri_mclk_set_APBCMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
     24a:	b580      	push	{r7, lr}
     24c:	b082      	sub	sp, #8
     24e:	af00      	add	r7, sp, #0
     250:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     252:	687b      	ldr	r3, [r7, #4]
     254:	69db      	ldr	r3, [r3, #28]
     256:	2202      	movs	r2, #2
     258:	431a      	orrs	r2, r3
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	46bd      	mov	sp, r7
     262:	b002      	add	sp, #8
     264:	bd80      	pop	{r7, pc}

00000266 <hri_mclk_set_APBCMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM2_bit(const void *const hw)
{
     266:	b580      	push	{r7, lr}
     268:	b082      	sub	sp, #8
     26a:	af00      	add	r7, sp, #0
     26c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	69db      	ldr	r3, [r3, #28]
     272:	2204      	movs	r2, #4
     274:	431a      	orrs	r2, r3
     276:	687b      	ldr	r3, [r7, #4]
     278:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}

00000282 <hri_mclk_set_APBCMASK_TC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
     282:	b580      	push	{r7, lr}
     284:	b082      	sub	sp, #8
     286:	af00      	add	r7, sp, #0
     288:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	69db      	ldr	r3, [r3, #28]
     28e:	2280      	movs	r2, #128	; 0x80
     290:	0052      	lsls	r2, r2, #1
     292:	431a      	orrs	r2, r3
     294:	687b      	ldr	r3, [r7, #4]
     296:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     298:	46c0      	nop			; (mov r8, r8)
     29a:	46bd      	mov	sp, r7
     29c:	b002      	add	sp, #8
     29e:	bd80      	pop	{r7, pc}

000002a0 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b084      	sub	sp, #16
     2a4:	af00      	add	r7, sp, #0
     2a6:	60f8      	str	r0, [r7, #12]
     2a8:	607a      	str	r2, [r7, #4]
     2aa:	230b      	movs	r3, #11
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	1c0a      	adds	r2, r1, #0
     2b0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2b2:	230b      	movs	r3, #11
     2b4:	18fb      	adds	r3, r7, r3
     2b6:	781b      	ldrb	r3, [r3, #0]
     2b8:	68fa      	ldr	r2, [r7, #12]
     2ba:	01db      	lsls	r3, r3, #7
     2bc:	18d3      	adds	r3, r2, r3
     2be:	3308      	adds	r3, #8
     2c0:	687a      	ldr	r2, [r7, #4]
     2c2:	601a      	str	r2, [r3, #0]
}
     2c4:	46c0      	nop			; (mov r8, r8)
     2c6:	46bd      	mov	sp, r7
     2c8:	b004      	add	sp, #16
     2ca:	bd80      	pop	{r7, pc}

000002cc <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	60f8      	str	r0, [r7, #12]
     2d4:	607a      	str	r2, [r7, #4]
     2d6:	230b      	movs	r3, #11
     2d8:	18fb      	adds	r3, r7, r3
     2da:	1c0a      	adds	r2, r1, #0
     2dc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2de:	230b      	movs	r3, #11
     2e0:	18fb      	adds	r3, r7, r3
     2e2:	781b      	ldrb	r3, [r3, #0]
     2e4:	68fa      	ldr	r2, [r7, #12]
     2e6:	01db      	lsls	r3, r3, #7
     2e8:	18d3      	adds	r3, r2, r3
     2ea:	3304      	adds	r3, #4
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	601a      	str	r2, [r3, #0]
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b004      	add	sp, #16
     2f6:	bd80      	pop	{r7, pc}

000002f8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b084      	sub	sp, #16
     2fc:	af00      	add	r7, sp, #0
     2fe:	60f8      	str	r0, [r7, #12]
     300:	607a      	str	r2, [r7, #4]
     302:	230b      	movs	r3, #11
     304:	18fb      	adds	r3, r7, r3
     306:	1c0a      	adds	r2, r1, #0
     308:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     30a:	230b      	movs	r3, #11
     30c:	18fb      	adds	r3, r7, r3
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	68fa      	ldr	r2, [r7, #12]
     312:	01db      	lsls	r3, r3, #7
     314:	18d3      	adds	r3, r2, r3
     316:	3318      	adds	r3, #24
     318:	687a      	ldr	r2, [r7, #4]
     31a:	601a      	str	r2, [r3, #0]
}
     31c:	46c0      	nop			; (mov r8, r8)
     31e:	46bd      	mov	sp, r7
     320:	b004      	add	sp, #16
     322:	bd80      	pop	{r7, pc}

00000324 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     324:	b580      	push	{r7, lr}
     326:	b084      	sub	sp, #16
     328:	af00      	add	r7, sp, #0
     32a:	60f8      	str	r0, [r7, #12]
     32c:	607a      	str	r2, [r7, #4]
     32e:	230b      	movs	r3, #11
     330:	18fb      	adds	r3, r7, r3
     332:	1c0a      	adds	r2, r1, #0
     334:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     336:	230b      	movs	r3, #11
     338:	18fb      	adds	r3, r7, r3
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	68fa      	ldr	r2, [r7, #12]
     33e:	01db      	lsls	r3, r3, #7
     340:	18d3      	adds	r3, r2, r3
     342:	3314      	adds	r3, #20
     344:	687a      	ldr	r2, [r7, #4]
     346:	601a      	str	r2, [r3, #0]
}
     348:	46c0      	nop			; (mov r8, r8)
     34a:	46bd      	mov	sp, r7
     34c:	b004      	add	sp, #16
     34e:	bd80      	pop	{r7, pc}

00000350 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     350:	b590      	push	{r4, r7, lr}
     352:	b085      	sub	sp, #20
     354:	af00      	add	r7, sp, #0
     356:	6078      	str	r0, [r7, #4]
     358:	000c      	movs	r4, r1
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	1cfb      	adds	r3, r7, #3
     360:	1c22      	adds	r2, r4, #0
     362:	701a      	strb	r2, [r3, #0]
     364:	1cbb      	adds	r3, r7, #2
     366:	1c02      	adds	r2, r0, #0
     368:	701a      	strb	r2, [r3, #0]
     36a:	1c7b      	adds	r3, r7, #1
     36c:	1c0a      	adds	r2, r1, #0
     36e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     370:	1cfb      	adds	r3, r7, #3
     372:	7819      	ldrb	r1, [r3, #0]
     374:	1cbb      	adds	r3, r7, #2
     376:	781a      	ldrb	r2, [r3, #0]
     378:	230f      	movs	r3, #15
     37a:	18fb      	adds	r3, r7, r3
     37c:	6878      	ldr	r0, [r7, #4]
     37e:	2430      	movs	r4, #48	; 0x30
     380:	01c9      	lsls	r1, r1, #7
     382:	1841      	adds	r1, r0, r1
     384:	188a      	adds	r2, r1, r2
     386:	1912      	adds	r2, r2, r4
     388:	7812      	ldrb	r2, [r2, #0]
     38a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     38c:	230f      	movs	r3, #15
     38e:	18fb      	adds	r3, r7, r3
     390:	220f      	movs	r2, #15
     392:	18ba      	adds	r2, r7, r2
     394:	7812      	ldrb	r2, [r2, #0]
     396:	210f      	movs	r1, #15
     398:	438a      	bics	r2, r1
     39a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     39c:	1c7b      	adds	r3, r7, #1
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	220f      	movs	r2, #15
     3a2:	4013      	ands	r3, r2
     3a4:	b2d9      	uxtb	r1, r3
     3a6:	230f      	movs	r3, #15
     3a8:	18fb      	adds	r3, r7, r3
     3aa:	220f      	movs	r2, #15
     3ac:	18ba      	adds	r2, r7, r2
     3ae:	7812      	ldrb	r2, [r2, #0]
     3b0:	430a      	orrs	r2, r1
     3b2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b4:	1cfb      	adds	r3, r7, #3
     3b6:	781a      	ldrb	r2, [r3, #0]
     3b8:	1cbb      	adds	r3, r7, #2
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	6879      	ldr	r1, [r7, #4]
     3be:	2030      	movs	r0, #48	; 0x30
     3c0:	01d2      	lsls	r2, r2, #7
     3c2:	188a      	adds	r2, r1, r2
     3c4:	18d3      	adds	r3, r2, r3
     3c6:	181b      	adds	r3, r3, r0
     3c8:	220f      	movs	r2, #15
     3ca:	18ba      	adds	r2, r7, r2
     3cc:	7812      	ldrb	r2, [r2, #0]
     3ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3d0:	46c0      	nop			; (mov r8, r8)
     3d2:	46bd      	mov	sp, r7
     3d4:	b005      	add	sp, #20
     3d6:	bd90      	pop	{r4, r7, pc}

000003d8 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     3d8:	b590      	push	{r4, r7, lr}
     3da:	b085      	sub	sp, #20
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
     3e0:	000c      	movs	r4, r1
     3e2:	0010      	movs	r0, r2
     3e4:	0019      	movs	r1, r3
     3e6:	1cfb      	adds	r3, r7, #3
     3e8:	1c22      	adds	r2, r4, #0
     3ea:	701a      	strb	r2, [r3, #0]
     3ec:	1cbb      	adds	r3, r7, #2
     3ee:	1c02      	adds	r2, r0, #0
     3f0:	701a      	strb	r2, [r3, #0]
     3f2:	1c7b      	adds	r3, r7, #1
     3f4:	1c0a      	adds	r2, r1, #0
     3f6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f8:	1cfb      	adds	r3, r7, #3
     3fa:	7819      	ldrb	r1, [r3, #0]
     3fc:	1cbb      	adds	r3, r7, #2
     3fe:	781a      	ldrb	r2, [r3, #0]
     400:	230f      	movs	r3, #15
     402:	18fb      	adds	r3, r7, r3
     404:	6878      	ldr	r0, [r7, #4]
     406:	2430      	movs	r4, #48	; 0x30
     408:	01c9      	lsls	r1, r1, #7
     40a:	1841      	adds	r1, r0, r1
     40c:	188a      	adds	r2, r1, r2
     40e:	1912      	adds	r2, r2, r4
     410:	7812      	ldrb	r2, [r2, #0]
     412:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	220f      	movs	r2, #15
     41a:	18ba      	adds	r2, r7, r2
     41c:	7812      	ldrb	r2, [r2, #0]
     41e:	210f      	movs	r1, #15
     420:	400a      	ands	r2, r1
     422:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     424:	1c7b      	adds	r3, r7, #1
     426:	781b      	ldrb	r3, [r3, #0]
     428:	011b      	lsls	r3, r3, #4
     42a:	b2d9      	uxtb	r1, r3
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	220f      	movs	r2, #15
     432:	18ba      	adds	r2, r7, r2
     434:	7812      	ldrb	r2, [r2, #0]
     436:	430a      	orrs	r2, r1
     438:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43a:	1cfb      	adds	r3, r7, #3
     43c:	781a      	ldrb	r2, [r3, #0]
     43e:	1cbb      	adds	r3, r7, #2
     440:	781b      	ldrb	r3, [r3, #0]
     442:	6879      	ldr	r1, [r7, #4]
     444:	2030      	movs	r0, #48	; 0x30
     446:	01d2      	lsls	r2, r2, #7
     448:	188a      	adds	r2, r1, r2
     44a:	18d3      	adds	r3, r2, r3
     44c:	181b      	adds	r3, r3, r0
     44e:	220f      	movs	r2, #15
     450:	18ba      	adds	r2, r7, r2
     452:	7812      	ldrb	r2, [r2, #0]
     454:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     456:	46c0      	nop			; (mov r8, r8)
     458:	46bd      	mov	sp, r7
     45a:	b005      	add	sp, #20
     45c:	bd90      	pop	{r4, r7, pc}

0000045e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     45e:	b590      	push	{r4, r7, lr}
     460:	b085      	sub	sp, #20
     462:	af00      	add	r7, sp, #0
     464:	6078      	str	r0, [r7, #4]
     466:	000c      	movs	r4, r1
     468:	0010      	movs	r0, r2
     46a:	0019      	movs	r1, r3
     46c:	1cfb      	adds	r3, r7, #3
     46e:	1c22      	adds	r2, r4, #0
     470:	701a      	strb	r2, [r3, #0]
     472:	1cbb      	adds	r3, r7, #2
     474:	1c02      	adds	r2, r0, #0
     476:	701a      	strb	r2, [r3, #0]
     478:	1c7b      	adds	r3, r7, #1
     47a:	1c0a      	adds	r2, r1, #0
     47c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47e:	1cfb      	adds	r3, r7, #3
     480:	7819      	ldrb	r1, [r3, #0]
     482:	1cbb      	adds	r3, r7, #2
     484:	781a      	ldrb	r2, [r3, #0]
     486:	230f      	movs	r3, #15
     488:	18fb      	adds	r3, r7, r3
     48a:	6878      	ldr	r0, [r7, #4]
     48c:	2440      	movs	r4, #64	; 0x40
     48e:	01c9      	lsls	r1, r1, #7
     490:	1841      	adds	r1, r0, r1
     492:	188a      	adds	r2, r1, r2
     494:	1912      	adds	r2, r2, r4
     496:	7812      	ldrb	r2, [r2, #0]
     498:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	230f      	movs	r3, #15
     49c:	18fb      	adds	r3, r7, r3
     49e:	220f      	movs	r2, #15
     4a0:	18ba      	adds	r2, r7, r2
     4a2:	7812      	ldrb	r2, [r2, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	438a      	bics	r2, r1
     4a8:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	1c7b      	adds	r3, r7, #1
     4ac:	7819      	ldrb	r1, [r3, #0]
     4ae:	230f      	movs	r3, #15
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	220f      	movs	r2, #15
     4b4:	18ba      	adds	r2, r7, r2
     4b6:	7812      	ldrb	r2, [r2, #0]
     4b8:	430a      	orrs	r2, r1
     4ba:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4bc:	1cfb      	adds	r3, r7, #3
     4be:	781a      	ldrb	r2, [r3, #0]
     4c0:	1cbb      	adds	r3, r7, #2
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	6879      	ldr	r1, [r7, #4]
     4c6:	2040      	movs	r0, #64	; 0x40
     4c8:	01d2      	lsls	r2, r2, #7
     4ca:	188a      	adds	r2, r1, r2
     4cc:	18d3      	adds	r3, r2, r3
     4ce:	181b      	adds	r3, r3, r0
     4d0:	220f      	movs	r2, #15
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	7812      	ldrb	r2, [r2, #0]
     4d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4d8:	46c0      	nop			; (mov r8, r8)
     4da:	46bd      	mov	sp, r7
     4dc:	b005      	add	sp, #20
     4de:	bd90      	pop	{r4, r7, pc}

000004e0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4e0:	b5b0      	push	{r4, r5, r7, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	af00      	add	r7, sp, #0
     4e6:	6078      	str	r0, [r7, #4]
     4e8:	0008      	movs	r0, r1
     4ea:	0011      	movs	r1, r2
     4ec:	1cfb      	adds	r3, r7, #3
     4ee:	1c02      	adds	r2, r0, #0
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	1cbb      	adds	r3, r7, #2
     4f4:	1c0a      	adds	r2, r1, #0
     4f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4f8:	1cfb      	adds	r3, r7, #3
     4fa:	781a      	ldrb	r2, [r3, #0]
     4fc:	1cbb      	adds	r3, r7, #2
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	1cf9      	adds	r1, r7, #3
     502:	7808      	ldrb	r0, [r1, #0]
     504:	1cb9      	adds	r1, r7, #2
     506:	7809      	ldrb	r1, [r1, #0]
     508:	687c      	ldr	r4, [r7, #4]
     50a:	2540      	movs	r5, #64	; 0x40
     50c:	01c0      	lsls	r0, r0, #7
     50e:	1820      	adds	r0, r4, r0
     510:	1841      	adds	r1, r0, r1
     512:	1949      	adds	r1, r1, r5
     514:	7809      	ldrb	r1, [r1, #0]
     516:	b2c9      	uxtb	r1, r1
     518:	2004      	movs	r0, #4
     51a:	4301      	orrs	r1, r0
     51c:	b2cc      	uxtb	r4, r1
     51e:	6879      	ldr	r1, [r7, #4]
     520:	2040      	movs	r0, #64	; 0x40
     522:	01d2      	lsls	r2, r2, #7
     524:	188a      	adds	r2, r1, r2
     526:	18d3      	adds	r3, r2, r3
     528:	181b      	adds	r3, r3, r0
     52a:	1c22      	adds	r2, r4, #0
     52c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	46bd      	mov	sp, r7
     532:	b002      	add	sp, #8
     534:	bdb0      	pop	{r4, r5, r7, pc}

00000536 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     536:	b5b0      	push	{r4, r5, r7, lr}
     538:	b082      	sub	sp, #8
     53a:	af00      	add	r7, sp, #0
     53c:	6078      	str	r0, [r7, #4]
     53e:	0008      	movs	r0, r1
     540:	0011      	movs	r1, r2
     542:	1cfb      	adds	r3, r7, #3
     544:	1c02      	adds	r2, r0, #0
     546:	701a      	strb	r2, [r3, #0]
     548:	1cbb      	adds	r3, r7, #2
     54a:	1c0a      	adds	r2, r1, #0
     54c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54e:	1cfb      	adds	r3, r7, #3
     550:	781a      	ldrb	r2, [r3, #0]
     552:	1cbb      	adds	r3, r7, #2
     554:	781b      	ldrb	r3, [r3, #0]
     556:	1cf9      	adds	r1, r7, #3
     558:	7808      	ldrb	r0, [r1, #0]
     55a:	1cb9      	adds	r1, r7, #2
     55c:	7809      	ldrb	r1, [r1, #0]
     55e:	687c      	ldr	r4, [r7, #4]
     560:	2540      	movs	r5, #64	; 0x40
     562:	01c0      	lsls	r0, r0, #7
     564:	1820      	adds	r0, r4, r0
     566:	1841      	adds	r1, r0, r1
     568:	1949      	adds	r1, r1, r5
     56a:	7809      	ldrb	r1, [r1, #0]
     56c:	b2c9      	uxtb	r1, r1
     56e:	2004      	movs	r0, #4
     570:	4381      	bics	r1, r0
     572:	b2cc      	uxtb	r4, r1
     574:	6879      	ldr	r1, [r7, #4]
     576:	2040      	movs	r0, #64	; 0x40
     578:	01d2      	lsls	r2, r2, #7
     57a:	188a      	adds	r2, r1, r2
     57c:	18d3      	adds	r3, r2, r3
     57e:	181b      	adds	r3, r3, r0
     580:	1c22      	adds	r2, r4, #0
     582:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b002      	add	sp, #8
     58a:	bdb0      	pop	{r4, r5, r7, pc}

0000058c <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     58c:	b580      	push	{r7, lr}
     58e:	b084      	sub	sp, #16
     590:	af00      	add	r7, sp, #0
     592:	60f8      	str	r0, [r7, #12]
     594:	607a      	str	r2, [r7, #4]
     596:	230b      	movs	r3, #11
     598:	18fb      	adds	r3, r7, r3
     59a:	1c0a      	adds	r2, r1, #0
     59c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59e:	230b      	movs	r3, #11
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	68fa      	ldr	r2, [r7, #12]
     5a6:	01db      	lsls	r3, r3, #7
     5a8:	18d3      	adds	r3, r2, r3
     5aa:	3328      	adds	r3, #40	; 0x28
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5b0:	46c0      	nop			; (mov r8, r8)
     5b2:	46bd      	mov	sp, r7
     5b4:	b004      	add	sp, #16
     5b6:	bd80      	pop	{r7, pc}

000005b8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	6039      	str	r1, [r7, #0]
     5c0:	0011      	movs	r1, r2
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	1c02      	adds	r2, r0, #0
     5c6:	701a      	strb	r2, [r3, #0]
     5c8:	1dbb      	adds	r3, r7, #6
     5ca:	1c0a      	adds	r2, r1, #0
     5cc:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     5ce:	1dbb      	adds	r3, r7, #6
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b01      	cmp	r3, #1
     5d4:	d023      	beq.n	61e <_gpio_set_direction+0x66>
     5d6:	2b02      	cmp	r3, #2
     5d8:	d03f      	beq.n	65a <_gpio_set_direction+0xa2>
     5da:	2b00      	cmp	r3, #0
     5dc:	d15d      	bne.n	69a <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5de:	683a      	ldr	r2, [r7, #0]
     5e0:	1dfb      	adds	r3, r7, #7
     5e2:	7819      	ldrb	r1, [r3, #0]
     5e4:	23c0      	movs	r3, #192	; 0xc0
     5e6:	05db      	lsls	r3, r3, #23
     5e8:	0018      	movs	r0, r3
     5ea:	4b31      	ldr	r3, [pc, #196]	; (6b0 <_gpio_set_direction+0xf8>)
     5ec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5ee:	683b      	ldr	r3, [r7, #0]
     5f0:	041b      	lsls	r3, r3, #16
     5f2:	0c1b      	lsrs	r3, r3, #16
     5f4:	2280      	movs	r2, #128	; 0x80
     5f6:	05d2      	lsls	r2, r2, #23
     5f8:	431a      	orrs	r2, r3
     5fa:	1dfb      	adds	r3, r7, #7
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	482d      	ldr	r0, [pc, #180]	; (6b4 <_gpio_set_direction+0xfc>)
     600:	0019      	movs	r1, r3
     602:	4b2d      	ldr	r3, [pc, #180]	; (6b8 <_gpio_set_direction+0x100>)
     604:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     606:	683b      	ldr	r3, [r7, #0]
     608:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     60a:	22c0      	movs	r2, #192	; 0xc0
     60c:	0612      	lsls	r2, r2, #24
     60e:	431a      	orrs	r2, r3
     610:	1dfb      	adds	r3, r7, #7
     612:	781b      	ldrb	r3, [r3, #0]
     614:	4827      	ldr	r0, [pc, #156]	; (6b4 <_gpio_set_direction+0xfc>)
     616:	0019      	movs	r1, r3
     618:	4b27      	ldr	r3, [pc, #156]	; (6b8 <_gpio_set_direction+0x100>)
     61a:	4798      	blx	r3
		break;
     61c:	e043      	b.n	6a6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     61e:	683a      	ldr	r2, [r7, #0]
     620:	1dfb      	adds	r3, r7, #7
     622:	7819      	ldrb	r1, [r3, #0]
     624:	23c0      	movs	r3, #192	; 0xc0
     626:	05db      	lsls	r3, r3, #23
     628:	0018      	movs	r0, r3
     62a:	4b21      	ldr	r3, [pc, #132]	; (6b0 <_gpio_set_direction+0xf8>)
     62c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     62e:	683b      	ldr	r3, [r7, #0]
     630:	041b      	lsls	r3, r3, #16
     632:	0c1b      	lsrs	r3, r3, #16
     634:	4a21      	ldr	r2, [pc, #132]	; (6bc <_gpio_set_direction+0x104>)
     636:	431a      	orrs	r2, r3
     638:	1dfb      	adds	r3, r7, #7
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	481d      	ldr	r0, [pc, #116]	; (6b4 <_gpio_set_direction+0xfc>)
     63e:	0019      	movs	r1, r3
     640:	4b1d      	ldr	r3, [pc, #116]	; (6b8 <_gpio_set_direction+0x100>)
     642:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     644:	683b      	ldr	r3, [r7, #0]
     646:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     648:	4a1d      	ldr	r2, [pc, #116]	; (6c0 <_gpio_set_direction+0x108>)
     64a:	431a      	orrs	r2, r3
     64c:	1dfb      	adds	r3, r7, #7
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	4818      	ldr	r0, [pc, #96]	; (6b4 <_gpio_set_direction+0xfc>)
     652:	0019      	movs	r1, r3
     654:	4b18      	ldr	r3, [pc, #96]	; (6b8 <_gpio_set_direction+0x100>)
     656:	4798      	blx	r3
		break;
     658:	e025      	b.n	6a6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     65a:	683a      	ldr	r2, [r7, #0]
     65c:	1dfb      	adds	r3, r7, #7
     65e:	7819      	ldrb	r1, [r3, #0]
     660:	23c0      	movs	r3, #192	; 0xc0
     662:	05db      	lsls	r3, r3, #23
     664:	0018      	movs	r0, r3
     666:	4b17      	ldr	r3, [pc, #92]	; (6c4 <_gpio_set_direction+0x10c>)
     668:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	041b      	lsls	r3, r3, #16
     66e:	0c1b      	lsrs	r3, r3, #16
     670:	2280      	movs	r2, #128	; 0x80
     672:	05d2      	lsls	r2, r2, #23
     674:	431a      	orrs	r2, r3
     676:	1dfb      	adds	r3, r7, #7
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	480e      	ldr	r0, [pc, #56]	; (6b4 <_gpio_set_direction+0xfc>)
     67c:	0019      	movs	r1, r3
     67e:	4b0e      	ldr	r3, [pc, #56]	; (6b8 <_gpio_set_direction+0x100>)
     680:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     682:	683b      	ldr	r3, [r7, #0]
     684:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     686:	22c0      	movs	r2, #192	; 0xc0
     688:	0612      	lsls	r2, r2, #24
     68a:	431a      	orrs	r2, r3
     68c:	1dfb      	adds	r3, r7, #7
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	4808      	ldr	r0, [pc, #32]	; (6b4 <_gpio_set_direction+0xfc>)
     692:	0019      	movs	r1, r3
     694:	4b08      	ldr	r3, [pc, #32]	; (6b8 <_gpio_set_direction+0x100>)
     696:	4798      	blx	r3
		break;
     698:	e005      	b.n	6a6 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     69a:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <_gpio_set_direction+0x110>)
     69c:	2246      	movs	r2, #70	; 0x46
     69e:	0019      	movs	r1, r3
     6a0:	2000      	movs	r0, #0
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <_gpio_set_direction+0x114>)
     6a4:	4798      	blx	r3
	}
}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	46bd      	mov	sp, r7
     6aa:	b002      	add	sp, #8
     6ac:	bd80      	pop	{r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	000002cd 	.word	0x000002cd
     6b4:	40002800 	.word	0x40002800
     6b8:	0000058d 	.word	0x0000058d
     6bc:	40020000 	.word	0x40020000
     6c0:	c0020000 	.word	0xc0020000
     6c4:	000002a1 	.word	0x000002a1
     6c8:	00006d34 	.word	0x00006d34
     6cc:	00002077 	.word	0x00002077

000006d0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6039      	str	r1, [r7, #0]
     6d8:	0011      	movs	r1, r2
     6da:	1dfb      	adds	r3, r7, #7
     6dc:	1c02      	adds	r2, r0, #0
     6de:	701a      	strb	r2, [r3, #0]
     6e0:	1dbb      	adds	r3, r7, #6
     6e2:	1c0a      	adds	r2, r1, #0
     6e4:	701a      	strb	r2, [r3, #0]
	if (level) {
     6e6:	1dbb      	adds	r3, r7, #6
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d008      	beq.n	700 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     6ee:	683a      	ldr	r2, [r7, #0]
     6f0:	1dfb      	adds	r3, r7, #7
     6f2:	7819      	ldrb	r1, [r3, #0]
     6f4:	23c0      	movs	r3, #192	; 0xc0
     6f6:	05db      	lsls	r3, r3, #23
     6f8:	0018      	movs	r0, r3
     6fa:	4b07      	ldr	r3, [pc, #28]	; (718 <_gpio_set_level+0x48>)
     6fc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6fe:	e007      	b.n	710 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     700:	683a      	ldr	r2, [r7, #0]
     702:	1dfb      	adds	r3, r7, #7
     704:	7819      	ldrb	r1, [r3, #0]
     706:	23c0      	movs	r3, #192	; 0xc0
     708:	05db      	lsls	r3, r3, #23
     70a:	0018      	movs	r0, r3
     70c:	4b03      	ldr	r3, [pc, #12]	; (71c <_gpio_set_level+0x4c>)
     70e:	4798      	blx	r3
}
     710:	46c0      	nop			; (mov r8, r8)
     712:	46bd      	mov	sp, r7
     714:	b002      	add	sp, #8
     716:	bd80      	pop	{r7, pc}
     718:	000002f9 	.word	0x000002f9
     71c:	00000325 	.word	0x00000325

00000720 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     720:	b590      	push	{r4, r7, lr}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	0004      	movs	r4, r0
     728:	0008      	movs	r0, r1
     72a:	0011      	movs	r1, r2
     72c:	1dfb      	adds	r3, r7, #7
     72e:	1c22      	adds	r2, r4, #0
     730:	701a      	strb	r2, [r3, #0]
     732:	1dbb      	adds	r3, r7, #6
     734:	1c02      	adds	r2, r0, #0
     736:	701a      	strb	r2, [r3, #0]
     738:	1d7b      	adds	r3, r7, #5
     73a:	1c0a      	adds	r2, r1, #0
     73c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     73e:	1d7b      	adds	r3, r7, #5
     740:	781b      	ldrb	r3, [r3, #0]
     742:	2b01      	cmp	r3, #1
     744:	d00c      	beq.n	760 <_gpio_set_pin_pull_mode+0x40>
     746:	2b02      	cmp	r3, #2
     748:	d029      	beq.n	79e <_gpio_set_pin_pull_mode+0x7e>
     74a:	2b00      	cmp	r3, #0
     74c:	d146      	bne.n	7dc <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     74e:	1dbb      	adds	r3, r7, #6
     750:	781a      	ldrb	r2, [r3, #0]
     752:	1dfb      	adds	r3, r7, #7
     754:	781b      	ldrb	r3, [r3, #0]
     756:	4827      	ldr	r0, [pc, #156]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     758:	0019      	movs	r1, r3
     75a:	4b27      	ldr	r3, [pc, #156]	; (7f8 <_gpio_set_pin_pull_mode+0xd8>)
     75c:	4798      	blx	r3
		break;
     75e:	e044      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     760:	1dbb      	adds	r3, r7, #6
     762:	781b      	ldrb	r3, [r3, #0]
     764:	2201      	movs	r2, #1
     766:	409a      	lsls	r2, r3
     768:	1dfb      	adds	r3, r7, #7
     76a:	7819      	ldrb	r1, [r3, #0]
     76c:	23c0      	movs	r3, #192	; 0xc0
     76e:	05db      	lsls	r3, r3, #23
     770:	0018      	movs	r0, r3
     772:	4b22      	ldr	r3, [pc, #136]	; (7fc <_gpio_set_pin_pull_mode+0xdc>)
     774:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     776:	1dbb      	adds	r3, r7, #6
     778:	781a      	ldrb	r2, [r3, #0]
     77a:	1dfb      	adds	r3, r7, #7
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	481d      	ldr	r0, [pc, #116]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     780:	0019      	movs	r1, r3
     782:	4b1f      	ldr	r3, [pc, #124]	; (800 <_gpio_set_pin_pull_mode+0xe0>)
     784:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     786:	1dbb      	adds	r3, r7, #6
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	2201      	movs	r2, #1
     78c:	409a      	lsls	r2, r3
     78e:	1dfb      	adds	r3, r7, #7
     790:	7819      	ldrb	r1, [r3, #0]
     792:	23c0      	movs	r3, #192	; 0xc0
     794:	05db      	lsls	r3, r3, #23
     796:	0018      	movs	r0, r3
     798:	4b1a      	ldr	r3, [pc, #104]	; (804 <_gpio_set_pin_pull_mode+0xe4>)
     79a:	4798      	blx	r3
		break;
     79c:	e025      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     79e:	1dbb      	adds	r3, r7, #6
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2201      	movs	r2, #1
     7a4:	409a      	lsls	r2, r3
     7a6:	1dfb      	adds	r3, r7, #7
     7a8:	7819      	ldrb	r1, [r3, #0]
     7aa:	23c0      	movs	r3, #192	; 0xc0
     7ac:	05db      	lsls	r3, r3, #23
     7ae:	0018      	movs	r0, r3
     7b0:	4b12      	ldr	r3, [pc, #72]	; (7fc <_gpio_set_pin_pull_mode+0xdc>)
     7b2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7b4:	1dbb      	adds	r3, r7, #6
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	1dfb      	adds	r3, r7, #7
     7ba:	781b      	ldrb	r3, [r3, #0]
     7bc:	480d      	ldr	r0, [pc, #52]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     7be:	0019      	movs	r1, r3
     7c0:	4b0f      	ldr	r3, [pc, #60]	; (800 <_gpio_set_pin_pull_mode+0xe0>)
     7c2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     7c4:	1dbb      	adds	r3, r7, #6
     7c6:	781b      	ldrb	r3, [r3, #0]
     7c8:	2201      	movs	r2, #1
     7ca:	409a      	lsls	r2, r3
     7cc:	1dfb      	adds	r3, r7, #7
     7ce:	7819      	ldrb	r1, [r3, #0]
     7d0:	23c0      	movs	r3, #192	; 0xc0
     7d2:	05db      	lsls	r3, r3, #23
     7d4:	0018      	movs	r0, r3
     7d6:	4b0c      	ldr	r3, [pc, #48]	; (808 <_gpio_set_pin_pull_mode+0xe8>)
     7d8:	4798      	blx	r3
		break;
     7da:	e006      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     7dc:	4b0b      	ldr	r3, [pc, #44]	; (80c <_gpio_set_pin_pull_mode+0xec>)
     7de:	2289      	movs	r2, #137	; 0x89
     7e0:	0019      	movs	r1, r3
     7e2:	2000      	movs	r0, #0
     7e4:	4b0a      	ldr	r3, [pc, #40]	; (810 <_gpio_set_pin_pull_mode+0xf0>)
     7e6:	4798      	blx	r3
		break;
     7e8:	46c0      	nop			; (mov r8, r8)
	}
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b003      	add	sp, #12
     7f0:	bd90      	pop	{r4, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	40002800 	.word	0x40002800
     7f8:	00000537 	.word	0x00000537
     7fc:	000002cd 	.word	0x000002cd
     800:	000004e1 	.word	0x000004e1
     804:	000002f9 	.word	0x000002f9
     808:	00000325 	.word	0x00000325
     80c:	00006d34 	.word	0x00006d34
     810:	00002077 	.word	0x00002077

00000814 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     814:	b590      	push	{r4, r7, lr}
     816:	b085      	sub	sp, #20
     818:	af00      	add	r7, sp, #0
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     81e:	687b      	ldr	r3, [r7, #4]
     820:	095a      	lsrs	r2, r3, #5
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     828:	687b      	ldr	r3, [r7, #4]
     82a:	b2da      	uxtb	r2, r3
     82c:	230e      	movs	r3, #14
     82e:	18fb      	adds	r3, r7, r3
     830:	211f      	movs	r1, #31
     832:	400a      	ands	r2, r1
     834:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     836:	683b      	ldr	r3, [r7, #0]
     838:	3301      	adds	r3, #1
     83a:	d10a      	bne.n	852 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     83c:	230e      	movs	r3, #14
     83e:	18fb      	adds	r3, r7, r3
     840:	781a      	ldrb	r2, [r3, #0]
     842:	230f      	movs	r3, #15
     844:	18fb      	adds	r3, r7, r3
     846:	7819      	ldrb	r1, [r3, #0]
     848:	481b      	ldr	r0, [pc, #108]	; (8b8 <_gpio_set_pin_function+0xa4>)
     84a:	2300      	movs	r3, #0
     84c:	4c1b      	ldr	r4, [pc, #108]	; (8bc <_gpio_set_pin_function+0xa8>)
     84e:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     850:	e02e      	b.n	8b0 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     852:	230e      	movs	r3, #14
     854:	18fb      	adds	r3, r7, r3
     856:	781a      	ldrb	r2, [r3, #0]
     858:	230f      	movs	r3, #15
     85a:	18fb      	adds	r3, r7, r3
     85c:	7819      	ldrb	r1, [r3, #0]
     85e:	4816      	ldr	r0, [pc, #88]	; (8b8 <_gpio_set_pin_function+0xa4>)
     860:	2301      	movs	r3, #1
     862:	4c16      	ldr	r4, [pc, #88]	; (8bc <_gpio_set_pin_function+0xa8>)
     864:	47a0      	blx	r4
		if (pin & 1) {
     866:	230e      	movs	r3, #14
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2201      	movs	r2, #1
     86e:	4013      	ands	r3, r2
     870:	d00f      	beq.n	892 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     872:	230e      	movs	r3, #14
     874:	18fb      	adds	r3, r7, r3
     876:	781b      	ldrb	r3, [r3, #0]
     878:	085b      	lsrs	r3, r3, #1
     87a:	b2da      	uxtb	r2, r3
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	b2d8      	uxtb	r0, r3
     880:	230f      	movs	r3, #15
     882:	18fb      	adds	r3, r7, r3
     884:	7819      	ldrb	r1, [r3, #0]
     886:	4c0c      	ldr	r4, [pc, #48]	; (8b8 <_gpio_set_pin_function+0xa4>)
     888:	0003      	movs	r3, r0
     88a:	0020      	movs	r0, r4
     88c:	4c0c      	ldr	r4, [pc, #48]	; (8c0 <_gpio_set_pin_function+0xac>)
     88e:	47a0      	blx	r4
}
     890:	e00e      	b.n	8b0 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     892:	230e      	movs	r3, #14
     894:	18fb      	adds	r3, r7, r3
     896:	781b      	ldrb	r3, [r3, #0]
     898:	085b      	lsrs	r3, r3, #1
     89a:	b2da      	uxtb	r2, r3
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	b2d8      	uxtb	r0, r3
     8a0:	230f      	movs	r3, #15
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	7819      	ldrb	r1, [r3, #0]
     8a6:	4c04      	ldr	r4, [pc, #16]	; (8b8 <_gpio_set_pin_function+0xa4>)
     8a8:	0003      	movs	r3, r0
     8aa:	0020      	movs	r0, r4
     8ac:	4c05      	ldr	r4, [pc, #20]	; (8c4 <_gpio_set_pin_function+0xb0>)
     8ae:	47a0      	blx	r4
}
     8b0:	46c0      	nop			; (mov r8, r8)
     8b2:	46bd      	mov	sp, r7
     8b4:	b005      	add	sp, #20
     8b6:	bd90      	pop	{r4, r7, pc}
     8b8:	40002800 	.word	0x40002800
     8bc:	0000045f 	.word	0x0000045f
     8c0:	000003d9 	.word	0x000003d9
     8c4:	00000351 	.word	0x00000351

000008c8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b082      	sub	sp, #8
     8cc:	af00      	add	r7, sp, #0
     8ce:	0002      	movs	r2, r0
     8d0:	1dfb      	adds	r3, r7, #7
     8d2:	701a      	strb	r2, [r3, #0]
     8d4:	1dbb      	adds	r3, r7, #6
     8d6:	1c0a      	adds	r2, r1, #0
     8d8:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8da:	1dfb      	adds	r3, r7, #7
     8dc:	781b      	ldrb	r3, [r3, #0]
     8de:	095b      	lsrs	r3, r3, #5
     8e0:	b2d8      	uxtb	r0, r3
     8e2:	1dfb      	adds	r3, r7, #7
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	221f      	movs	r2, #31
     8e8:	4013      	ands	r3, r2
     8ea:	b2d9      	uxtb	r1, r3
     8ec:	1dbb      	adds	r3, r7, #6
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	001a      	movs	r2, r3
     8f2:	4b03      	ldr	r3, [pc, #12]	; (900 <gpio_set_pin_pull_mode+0x38>)
     8f4:	4798      	blx	r3
}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	46bd      	mov	sp, r7
     8fa:	b002      	add	sp, #8
     8fc:	bd80      	pop	{r7, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00000721 	.word	0x00000721

00000904 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
     90c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     90e:	683a      	ldr	r2, [r7, #0]
     910:	687b      	ldr	r3, [r7, #4]
     912:	0011      	movs	r1, r2
     914:	0018      	movs	r0, r3
     916:	4b03      	ldr	r3, [pc, #12]	; (924 <gpio_set_pin_function+0x20>)
     918:	4798      	blx	r3
}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	46bd      	mov	sp, r7
     91e:	b002      	add	sp, #8
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00000815 	.word	0x00000815

00000928 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
     92e:	0002      	movs	r2, r0
     930:	1dfb      	adds	r3, r7, #7
     932:	701a      	strb	r2, [r3, #0]
     934:	1dbb      	adds	r3, r7, #6
     936:	1c0a      	adds	r2, r1, #0
     938:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     93a:	1dfb      	adds	r3, r7, #7
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	095b      	lsrs	r3, r3, #5
     940:	b2d8      	uxtb	r0, r3
     942:	1dfb      	adds	r3, r7, #7
     944:	781b      	ldrb	r3, [r3, #0]
     946:	221f      	movs	r2, #31
     948:	4013      	ands	r3, r2
     94a:	2201      	movs	r2, #1
     94c:	409a      	lsls	r2, r3
     94e:	0011      	movs	r1, r2
     950:	1dbb      	adds	r3, r7, #6
     952:	781b      	ldrb	r3, [r3, #0]
     954:	001a      	movs	r2, r3
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <gpio_set_pin_direction+0x3c>)
     958:	4798      	blx	r3
}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	46bd      	mov	sp, r7
     95e:	b002      	add	sp, #8
     960:	bd80      	pop	{r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	000005b9 	.word	0x000005b9

00000968 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     968:	b580      	push	{r7, lr}
     96a:	b082      	sub	sp, #8
     96c:	af00      	add	r7, sp, #0
     96e:	0002      	movs	r2, r0
     970:	1dfb      	adds	r3, r7, #7
     972:	701a      	strb	r2, [r3, #0]
     974:	1dbb      	adds	r3, r7, #6
     976:	1c0a      	adds	r2, r1, #0
     978:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     97a:	1dfb      	adds	r3, r7, #7
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	095b      	lsrs	r3, r3, #5
     980:	b2d8      	uxtb	r0, r3
     982:	1dfb      	adds	r3, r7, #7
     984:	781b      	ldrb	r3, [r3, #0]
     986:	221f      	movs	r2, #31
     988:	4013      	ands	r3, r2
     98a:	2201      	movs	r2, #1
     98c:	409a      	lsls	r2, r3
     98e:	0011      	movs	r1, r2
     990:	1dbb      	adds	r3, r7, #6
     992:	781b      	ldrb	r3, [r3, #0]
     994:	001a      	movs	r2, r3
     996:	4b03      	ldr	r3, [pc, #12]	; (9a4 <gpio_set_pin_level+0x3c>)
     998:	4798      	blx	r3
}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	46bd      	mov	sp, r7
     99e:	b002      	add	sp, #8
     9a0:	bd80      	pop	{r7, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	000006d1 	.word	0x000006d1

000009a8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	af00      	add	r7, sp, #0
	_init_chip();
     9ac:	4b02      	ldr	r3, [pc, #8]	; (9b8 <init_mcu+0x10>)
     9ae:	4798      	blx	r3
}
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	46bd      	mov	sp, r7
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00002675 	.word	0x00002675

000009bc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b082      	sub	sp, #8
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d004      	beq.n	9d6 <wdt_init+0x1a>
     9cc:	683b      	ldr	r3, [r7, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d001      	beq.n	9d6 <wdt_init+0x1a>
     9d2:	2301      	movs	r3, #1
     9d4:	e000      	b.n	9d8 <wdt_init+0x1c>
     9d6:	2300      	movs	r3, #0
     9d8:	1c1a      	adds	r2, r3, #0
     9da:	2301      	movs	r3, #1
     9dc:	4013      	ands	r3, r2
     9de:	b2db      	uxtb	r3, r3
     9e0:	4908      	ldr	r1, [pc, #32]	; (a04 <wdt_init+0x48>)
     9e2:	2248      	movs	r2, #72	; 0x48
     9e4:	0018      	movs	r0, r3
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <wdt_init+0x4c>)
     9e8:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	683a      	ldr	r2, [r7, #0]
     9ee:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	0018      	movs	r0, r3
     9f4:	4b05      	ldr	r3, [pc, #20]	; (a0c <wdt_init+0x50>)
     9f6:	4798      	blx	r3
     9f8:	0003      	movs	r3, r0
}
     9fa:	0018      	movs	r0, r3
     9fc:	46bd      	mov	sp, r7
     9fe:	b002      	add	sp, #8
     a00:	bd80      	pop	{r7, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00006d50 	.word	0x00006d50
     a08:	00002077 	.word	0x00002077
     a0c:	00005121 	.word	0x00005121

00000a10 <CALENDAR_0_CLOCK_init>:
struct i2c_m_sync_desc I2C_OUT;

struct wdt_descriptor WDT_0;

void CALENDAR_0_CLOCK_init(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     a14:	4b03      	ldr	r3, [pc, #12]	; (a24 <CALENDAR_0_CLOCK_init+0x14>)
     a16:	0018      	movs	r0, r3
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <CALENDAR_0_CLOCK_init+0x18>)
     a1a:	4798      	blx	r3
}
     a1c:	46c0      	nop			; (mov r8, r8)
     a1e:	46bd      	mov	sp, r7
     a20:	bd80      	pop	{r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	40000400 	.word	0x40000400
     a28:	00000211 	.word	0x00000211

00000a2c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
	CALENDAR_0_CLOCK_init();
     a30:	4b05      	ldr	r3, [pc, #20]	; (a48 <CALENDAR_0_init+0x1c>)
     a32:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     a34:	4a05      	ldr	r2, [pc, #20]	; (a4c <CALENDAR_0_init+0x20>)
     a36:	4b06      	ldr	r3, [pc, #24]	; (a50 <CALENDAR_0_init+0x24>)
     a38:	0011      	movs	r1, r2
     a3a:	0018      	movs	r0, r3
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <CALENDAR_0_init+0x28>)
     a3e:	4798      	blx	r3
}
     a40:	46c0      	nop			; (mov r8, r8)
     a42:	46bd      	mov	sp, r7
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	00000a11 	.word	0x00000a11
     a4c:	40002000 	.word	0x40002000
     a50:	2000012c 	.word	0x2000012c
     a54:	000014cd 	.word	0x000014cd

00000a58 <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <USART_0_CLOCK_init+0x2c>)
     a5e:	2240      	movs	r2, #64	; 0x40
     a60:	2112      	movs	r1, #18
     a62:	0018      	movs	r0, r3
     a64:	4b08      	ldr	r3, [pc, #32]	; (a88 <USART_0_CLOCK_init+0x30>)
     a66:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <USART_0_CLOCK_init+0x2c>)
     a6a:	2243      	movs	r2, #67	; 0x43
     a6c:	2111      	movs	r1, #17
     a6e:	0018      	movs	r0, r3
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <USART_0_CLOCK_init+0x30>)
     a72:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
     a74:	4b05      	ldr	r3, [pc, #20]	; (a8c <USART_0_CLOCK_init+0x34>)
     a76:	0018      	movs	r0, r3
     a78:	4b05      	ldr	r3, [pc, #20]	; (a90 <USART_0_CLOCK_init+0x38>)
     a7a:	4798      	blx	r3
}
     a7c:	46c0      	nop			; (mov r8, r8)
     a7e:	46bd      	mov	sp, r7
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	40001800 	.word	0x40001800
     a88:	000001cb 	.word	0x000001cb
     a8c:	40000400 	.word	0x40000400
     a90:	0000022f 	.word	0x0000022f

00000a94 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     a94:	b580      	push	{r7, lr}
     a96:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     a98:	4b06      	ldr	r3, [pc, #24]	; (ab4 <USART_0_PORT_init+0x20>)
     a9a:	0019      	movs	r1, r3
     a9c:	2004      	movs	r0, #4
     a9e:	4b06      	ldr	r3, [pc, #24]	; (ab8 <USART_0_PORT_init+0x24>)
     aa0:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <USART_0_PORT_init+0x28>)
     aa4:	0019      	movs	r1, r3
     aa6:	2005      	movs	r0, #5
     aa8:	4b03      	ldr	r3, [pc, #12]	; (ab8 <USART_0_PORT_init+0x24>)
     aaa:	4798      	blx	r3
}
     aac:	46c0      	nop			; (mov r8, r8)
     aae:	46bd      	mov	sp, r7
     ab0:	bd80      	pop	{r7, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00040003 	.word	0x00040003
     ab8:	00000905 	.word	0x00000905
     abc:	00050003 	.word	0x00050003

00000ac0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     ac0:	b590      	push	{r4, r7, lr}
     ac2:	b083      	sub	sp, #12
     ac4:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     ac6:	4b08      	ldr	r3, [pc, #32]	; (ae8 <USART_0_init+0x28>)
     ac8:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     aca:	4a08      	ldr	r2, [pc, #32]	; (aec <USART_0_init+0x2c>)
     acc:	2384      	movs	r3, #132	; 0x84
     ace:	05d9      	lsls	r1, r3, #23
     ad0:	4807      	ldr	r0, [pc, #28]	; (af0 <USART_0_init+0x30>)
     ad2:	2300      	movs	r3, #0
     ad4:	9300      	str	r3, [sp, #0]
     ad6:	2310      	movs	r3, #16
     ad8:	4c06      	ldr	r4, [pc, #24]	; (af4 <USART_0_init+0x34>)
     ada:	47a0      	blx	r4
	USART_0_PORT_init();
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <USART_0_init+0x38>)
     ade:	4798      	blx	r3
}
     ae0:	46c0      	nop			; (mov r8, r8)
     ae2:	46bd      	mov	sp, r7
     ae4:	b001      	add	sp, #4
     ae6:	bd90      	pop	{r4, r7, pc}
     ae8:	00000a59 	.word	0x00000a59
     aec:	2000006c 	.word	0x2000006c
     af0:	20000148 	.word	0x20000148
     af4:	00001d2d 	.word	0x00001d2d
     af8:	00000a95 	.word	0x00000a95

00000afc <I2C_IN_PORT_init>:

void I2C_IN_PORT_init(void)
{
     afc:	b580      	push	{r7, lr}
     afe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
     b00:	2100      	movs	r1, #0
     b02:	2010      	movs	r0, #16
     b04:	4b09      	ldr	r3, [pc, #36]	; (b2c <I2C_IN_PORT_init+0x30>)
     b06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
     b08:	4b09      	ldr	r3, [pc, #36]	; (b30 <I2C_IN_PORT_init+0x34>)
     b0a:	0019      	movs	r1, r3
     b0c:	2010      	movs	r0, #16
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <I2C_IN_PORT_init+0x38>)
     b10:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
     b12:	2100      	movs	r1, #0
     b14:	2011      	movs	r0, #17
     b16:	4b05      	ldr	r3, [pc, #20]	; (b2c <I2C_IN_PORT_init+0x30>)
     b18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
     b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <I2C_IN_PORT_init+0x3c>)
     b1c:	0019      	movs	r1, r3
     b1e:	2011      	movs	r0, #17
     b20:	4b04      	ldr	r3, [pc, #16]	; (b34 <I2C_IN_PORT_init+0x38>)
     b22:	4798      	blx	r3
}
     b24:	46c0      	nop			; (mov r8, r8)
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	000008c9 	.word	0x000008c9
     b30:	00100002 	.word	0x00100002
     b34:	00000905 	.word	0x00000905
     b38:	00110002 	.word	0x00110002

00000b3c <I2C_IN_CLOCK_init>:

void I2C_IN_CLOCK_init(void)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <I2C_IN_CLOCK_init+0x2c>)
     b42:	2240      	movs	r2, #64	; 0x40
     b44:	2113      	movs	r1, #19
     b46:	0018      	movs	r0, r3
     b48:	4b08      	ldr	r3, [pc, #32]	; (b6c <I2C_IN_CLOCK_init+0x30>)
     b4a:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <I2C_IN_CLOCK_init+0x2c>)
     b4e:	2243      	movs	r2, #67	; 0x43
     b50:	2111      	movs	r1, #17
     b52:	0018      	movs	r0, r3
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <I2C_IN_CLOCK_init+0x30>)
     b56:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <I2C_IN_CLOCK_init+0x34>)
     b5a:	0018      	movs	r0, r3
     b5c:	4b05      	ldr	r3, [pc, #20]	; (b74 <I2C_IN_CLOCK_init+0x38>)
     b5e:	4798      	blx	r3
}
     b60:	46c0      	nop			; (mov r8, r8)
     b62:	46bd      	mov	sp, r7
     b64:	bd80      	pop	{r7, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	40001800 	.word	0x40001800
     b6c:	000001cb 	.word	0x000001cb
     b70:	40000400 	.word	0x40000400
     b74:	0000024b 	.word	0x0000024b

00000b78 <I2C_IN_init>:

void I2C_IN_init(void)
{
     b78:	b5b0      	push	{r4, r5, r7, lr}
     b7a:	af00      	add	r7, sp, #0
	I2C_IN_CLOCK_init();
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <I2C_IN_init+0x20>)
     b7e:	4798      	blx	r3
	i2c_s_async_init(&I2C_IN, SERCOM1, SERCOM1_i2c_s_buffer, SERCOM1_I2CS_BUFFER_SIZE);
     b80:	4a06      	ldr	r2, [pc, #24]	; (b9c <I2C_IN_init+0x24>)
     b82:	4907      	ldr	r1, [pc, #28]	; (ba0 <I2C_IN_init+0x28>)
     b84:	4807      	ldr	r0, [pc, #28]	; (ba4 <I2C_IN_init+0x2c>)
     b86:	2310      	movs	r3, #16
     b88:	4c07      	ldr	r4, [pc, #28]	; (ba8 <I2C_IN_init+0x30>)
     b8a:	47a0      	blx	r4
	I2C_IN_PORT_init();
     b8c:	4b07      	ldr	r3, [pc, #28]	; (bac <I2C_IN_init+0x34>)
     b8e:	4798      	blx	r3
}
     b90:	46c0      	nop			; (mov r8, r8)
     b92:	46bd      	mov	sp, r7
     b94:	bdb0      	pop	{r4, r5, r7, pc}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	00000b3d 	.word	0x00000b3d
     b9c:	20000198 	.word	0x20000198
     ba0:	42000400 	.word	0x42000400
     ba4:	200000c0 	.word	0x200000c0
     ba8:	0000172d 	.word	0x0000172d
     bac:	00000afd 	.word	0x00000afd

00000bb0 <I2C_OUT_PORT_init>:

void I2C_OUT_PORT_init(void)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     bb4:	2100      	movs	r1, #0
     bb6:	2008      	movs	r0, #8
     bb8:	4b09      	ldr	r3, [pc, #36]	; (be0 <I2C_OUT_PORT_init+0x30>)
     bba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);
     bbc:	4b09      	ldr	r3, [pc, #36]	; (be4 <I2C_OUT_PORT_init+0x34>)
     bbe:	0019      	movs	r1, r3
     bc0:	2008      	movs	r0, #8
     bc2:	4b09      	ldr	r3, [pc, #36]	; (be8 <I2C_OUT_PORT_init+0x38>)
     bc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     bc6:	2100      	movs	r1, #0
     bc8:	2009      	movs	r0, #9
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <I2C_OUT_PORT_init+0x30>)
     bcc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
     bce:	4b07      	ldr	r3, [pc, #28]	; (bec <I2C_OUT_PORT_init+0x3c>)
     bd0:	0019      	movs	r1, r3
     bd2:	2009      	movs	r0, #9
     bd4:	4b04      	ldr	r3, [pc, #16]	; (be8 <I2C_OUT_PORT_init+0x38>)
     bd6:	4798      	blx	r3
}
     bd8:	46c0      	nop			; (mov r8, r8)
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	000008c9 	.word	0x000008c9
     be4:	00080003 	.word	0x00080003
     be8:	00000905 	.word	0x00000905
     bec:	00090003 	.word	0x00090003

00000bf0 <I2C_OUT_CLOCK_init>:

void I2C_OUT_CLOCK_init(void)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bf4:	4b09      	ldr	r3, [pc, #36]	; (c1c <I2C_OUT_CLOCK_init+0x2c>)
     bf6:	2240      	movs	r2, #64	; 0x40
     bf8:	2114      	movs	r1, #20
     bfa:	0018      	movs	r0, r3
     bfc:	4b08      	ldr	r3, [pc, #32]	; (c20 <I2C_OUT_CLOCK_init+0x30>)
     bfe:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <I2C_OUT_CLOCK_init+0x2c>)
     c02:	2243      	movs	r2, #67	; 0x43
     c04:	2111      	movs	r1, #17
     c06:	0018      	movs	r0, r3
     c08:	4b05      	ldr	r3, [pc, #20]	; (c20 <I2C_OUT_CLOCK_init+0x30>)
     c0a:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <I2C_OUT_CLOCK_init+0x34>)
     c0e:	0018      	movs	r0, r3
     c10:	4b05      	ldr	r3, [pc, #20]	; (c28 <I2C_OUT_CLOCK_init+0x38>)
     c12:	4798      	blx	r3
}
     c14:	46c0      	nop			; (mov r8, r8)
     c16:	46bd      	mov	sp, r7
     c18:	bd80      	pop	{r7, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	40001800 	.word	0x40001800
     c20:	000001cb 	.word	0x000001cb
     c24:	40000400 	.word	0x40000400
     c28:	00000267 	.word	0x00000267

00000c2c <I2C_OUT_init>:

void I2C_OUT_init(void)
{
     c2c:	b580      	push	{r7, lr}
     c2e:	af00      	add	r7, sp, #0
	I2C_OUT_CLOCK_init();
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <I2C_OUT_init+0x20>)
     c32:	4798      	blx	r3
	i2c_m_sync_init(&I2C_OUT, SERCOM2);
     c34:	4a06      	ldr	r2, [pc, #24]	; (c50 <I2C_OUT_init+0x24>)
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <I2C_OUT_init+0x28>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	4b06      	ldr	r3, [pc, #24]	; (c58 <I2C_OUT_init+0x2c>)
     c3e:	4798      	blx	r3
	I2C_OUT_PORT_init();
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <I2C_OUT_init+0x30>)
     c42:	4798      	blx	r3
}
     c44:	46c0      	nop			; (mov r8, r8)
     c46:	46bd      	mov	sp, r7
     c48:	bd80      	pop	{r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00000bf1 	.word	0x00000bf1
     c50:	42000800 	.word	0x42000800
     c54:	2000010c 	.word	0x2000010c
     c58:	0000166d 	.word	0x0000166d
     c5c:	00000bb1 	.word	0x00000bb1

00000c60 <delay_driver_init>:

void delay_driver_init(void)
{
     c60:	b580      	push	{r7, lr}
     c62:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     c64:	4b03      	ldr	r3, [pc, #12]	; (c74 <delay_driver_init+0x14>)
     c66:	0018      	movs	r0, r3
     c68:	4b03      	ldr	r3, [pc, #12]	; (c78 <delay_driver_init+0x18>)
     c6a:	4798      	blx	r3
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	e000e010 	.word	0xe000e010
     c78:	0000153d 	.word	0x0000153d

00000c7c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
     c80:	4b0a      	ldr	r3, [pc, #40]	; (cac <TIMER_0_init+0x30>)
     c82:	0018      	movs	r0, r3
     c84:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <TIMER_0_init+0x34>)
     c86:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c88:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <TIMER_0_init+0x38>)
     c8a:	2240      	movs	r2, #64	; 0x40
     c8c:	211b      	movs	r1, #27
     c8e:	0018      	movs	r0, r3
     c90:	4b09      	ldr	r3, [pc, #36]	; (cb8 <TIMER_0_init+0x3c>)
     c92:	4798      	blx	r3

	timer_init(&TIMER_0, TC0, _tc_get_timer());
     c94:	4b09      	ldr	r3, [pc, #36]	; (cbc <TIMER_0_init+0x40>)
     c96:	4798      	blx	r3
     c98:	0002      	movs	r2, r0
     c9a:	4909      	ldr	r1, [pc, #36]	; (cc0 <TIMER_0_init+0x44>)
     c9c:	4b09      	ldr	r3, [pc, #36]	; (cc4 <TIMER_0_init+0x48>)
     c9e:	0018      	movs	r0, r3
     ca0:	4b09      	ldr	r3, [pc, #36]	; (cc8 <TIMER_0_init+0x4c>)
     ca2:	4798      	blx	r3
}
     ca4:	46c0      	nop			; (mov r8, r8)
     ca6:	46bd      	mov	sp, r7
     ca8:	bd80      	pop	{r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	40000400 	.word	0x40000400
     cb0:	00000283 	.word	0x00000283
     cb4:	40001800 	.word	0x40001800
     cb8:	000001cb 	.word	0x000001cb
     cbc:	00004e79 	.word	0x00004e79
     cc0:	42002000 	.word	0x42002000
     cc4:	200001a8 	.word	0x200001a8
     cc8:	00001b41 	.word	0x00001b41

00000ccc <WDT_0_CLOCK_init>:

void WDT_0_CLOCK_init(void)
{
     ccc:	b580      	push	{r7, lr}
     cce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
     cd0:	4b03      	ldr	r3, [pc, #12]	; (ce0 <WDT_0_CLOCK_init+0x14>)
     cd2:	0018      	movs	r0, r3
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <WDT_0_CLOCK_init+0x18>)
     cd6:	4798      	blx	r3
}
     cd8:	46c0      	nop			; (mov r8, r8)
     cda:	46bd      	mov	sp, r7
     cdc:	bd80      	pop	{r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000400 	.word	0x40000400
     ce4:	000001f5 	.word	0x000001f5

00000ce8 <WDT_0_init>:

void WDT_0_init(void)
{
     ce8:	b580      	push	{r7, lr}
     cea:	af00      	add	r7, sp, #0
	WDT_0_CLOCK_init();
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <WDT_0_init+0x1c>)
     cee:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
     cf0:	4a05      	ldr	r2, [pc, #20]	; (d08 <WDT_0_init+0x20>)
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <WDT_0_init+0x24>)
     cf4:	0011      	movs	r1, r2
     cf6:	0018      	movs	r0, r3
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <WDT_0_init+0x28>)
     cfa:	4798      	blx	r3
}
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000ccd 	.word	0x00000ccd
     d08:	40001c00 	.word	0x40001c00
     d0c:	20000108 	.word	0x20000108
     d10:	000009bd 	.word	0x000009bd

00000d14 <system_init>:

void system_init(void)
{
     d14:	b580      	push	{r7, lr}
     d16:	af00      	add	r7, sp, #0
	init_mcu();
     d18:	4b72      	ldr	r3, [pc, #456]	; (ee4 <system_init+0x1d0>)
     d1a:	4798      	blx	r3

	// GPIO on PA02

	gpio_set_pin_level(MCU_1_STATUS_1,
     d1c:	2100      	movs	r1, #0
     d1e:	2002      	movs	r0, #2
     d20:	4b71      	ldr	r3, [pc, #452]	; (ee8 <system_init+0x1d4>)
     d22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_1, GPIO_DIRECTION_OUT);
     d24:	2102      	movs	r1, #2
     d26:	2002      	movs	r0, #2
     d28:	4b70      	ldr	r3, [pc, #448]	; (eec <system_init+0x1d8>)
     d2a:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     d2c:	2301      	movs	r3, #1
     d2e:	425b      	negs	r3, r3
     d30:	0019      	movs	r1, r3
     d32:	2002      	movs	r0, #2
     d34:	4b6e      	ldr	r3, [pc, #440]	; (ef0 <system_init+0x1dc>)
     d36:	4798      	blx	r3

	// GPIO on PA03

	gpio_set_pin_level(MCU_1_STATUS_2,
     d38:	2100      	movs	r1, #0
     d3a:	2003      	movs	r0, #3
     d3c:	4b6a      	ldr	r3, [pc, #424]	; (ee8 <system_init+0x1d4>)
     d3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_2, GPIO_DIRECTION_OUT);
     d40:	2102      	movs	r1, #2
     d42:	2003      	movs	r0, #3
     d44:	4b69      	ldr	r3, [pc, #420]	; (eec <system_init+0x1d8>)
     d46:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     d48:	2301      	movs	r3, #1
     d4a:	425b      	negs	r3, r3
     d4c:	0019      	movs	r1, r3
     d4e:	2003      	movs	r0, #3
     d50:	4b67      	ldr	r3, [pc, #412]	; (ef0 <system_init+0x1dc>)
     d52:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(MCU_1_STATUS_3,
     d54:	2100      	movs	r1, #0
     d56:	2006      	movs	r0, #6
     d58:	4b63      	ldr	r3, [pc, #396]	; (ee8 <system_init+0x1d4>)
     d5a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_3, GPIO_DIRECTION_OUT);
     d5c:	2102      	movs	r1, #2
     d5e:	2006      	movs	r0, #6
     d60:	4b62      	ldr	r3, [pc, #392]	; (eec <system_init+0x1d8>)
     d62:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     d64:	2301      	movs	r3, #1
     d66:	425b      	negs	r3, r3
     d68:	0019      	movs	r1, r3
     d6a:	2006      	movs	r0, #6
     d6c:	4b60      	ldr	r3, [pc, #384]	; (ef0 <system_init+0x1dc>)
     d6e:	4798      	blx	r3

	// GPIO on PA07

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_1, GPIO_DIRECTION_IN);
     d70:	2101      	movs	r1, #1
     d72:	2007      	movs	r0, #7
     d74:	4b5d      	ldr	r3, [pc, #372]	; (eec <system_init+0x1d8>)
     d76:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_1,
     d78:	2100      	movs	r1, #0
     d7a:	2007      	movs	r0, #7
     d7c:	4b5d      	ldr	r3, [pc, #372]	; (ef4 <system_init+0x1e0>)
     d7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     d80:	2301      	movs	r3, #1
     d82:	425b      	negs	r3, r3
     d84:	0019      	movs	r1, r3
     d86:	2007      	movs	r0, #7
     d88:	4b59      	ldr	r3, [pc, #356]	; (ef0 <system_init+0x1dc>)
     d8a:	4798      	blx	r3

	// GPIO on PA10

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_2, GPIO_DIRECTION_IN);
     d8c:	2101      	movs	r1, #1
     d8e:	200a      	movs	r0, #10
     d90:	4b56      	ldr	r3, [pc, #344]	; (eec <system_init+0x1d8>)
     d92:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_2,
     d94:	2100      	movs	r1, #0
     d96:	200a      	movs	r0, #10
     d98:	4b56      	ldr	r3, [pc, #344]	; (ef4 <system_init+0x1e0>)
     d9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     d9c:	2301      	movs	r3, #1
     d9e:	425b      	negs	r3, r3
     da0:	0019      	movs	r1, r3
     da2:	200a      	movs	r0, #10
     da4:	4b52      	ldr	r3, [pc, #328]	; (ef0 <system_init+0x1dc>)
     da6:	4798      	blx	r3

	// GPIO on PA11

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_3, GPIO_DIRECTION_IN);
     da8:	2101      	movs	r1, #1
     daa:	200b      	movs	r0, #11
     dac:	4b4f      	ldr	r3, [pc, #316]	; (eec <system_init+0x1d8>)
     dae:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_3,
     db0:	2100      	movs	r1, #0
     db2:	200b      	movs	r0, #11
     db4:	4b4f      	ldr	r3, [pc, #316]	; (ef4 <system_init+0x1e0>)
     db6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     db8:	2301      	movs	r3, #1
     dba:	425b      	negs	r3, r3
     dbc:	0019      	movs	r1, r3
     dbe:	200b      	movs	r0, #11
     dc0:	4b4b      	ldr	r3, [pc, #300]	; (ef0 <system_init+0x1dc>)
     dc2:	4798      	blx	r3

	// GPIO on PA14

	gpio_set_pin_level(POWER_BLOCK_2,
     dc4:	2100      	movs	r1, #0
     dc6:	200e      	movs	r0, #14
     dc8:	4b47      	ldr	r3, [pc, #284]	; (ee8 <system_init+0x1d4>)
     dca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_2, GPIO_DIRECTION_OUT);
     dcc:	2102      	movs	r1, #2
     dce:	200e      	movs	r0, #14
     dd0:	4b46      	ldr	r3, [pc, #280]	; (eec <system_init+0x1d8>)
     dd2:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_2, GPIO_PIN_FUNCTION_OFF);
     dd4:	2301      	movs	r3, #1
     dd6:	425b      	negs	r3, r3
     dd8:	0019      	movs	r1, r3
     dda:	200e      	movs	r0, #14
     ddc:	4b44      	ldr	r3, [pc, #272]	; (ef0 <system_init+0x1dc>)
     dde:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(POWER_BLOCK_1,
     de0:	2100      	movs	r1, #0
     de2:	200f      	movs	r0, #15
     de4:	4b40      	ldr	r3, [pc, #256]	; (ee8 <system_init+0x1d4>)
     de6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_1, GPIO_DIRECTION_OUT);
     de8:	2102      	movs	r1, #2
     dea:	200f      	movs	r0, #15
     dec:	4b3f      	ldr	r3, [pc, #252]	; (eec <system_init+0x1d8>)
     dee:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_1, GPIO_PIN_FUNCTION_OFF);
     df0:	2301      	movs	r3, #1
     df2:	425b      	negs	r3, r3
     df4:	0019      	movs	r1, r3
     df6:	200f      	movs	r0, #15
     df8:	4b3d      	ldr	r3, [pc, #244]	; (ef0 <system_init+0x1dc>)
     dfa:	4798      	blx	r3

	// GPIO on PA18

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_1, GPIO_DIRECTION_IN);
     dfc:	2101      	movs	r1, #1
     dfe:	2012      	movs	r0, #18
     e00:	4b3a      	ldr	r3, [pc, #232]	; (eec <system_init+0x1d8>)
     e02:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_1,
     e04:	2100      	movs	r1, #0
     e06:	2012      	movs	r0, #18
     e08:	4b3a      	ldr	r3, [pc, #232]	; (ef4 <system_init+0x1e0>)
     e0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     e0c:	2301      	movs	r3, #1
     e0e:	425b      	negs	r3, r3
     e10:	0019      	movs	r1, r3
     e12:	2012      	movs	r0, #18
     e14:	4b36      	ldr	r3, [pc, #216]	; (ef0 <system_init+0x1dc>)
     e16:	4798      	blx	r3

	// GPIO on PA19

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_2, GPIO_DIRECTION_IN);
     e18:	2101      	movs	r1, #1
     e1a:	2013      	movs	r0, #19
     e1c:	4b33      	ldr	r3, [pc, #204]	; (eec <system_init+0x1d8>)
     e1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_2,
     e20:	2100      	movs	r1, #0
     e22:	2013      	movs	r0, #19
     e24:	4b33      	ldr	r3, [pc, #204]	; (ef4 <system_init+0x1e0>)
     e26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     e28:	2301      	movs	r3, #1
     e2a:	425b      	negs	r3, r3
     e2c:	0019      	movs	r1, r3
     e2e:	2013      	movs	r0, #19
     e30:	4b2f      	ldr	r3, [pc, #188]	; (ef0 <system_init+0x1dc>)
     e32:	4798      	blx	r3

	// GPIO on PA22

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_3, GPIO_DIRECTION_IN);
     e34:	2101      	movs	r1, #1
     e36:	2016      	movs	r0, #22
     e38:	4b2c      	ldr	r3, [pc, #176]	; (eec <system_init+0x1d8>)
     e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_3,
     e3c:	2100      	movs	r1, #0
     e3e:	2016      	movs	r0, #22
     e40:	4b2c      	ldr	r3, [pc, #176]	; (ef4 <system_init+0x1e0>)
     e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     e44:	2301      	movs	r3, #1
     e46:	425b      	negs	r3, r3
     e48:	0019      	movs	r1, r3
     e4a:	2016      	movs	r0, #22
     e4c:	4b28      	ldr	r3, [pc, #160]	; (ef0 <system_init+0x1dc>)
     e4e:	4798      	blx	r3

	// GPIO on PA23

	gpio_set_pin_level(MCU_2_EN,
     e50:	2100      	movs	r1, #0
     e52:	2017      	movs	r0, #23
     e54:	4b24      	ldr	r3, [pc, #144]	; (ee8 <system_init+0x1d4>)
     e56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_2_EN, GPIO_DIRECTION_OUT);
     e58:	2102      	movs	r1, #2
     e5a:	2017      	movs	r0, #23
     e5c:	4b23      	ldr	r3, [pc, #140]	; (eec <system_init+0x1d8>)
     e5e:	4798      	blx	r3

	gpio_set_pin_function(MCU_2_EN, GPIO_PIN_FUNCTION_OFF);
     e60:	2301      	movs	r3, #1
     e62:	425b      	negs	r3, r3
     e64:	0019      	movs	r1, r3
     e66:	2017      	movs	r0, #23
     e68:	4b21      	ldr	r3, [pc, #132]	; (ef0 <system_init+0x1dc>)
     e6a:	4798      	blx	r3

	// GPIO on PA24

	gpio_set_pin_level(BLOCK_2_EN,
     e6c:	2100      	movs	r1, #0
     e6e:	2018      	movs	r0, #24
     e70:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <system_init+0x1d4>)
     e72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_2_EN, GPIO_DIRECTION_OUT);
     e74:	2102      	movs	r1, #2
     e76:	2018      	movs	r0, #24
     e78:	4b1c      	ldr	r3, [pc, #112]	; (eec <system_init+0x1d8>)
     e7a:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_2_EN, GPIO_PIN_FUNCTION_OFF);
     e7c:	2301      	movs	r3, #1
     e7e:	425b      	negs	r3, r3
     e80:	0019      	movs	r1, r3
     e82:	2018      	movs	r0, #24
     e84:	4b1a      	ldr	r3, [pc, #104]	; (ef0 <system_init+0x1dc>)
     e86:	4798      	blx	r3

	// GPIO on PA25

	gpio_set_pin_level(BLOCK_1_EN,
     e88:	2100      	movs	r1, #0
     e8a:	2019      	movs	r0, #25
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <system_init+0x1d4>)
     e8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_1_EN, GPIO_DIRECTION_OUT);
     e90:	2102      	movs	r1, #2
     e92:	2019      	movs	r0, #25
     e94:	4b15      	ldr	r3, [pc, #84]	; (eec <system_init+0x1d8>)
     e96:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_1_EN, GPIO_PIN_FUNCTION_OFF);
     e98:	2301      	movs	r3, #1
     e9a:	425b      	negs	r3, r3
     e9c:	0019      	movs	r1, r3
     e9e:	2019      	movs	r0, #25
     ea0:	4b13      	ldr	r3, [pc, #76]	; (ef0 <system_init+0x1dc>)
     ea2:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(MCU_3_EN,
     ea4:	2100      	movs	r1, #0
     ea6:	201b      	movs	r0, #27
     ea8:	4b0f      	ldr	r3, [pc, #60]	; (ee8 <system_init+0x1d4>)
     eaa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_3_EN, GPIO_DIRECTION_OUT);
     eac:	2102      	movs	r1, #2
     eae:	201b      	movs	r0, #27
     eb0:	4b0e      	ldr	r3, [pc, #56]	; (eec <system_init+0x1d8>)
     eb2:	4798      	blx	r3

	gpio_set_pin_function(MCU_3_EN, GPIO_PIN_FUNCTION_OFF);
     eb4:	2301      	movs	r3, #1
     eb6:	425b      	negs	r3, r3
     eb8:	0019      	movs	r1, r3
     eba:	201b      	movs	r0, #27
     ebc:	4b0c      	ldr	r3, [pc, #48]	; (ef0 <system_init+0x1dc>)
     ebe:	4798      	blx	r3

	CALENDAR_0_init();
     ec0:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <system_init+0x1e4>)
     ec2:	4798      	blx	r3
	USART_0_init();
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <system_init+0x1e8>)
     ec6:	4798      	blx	r3

	I2C_IN_init();
     ec8:	4b0d      	ldr	r3, [pc, #52]	; (f00 <system_init+0x1ec>)
     eca:	4798      	blx	r3

	I2C_OUT_init();
     ecc:	4b0d      	ldr	r3, [pc, #52]	; (f04 <system_init+0x1f0>)
     ece:	4798      	blx	r3

	delay_driver_init();
     ed0:	4b0d      	ldr	r3, [pc, #52]	; (f08 <system_init+0x1f4>)
     ed2:	4798      	blx	r3

	TIMER_0_init();
     ed4:	4b0d      	ldr	r3, [pc, #52]	; (f0c <system_init+0x1f8>)
     ed6:	4798      	blx	r3
	WDT_0_init();
     ed8:	4b0d      	ldr	r3, [pc, #52]	; (f10 <system_init+0x1fc>)
     eda:	4798      	blx	r3
}
     edc:	46c0      	nop			; (mov r8, r8)
     ede:	46bd      	mov	sp, r7
     ee0:	bd80      	pop	{r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	000009a9 	.word	0x000009a9
     ee8:	00000969 	.word	0x00000969
     eec:	00000929 	.word	0x00000929
     ef0:	00000905 	.word	0x00000905
     ef4:	000008c9 	.word	0x000008c9
     ef8:	00000a2d 	.word	0x00000a2d
     efc:	00000ac1 	.word	0x00000ac1
     f00:	00000b79 	.word	0x00000b79
     f04:	00000c2d 	.word	0x00000c2d
     f08:	00000c61 	.word	0x00000c61
     f0c:	00000c7d 	.word	0x00000c7d
     f10:	00000ce9 	.word	0x00000ce9

00000f14 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     f14:	b580      	push	{r7, lr}
     f16:	b084      	sub	sp, #16
     f18:	af00      	add	r7, sp, #0
     f1a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f1c:	f3ef 8310 	mrs	r3, PRIMASK
     f20:	60fb      	str	r3, [r7, #12]
  return(result);
     f22:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f28:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f2a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	46bd      	mov	sp, r7
     f32:	b004      	add	sp, #16
     f34:	bd80      	pop	{r7, pc}

00000f36 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     f36:	b580      	push	{r7, lr}
     f38:	b084      	sub	sp, #16
     f3a:	af00      	add	r7, sp, #0
     f3c:	6078      	str	r0, [r7, #4]
     f3e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	f383 8810 	msr	PRIMASK, r3
}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	46bd      	mov	sp, r7
     f52:	b004      	add	sp, #16
     f54:	bd80      	pop	{r7, pc}

00000f56 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
     f56:	b580      	push	{r7, lr}
     f58:	b082      	sub	sp, #8
     f5a:	af00      	add	r7, sp, #0
     f5c:	0002      	movs	r2, r0
     f5e:	1dbb      	adds	r3, r7, #6
     f60:	801a      	strh	r2, [r3, #0]
	if (year & 3) {
     f62:	1dbb      	adds	r3, r7, #6
     f64:	881b      	ldrh	r3, [r3, #0]
     f66:	2203      	movs	r2, #3
     f68:	4013      	ands	r3, r2
     f6a:	d001      	beq.n	f70 <leap_year+0x1a>
		return false;
     f6c:	2300      	movs	r3, #0
     f6e:	e000      	b.n	f72 <leap_year+0x1c>
	} else {
		return true;
     f70:	2301      	movs	r3, #1
	}
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	b002      	add	sp, #8
     f78:	bd80      	pop	{r7, pc}
	...

00000f7c <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b084      	sub	sp, #16
     f80:	af00      	add	r7, sp, #0
     f82:	6078      	str	r0, [r7, #4]
     f84:	000a      	movs	r2, r1
     f86:	1cfb      	adds	r3, r7, #3
     f88:	701a      	strb	r2, [r3, #0]
	uint32_t sec_in_month = 0;
     f8a:	2300      	movs	r3, #0
     f8c:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	b29b      	uxth	r3, r3
     f92:	0018      	movs	r0, r3
     f94:	4b17      	ldr	r3, [pc, #92]	; (ff4 <get_secs_in_month+0x78>)
     f96:	4798      	blx	r3
     f98:	1e03      	subs	r3, r0, #0
     f9a:	d011      	beq.n	fc0 <get_secs_in_month+0x44>
		switch (month) {
     f9c:	1cfb      	adds	r3, r7, #3
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b0c      	cmp	r3, #12
     fa2:	d81f      	bhi.n	fe4 <get_secs_in_month+0x68>
     fa4:	009a      	lsls	r2, r3, #2
     fa6:	4b14      	ldr	r3, [pc, #80]	; (ff8 <get_secs_in_month+0x7c>)
     fa8:	18d3      	adds	r3, r2, r3
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     fae:	4b13      	ldr	r3, [pc, #76]	; (ffc <get_secs_in_month+0x80>)
     fb0:	60fb      	str	r3, [r7, #12]
			break;
     fb2:	e01a      	b.n	fea <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
     fb4:	4b12      	ldr	r3, [pc, #72]	; (1000 <get_secs_in_month+0x84>)
     fb6:	60fb      	str	r3, [r7, #12]
			break;
     fb8:	e017      	b.n	fea <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     fba:	4b12      	ldr	r3, [pc, #72]	; (1004 <get_secs_in_month+0x88>)
     fbc:	60fb      	str	r3, [r7, #12]
			break;
     fbe:	e014      	b.n	fea <get_secs_in_month+0x6e>
		default:
			break;
		}
	} else {
		switch (month) {
     fc0:	1cfb      	adds	r3, r7, #3
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	2b0c      	cmp	r3, #12
     fc6:	d80f      	bhi.n	fe8 <get_secs_in_month+0x6c>
     fc8:	009a      	lsls	r2, r3, #2
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <get_secs_in_month+0x8c>)
     fcc:	18d3      	adds	r3, r2, r3
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     fd2:	4b0a      	ldr	r3, [pc, #40]	; (ffc <get_secs_in_month+0x80>)
     fd4:	60fb      	str	r3, [r7, #12]
			break;
     fd6:	e008      	b.n	fea <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <get_secs_in_month+0x90>)
     fda:	60fb      	str	r3, [r7, #12]
			break;
     fdc:	e005      	b.n	fea <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     fde:	4b09      	ldr	r3, [pc, #36]	; (1004 <get_secs_in_month+0x88>)
     fe0:	60fb      	str	r3, [r7, #12]
			break;
     fe2:	e002      	b.n	fea <get_secs_in_month+0x6e>
			break;
     fe4:	46c0      	nop			; (mov r8, r8)
     fe6:	e000      	b.n	fea <get_secs_in_month+0x6e>
		default:
			break;
     fe8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sec_in_month;
     fea:	68fb      	ldr	r3, [r7, #12]
}
     fec:	0018      	movs	r0, r3
     fee:	46bd      	mov	sp, r7
     ff0:	b004      	add	sp, #16
     ff2:	bd80      	pop	{r7, pc}
     ff4:	00000f57 	.word	0x00000f57
     ff8:	00006d6c 	.word	0x00006d6c
     ffc:	0028de80 	.word	0x0028de80
    1000:	00263b80 	.word	0x00263b80
    1004:	00278d00 	.word	0x00278d00
    1008:	00006da0 	.word	0x00006da0
    100c:	0024ea00 	.word	0x0024ea00

00001010 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1010:	b580      	push	{r7, lr}
    1012:	b08a      	sub	sp, #40	; 0x28
    1014:	af00      	add	r7, sp, #0
    1016:	60f8      	str	r0, [r7, #12]
    1018:	60b9      	str	r1, [r7, #8]
    101a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    101c:	68fb      	ldr	r3, [r7, #12]
    101e:	695b      	ldr	r3, [r3, #20]
    1020:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1022:	231f      	movs	r3, #31
    1024:	18fb      	adds	r3, r7, r3
    1026:	2201      	movs	r2, #1
    1028:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_day     = 1;
    102a:	231e      	movs	r3, #30
    102c:	18fb      	adds	r3, r7, r3
    102e:	2201      	movs	r2, #1
    1030:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_hour    = 0;
    1032:	231d      	movs	r3, #29
    1034:	18fb      	adds	r3, r7, r3
    1036:	2200      	movs	r2, #0
    1038:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_minutes = 0;
    103a:	231c      	movs	r3, #28
    103c:	18fb      	adds	r3, r7, r3
    103e:	2200      	movs	r2, #0
    1040:	701a      	strb	r2, [r3, #0]

	tmp = ts;
    1042:	68bb      	ldr	r3, [r7, #8]
    1044:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1046:	6a3b      	ldr	r3, [r7, #32]
    1048:	b29b      	uxth	r3, r3
    104a:	0018      	movs	r0, r3
    104c:	4b3f      	ldr	r3, [pc, #252]	; (114c <convert_timestamp_to_datetime+0x13c>)
    104e:	4798      	blx	r3
    1050:	1e03      	subs	r3, r0, #0
    1052:	d001      	beq.n	1058 <convert_timestamp_to_datetime+0x48>
    1054:	4b3e      	ldr	r3, [pc, #248]	; (1150 <convert_timestamp_to_datetime+0x140>)
    1056:	e000      	b.n	105a <convert_timestamp_to_datetime+0x4a>
    1058:	4b3e      	ldr	r3, [pc, #248]	; (1154 <convert_timestamp_to_datetime+0x144>)
    105a:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    105e:	69bb      	ldr	r3, [r7, #24]
    1060:	429a      	cmp	r2, r3
    1062:	d307      	bcc.n	1074 <convert_timestamp_to_datetime+0x64>
			tmp -= sec_in_year;
    1064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1066:	69bb      	ldr	r3, [r7, #24]
    1068:	1ad3      	subs	r3, r2, r3
    106a:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    106c:	6a3b      	ldr	r3, [r7, #32]
    106e:	3301      	adds	r3, #1
    1070:	623b      	str	r3, [r7, #32]
    1072:	e7e8      	b.n	1046 <convert_timestamp_to_datetime+0x36>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1074:	231f      	movs	r3, #31
    1076:	18fb      	adds	r3, r7, r3
    1078:	781a      	ldrb	r2, [r3, #0]
    107a:	6a3b      	ldr	r3, [r7, #32]
    107c:	0011      	movs	r1, r2
    107e:	0018      	movs	r0, r3
    1080:	4b35      	ldr	r3, [pc, #212]	; (1158 <convert_timestamp_to_datetime+0x148>)
    1082:	4798      	blx	r3
    1084:	0003      	movs	r3, r0
    1086:	617b      	str	r3, [r7, #20]

		if (tmp >= sec_in_month) {
    1088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    108a:	697b      	ldr	r3, [r7, #20]
    108c:	429a      	cmp	r2, r3
    108e:	d30b      	bcc.n	10a8 <convert_timestamp_to_datetime+0x98>
			tmp -= sec_in_month;
    1090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1092:	697b      	ldr	r3, [r7, #20]
    1094:	1ad3      	subs	r3, r2, r3
    1096:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    1098:	231f      	movs	r3, #31
    109a:	18fb      	adds	r3, r7, r3
    109c:	781a      	ldrb	r2, [r3, #0]
    109e:	231f      	movs	r3, #31
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	3201      	adds	r2, #1
    10a4:	701a      	strb	r2, [r3, #0]
    10a6:	e7e5      	b.n	1074 <convert_timestamp_to_datetime+0x64>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    10a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10aa:	4a2c      	ldr	r2, [pc, #176]	; (115c <convert_timestamp_to_datetime+0x14c>)
    10ac:	4293      	cmp	r3, r2
    10ae:	d90c      	bls.n	10ca <convert_timestamp_to_datetime+0xba>
			tmp -= SECS_IN_DAY;
    10b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10b2:	4a2b      	ldr	r2, [pc, #172]	; (1160 <convert_timestamp_to_datetime+0x150>)
    10b4:	4694      	mov	ip, r2
    10b6:	4463      	add	r3, ip
    10b8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    10ba:	231e      	movs	r3, #30
    10bc:	18fb      	adds	r3, r7, r3
    10be:	781a      	ldrb	r2, [r3, #0]
    10c0:	231e      	movs	r3, #30
    10c2:	18fb      	adds	r3, r7, r3
    10c4:	3201      	adds	r2, #1
    10c6:	701a      	strb	r2, [r3, #0]
    10c8:	e7ee      	b.n	10a8 <convert_timestamp_to_datetime+0x98>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    10ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10cc:	4a25      	ldr	r2, [pc, #148]	; (1164 <convert_timestamp_to_datetime+0x154>)
    10ce:	4293      	cmp	r3, r2
    10d0:	d90c      	bls.n	10ec <convert_timestamp_to_datetime+0xdc>
			tmp -= SECS_IN_HOUR;
    10d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d4:	4a24      	ldr	r2, [pc, #144]	; (1168 <convert_timestamp_to_datetime+0x158>)
    10d6:	4694      	mov	ip, r2
    10d8:	4463      	add	r3, ip
    10da:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    10dc:	231d      	movs	r3, #29
    10de:	18fb      	adds	r3, r7, r3
    10e0:	781a      	ldrb	r2, [r3, #0]
    10e2:	231d      	movs	r3, #29
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	3201      	adds	r2, #1
    10e8:	701a      	strb	r2, [r3, #0]
    10ea:	e7ee      	b.n	10ca <convert_timestamp_to_datetime+0xba>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    10ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ee:	2b3b      	cmp	r3, #59	; 0x3b
    10f0:	d90a      	bls.n	1108 <convert_timestamp_to_datetime+0xf8>
			tmp -= SECS_IN_MINUTE;
    10f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10f4:	3b3c      	subs	r3, #60	; 0x3c
    10f6:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    10f8:	231c      	movs	r3, #28
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781a      	ldrb	r2, [r3, #0]
    10fe:	231c      	movs	r3, #28
    1100:	18fb      	adds	r3, r7, r3
    1102:	3201      	adds	r2, #1
    1104:	701a      	strb	r2, [r3, #0]
		if (tmp >= SECS_IN_MINUTE) {
    1106:	e7f1      	b.n	10ec <convert_timestamp_to_datetime+0xdc>
		} else {
			break;
    1108:	46c0      	nop			; (mov r8, r8)
		}
	}

	dt->date.year  = tmp_year;
    110a:	6a3b      	ldr	r3, [r7, #32]
    110c:	b29a      	uxth	r2, r3
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	221f      	movs	r2, #31
    1116:	18ba      	adds	r2, r7, r2
    1118:	7812      	ldrb	r2, [r2, #0]
    111a:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	221e      	movs	r2, #30
    1120:	18ba      	adds	r2, r7, r2
    1122:	7812      	ldrb	r2, [r2, #0]
    1124:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	221d      	movs	r2, #29
    112a:	18ba      	adds	r2, r7, r2
    112c:	7812      	ldrb	r2, [r2, #0]
    112e:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	221c      	movs	r2, #28
    1134:	18ba      	adds	r2, r7, r2
    1136:	7812      	ldrb	r2, [r2, #0]
    1138:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113c:	b2da      	uxtb	r2, r3
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    1142:	2300      	movs	r3, #0
}
    1144:	0018      	movs	r0, r3
    1146:	46bd      	mov	sp, r7
    1148:	b00a      	add	sp, #40	; 0x28
    114a:	bd80      	pop	{r7, pc}
    114c:	00000f57 	.word	0x00000f57
    1150:	01e28500 	.word	0x01e28500
    1154:	01e13380 	.word	0x01e13380
    1158:	00000f7d 	.word	0x00000f7d
    115c:	0001517f 	.word	0x0001517f
    1160:	fffeae80 	.word	0xfffeae80
    1164:	00000e0f 	.word	0x00000e0f
    1168:	fffff1f0 	.word	0xfffff1f0

0000116c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    116c:	b580      	push	{r7, lr}
    116e:	b086      	sub	sp, #24
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    1176:	2300      	movs	r3, #0
    1178:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    117a:	2300      	movs	r3, #0
    117c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    117e:	683b      	ldr	r3, [r7, #0]
    1180:	88db      	ldrh	r3, [r3, #6]
    1182:	b2d9      	uxtb	r1, r3
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	695b      	ldr	r3, [r3, #20]
    1188:	b2da      	uxtb	r2, r3
    118a:	230f      	movs	r3, #15
    118c:	18fb      	adds	r3, r7, r3
    118e:	1a8a      	subs	r2, r1, r2
    1190:	701a      	strb	r2, [r3, #0]
	month   = dt->date.month;
    1192:	230e      	movs	r3, #14
    1194:	18fb      	adds	r3, r7, r3
    1196:	683a      	ldr	r2, [r7, #0]
    1198:	7952      	ldrb	r2, [r2, #5]
    119a:	701a      	strb	r2, [r3, #0]
	day     = dt->date.day;
    119c:	230d      	movs	r3, #13
    119e:	18fb      	adds	r3, r7, r3
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	7912      	ldrb	r2, [r2, #4]
    11a4:	701a      	strb	r2, [r3, #0]
	hour    = dt->time.hour;
    11a6:	230c      	movs	r3, #12
    11a8:	18fb      	adds	r3, r7, r3
    11aa:	683a      	ldr	r2, [r7, #0]
    11ac:	7892      	ldrb	r2, [r2, #2]
    11ae:	701a      	strb	r2, [r3, #0]
	minutes = dt->time.min;
    11b0:	230b      	movs	r3, #11
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	683a      	ldr	r2, [r7, #0]
    11b6:	7852      	ldrb	r2, [r2, #1]
    11b8:	701a      	strb	r2, [r3, #0]
	seconds = dt->time.sec;
    11ba:	230a      	movs	r3, #10
    11bc:	18fb      	adds	r3, r7, r3
    11be:	683a      	ldr	r2, [r7, #0]
    11c0:	7812      	ldrb	r2, [r2, #0]
    11c2:	701a      	strb	r2, [r3, #0]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    11c4:	2300      	movs	r3, #0
    11c6:	613b      	str	r3, [r7, #16]
    11c8:	e019      	b.n	11fe <convert_datetime_to_timestamp+0x92>
		if (leap_year(calendar->base_year + i)) {
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	695b      	ldr	r3, [r3, #20]
    11ce:	b29a      	uxth	r2, r3
    11d0:	693b      	ldr	r3, [r7, #16]
    11d2:	b29b      	uxth	r3, r3
    11d4:	18d3      	adds	r3, r2, r3
    11d6:	b29b      	uxth	r3, r3
    11d8:	0018      	movs	r0, r3
    11da:	4b2d      	ldr	r3, [pc, #180]	; (1290 <convert_datetime_to_timestamp+0x124>)
    11dc:	4798      	blx	r3
    11de:	1e03      	subs	r3, r0, #0
    11e0:	d005      	beq.n	11ee <convert_datetime_to_timestamp+0x82>
			tmp += SECS_IN_LEAP_YEAR;
    11e2:	697b      	ldr	r3, [r7, #20]
    11e4:	4a2b      	ldr	r2, [pc, #172]	; (1294 <convert_datetime_to_timestamp+0x128>)
    11e6:	4694      	mov	ip, r2
    11e8:	4463      	add	r3, ip
    11ea:	617b      	str	r3, [r7, #20]
    11ec:	e004      	b.n	11f8 <convert_datetime_to_timestamp+0x8c>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    11ee:	697b      	ldr	r3, [r7, #20]
    11f0:	4a29      	ldr	r2, [pc, #164]	; (1298 <convert_datetime_to_timestamp+0x12c>)
    11f2:	4694      	mov	ip, r2
    11f4:	4463      	add	r3, ip
    11f6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    11f8:	693b      	ldr	r3, [r7, #16]
    11fa:	3301      	adds	r3, #1
    11fc:	613b      	str	r3, [r7, #16]
    11fe:	230f      	movs	r3, #15
    1200:	18fb      	adds	r3, r7, r3
    1202:	781a      	ldrb	r2, [r3, #0]
    1204:	693b      	ldr	r3, [r7, #16]
    1206:	429a      	cmp	r2, r3
    1208:	d8df      	bhi.n	11ca <convert_datetime_to_timestamp+0x5e>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    120a:	2301      	movs	r3, #1
    120c:	613b      	str	r3, [r7, #16]
    120e:	e00f      	b.n	1230 <convert_datetime_to_timestamp+0xc4>
		tmp += get_secs_in_month(dt->date.year, i);
    1210:	683b      	ldr	r3, [r7, #0]
    1212:	88db      	ldrh	r3, [r3, #6]
    1214:	001a      	movs	r2, r3
    1216:	693b      	ldr	r3, [r7, #16]
    1218:	b2db      	uxtb	r3, r3
    121a:	0019      	movs	r1, r3
    121c:	0010      	movs	r0, r2
    121e:	4b1f      	ldr	r3, [pc, #124]	; (129c <convert_datetime_to_timestamp+0x130>)
    1220:	4798      	blx	r3
    1222:	0002      	movs	r2, r0
    1224:	697b      	ldr	r3, [r7, #20]
    1226:	189b      	adds	r3, r3, r2
    1228:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    122a:	693b      	ldr	r3, [r7, #16]
    122c:	3301      	adds	r3, #1
    122e:	613b      	str	r3, [r7, #16]
    1230:	230e      	movs	r3, #14
    1232:	18fb      	adds	r3, r7, r3
    1234:	781a      	ldrb	r2, [r3, #0]
    1236:	693b      	ldr	r3, [r7, #16]
    1238:	429a      	cmp	r2, r3
    123a:	d8e9      	bhi.n	1210 <convert_datetime_to_timestamp+0xa4>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    123c:	230d      	movs	r3, #13
    123e:	18fb      	adds	r3, r7, r3
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	3b01      	subs	r3, #1
    1244:	4a16      	ldr	r2, [pc, #88]	; (12a0 <convert_datetime_to_timestamp+0x134>)
    1246:	4353      	muls	r3, r2
    1248:	001a      	movs	r2, r3
    124a:	697b      	ldr	r3, [r7, #20]
    124c:	189b      	adds	r3, r3, r2
    124e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1250:	230c      	movs	r3, #12
    1252:	18fb      	adds	r3, r7, r3
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	22e1      	movs	r2, #225	; 0xe1
    1258:	0112      	lsls	r2, r2, #4
    125a:	4353      	muls	r3, r2
    125c:	001a      	movs	r2, r3
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	189b      	adds	r3, r3, r2
    1262:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1264:	230b      	movs	r3, #11
    1266:	18fb      	adds	r3, r7, r3
    1268:	781a      	ldrb	r2, [r3, #0]
    126a:	0013      	movs	r3, r2
    126c:	011b      	lsls	r3, r3, #4
    126e:	1a9b      	subs	r3, r3, r2
    1270:	009b      	lsls	r3, r3, #2
    1272:	001a      	movs	r2, r3
    1274:	697b      	ldr	r3, [r7, #20]
    1276:	189b      	adds	r3, r3, r2
    1278:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    127a:	230a      	movs	r3, #10
    127c:	18fb      	adds	r3, r7, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	697a      	ldr	r2, [r7, #20]
    1282:	18d3      	adds	r3, r2, r3
    1284:	617b      	str	r3, [r7, #20]

	return tmp;
    1286:	697b      	ldr	r3, [r7, #20]
}
    1288:	0018      	movs	r0, r3
    128a:	46bd      	mov	sp, r7
    128c:	b006      	add	sp, #24
    128e:	bd80      	pop	{r7, pc}
    1290:	00000f57 	.word	0x00000f57
    1294:	01e28500 	.word	0x01e28500
    1298:	01e13380 	.word	0x01e13380
    129c:	00000f7d 	.word	0x00000f7d
    12a0:	00015180 	.word	0x00015180

000012a4 <calibrate_timestamp>:

/** \brief calibrate timestamp to make desired timestamp ahead of current timestamp
 */
static void calibrate_timestamp(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm,
                                struct calendar_alarm *current_dt)
{
    12a4:	b580      	push	{r7, lr}
    12a6:	b086      	sub	sp, #24
    12a8:	af00      	add	r7, sp, #0
    12aa:	60f8      	str	r0, [r7, #12]
    12ac:	60b9      	str	r1, [r7, #8]
    12ae:	607a      	str	r2, [r7, #4]
	uint32_t alarm_ts;
	uint32_t current_ts = current_dt->cal_alarm.timestamp;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	68db      	ldr	r3, [r3, #12]
    12b4:	613b      	str	r3, [r7, #16]

	alarm_ts = alarm->cal_alarm.timestamp;
    12b6:	68bb      	ldr	r3, [r7, #8]
    12b8:	68db      	ldr	r3, [r3, #12]
    12ba:	617b      	str	r3, [r7, #20]

	/* calibrate timestamp */
	switch (alarm->cal_alarm.option) {
    12bc:	68bb      	ldr	r3, [r7, #8]
    12be:	7c1b      	ldrb	r3, [r3, #16]
    12c0:	2b05      	cmp	r3, #5
    12c2:	d84a      	bhi.n	135a <calibrate_timestamp+0xb6>
    12c4:	009a      	lsls	r2, r3, #2
    12c6:	4b2e      	ldr	r3, [pc, #184]	; (1380 <calibrate_timestamp+0xdc>)
    12c8:	18d3      	adds	r3, r2, r3
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:

		if (alarm_ts <= current_ts) {
    12ce:	697a      	ldr	r2, [r7, #20]
    12d0:	693b      	ldr	r3, [r7, #16]
    12d2:	429a      	cmp	r2, r3
    12d4:	d843      	bhi.n	135e <calibrate_timestamp+0xba>
			alarm_ts += SECS_IN_MINUTE;
    12d6:	697b      	ldr	r3, [r7, #20]
    12d8:	333c      	adds	r3, #60	; 0x3c
    12da:	617b      	str	r3, [r7, #20]
		}

		break;
    12dc:	e03f      	b.n	135e <calibrate_timestamp+0xba>
	case CALENDAR_ALARM_MATCH_MIN:

		if (alarm_ts <= current_ts) {
    12de:	697a      	ldr	r2, [r7, #20]
    12e0:	693b      	ldr	r3, [r7, #16]
    12e2:	429a      	cmp	r2, r3
    12e4:	d83d      	bhi.n	1362 <calibrate_timestamp+0xbe>
			alarm_ts += SECS_IN_HOUR;
    12e6:	697b      	ldr	r3, [r7, #20]
    12e8:	22e1      	movs	r2, #225	; 0xe1
    12ea:	0112      	lsls	r2, r2, #4
    12ec:	4694      	mov	ip, r2
    12ee:	4463      	add	r3, ip
    12f0:	617b      	str	r3, [r7, #20]
		}

		break;
    12f2:	e036      	b.n	1362 <calibrate_timestamp+0xbe>
	case CALENDAR_ALARM_MATCH_HOUR:

		if (alarm_ts <= current_ts) {
    12f4:	697a      	ldr	r2, [r7, #20]
    12f6:	693b      	ldr	r3, [r7, #16]
    12f8:	429a      	cmp	r2, r3
    12fa:	d834      	bhi.n	1366 <calibrate_timestamp+0xc2>
			alarm_ts += SECS_IN_DAY;
    12fc:	697b      	ldr	r3, [r7, #20]
    12fe:	4a21      	ldr	r2, [pc, #132]	; (1384 <calibrate_timestamp+0xe0>)
    1300:	4694      	mov	ip, r2
    1302:	4463      	add	r3, ip
    1304:	617b      	str	r3, [r7, #20]
		}

		break;
    1306:	e02e      	b.n	1366 <calibrate_timestamp+0xc2>
	case CALENDAR_ALARM_MATCH_DAY:

		if (alarm_ts <= current_ts) {
    1308:	697a      	ldr	r2, [r7, #20]
    130a:	693b      	ldr	r3, [r7, #16]
    130c:	429a      	cmp	r2, r3
    130e:	d82c      	bhi.n	136a <calibrate_timestamp+0xc6>
			alarm_ts += get_secs_in_month(current_dt->cal_alarm.datetime.date.year,
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	895b      	ldrh	r3, [r3, #10]
    1314:	001a      	movs	r2, r3
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	7a5b      	ldrb	r3, [r3, #9]
    131a:	0019      	movs	r1, r3
    131c:	0010      	movs	r0, r2
    131e:	4b1a      	ldr	r3, [pc, #104]	; (1388 <calibrate_timestamp+0xe4>)
    1320:	4798      	blx	r3
    1322:	0002      	movs	r2, r0
    1324:	697b      	ldr	r3, [r7, #20]
    1326:	189b      	adds	r3, r3, r2
    1328:	617b      	str	r3, [r7, #20]
			                              current_dt->cal_alarm.datetime.date.month);
		}

		break;
    132a:	e01e      	b.n	136a <calibrate_timestamp+0xc6>
	case CALENDAR_ALARM_MATCH_MONTH:

		if (alarm_ts <= current_ts) {
    132c:	697a      	ldr	r2, [r7, #20]
    132e:	693b      	ldr	r3, [r7, #16]
    1330:	429a      	cmp	r2, r3
    1332:	d81c      	bhi.n	136e <calibrate_timestamp+0xca>
			if (leap_year(current_dt->cal_alarm.datetime.date.year)) {
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	895b      	ldrh	r3, [r3, #10]
    1338:	0018      	movs	r0, r3
    133a:	4b14      	ldr	r3, [pc, #80]	; (138c <calibrate_timestamp+0xe8>)
    133c:	4798      	blx	r3
    133e:	1e03      	subs	r3, r0, #0
    1340:	d005      	beq.n	134e <calibrate_timestamp+0xaa>
				alarm_ts += SECS_IN_LEAP_YEAR;
    1342:	697b      	ldr	r3, [r7, #20]
    1344:	4a12      	ldr	r2, [pc, #72]	; (1390 <calibrate_timestamp+0xec>)
    1346:	4694      	mov	ip, r2
    1348:	4463      	add	r3, ip
    134a:	617b      	str	r3, [r7, #20]
			} else {
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
			}
		}

		break;
    134c:	e00f      	b.n	136e <calibrate_timestamp+0xca>
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
    134e:	697b      	ldr	r3, [r7, #20]
    1350:	4a10      	ldr	r2, [pc, #64]	; (1394 <calibrate_timestamp+0xf0>)
    1352:	4694      	mov	ip, r2
    1354:	4463      	add	r3, ip
    1356:	617b      	str	r3, [r7, #20]
		break;
    1358:	e009      	b.n	136e <calibrate_timestamp+0xca>
	/* do nothing for year match */
	case CALENDAR_ALARM_MATCH_YEAR:
	default:
		break;
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	e008      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	e006      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	e004      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	e002      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	e000      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    136e:	46c0      	nop			; (mov r8, r8)
	}

	/* desired timestamp after calibration */
	alarm->cal_alarm.timestamp = alarm_ts;
    1370:	68bb      	ldr	r3, [r7, #8]
    1372:	697a      	ldr	r2, [r7, #20]
    1374:	60da      	str	r2, [r3, #12]
}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b006      	add	sp, #24
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00006dd4 	.word	0x00006dd4
    1384:	00015180 	.word	0x00015180
    1388:	00000f7d 	.word	0x00000f7d
    138c:	00000f57 	.word	0x00000f57
    1390:	01e28500 	.word	0x01e28500
    1394:	01e13380 	.word	0x01e13380

00001398 <fill_alarm>:

/** \brief complete alarm to absolute date/time, then fill up the timestamp
 */
static void fill_alarm(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm)
{
    1398:	b580      	push	{r7, lr}
    139a:	b08a      	sub	sp, #40	; 0x28
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
    13a0:	6039      	str	r1, [r7, #0]
	struct calendar_alarm current_dt;
	uint32_t              tmp, current_ts;

	/* get current date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	0018      	movs	r0, r3
    13a6:	4b44      	ldr	r3, [pc, #272]	; (14b8 <fill_alarm+0x120>)
    13a8:	4798      	blx	r3
    13aa:	0003      	movs	r3, r0
    13ac:	627b      	str	r3, [r7, #36]	; 0x24
	convert_timestamp_to_datetime(calendar, current_ts, &current_dt.cal_alarm.datetime);
    13ae:	2308      	movs	r3, #8
    13b0:	18fb      	adds	r3, r7, r3
    13b2:	1d1a      	adds	r2, r3, #4
    13b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	0018      	movs	r0, r3
    13ba:	4b40      	ldr	r3, [pc, #256]	; (14bc <fill_alarm+0x124>)
    13bc:	4798      	blx	r3

	current_dt.cal_alarm.timestamp = current_ts;
    13be:	2308      	movs	r3, #8
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13c4:	60da      	str	r2, [r3, #12]

	/* complete alarm */
	switch (alarm->cal_alarm.option) {
    13c6:	683b      	ldr	r3, [r7, #0]
    13c8:	7c1b      	ldrb	r3, [r3, #16]
    13ca:	2b06      	cmp	r3, #6
    13cc:	d854      	bhi.n	1478 <fill_alarm+0xe0>
    13ce:	009a      	lsls	r2, r3, #2
    13d0:	4b3b      	ldr	r3, [pc, #236]	; (14c0 <fill_alarm+0x128>)
    13d2:	18d3      	adds	r3, r2, r3
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    13d8:	2308      	movs	r3, #8
    13da:	18fb      	adds	r3, r7, r3
    13dc:	895a      	ldrh	r2, [r3, #10]
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    13e2:	2308      	movs	r3, #8
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	7a5a      	ldrb	r2, [r3, #9]
    13e8:	683b      	ldr	r3, [r7, #0]
    13ea:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    13ec:	2308      	movs	r3, #8
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	7a1a      	ldrb	r2, [r3, #8]
    13f2:	683b      	ldr	r3, [r7, #0]
    13f4:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    13f6:	2308      	movs	r3, #8
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	799a      	ldrb	r2, [r3, #6]
    13fc:	683b      	ldr	r3, [r7, #0]
    13fe:	719a      	strb	r2, [r3, #6]
		alarm->cal_alarm.datetime.time.min   = current_dt.cal_alarm.datetime.time.min;
    1400:	2308      	movs	r3, #8
    1402:	18fb      	adds	r3, r7, r3
    1404:	795a      	ldrb	r2, [r3, #5]
    1406:	683b      	ldr	r3, [r7, #0]
    1408:	715a      	strb	r2, [r3, #5]
		break;
    140a:	e036      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MIN:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    140c:	2308      	movs	r3, #8
    140e:	18fb      	adds	r3, r7, r3
    1410:	895a      	ldrh	r2, [r3, #10]
    1412:	683b      	ldr	r3, [r7, #0]
    1414:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1416:	2308      	movs	r3, #8
    1418:	18fb      	adds	r3, r7, r3
    141a:	7a5a      	ldrb	r2, [r3, #9]
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    1420:	2308      	movs	r3, #8
    1422:	18fb      	adds	r3, r7, r3
    1424:	7a1a      	ldrb	r2, [r3, #8]
    1426:	683b      	ldr	r3, [r7, #0]
    1428:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    142a:	2308      	movs	r3, #8
    142c:	18fb      	adds	r3, r7, r3
    142e:	799a      	ldrb	r2, [r3, #6]
    1430:	683b      	ldr	r3, [r7, #0]
    1432:	719a      	strb	r2, [r3, #6]
		break;
    1434:	e021      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_HOUR:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1436:	2308      	movs	r3, #8
    1438:	18fb      	adds	r3, r7, r3
    143a:	895a      	ldrh	r2, [r3, #10]
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1440:	2308      	movs	r3, #8
    1442:	18fb      	adds	r3, r7, r3
    1444:	7a5a      	ldrb	r2, [r3, #9]
    1446:	683b      	ldr	r3, [r7, #0]
    1448:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    144a:	2308      	movs	r3, #8
    144c:	18fb      	adds	r3, r7, r3
    144e:	7a1a      	ldrb	r2, [r3, #8]
    1450:	683b      	ldr	r3, [r7, #0]
    1452:	721a      	strb	r2, [r3, #8]
		break;
    1454:	e011      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_DAY:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1456:	2308      	movs	r3, #8
    1458:	18fb      	adds	r3, r7, r3
    145a:	895a      	ldrh	r2, [r3, #10]
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1460:	2308      	movs	r3, #8
    1462:	18fb      	adds	r3, r7, r3
    1464:	7a5a      	ldrb	r2, [r3, #9]
    1466:	683b      	ldr	r3, [r7, #0]
    1468:	725a      	strb	r2, [r3, #9]
		break;
    146a:	e006      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MONTH:
		alarm->cal_alarm.datetime.date.year = current_dt.cal_alarm.datetime.date.year;
    146c:	2308      	movs	r3, #8
    146e:	18fb      	adds	r3, r7, r3
    1470:	895a      	ldrh	r2, [r3, #10]
    1472:	683b      	ldr	r3, [r7, #0]
    1474:	815a      	strh	r2, [r3, #10]
		break;
    1476:	e000      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_YEAR:
		break;
	default:
		break;
    1478:	46c0      	nop			; (mov r8, r8)
	}

	/* fill up the timestamp */
	tmp                        = convert_datetime_to_timestamp(calendar, &alarm->cal_alarm.datetime);
    147a:	683b      	ldr	r3, [r7, #0]
    147c:	1d1a      	adds	r2, r3, #4
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	0011      	movs	r1, r2
    1482:	0018      	movs	r0, r3
    1484:	4b0f      	ldr	r3, [pc, #60]	; (14c4 <fill_alarm+0x12c>)
    1486:	4798      	blx	r3
    1488:	0003      	movs	r3, r0
    148a:	623b      	str	r3, [r7, #32]
	alarm->cal_alarm.timestamp = tmp;
    148c:	683b      	ldr	r3, [r7, #0]
    148e:	6a3a      	ldr	r2, [r7, #32]
    1490:	60da      	str	r2, [r3, #12]

	/* calibrate the timestamp */
	calibrate_timestamp(calendar, alarm, &current_dt);
    1492:	2308      	movs	r3, #8
    1494:	18fa      	adds	r2, r7, r3
    1496:	6839      	ldr	r1, [r7, #0]
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	0018      	movs	r0, r3
    149c:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <fill_alarm+0x130>)
    149e:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, alarm->cal_alarm.timestamp, &alarm->cal_alarm.datetime);
    14a0:	683b      	ldr	r3, [r7, #0]
    14a2:	68d9      	ldr	r1, [r3, #12]
    14a4:	683b      	ldr	r3, [r7, #0]
    14a6:	1d1a      	adds	r2, r3, #4
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	0018      	movs	r0, r3
    14ac:	4b03      	ldr	r3, [pc, #12]	; (14bc <fill_alarm+0x124>)
    14ae:	4798      	blx	r3
}
    14b0:	46c0      	nop			; (mov r8, r8)
    14b2:	46bd      	mov	sp, r7
    14b4:	b00a      	add	sp, #40	; 0x28
    14b6:	bd80      	pop	{r7, pc}
    14b8:	00002ce5 	.word	0x00002ce5
    14bc:	00001011 	.word	0x00001011
    14c0:	00006dec 	.word	0x00006dec
    14c4:	0000116d 	.word	0x0000116d
    14c8:	000012a5 	.word	0x000012a5

000014cc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b084      	sub	sp, #16
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
    14d4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    14d6:	2300      	movs	r3, #0
    14d8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	1e5a      	subs	r2, r3, #1
    14de:	4193      	sbcs	r3, r2
    14e0:	b2d8      	uxtb	r0, r3
    14e2:	23e0      	movs	r3, #224	; 0xe0
    14e4:	005a      	lsls	r2, r3, #1
    14e6:	4b11      	ldr	r3, [pc, #68]	; (152c <calendar_init+0x60>)
    14e8:	0019      	movs	r1, r3
    14ea:	4b11      	ldr	r3, [pc, #68]	; (1530 <calendar_init+0x64>)
    14ec:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	681a      	ldr	r2, [r3, #0]
    14f2:	683b      	ldr	r3, [r7, #0]
    14f4:	429a      	cmp	r2, r3
    14f6:	d101      	bne.n	14fc <calendar_init+0x30>
		/* Already initialized with current configuration */
		return ERR_NONE;
    14f8:	2300      	movs	r3, #0
    14fa:	e013      	b.n	1524 <calendar_init+0x58>
	} else if (calendar->device.hw != NULL) {
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	2b00      	cmp	r3, #0
    1502:	d002      	beq.n	150a <calendar_init+0x3e>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1504:	2312      	movs	r3, #18
    1506:	425b      	negs	r3, r3
    1508:	e00c      	b.n	1524 <calendar_init+0x58>
	}
	calendar->device.hw = (void *)hw;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	683a      	ldr	r2, [r7, #0]
    150e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	0018      	movs	r0, r3
    1514:	4b07      	ldr	r3, [pc, #28]	; (1534 <calendar_init+0x68>)
    1516:	4798      	blx	r3
    1518:	0003      	movs	r3, r0
    151a:	60fb      	str	r3, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	4a06      	ldr	r2, [pc, #24]	; (1538 <calendar_init+0x6c>)
    1520:	615a      	str	r2, [r3, #20]

	return ret;
    1522:	68fb      	ldr	r3, [r7, #12]
}
    1524:	0018      	movs	r0, r3
    1526:	46bd      	mov	sp, r7
    1528:	b004      	add	sp, #16
    152a:	bd80      	pop	{r7, pc}
    152c:	00006e08 	.word	0x00006e08
    1530:	00002077 	.word	0x00002077
    1534:	00002c31 	.word	0x00002c31
    1538:	000007b2 	.word	0x000007b2

0000153c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    153c:	b580      	push	{r7, lr}
    153e:	b082      	sub	sp, #8
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1544:	4b05      	ldr	r3, [pc, #20]	; (155c <delay_init+0x20>)
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	601a      	str	r2, [r3, #0]
    154a:	4b04      	ldr	r3, [pc, #16]	; (155c <delay_init+0x20>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	0018      	movs	r0, r3
    1550:	4b03      	ldr	r3, [pc, #12]	; (1560 <delay_init+0x24>)
    1552:	4798      	blx	r3
}
    1554:	46c0      	nop			; (mov r8, r8)
    1556:	46bd      	mov	sp, r7
    1558:	b002      	add	sp, #8
    155a:	bd80      	pop	{r7, pc}
    155c:	2000007c 	.word	0x2000007c
    1560:	000047c9 	.word	0x000047c9

00001564 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1564:	b590      	push	{r4, r7, lr}
    1566:	b083      	sub	sp, #12
    1568:	af00      	add	r7, sp, #0
    156a:	0002      	movs	r2, r0
    156c:	1dbb      	adds	r3, r7, #6
    156e:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1570:	4b07      	ldr	r3, [pc, #28]	; (1590 <delay_ms+0x2c>)
    1572:	681c      	ldr	r4, [r3, #0]
    1574:	1dbb      	adds	r3, r7, #6
    1576:	881b      	ldrh	r3, [r3, #0]
    1578:	0018      	movs	r0, r3
    157a:	4b06      	ldr	r3, [pc, #24]	; (1594 <delay_ms+0x30>)
    157c:	4798      	blx	r3
    157e:	0003      	movs	r3, r0
    1580:	0019      	movs	r1, r3
    1582:	0020      	movs	r0, r4
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <delay_ms+0x34>)
    1586:	4798      	blx	r3
}
    1588:	46c0      	nop			; (mov r8, r8)
    158a:	46bd      	mov	sp, r7
    158c:	b003      	add	sp, #12
    158e:	bd90      	pop	{r4, r7, pc}
    1590:	2000007c 	.word	0x2000007c
    1594:	00002625 	.word	0x00002625
    1598:	000047e5 	.word	0x000047e5

0000159c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    159c:	b580      	push	{r7, lr}
    159e:	b08a      	sub	sp, #40	; 0x28
    15a0:	af00      	add	r7, sp, #0
    15a2:	60f8      	str	r0, [r7, #12]
    15a4:	60b9      	str	r1, [r7, #8]
    15a6:	1dbb      	adds	r3, r7, #6
    15a8:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	3b14      	subs	r3, #20
    15ae:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    15b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15b2:	8b9a      	ldrh	r2, [r3, #28]
    15b4:	2314      	movs	r3, #20
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    15ba:	1dbb      	adds	r3, r7, #6
    15bc:	881a      	ldrh	r2, [r3, #0]
    15be:	2314      	movs	r3, #20
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    15c4:	2314      	movs	r3, #20
    15c6:	18fb      	adds	r3, r7, r3
    15c8:	4a0c      	ldr	r2, [pc, #48]	; (15fc <i2c_m_sync_read+0x60>)
    15ca:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    15cc:	2314      	movs	r3, #20
    15ce:	18fb      	adds	r3, r7, r3
    15d0:	68ba      	ldr	r2, [r7, #8]
    15d2:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    15d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15d6:	2214      	movs	r2, #20
    15d8:	18ba      	adds	r2, r7, r2
    15da:	0011      	movs	r1, r2
    15dc:	0018      	movs	r0, r3
    15de:	4b08      	ldr	r3, [pc, #32]	; (1600 <i2c_m_sync_read+0x64>)
    15e0:	4798      	blx	r3
    15e2:	0003      	movs	r3, r0
    15e4:	623b      	str	r3, [r7, #32]

	if (ret) {
    15e6:	6a3b      	ldr	r3, [r7, #32]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d001      	beq.n	15f0 <i2c_m_sync_read+0x54>
		return ret;
    15ec:	6a3b      	ldr	r3, [r7, #32]
    15ee:	e001      	b.n	15f4 <i2c_m_sync_read+0x58>
	}

	return n;
    15f0:	1dbb      	adds	r3, r7, #6
    15f2:	881b      	ldrh	r3, [r3, #0]
}
    15f4:	0018      	movs	r0, r3
    15f6:	46bd      	mov	sp, r7
    15f8:	b00a      	add	sp, #40	; 0x28
    15fa:	bd80      	pop	{r7, pc}
    15fc:	ffff8001 	.word	0xffff8001
    1600:	000040e5 	.word	0x000040e5

00001604 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1604:	b580      	push	{r7, lr}
    1606:	b08a      	sub	sp, #40	; 0x28
    1608:	af00      	add	r7, sp, #0
    160a:	60f8      	str	r0, [r7, #12]
    160c:	60b9      	str	r1, [r7, #8]
    160e:	1dbb      	adds	r3, r7, #6
    1610:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	3b14      	subs	r3, #20
    1616:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    161a:	8b9a      	ldrh	r2, [r3, #28]
    161c:	2314      	movs	r3, #20
    161e:	18fb      	adds	r3, r7, r3
    1620:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1622:	1dbb      	adds	r3, r7, #6
    1624:	881a      	ldrh	r2, [r3, #0]
    1626:	2314      	movs	r3, #20
    1628:	18fb      	adds	r3, r7, r3
    162a:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    162c:	2314      	movs	r3, #20
    162e:	18fb      	adds	r3, r7, r3
    1630:	4a0c      	ldr	r2, [pc, #48]	; (1664 <i2c_m_sync_write+0x60>)
    1632:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1634:	2314      	movs	r3, #20
    1636:	18fb      	adds	r3, r7, r3
    1638:	68ba      	ldr	r2, [r7, #8]
    163a:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    163e:	2214      	movs	r2, #20
    1640:	18ba      	adds	r2, r7, r2
    1642:	0011      	movs	r1, r2
    1644:	0018      	movs	r0, r3
    1646:	4b08      	ldr	r3, [pc, #32]	; (1668 <i2c_m_sync_write+0x64>)
    1648:	4798      	blx	r3
    164a:	0003      	movs	r3, r0
    164c:	623b      	str	r3, [r7, #32]

	if (ret) {
    164e:	6a3b      	ldr	r3, [r7, #32]
    1650:	2b00      	cmp	r3, #0
    1652:	d001      	beq.n	1658 <i2c_m_sync_write+0x54>
		return ret;
    1654:	6a3b      	ldr	r3, [r7, #32]
    1656:	e001      	b.n	165c <i2c_m_sync_write+0x58>
	}

	return n;
    1658:	1dbb      	adds	r3, r7, #6
    165a:	881b      	ldrh	r3, [r3, #0]
}
    165c:	0018      	movs	r0, r3
    165e:	46bd      	mov	sp, r7
    1660:	b00a      	add	sp, #40	; 0x28
    1662:	bd80      	pop	{r7, pc}
    1664:	ffff8000 	.word	0xffff8000
    1668:	000040e5 	.word	0x000040e5

0000166c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    166c:	b580      	push	{r7, lr}
    166e:	b084      	sub	sp, #16
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	1e5a      	subs	r2, r3, #1
    167a:	4193      	sbcs	r3, r2
    167c:	b2db      	uxtb	r3, r3
    167e:	490e      	ldr	r1, [pc, #56]	; (16b8 <i2c_m_sync_init+0x4c>)
    1680:	225e      	movs	r2, #94	; 0x5e
    1682:	0018      	movs	r0, r3
    1684:	4b0d      	ldr	r3, [pc, #52]	; (16bc <i2c_m_sync_init+0x50>)
    1686:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	683a      	ldr	r2, [r7, #0]
    168c:	0011      	movs	r1, r2
    168e:	0018      	movs	r0, r3
    1690:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <i2c_m_sync_init+0x54>)
    1692:	4798      	blx	r3
    1694:	0003      	movs	r3, r0
    1696:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1698:	68fb      	ldr	r3, [r7, #12]
    169a:	2b00      	cmp	r3, #0
    169c:	d001      	beq.n	16a2 <i2c_m_sync_init+0x36>
		return init_status;
    169e:	68fb      	ldr	r3, [r7, #12]
    16a0:	e006      	b.n	16b0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	4a07      	ldr	r2, [pc, #28]	; (16c4 <i2c_m_sync_init+0x58>)
    16a6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	4a07      	ldr	r2, [pc, #28]	; (16c8 <i2c_m_sync_init+0x5c>)
    16ac:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    16ae:	2300      	movs	r3, #0
}
    16b0:	0018      	movs	r0, r3
    16b2:	46bd      	mov	sp, r7
    16b4:	b004      	add	sp, #16
    16b6:	bd80      	pop	{r7, pc}
    16b8:	00006e24 	.word	0x00006e24
    16bc:	00002077 	.word	0x00002077
    16c0:	00003ec1 	.word	0x00003ec1
    16c4:	0000159d 	.word	0x0000159d
    16c8:	00001605 	.word	0x00001605

000016cc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b082      	sub	sp, #8
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	0018      	movs	r0, r3
    16d8:	4b03      	ldr	r3, [pc, #12]	; (16e8 <i2c_m_sync_enable+0x1c>)
    16da:	4798      	blx	r3
    16dc:	0003      	movs	r3, r0
}
    16de:	0018      	movs	r0, r3
    16e0:	46bd      	mov	sp, r7
    16e2:	b002      	add	sp, #8
    16e4:	bd80      	pop	{r7, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00003f09 	.word	0x00003f09

000016ec <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    16ec:	b580      	push	{r7, lr}
    16ee:	b084      	sub	sp, #16
    16f0:	af00      	add	r7, sp, #0
    16f2:	60f8      	str	r0, [r7, #12]
    16f4:	607a      	str	r2, [r7, #4]
    16f6:	230a      	movs	r3, #10
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	1c0a      	adds	r2, r1, #0
    16fc:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    16fe:	230a      	movs	r3, #10
    1700:	18fb      	adds	r3, r7, r3
    1702:	881b      	ldrh	r3, [r3, #0]
    1704:	059b      	lsls	r3, r3, #22
    1706:	0d9b      	lsrs	r3, r3, #22
    1708:	b21a      	sxth	r2, r3
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	b219      	sxth	r1, r3
    170e:	2380      	movs	r3, #128	; 0x80
    1710:	00db      	lsls	r3, r3, #3
    1712:	400b      	ands	r3, r1
    1714:	b21b      	sxth	r3, r3
    1716:	4313      	orrs	r3, r2
    1718:	b21b      	sxth	r3, r3
    171a:	b29a      	uxth	r2, r3
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	839a      	strh	r2, [r3, #28]
    1720:	68fb      	ldr	r3, [r7, #12]
    1722:	8b9b      	ldrh	r3, [r3, #28]
}
    1724:	0018      	movs	r0, r3
    1726:	46bd      	mov	sp, r7
    1728:	b004      	add	sp, #16
    172a:	bd80      	pop	{r7, pc}

0000172c <i2c_s_async_init>:
/**
 * \brief Initialize asynchronous i2c slave interface
 */
int32_t i2c_s_async_init(struct i2c_s_async_descriptor *const descr, void *const hw, uint8_t *const rx_buffer,
                         const uint16_t rx_buffer_length)
{
    172c:	b580      	push	{r7, lr}
    172e:	b086      	sub	sp, #24
    1730:	af00      	add	r7, sp, #0
    1732:	60f8      	str	r0, [r7, #12]
    1734:	60b9      	str	r1, [r7, #8]
    1736:	607a      	str	r2, [r7, #4]
    1738:	001a      	movs	r2, r3
    173a:	1cbb      	adds	r3, r7, #2
    173c:	801a      	strh	r2, [r3, #0]
	int32_t init_status;

	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	2b00      	cmp	r3, #0
    1742:	d00b      	beq.n	175c <i2c_s_async_init+0x30>
    1744:	68bb      	ldr	r3, [r7, #8]
    1746:	2b00      	cmp	r3, #0
    1748:	d008      	beq.n	175c <i2c_s_async_init+0x30>
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	2b00      	cmp	r3, #0
    174e:	d005      	beq.n	175c <i2c_s_async_init+0x30>
    1750:	1cbb      	adds	r3, r7, #2
    1752:	881b      	ldrh	r3, [r3, #0]
    1754:	2b00      	cmp	r3, #0
    1756:	d001      	beq.n	175c <i2c_s_async_init+0x30>
    1758:	2301      	movs	r3, #1
    175a:	e000      	b.n	175e <i2c_s_async_init+0x32>
    175c:	2300      	movs	r3, #0
    175e:	1c1a      	adds	r2, r3, #0
    1760:	2301      	movs	r3, #1
    1762:	4013      	ands	r3, r2
    1764:	b2db      	uxtb	r3, r3
    1766:	491e      	ldr	r1, [pc, #120]	; (17e0 <i2c_s_async_init+0xb4>)
    1768:	223a      	movs	r2, #58	; 0x3a
    176a:	0018      	movs	r0, r3
    176c:	4b1d      	ldr	r3, [pc, #116]	; (17e4 <i2c_s_async_init+0xb8>)
    176e:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	3330      	adds	r3, #48	; 0x30
    1774:	0018      	movs	r0, r3
    1776:	1cbb      	adds	r3, r7, #2
    1778:	881a      	ldrh	r2, [r3, #0]
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	0019      	movs	r1, r3
    177e:	4b1a      	ldr	r3, [pc, #104]	; (17e8 <i2c_s_async_init+0xbc>)
    1780:	4798      	blx	r3
    1782:	1e03      	subs	r3, r0, #0
    1784:	d002      	beq.n	178c <i2c_s_async_init+0x60>
		return ERR_INVALID_ARG;
    1786:	230d      	movs	r3, #13
    1788:	425b      	negs	r3, r3
    178a:	e024      	b.n	17d6 <i2c_s_async_init+0xaa>
	}

	init_status = _i2c_s_async_init(&descr->device, hw);
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	68ba      	ldr	r2, [r7, #8]
    1790:	0011      	movs	r1, r2
    1792:	0018      	movs	r0, r3
    1794:	4b15      	ldr	r3, [pc, #84]	; (17ec <i2c_s_async_init+0xc0>)
    1796:	4798      	blx	r3
    1798:	0003      	movs	r3, r0
    179a:	617b      	str	r3, [r7, #20]
	if (init_status) {
    179c:	697b      	ldr	r3, [r7, #20]
    179e:	2b00      	cmp	r3, #0
    17a0:	d001      	beq.n	17a6 <i2c_s_async_init+0x7a>
		return init_status;
    17a2:	697b      	ldr	r3, [r7, #20]
    17a4:	e017      	b.n	17d6 <i2c_s_async_init+0xaa>
	}

	descr->io.read  = i2c_s_async_read;
    17a6:	68fb      	ldr	r3, [r7, #12]
    17a8:	4a11      	ldr	r2, [pc, #68]	; (17f0 <i2c_s_async_init+0xc4>)
    17aa:	61da      	str	r2, [r3, #28]
	descr->io.write = i2c_s_async_write;
    17ac:	68fb      	ldr	r3, [r7, #12]
    17ae:	4a11      	ldr	r2, [pc, #68]	; (17f4 <i2c_s_async_init+0xc8>)
    17b0:	619a      	str	r2, [r3, #24]

	descr->device.cb.error   = i2c_s_async_error;
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	4a10      	ldr	r2, [pc, #64]	; (17f8 <i2c_s_async_init+0xcc>)
    17b6:	605a      	str	r2, [r3, #4]
	descr->device.cb.tx      = i2c_s_async_tx;
    17b8:	68fb      	ldr	r3, [r7, #12]
    17ba:	4a10      	ldr	r2, [pc, #64]	; (17fc <i2c_s_async_init+0xd0>)
    17bc:	609a      	str	r2, [r3, #8]
	descr->device.cb.rx_done = i2c_s_async_byte_received;
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	4a0f      	ldr	r2, [pc, #60]	; (1800 <i2c_s_async_init+0xd4>)
    17c2:	60da      	str	r2, [r3, #12]

	descr->tx_por           = 0;
    17c4:	68fb      	ldr	r3, [r7, #12]
    17c6:	2246      	movs	r2, #70	; 0x46
    17c8:	2100      	movs	r1, #0
    17ca:	5299      	strh	r1, [r3, r2]
	descr->tx_buffer_length = 0;
    17cc:	68fb      	ldr	r3, [r7, #12]
    17ce:	2244      	movs	r2, #68	; 0x44
    17d0:	2100      	movs	r1, #0
    17d2:	5299      	strh	r1, [r3, r2]

	return ERR_NONE;
    17d4:	2300      	movs	r3, #0
}
    17d6:	0018      	movs	r0, r3
    17d8:	46bd      	mov	sp, r7
    17da:	b006      	add	sp, #24
    17dc:	bd80      	pop	{r7, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	00006e40 	.word	0x00006e40
    17e4:	00002077 	.word	0x00002077
    17e8:	000022a5 	.word	0x000022a5
    17ec:	00004425 	.word	0x00004425
    17f0:	00001901 	.word	0x00001901
    17f4:	000019d1 	.word	0x000019d1
    17f8:	000018d9 	.word	0x000018d9
    17fc:	00001805 	.word	0x00001805
    1800:	00001895 	.word	0x00001895

00001804 <i2c_s_async_tx>:
 * \internal Callback function for data sending
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_tx(struct _i2c_s_async_device *const device)
{
    1804:	b580      	push	{r7, lr}
    1806:	b084      	sub	sp, #16
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	60fb      	str	r3, [r7, #12]

	if (!descr->tx_buffer_length) {
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	2244      	movs	r2, #68	; 0x44
    1814:	5a9b      	ldrh	r3, [r3, r2]
    1816:	2b00      	cmp	r3, #0
    1818:	d109      	bne.n	182e <i2c_s_async_tx+0x2a>
		if (descr->cbs.tx_pending) {
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    181e:	2b00      	cmp	r3, #0
    1820:	d032      	beq.n	1888 <i2c_s_async_tx+0x84>
			descr->cbs.tx_pending(descr);
    1822:	68fb      	ldr	r3, [r7, #12]
    1824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1826:	68fa      	ldr	r2, [r7, #12]
    1828:	0010      	movs	r0, r2
    182a:	4798      	blx	r3
		descr->tx_buffer_length = 0;
		if (descr->cbs.tx) {
			descr->cbs.tx(descr);
		}
	}
}
    182c:	e02c      	b.n	1888 <i2c_s_async_tx+0x84>
	} else if (++descr->tx_por != descr->tx_buffer_length) {
    182e:	68fb      	ldr	r3, [r7, #12]
    1830:	2246      	movs	r2, #70	; 0x46
    1832:	5a9b      	ldrh	r3, [r3, r2]
    1834:	3301      	adds	r3, #1
    1836:	b299      	uxth	r1, r3
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	2246      	movs	r2, #70	; 0x46
    183c:	5299      	strh	r1, [r3, r2]
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	2246      	movs	r2, #70	; 0x46
    1842:	5a9a      	ldrh	r2, [r3, r2]
    1844:	68fb      	ldr	r3, [r7, #12]
    1846:	2144      	movs	r1, #68	; 0x44
    1848:	5a5b      	ldrh	r3, [r3, r1]
    184a:	429a      	cmp	r2, r3
    184c:	d00b      	beq.n	1866 <i2c_s_async_tx+0x62>
		_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por]);
    184e:	68f8      	ldr	r0, [r7, #12]
    1850:	68fb      	ldr	r3, [r7, #12]
    1852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1854:	68fa      	ldr	r2, [r7, #12]
    1856:	2146      	movs	r1, #70	; 0x46
    1858:	5a52      	ldrh	r2, [r2, r1]
    185a:	189b      	adds	r3, r3, r2
    185c:	781b      	ldrb	r3, [r3, #0]
    185e:	0019      	movs	r1, r3
    1860:	4b0b      	ldr	r3, [pc, #44]	; (1890 <i2c_s_async_tx+0x8c>)
    1862:	4798      	blx	r3
}
    1864:	e010      	b.n	1888 <i2c_s_async_tx+0x84>
		descr->tx_por           = 0;
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	2246      	movs	r2, #70	; 0x46
    186a:	2100      	movs	r1, #0
    186c:	5299      	strh	r1, [r3, r2]
		descr->tx_buffer_length = 0;
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	2244      	movs	r2, #68	; 0x44
    1872:	2100      	movs	r1, #0
    1874:	5299      	strh	r1, [r3, r2]
		if (descr->cbs.tx) {
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    187a:	2b00      	cmp	r3, #0
    187c:	d004      	beq.n	1888 <i2c_s_async_tx+0x84>
			descr->cbs.tx(descr);
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1882:	68fa      	ldr	r2, [r7, #12]
    1884:	0010      	movs	r0, r2
    1886:	4798      	blx	r3
}
    1888:	46c0      	nop			; (mov r8, r8)
    188a:	46bd      	mov	sp, r7
    188c:	b004      	add	sp, #16
    188e:	bd80      	pop	{r7, pc}
    1890:	000044cd 	.word	0x000044cd

00001894 <i2c_s_async_byte_received>:
 * \internal Callback function for data receipt
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_byte_received(struct _i2c_s_async_device *const device, const uint8_t data)
{
    1894:	b580      	push	{r7, lr}
    1896:	b084      	sub	sp, #16
    1898:	af00      	add	r7, sp, #0
    189a:	6078      	str	r0, [r7, #4]
    189c:	000a      	movs	r2, r1
    189e:	1cfb      	adds	r3, r7, #3
    18a0:	701a      	strb	r2, [r3, #0]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    18a6:	68fb      	ldr	r3, [r7, #12]
    18a8:	3330      	adds	r3, #48	; 0x30
    18aa:	001a      	movs	r2, r3
    18ac:	1cfb      	adds	r3, r7, #3
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	0019      	movs	r1, r3
    18b2:	0010      	movs	r0, r2
    18b4:	4b07      	ldr	r3, [pc, #28]	; (18d4 <i2c_s_async_byte_received+0x40>)
    18b6:	4798      	blx	r3

	if (descr->cbs.rx) {
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18bc:	2b00      	cmp	r3, #0
    18be:	d004      	beq.n	18ca <i2c_s_async_byte_received+0x36>
		descr->cbs.rx(descr);
    18c0:	68fb      	ldr	r3, [r7, #12]
    18c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18c4:	68fa      	ldr	r2, [r7, #12]
    18c6:	0010      	movs	r0, r2
    18c8:	4798      	blx	r3
	}
}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	46bd      	mov	sp, r7
    18ce:	b004      	add	sp, #16
    18d0:	bd80      	pop	{r7, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	0000238d 	.word	0x0000238d

000018d8 <i2c_s_async_error>:
 * \internal Callback function for error
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_error(struct _i2c_s_async_device *const device)
{
    18d8:	b580      	push	{r7, lr}
    18da:	b084      	sub	sp, #16
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	60fb      	str	r3, [r7, #12]

	if (descr->cbs.error) {
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	6a1b      	ldr	r3, [r3, #32]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d004      	beq.n	18f6 <i2c_s_async_error+0x1e>
		descr->cbs.error(descr);
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	6a1b      	ldr	r3, [r3, #32]
    18f0:	68fa      	ldr	r2, [r7, #12]
    18f2:	0010      	movs	r0, r2
    18f4:	4798      	blx	r3
	}
}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	46bd      	mov	sp, r7
    18fa:	b004      	add	sp, #16
    18fc:	bd80      	pop	{r7, pc}
	...

00001900 <i2c_s_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t i2c_s_async_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length)
{
    1900:	b580      	push	{r7, lr}
    1902:	b088      	sub	sp, #32
    1904:	af00      	add	r7, sp, #0
    1906:	60f8      	str	r0, [r7, #12]
    1908:	60b9      	str	r1, [r7, #8]
    190a:	1dbb      	adds	r3, r7, #6
    190c:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    190e:	231e      	movs	r3, #30
    1910:	18fb      	adds	r3, r7, r3
    1912:	2200      	movs	r2, #0
    1914:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    1916:	68fb      	ldr	r3, [r7, #12]
    1918:	3b18      	subs	r3, #24
    191a:	61bb      	str	r3, [r7, #24]

	ASSERT(io && buf && length);
    191c:	68fb      	ldr	r3, [r7, #12]
    191e:	2b00      	cmp	r3, #0
    1920:	d008      	beq.n	1934 <i2c_s_async_read+0x34>
    1922:	68bb      	ldr	r3, [r7, #8]
    1924:	2b00      	cmp	r3, #0
    1926:	d005      	beq.n	1934 <i2c_s_async_read+0x34>
    1928:	1dbb      	adds	r3, r7, #6
    192a:	881b      	ldrh	r3, [r3, #0]
    192c:	2b00      	cmp	r3, #0
    192e:	d001      	beq.n	1934 <i2c_s_async_read+0x34>
    1930:	2301      	movs	r3, #1
    1932:	e000      	b.n	1936 <i2c_s_async_read+0x36>
    1934:	2300      	movs	r3, #0
    1936:	1c1a      	adds	r2, r3, #0
    1938:	2301      	movs	r3, #1
    193a:	4013      	ands	r3, r2
    193c:	b2d8      	uxtb	r0, r3
    193e:	239b      	movs	r3, #155	; 0x9b
    1940:	005a      	lsls	r2, r3, #1
    1942:	4b1d      	ldr	r3, [pc, #116]	; (19b8 <i2c_s_async_read+0xb8>)
    1944:	0019      	movs	r1, r3
    1946:	4b1d      	ldr	r3, [pc, #116]	; (19bc <i2c_s_async_read+0xbc>)
    1948:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    194a:	2310      	movs	r3, #16
    194c:	18fb      	adds	r3, r7, r3
    194e:	0018      	movs	r0, r3
    1950:	4b1b      	ldr	r3, [pc, #108]	; (19c0 <i2c_s_async_read+0xc0>)
    1952:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1954:	69bb      	ldr	r3, [r7, #24]
    1956:	3330      	adds	r3, #48	; 0x30
    1958:	0018      	movs	r0, r3
    195a:	4b1a      	ldr	r3, [pc, #104]	; (19c4 <i2c_s_async_read+0xc4>)
    195c:	4798      	blx	r3
    195e:	0003      	movs	r3, r0
    1960:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1962:	2310      	movs	r3, #16
    1964:	18fb      	adds	r3, r7, r3
    1966:	0018      	movs	r0, r3
    1968:	4b17      	ldr	r3, [pc, #92]	; (19c8 <i2c_s_async_read+0xc8>)
    196a:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    196c:	e00f      	b.n	198e <i2c_s_async_read+0x8e>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    196e:	69bb      	ldr	r3, [r7, #24]
    1970:	3330      	adds	r3, #48	; 0x30
    1972:	0018      	movs	r0, r3
    1974:	231e      	movs	r3, #30
    1976:	18fb      	adds	r3, r7, r3
    1978:	881b      	ldrh	r3, [r3, #0]
    197a:	221e      	movs	r2, #30
    197c:	18ba      	adds	r2, r7, r2
    197e:	1c59      	adds	r1, r3, #1
    1980:	8011      	strh	r1, [r2, #0]
    1982:	001a      	movs	r2, r3
    1984:	68bb      	ldr	r3, [r7, #8]
    1986:	189b      	adds	r3, r3, r2
    1988:	0019      	movs	r1, r3
    198a:	4b10      	ldr	r3, [pc, #64]	; (19cc <i2c_s_async_read+0xcc>)
    198c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    198e:	231e      	movs	r3, #30
    1990:	18fb      	adds	r3, r7, r3
    1992:	881a      	ldrh	r2, [r3, #0]
    1994:	697b      	ldr	r3, [r7, #20]
    1996:	429a      	cmp	r2, r3
    1998:	d206      	bcs.n	19a8 <i2c_s_async_read+0xa8>
    199a:	231e      	movs	r3, #30
    199c:	18fa      	adds	r2, r7, r3
    199e:	1dbb      	adds	r3, r7, #6
    19a0:	8812      	ldrh	r2, [r2, #0]
    19a2:	881b      	ldrh	r3, [r3, #0]
    19a4:	429a      	cmp	r2, r3
    19a6:	d3e2      	bcc.n	196e <i2c_s_async_read+0x6e>
	}

	return (int32_t)was_read;
    19a8:	231e      	movs	r3, #30
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	881b      	ldrh	r3, [r3, #0]
}
    19ae:	0018      	movs	r0, r3
    19b0:	46bd      	mov	sp, r7
    19b2:	b008      	add	sp, #32
    19b4:	bd80      	pop	{r7, pc}
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	00006e40 	.word	0x00006e40
    19bc:	00002077 	.word	0x00002077
    19c0:	00000f15 	.word	0x00000f15
    19c4:	00002401 	.word	0x00002401
    19c8:	00000f37 	.word	0x00000f37
    19cc:	00002319 	.word	0x00002319

000019d0 <i2c_s_async_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_async_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b086      	sub	sp, #24
    19d4:	af00      	add	r7, sp, #0
    19d6:	60f8      	str	r0, [r7, #12]
    19d8:	60b9      	str	r1, [r7, #8]
    19da:	1dbb      	adds	r3, r7, #6
    19dc:	801a      	strh	r2, [r3, #0]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	3b18      	subs	r3, #24
    19e2:	617b      	str	r3, [r7, #20]

	ASSERT(io && buf && length);
    19e4:	68fb      	ldr	r3, [r7, #12]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d008      	beq.n	19fc <i2c_s_async_write+0x2c>
    19ea:	68bb      	ldr	r3, [r7, #8]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d005      	beq.n	19fc <i2c_s_async_write+0x2c>
    19f0:	1dbb      	adds	r3, r7, #6
    19f2:	881b      	ldrh	r3, [r3, #0]
    19f4:	2b00      	cmp	r3, #0
    19f6:	d001      	beq.n	19fc <i2c_s_async_write+0x2c>
    19f8:	2301      	movs	r3, #1
    19fa:	e000      	b.n	19fe <i2c_s_async_write+0x2e>
    19fc:	2300      	movs	r3, #0
    19fe:	1c1a      	adds	r2, r3, #0
    1a00:	2301      	movs	r3, #1
    1a02:	4013      	ands	r3, r2
    1a04:	b2d8      	uxtb	r0, r3
    1a06:	2352      	movs	r3, #82	; 0x52
    1a08:	33ff      	adds	r3, #255	; 0xff
    1a0a:	001a      	movs	r2, r3
    1a0c:	4b12      	ldr	r3, [pc, #72]	; (1a58 <i2c_s_async_write+0x88>)
    1a0e:	0019      	movs	r1, r3
    1a10:	4b12      	ldr	r3, [pc, #72]	; (1a5c <i2c_s_async_write+0x8c>)
    1a12:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1a14:	697b      	ldr	r3, [r7, #20]
    1a16:	2246      	movs	r2, #70	; 0x46
    1a18:	5a9a      	ldrh	r2, [r3, r2]
    1a1a:	697b      	ldr	r3, [r7, #20]
    1a1c:	2144      	movs	r1, #68	; 0x44
    1a1e:	5a5b      	ldrh	r3, [r3, r1]
    1a20:	429a      	cmp	r2, r3
    1a22:	d002      	beq.n	1a2a <i2c_s_async_write+0x5a>
		return ERR_BUSY;
    1a24:	2304      	movs	r3, #4
    1a26:	425b      	negs	r3, r3
    1a28:	e011      	b.n	1a4e <i2c_s_async_write+0x7e>
	}

	descr->tx_buffer        = (uint8_t *)buf;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	68ba      	ldr	r2, [r7, #8]
    1a2e:	641a      	str	r2, [r3, #64]	; 0x40
	descr->tx_buffer_length = length;
    1a30:	697b      	ldr	r3, [r7, #20]
    1a32:	1dba      	adds	r2, r7, #6
    1a34:	2144      	movs	r1, #68	; 0x44
    1a36:	8812      	ldrh	r2, [r2, #0]
    1a38:	525a      	strh	r2, [r3, r1]
	_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[0]);
    1a3a:	697a      	ldr	r2, [r7, #20]
    1a3c:	697b      	ldr	r3, [r7, #20]
    1a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	0019      	movs	r1, r3
    1a44:	0010      	movs	r0, r2
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <i2c_s_async_write+0x90>)
    1a48:	4798      	blx	r3

	return (int32_t)length;
    1a4a:	1dbb      	adds	r3, r7, #6
    1a4c:	881b      	ldrh	r3, [r3, #0]
}
    1a4e:	0018      	movs	r0, r3
    1a50:	46bd      	mov	sp, r7
    1a52:	b006      	add	sp, #24
    1a54:	bd80      	pop	{r7, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	00006e40 	.word	0x00006e40
    1a5c:	00002077 	.word	0x00002077
    1a60:	000044cd 	.word	0x000044cd

00001a64 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	af00      	add	r7, sp, #0
    1a6a:	60f8      	str	r0, [r7, #12]
    1a6c:	60b9      	str	r1, [r7, #8]
    1a6e:	1dbb      	adds	r3, r7, #6
    1a70:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	2b00      	cmp	r3, #0
    1a76:	d004      	beq.n	1a82 <io_write+0x1e>
    1a78:	68bb      	ldr	r3, [r7, #8]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d001      	beq.n	1a82 <io_write+0x1e>
    1a7e:	2301      	movs	r3, #1
    1a80:	e000      	b.n	1a84 <io_write+0x20>
    1a82:	2300      	movs	r3, #0
    1a84:	1c1a      	adds	r2, r3, #0
    1a86:	2301      	movs	r3, #1
    1a88:	4013      	ands	r3, r2
    1a8a:	b2db      	uxtb	r3, r3
    1a8c:	4908      	ldr	r1, [pc, #32]	; (1ab0 <io_write+0x4c>)
    1a8e:	2234      	movs	r2, #52	; 0x34
    1a90:	0018      	movs	r0, r3
    1a92:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <io_write+0x50>)
    1a94:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	1dba      	adds	r2, r7, #6
    1a9c:	8812      	ldrh	r2, [r2, #0]
    1a9e:	68b9      	ldr	r1, [r7, #8]
    1aa0:	68f8      	ldr	r0, [r7, #12]
    1aa2:	4798      	blx	r3
    1aa4:	0003      	movs	r3, r0
}
    1aa6:	0018      	movs	r0, r3
    1aa8:	46bd      	mov	sp, r7
    1aaa:	b004      	add	sp, #16
    1aac:	bd80      	pop	{r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	00006e60 	.word	0x00006e60
    1ab4:	00002077 	.word	0x00002077

00001ab8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	60f8      	str	r0, [r7, #12]
    1ac0:	60b9      	str	r1, [r7, #8]
    1ac2:	1dbb      	adds	r3, r7, #6
    1ac4:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d004      	beq.n	1ad6 <io_read+0x1e>
    1acc:	68bb      	ldr	r3, [r7, #8]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d001      	beq.n	1ad6 <io_read+0x1e>
    1ad2:	2301      	movs	r3, #1
    1ad4:	e000      	b.n	1ad8 <io_read+0x20>
    1ad6:	2300      	movs	r3, #0
    1ad8:	1c1a      	adds	r2, r3, #0
    1ada:	2301      	movs	r3, #1
    1adc:	4013      	ands	r3, r2
    1ade:	b2db      	uxtb	r3, r3
    1ae0:	4908      	ldr	r1, [pc, #32]	; (1b04 <io_read+0x4c>)
    1ae2:	223d      	movs	r2, #61	; 0x3d
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b08      	ldr	r3, [pc, #32]	; (1b08 <io_read+0x50>)
    1ae8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	1dba      	adds	r2, r7, #6
    1af0:	8812      	ldrh	r2, [r2, #0]
    1af2:	68b9      	ldr	r1, [r7, #8]
    1af4:	68f8      	ldr	r0, [r7, #12]
    1af6:	4798      	blx	r3
    1af8:	0003      	movs	r3, r0
}
    1afa:	0018      	movs	r0, r3
    1afc:	46bd      	mov	sp, r7
    1afe:	b004      	add	sp, #16
    1b00:	bd80      	pop	{r7, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00006e60 	.word	0x00006e60
    1b08:	00002077 	.word	0x00002077

00001b0c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	681b      	ldr	r3, [r3, #0]
}
    1b18:	0018      	movs	r0, r3
    1b1a:	46bd      	mov	sp, r7
    1b1c:	b002      	add	sp, #8
    1b1e:	bd80      	pop	{r7, pc}

00001b20 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d002      	beq.n	1b34 <list_get_next_element+0x14>
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	e000      	b.n	1b36 <list_get_next_element+0x16>
    1b34:	2300      	movs	r3, #0
}
    1b36:	0018      	movs	r0, r3
    1b38:	46bd      	mov	sp, r7
    1b3a:	b002      	add	sp, #8
    1b3c:	bd80      	pop	{r7, pc}
	...

00001b40 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b084      	sub	sp, #16
    1b44:	af00      	add	r7, sp, #0
    1b46:	60f8      	str	r0, [r7, #12]
    1b48:	60b9      	str	r1, [r7, #8]
    1b4a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d004      	beq.n	1b5c <timer_init+0x1c>
    1b52:	68bb      	ldr	r3, [r7, #8]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d001      	beq.n	1b5c <timer_init+0x1c>
    1b58:	2301      	movs	r3, #1
    1b5a:	e000      	b.n	1b5e <timer_init+0x1e>
    1b5c:	2300      	movs	r3, #0
    1b5e:	1c1a      	adds	r2, r3, #0
    1b60:	2301      	movs	r3, #1
    1b62:	4013      	ands	r3, r2
    1b64:	b2db      	uxtb	r3, r3
    1b66:	490b      	ldr	r1, [pc, #44]	; (1b94 <timer_init+0x54>)
    1b68:	223b      	movs	r2, #59	; 0x3b
    1b6a:	0018      	movs	r0, r3
    1b6c:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <timer_init+0x58>)
    1b6e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	68ba      	ldr	r2, [r7, #8]
    1b74:	0011      	movs	r1, r2
    1b76:	0018      	movs	r0, r3
    1b78:	4b08      	ldr	r3, [pc, #32]	; (1b9c <timer_init+0x5c>)
    1b7a:	4798      	blx	r3
	descr->time                           = 0;
    1b7c:	68fb      	ldr	r3, [r7, #12]
    1b7e:	2200      	movs	r2, #0
    1b80:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	4a06      	ldr	r2, [pc, #24]	; (1ba0 <timer_init+0x60>)
    1b86:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1b88:	2300      	movs	r3, #0
}
    1b8a:	0018      	movs	r0, r3
    1b8c:	46bd      	mov	sp, r7
    1b8e:	b004      	add	sp, #16
    1b90:	bd80      	pop	{r7, pc}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	00006e74 	.word	0x00006e74
    1b98:	00002077 	.word	0x00002077
    1b9c:	00004b65 	.word	0x00004b65
    1ba0:	00001c69 	.word	0x00001c69

00001ba4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	b088      	sub	sp, #32
    1ba8:	af00      	add	r7, sp, #0
    1baa:	60f8      	str	r0, [r7, #12]
    1bac:	60b9      	str	r1, [r7, #8]
    1bae:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1bb0:	2300      	movs	r3, #0
    1bb2:	61bb      	str	r3, [r7, #24]
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b27      	ldr	r3, [pc, #156]	; (1c58 <timer_add_timer_task+0xb4>)
    1bba:	4798      	blx	r3
    1bbc:	0003      	movs	r3, r0
    1bbe:	613b      	str	r3, [r7, #16]

	if (!head) {
    1bc0:	693b      	ldr	r3, [r7, #16]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d106      	bne.n	1bd4 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1bc6:	68ba      	ldr	r2, [r7, #8]
    1bc8:	68fb      	ldr	r3, [r7, #12]
    1bca:	0011      	movs	r1, r2
    1bcc:	0018      	movs	r0, r3
    1bce:	4b23      	ldr	r3, [pc, #140]	; (1c5c <timer_add_timer_task+0xb8>)
    1bd0:	4798      	blx	r3
		return;
    1bd2:	e03d      	b.n	1c50 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1bd4:	693b      	ldr	r3, [r7, #16]
    1bd6:	61fb      	str	r3, [r7, #28]
    1bd8:	e024      	b.n	1c24 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    1bda:	69fb      	ldr	r3, [r7, #28]
    1bdc:	685a      	ldr	r2, [r3, #4]
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	429a      	cmp	r2, r3
    1be2:	d808      	bhi.n	1bf6 <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1be4:	69fb      	ldr	r3, [r7, #28]
    1be6:	689a      	ldr	r2, [r3, #8]
    1be8:	69fb      	ldr	r3, [r7, #28]
    1bea:	6859      	ldr	r1, [r3, #4]
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	1acb      	subs	r3, r1, r3
    1bf0:	18d3      	adds	r3, r2, r3
    1bf2:	617b      	str	r3, [r7, #20]
    1bf4:	e009      	b.n	1c0a <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1bf6:	69fb      	ldr	r3, [r7, #28]
    1bf8:	689a      	ldr	r2, [r3, #8]
    1bfa:	69fb      	ldr	r3, [r7, #28]
    1bfc:	685b      	ldr	r3, [r3, #4]
    1bfe:	18d2      	adds	r2, r2, r3
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	425b      	negs	r3, r3
    1c04:	18d3      	adds	r3, r2, r3
    1c06:	3301      	adds	r3, #1
    1c08:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1c0a:	68bb      	ldr	r3, [r7, #8]
    1c0c:	689a      	ldr	r2, [r3, #8]
    1c0e:	697b      	ldr	r3, [r7, #20]
    1c10:	429a      	cmp	r2, r3
    1c12:	d90b      	bls.n	1c2c <timer_add_timer_task+0x88>
			break;
		prev = it;
    1c14:	69fb      	ldr	r3, [r7, #28]
    1c16:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c18:	69fb      	ldr	r3, [r7, #28]
    1c1a:	0018      	movs	r0, r3
    1c1c:	4b10      	ldr	r3, [pc, #64]	; (1c60 <timer_add_timer_task+0xbc>)
    1c1e:	4798      	blx	r3
    1c20:	0003      	movs	r3, r0
    1c22:	61fb      	str	r3, [r7, #28]
    1c24:	69fb      	ldr	r3, [r7, #28]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d1d7      	bne.n	1bda <timer_add_timer_task+0x36>
    1c2a:	e000      	b.n	1c2e <timer_add_timer_task+0x8a>
			break;
    1c2c:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    1c2e:	69fa      	ldr	r2, [r7, #28]
    1c30:	693b      	ldr	r3, [r7, #16]
    1c32:	429a      	cmp	r2, r3
    1c34:	d106      	bne.n	1c44 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    1c36:	68ba      	ldr	r2, [r7, #8]
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	0011      	movs	r1, r2
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b07      	ldr	r3, [pc, #28]	; (1c5c <timer_add_timer_task+0xb8>)
    1c40:	4798      	blx	r3
    1c42:	e005      	b.n	1c50 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    1c44:	68ba      	ldr	r2, [r7, #8]
    1c46:	69bb      	ldr	r3, [r7, #24]
    1c48:	0011      	movs	r1, r2
    1c4a:	0018      	movs	r0, r3
    1c4c:	4b05      	ldr	r3, [pc, #20]	; (1c64 <timer_add_timer_task+0xc0>)
    1c4e:	4798      	blx	r3
	}
}
    1c50:	46bd      	mov	sp, r7
    1c52:	b008      	add	sp, #32
    1c54:	bd80      	pop	{r7, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	00001b0d 	.word	0x00001b0d
    1c5c:	000021fd 	.word	0x000021fd
    1c60:	00001b21 	.word	0x00001b21
    1c64:	00002255 	.word	0x00002255

00001c68 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	b086      	sub	sp, #24
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1c74:	693b      	ldr	r3, [r7, #16]
    1c76:	3314      	adds	r3, #20
    1c78:	0018      	movs	r0, r3
    1c7a:	4b29      	ldr	r3, [pc, #164]	; (1d20 <timer_process_counted+0xb8>)
    1c7c:	4798      	blx	r3
    1c7e:	0003      	movs	r3, r0
    1c80:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1c82:	693b      	ldr	r3, [r7, #16]
    1c84:	691b      	ldr	r3, [r3, #16]
    1c86:	1c5a      	adds	r2, r3, #1
    1c88:	693b      	ldr	r3, [r7, #16]
    1c8a:	611a      	str	r2, [r3, #16]
    1c8c:	693b      	ldr	r3, [r7, #16]
    1c8e:	691b      	ldr	r3, [r3, #16]
    1c90:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1c92:	693b      	ldr	r3, [r7, #16]
    1c94:	7e1b      	ldrb	r3, [r3, #24]
    1c96:	b2db      	uxtb	r3, r3
    1c98:	001a      	movs	r2, r3
    1c9a:	2301      	movs	r3, #1
    1c9c:	4013      	ands	r3, r2
    1c9e:	d106      	bne.n	1cae <timer_process_counted+0x46>
    1ca0:	693b      	ldr	r3, [r7, #16]
    1ca2:	7e1b      	ldrb	r3, [r3, #24]
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	001a      	movs	r2, r3
    1ca8:	2302      	movs	r3, #2
    1caa:	4013      	ands	r3, r2
    1cac:	d029      	beq.n	1d02 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1cae:	693b      	ldr	r3, [r7, #16]
    1cb0:	7e1b      	ldrb	r3, [r3, #24]
    1cb2:	b2db      	uxtb	r3, r3
    1cb4:	2202      	movs	r2, #2
    1cb6:	4313      	orrs	r3, r2
    1cb8:	b2da      	uxtb	r2, r3
    1cba:	693b      	ldr	r3, [r7, #16]
    1cbc:	761a      	strb	r2, [r3, #24]
		return;
    1cbe:	e02b      	b.n	1d18 <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1cc4:	693b      	ldr	r3, [r7, #16]
    1cc6:	3314      	adds	r3, #20
    1cc8:	0018      	movs	r0, r3
    1cca:	4b16      	ldr	r3, [pc, #88]	; (1d24 <timer_process_counted+0xbc>)
    1ccc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1cce:	68bb      	ldr	r3, [r7, #8]
    1cd0:	7c1b      	ldrb	r3, [r3, #16]
    1cd2:	2b01      	cmp	r3, #1
    1cd4:	d109      	bne.n	1cea <timer_process_counted+0x82>
			tmp->time_label = time;
    1cd6:	68bb      	ldr	r3, [r7, #8]
    1cd8:	68fa      	ldr	r2, [r7, #12]
    1cda:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1cdc:	693b      	ldr	r3, [r7, #16]
    1cde:	3314      	adds	r3, #20
    1ce0:	68fa      	ldr	r2, [r7, #12]
    1ce2:	68b9      	ldr	r1, [r7, #8]
    1ce4:	0018      	movs	r0, r3
    1ce6:	4b10      	ldr	r3, [pc, #64]	; (1d28 <timer_process_counted+0xc0>)
    1ce8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1cea:	693b      	ldr	r3, [r7, #16]
    1cec:	3314      	adds	r3, #20
    1cee:	0018      	movs	r0, r3
    1cf0:	4b0b      	ldr	r3, [pc, #44]	; (1d20 <timer_process_counted+0xb8>)
    1cf2:	4798      	blx	r3
    1cf4:	0003      	movs	r3, r0
    1cf6:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1cf8:	68bb      	ldr	r3, [r7, #8]
    1cfa:	68db      	ldr	r3, [r3, #12]
    1cfc:	68ba      	ldr	r2, [r7, #8]
    1cfe:	0010      	movs	r0, r2
    1d00:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1d02:	697b      	ldr	r3, [r7, #20]
    1d04:	2b00      	cmp	r3, #0
    1d06:	d007      	beq.n	1d18 <timer_process_counted+0xb0>
    1d08:	697b      	ldr	r3, [r7, #20]
    1d0a:	685b      	ldr	r3, [r3, #4]
    1d0c:	68fa      	ldr	r2, [r7, #12]
    1d0e:	1ad2      	subs	r2, r2, r3
    1d10:	697b      	ldr	r3, [r7, #20]
    1d12:	689b      	ldr	r3, [r3, #8]
    1d14:	429a      	cmp	r2, r3
    1d16:	d2d3      	bcs.n	1cc0 <timer_process_counted+0x58>
	}
}
    1d18:	46bd      	mov	sp, r7
    1d1a:	b006      	add	sp, #24
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00001b0d 	.word	0x00001b0d
    1d24:	00002275 	.word	0x00002275
    1d28:	00001ba5 	.word	0x00001ba5

00001d2c <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    1d2c:	b580      	push	{r7, lr}
    1d2e:	b086      	sub	sp, #24
    1d30:	af00      	add	r7, sp, #0
    1d32:	60f8      	str	r0, [r7, #12]
    1d34:	60b9      	str	r1, [r7, #8]
    1d36:	607a      	str	r2, [r7, #4]
    1d38:	001a      	movs	r2, r3
    1d3a:	1cbb      	adds	r3, r7, #2
    1d3c:	801a      	strh	r2, [r3, #0]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d00b      	beq.n	1d5c <usart_async_init+0x30>
    1d44:	68bb      	ldr	r3, [r7, #8]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d008      	beq.n	1d5c <usart_async_init+0x30>
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d005      	beq.n	1d5c <usart_async_init+0x30>
    1d50:	1cbb      	adds	r3, r7, #2
    1d52:	881b      	ldrh	r3, [r3, #0]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d001      	beq.n	1d5c <usart_async_init+0x30>
    1d58:	2301      	movs	r3, #1
    1d5a:	e000      	b.n	1d5e <usart_async_init+0x32>
    1d5c:	2300      	movs	r3, #0
    1d5e:	1c1a      	adds	r2, r3, #0
    1d60:	2301      	movs	r3, #1
    1d62:	4013      	ands	r3, r2
    1d64:	b2db      	uxtb	r3, r3
    1d66:	491c      	ldr	r1, [pc, #112]	; (1dd8 <usart_async_init+0xac>)
    1d68:	223a      	movs	r2, #58	; 0x3a
    1d6a:	0018      	movs	r0, r3
    1d6c:	4b1b      	ldr	r3, [pc, #108]	; (1ddc <usart_async_init+0xb0>)
    1d6e:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1d70:	68fb      	ldr	r3, [r7, #12]
    1d72:	3334      	adds	r3, #52	; 0x34
    1d74:	0018      	movs	r0, r3
    1d76:	1cbb      	adds	r3, r7, #2
    1d78:	881a      	ldrh	r2, [r3, #0]
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	0019      	movs	r1, r3
    1d7e:	4b18      	ldr	r3, [pc, #96]	; (1de0 <usart_async_init+0xb4>)
    1d80:	4798      	blx	r3
    1d82:	1e03      	subs	r3, r0, #0
    1d84:	d002      	beq.n	1d8c <usart_async_init+0x60>
		return ERR_INVALID_ARG;
    1d86:	230d      	movs	r3, #13
    1d88:	425b      	negs	r3, r3
    1d8a:	e020      	b.n	1dce <usart_async_init+0xa2>
	}
	init_status = _usart_async_init(&descr->device, hw);
    1d8c:	68fb      	ldr	r3, [r7, #12]
    1d8e:	3308      	adds	r3, #8
    1d90:	68ba      	ldr	r2, [r7, #8]
    1d92:	0011      	movs	r1, r2
    1d94:	0018      	movs	r0, r3
    1d96:	4b13      	ldr	r3, [pc, #76]	; (1de4 <usart_async_init+0xb8>)
    1d98:	4798      	blx	r3
    1d9a:	0003      	movs	r3, r0
    1d9c:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1d9e:	697b      	ldr	r3, [r7, #20]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d001      	beq.n	1da8 <usart_async_init+0x7c>
		return init_status;
    1da4:	697b      	ldr	r3, [r7, #20]
    1da6:	e012      	b.n	1dce <usart_async_init+0xa2>
	}

	descr->io.read  = usart_async_read;
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	4a0f      	ldr	r2, [pc, #60]	; (1de8 <usart_async_init+0xbc>)
    1dac:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	4a0e      	ldr	r2, [pc, #56]	; (1dec <usart_async_init+0xc0>)
    1db2:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	4a0e      	ldr	r2, [pc, #56]	; (1df0 <usart_async_init+0xc4>)
    1db8:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1dba:	68fb      	ldr	r3, [r7, #12]
    1dbc:	4a0d      	ldr	r2, [pc, #52]	; (1df4 <usart_async_init+0xc8>)
    1dbe:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1dc0:	68fb      	ldr	r3, [r7, #12]
    1dc2:	4a0d      	ldr	r2, [pc, #52]	; (1df8 <usart_async_init+0xcc>)
    1dc4:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	4a0c      	ldr	r2, [pc, #48]	; (1dfc <usart_async_init+0xd0>)
    1dca:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1dcc:	2300      	movs	r3, #0
}
    1dce:	0018      	movs	r0, r3
    1dd0:	46bd      	mov	sp, r7
    1dd2:	b006      	add	sp, #24
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00006e8c 	.word	0x00006e8c
    1ddc:	00002077 	.word	0x00002077
    1de0:	000022a5 	.word	0x000022a5
    1de4:	00003675 	.word	0x00003675
    1de8:	00001e99 	.word	0x00001e99
    1dec:	00001e01 	.word	0x00001e01
    1df0:	00001f65 	.word	0x00001f65
    1df4:	00002005 	.word	0x00002005
    1df8:	00001fd5 	.word	0x00001fd5
    1dfc:	00002049 	.word	0x00002049

00001e00 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b086      	sub	sp, #24
    1e04:	af00      	add	r7, sp, #0
    1e06:	60f8      	str	r0, [r7, #12]
    1e08:	60b9      	str	r1, [r7, #8]
    1e0a:	1dbb      	adds	r3, r7, #6
    1e0c:	801a      	strh	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1e0e:	68fb      	ldr	r3, [r7, #12]
    1e10:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    1e12:	697b      	ldr	r3, [r7, #20]
    1e14:	2b00      	cmp	r3, #0
    1e16:	d008      	beq.n	1e2a <usart_async_write+0x2a>
    1e18:	68bb      	ldr	r3, [r7, #8]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d005      	beq.n	1e2a <usart_async_write+0x2a>
    1e1e:	1dbb      	adds	r3, r7, #6
    1e20:	881b      	ldrh	r3, [r3, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d001      	beq.n	1e2a <usart_async_write+0x2a>
    1e26:	2301      	movs	r3, #1
    1e28:	e000      	b.n	1e2c <usart_async_write+0x2c>
    1e2a:	2300      	movs	r3, #0
    1e2c:	1c1a      	adds	r2, r3, #0
    1e2e:	2301      	movs	r3, #1
    1e30:	4013      	ands	r3, r2
    1e32:	b2d8      	uxtb	r0, r3
    1e34:	233c      	movs	r3, #60	; 0x3c
    1e36:	33ff      	adds	r3, #255	; 0xff
    1e38:	001a      	movs	r2, r3
    1e3a:	4b14      	ldr	r3, [pc, #80]	; (1e8c <usart_async_write+0x8c>)
    1e3c:	0019      	movs	r1, r3
    1e3e:	4b14      	ldr	r3, [pc, #80]	; (1e90 <usart_async_write+0x90>)
    1e40:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1e42:	697b      	ldr	r3, [r7, #20]
    1e44:	2244      	movs	r2, #68	; 0x44
    1e46:	5a9a      	ldrh	r2, [r3, r2]
    1e48:	697b      	ldr	r3, [r7, #20]
    1e4a:	214c      	movs	r1, #76	; 0x4c
    1e4c:	5a5b      	ldrh	r3, [r3, r1]
    1e4e:	429a      	cmp	r2, r3
    1e50:	d002      	beq.n	1e58 <usart_async_write+0x58>
		return ERR_NO_RESOURCE;
    1e52:	231c      	movs	r3, #28
    1e54:	425b      	negs	r3, r3
    1e56:	e015      	b.n	1e84 <usart_async_write+0x84>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	68ba      	ldr	r2, [r7, #8]
    1e5c:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1e5e:	697b      	ldr	r3, [r7, #20]
    1e60:	1dba      	adds	r2, r7, #6
    1e62:	214c      	movs	r1, #76	; 0x4c
    1e64:	8812      	ldrh	r2, [r2, #0]
    1e66:	525a      	strh	r2, [r3, r1]
	descr->tx_por           = 0;
    1e68:	697b      	ldr	r3, [r7, #20]
    1e6a:	2244      	movs	r2, #68	; 0x44
    1e6c:	2100      	movs	r1, #0
    1e6e:	5299      	strh	r1, [r3, r2]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1e70:	697b      	ldr	r3, [r7, #20]
    1e72:	2201      	movs	r2, #1
    1e74:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1e76:	697b      	ldr	r3, [r7, #20]
    1e78:	3308      	adds	r3, #8
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b05      	ldr	r3, [pc, #20]	; (1e94 <usart_async_write+0x94>)
    1e7e:	4798      	blx	r3

	return (int32_t)length;
    1e80:	1dbb      	adds	r3, r7, #6
    1e82:	881b      	ldrh	r3, [r3, #0]
}
    1e84:	0018      	movs	r0, r3
    1e86:	46bd      	mov	sp, r7
    1e88:	b006      	add	sp, #24
    1e8a:	bd80      	pop	{r7, pc}
    1e8c:	00006e8c 	.word	0x00006e8c
    1e90:	00002077 	.word	0x00002077
    1e94:	00003745 	.word	0x00003745

00001e98 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b088      	sub	sp, #32
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	60f8      	str	r0, [r7, #12]
    1ea0:	60b9      	str	r1, [r7, #8]
    1ea2:	1dbb      	adds	r3, r7, #6
    1ea4:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    1ea6:	231e      	movs	r3, #30
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	2200      	movs	r2, #0
    1eac:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    1eb2:	69bb      	ldr	r3, [r7, #24]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d008      	beq.n	1eca <usart_async_read+0x32>
    1eb8:	68bb      	ldr	r3, [r7, #8]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d005      	beq.n	1eca <usart_async_read+0x32>
    1ebe:	1dbb      	adds	r3, r7, #6
    1ec0:	881b      	ldrh	r3, [r3, #0]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d001      	beq.n	1eca <usart_async_read+0x32>
    1ec6:	2301      	movs	r3, #1
    1ec8:	e000      	b.n	1ecc <usart_async_read+0x34>
    1eca:	2300      	movs	r3, #0
    1ecc:	1c1a      	adds	r2, r3, #0
    1ece:	2301      	movs	r3, #1
    1ed0:	4013      	ands	r3, r2
    1ed2:	b2d8      	uxtb	r0, r3
    1ed4:	23ac      	movs	r3, #172	; 0xac
    1ed6:	005a      	lsls	r2, r3, #1
    1ed8:	4b1c      	ldr	r3, [pc, #112]	; (1f4c <usart_async_read+0xb4>)
    1eda:	0019      	movs	r1, r3
    1edc:	4b1c      	ldr	r3, [pc, #112]	; (1f50 <usart_async_read+0xb8>)
    1ede:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1ee0:	2310      	movs	r3, #16
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	0018      	movs	r0, r3
    1ee6:	4b1b      	ldr	r3, [pc, #108]	; (1f54 <usart_async_read+0xbc>)
    1ee8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1eea:	69bb      	ldr	r3, [r7, #24]
    1eec:	3334      	adds	r3, #52	; 0x34
    1eee:	0018      	movs	r0, r3
    1ef0:	4b19      	ldr	r3, [pc, #100]	; (1f58 <usart_async_read+0xc0>)
    1ef2:	4798      	blx	r3
    1ef4:	0003      	movs	r3, r0
    1ef6:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1ef8:	2310      	movs	r3, #16
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	0018      	movs	r0, r3
    1efe:	4b17      	ldr	r3, [pc, #92]	; (1f5c <usart_async_read+0xc4>)
    1f00:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1f02:	e00f      	b.n	1f24 <usart_async_read+0x8c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1f04:	69bb      	ldr	r3, [r7, #24]
    1f06:	3334      	adds	r3, #52	; 0x34
    1f08:	0018      	movs	r0, r3
    1f0a:	231e      	movs	r3, #30
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	881b      	ldrh	r3, [r3, #0]
    1f10:	221e      	movs	r2, #30
    1f12:	18ba      	adds	r2, r7, r2
    1f14:	1c59      	adds	r1, r3, #1
    1f16:	8011      	strh	r1, [r2, #0]
    1f18:	001a      	movs	r2, r3
    1f1a:	68bb      	ldr	r3, [r7, #8]
    1f1c:	189b      	adds	r3, r3, r2
    1f1e:	0019      	movs	r1, r3
    1f20:	4b0f      	ldr	r3, [pc, #60]	; (1f60 <usart_async_read+0xc8>)
    1f22:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1f24:	231e      	movs	r3, #30
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	881a      	ldrh	r2, [r3, #0]
    1f2a:	697b      	ldr	r3, [r7, #20]
    1f2c:	429a      	cmp	r2, r3
    1f2e:	d206      	bcs.n	1f3e <usart_async_read+0xa6>
    1f30:	231e      	movs	r3, #30
    1f32:	18fa      	adds	r2, r7, r3
    1f34:	1dbb      	adds	r3, r7, #6
    1f36:	8812      	ldrh	r2, [r2, #0]
    1f38:	881b      	ldrh	r3, [r3, #0]
    1f3a:	429a      	cmp	r2, r3
    1f3c:	d3e2      	bcc.n	1f04 <usart_async_read+0x6c>
	}

	return (int32_t)was_read;
    1f3e:	231e      	movs	r3, #30
    1f40:	18fb      	adds	r3, r7, r3
    1f42:	881b      	ldrh	r3, [r3, #0]
}
    1f44:	0018      	movs	r0, r3
    1f46:	46bd      	mov	sp, r7
    1f48:	b008      	add	sp, #32
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00006e8c 	.word	0x00006e8c
    1f50:	00002077 	.word	0x00002077
    1f54:	00000f15 	.word	0x00000f15
    1f58:	00002401 	.word	0x00002401
    1f5c:	00000f37 	.word	0x00000f37
    1f60:	00002319 	.word	0x00002319

00001f64 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1f64:	b5b0      	push	{r4, r5, r7, lr}
    1f66:	b084      	sub	sp, #16
    1f68:	af00      	add	r7, sp, #0
    1f6a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	3b08      	subs	r3, #8
    1f70:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    1f72:	68fb      	ldr	r3, [r7, #12]
    1f74:	2244      	movs	r2, #68	; 0x44
    1f76:	5a9a      	ldrh	r2, [r3, r2]
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	214c      	movs	r1, #76	; 0x4c
    1f7c:	5a5b      	ldrh	r3, [r3, r1]
    1f7e:	429a      	cmp	r2, r3
    1f80:	d018      	beq.n	1fb4 <usart_process_byte_sent+0x50>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1f82:	68fb      	ldr	r3, [r7, #12]
    1f84:	3308      	adds	r3, #8
    1f86:	001c      	movs	r4, r3
    1f88:	68fb      	ldr	r3, [r7, #12]
    1f8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1f8c:	68fb      	ldr	r3, [r7, #12]
    1f8e:	2144      	movs	r1, #68	; 0x44
    1f90:	5a5b      	ldrh	r3, [r3, r1]
    1f92:	1c59      	adds	r1, r3, #1
    1f94:	b28d      	uxth	r5, r1
    1f96:	68f9      	ldr	r1, [r7, #12]
    1f98:	2044      	movs	r0, #68	; 0x44
    1f9a:	520d      	strh	r5, [r1, r0]
    1f9c:	18d3      	adds	r3, r2, r3
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	0019      	movs	r1, r3
    1fa2:	0020      	movs	r0, r4
    1fa4:	4b08      	ldr	r3, [pc, #32]	; (1fc8 <usart_process_byte_sent+0x64>)
    1fa6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1fa8:	68fb      	ldr	r3, [r7, #12]
    1faa:	3308      	adds	r3, #8
    1fac:	0018      	movs	r0, r3
    1fae:	4b07      	ldr	r3, [pc, #28]	; (1fcc <usart_process_byte_sent+0x68>)
    1fb0:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1fb2:	e004      	b.n	1fbe <usart_process_byte_sent+0x5a>
		_usart_async_enable_tx_done_irq(&descr->device);
    1fb4:	68fb      	ldr	r3, [r7, #12]
    1fb6:	3308      	adds	r3, #8
    1fb8:	0018      	movs	r0, r3
    1fba:	4b05      	ldr	r3, [pc, #20]	; (1fd0 <usart_process_byte_sent+0x6c>)
    1fbc:	4798      	blx	r3
}
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	46bd      	mov	sp, r7
    1fc2:	b004      	add	sp, #16
    1fc4:	bdb0      	pop	{r4, r5, r7, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	00003719 	.word	0x00003719
    1fcc:	00003745 	.word	0x00003745
    1fd0:	00003765 	.word	0x00003765

00001fd4 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b084      	sub	sp, #16
    1fd8:	af00      	add	r7, sp, #0
    1fda:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1fdc:	687b      	ldr	r3, [r7, #4]
    1fde:	3b08      	subs	r3, #8
    1fe0:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	2200      	movs	r2, #0
    1fe6:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1fe8:	68fb      	ldr	r3, [r7, #12]
    1fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1fec:	2b00      	cmp	r3, #0
    1fee:	d004      	beq.n	1ffa <usart_transmission_complete+0x26>
		descr->usart_cb.tx_done(descr);
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ff4:	68fa      	ldr	r2, [r7, #12]
    1ff6:	0010      	movs	r0, r2
    1ff8:	4798      	blx	r3
	}
}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	46bd      	mov	sp, r7
    1ffe:	b004      	add	sp, #16
    2000:	bd80      	pop	{r7, pc}
	...

00002004 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    2004:	b580      	push	{r7, lr}
    2006:	b084      	sub	sp, #16
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
    200c:	000a      	movs	r2, r1
    200e:	1cfb      	adds	r3, r7, #3
    2010:	701a      	strb	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	3b08      	subs	r3, #8
    2016:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	3334      	adds	r3, #52	; 0x34
    201c:	001a      	movs	r2, r3
    201e:	1cfb      	adds	r3, r7, #3
    2020:	781b      	ldrb	r3, [r3, #0]
    2022:	0019      	movs	r1, r3
    2024:	0010      	movs	r0, r2
    2026:	4b07      	ldr	r3, [pc, #28]	; (2044 <usart_fill_rx_buffer+0x40>)
    2028:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    202e:	2b00      	cmp	r3, #0
    2030:	d004      	beq.n	203c <usart_fill_rx_buffer+0x38>
		descr->usart_cb.rx_done(descr);
    2032:	68fb      	ldr	r3, [r7, #12]
    2034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	0010      	movs	r0, r2
    203a:	4798      	blx	r3
	}
}
    203c:	46c0      	nop			; (mov r8, r8)
    203e:	46bd      	mov	sp, r7
    2040:	b004      	add	sp, #16
    2042:	bd80      	pop	{r7, pc}
    2044:	0000238d 	.word	0x0000238d

00002048 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    2048:	b580      	push	{r7, lr}
    204a:	b084      	sub	sp, #16
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	3b08      	subs	r3, #8
    2054:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	2200      	movs	r2, #0
    205a:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2060:	2b00      	cmp	r3, #0
    2062:	d004      	beq.n	206e <usart_error+0x26>
		descr->usart_cb.error(descr);
    2064:	68fb      	ldr	r3, [r7, #12]
    2066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2068:	68fa      	ldr	r2, [r7, #12]
    206a:	0010      	movs	r0, r2
    206c:	4798      	blx	r3
	}
}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}

00002076 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2076:	b580      	push	{r7, lr}
    2078:	b084      	sub	sp, #16
    207a:	af00      	add	r7, sp, #0
    207c:	60b9      	str	r1, [r7, #8]
    207e:	607a      	str	r2, [r7, #4]
    2080:	230f      	movs	r3, #15
    2082:	18fb      	adds	r3, r7, r3
    2084:	1c02      	adds	r2, r0, #0
    2086:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    2088:	230f      	movs	r3, #15
    208a:	18fb      	adds	r3, r7, r3
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	2201      	movs	r2, #1
    2090:	4053      	eors	r3, r2
    2092:	b2db      	uxtb	r3, r3
    2094:	2b00      	cmp	r3, #0
    2096:	d000      	beq.n	209a <assert+0x24>
		__asm("BKPT #0");
    2098:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	46bd      	mov	sp, r7
    209e:	b004      	add	sp, #16
    20a0:	bd80      	pop	{r7, pc}
	...

000020a4 <event_subscribe>:

static struct list_descriptor events;
static uint8_t                subscribed[EVENT_MASK_SIZE];

int32_t event_subscribe(struct event *const event, const event_id_t id, event_cb_t cb)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	b086      	sub	sp, #24
    20a8:	af00      	add	r7, sp, #0
    20aa:	60f8      	str	r0, [r7, #12]
    20ac:	607a      	str	r2, [r7, #4]
    20ae:	230b      	movs	r3, #11
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	1c0a      	adds	r2, r1, #0
    20b4:	701a      	strb	r2, [r3, #0]
	/* get byte and bit number of the given event in the event mask */
	const uint8_t position = id >> 3;
    20b6:	2317      	movs	r3, #23
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	220b      	movs	r2, #11
    20bc:	18ba      	adds	r2, r7, r2
    20be:	7812      	ldrb	r2, [r2, #0]
    20c0:	08d2      	lsrs	r2, r2, #3
    20c2:	701a      	strb	r2, [r3, #0]
	const uint8_t mask     = 1 << (id & 0x7);
    20c4:	230b      	movs	r3, #11
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	2207      	movs	r2, #7
    20cc:	4013      	ands	r3, r2
    20ce:	2201      	movs	r2, #1
    20d0:	409a      	lsls	r2, r3
    20d2:	2316      	movs	r3, #22
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	701a      	strb	r2, [r3, #0]

	ASSERT(event && cb && (id < EVENT_MAX_AMOUNT));
    20d8:	68fb      	ldr	r3, [r7, #12]
    20da:	2b00      	cmp	r3, #0
    20dc:	d009      	beq.n	20f2 <event_subscribe+0x4e>
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d006      	beq.n	20f2 <event_subscribe+0x4e>
    20e4:	230b      	movs	r3, #11
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	2b07      	cmp	r3, #7
    20ec:	d801      	bhi.n	20f2 <event_subscribe+0x4e>
    20ee:	2301      	movs	r3, #1
    20f0:	e000      	b.n	20f4 <event_subscribe+0x50>
    20f2:	2300      	movs	r3, #0
    20f4:	1c1a      	adds	r2, r3, #0
    20f6:	2301      	movs	r3, #1
    20f8:	4013      	ands	r3, r2
    20fa:	b2db      	uxtb	r3, r3
    20fc:	492b      	ldr	r1, [pc, #172]	; (21ac <event_subscribe+0x108>)
    20fe:	2231      	movs	r2, #49	; 0x31
    2100:	0018      	movs	r0, r3
    2102:	4b2b      	ldr	r3, [pc, #172]	; (21b0 <event_subscribe+0x10c>)
    2104:	4798      	blx	r3

	if (event->mask[position] & mask) {
    2106:	2317      	movs	r3, #23
    2108:	18fb      	adds	r3, r7, r3
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	68fa      	ldr	r2, [r7, #12]
    210e:	18d3      	adds	r3, r2, r3
    2110:	791b      	ldrb	r3, [r3, #4]
    2112:	2216      	movs	r2, #22
    2114:	18ba      	adds	r2, r7, r2
    2116:	7812      	ldrb	r2, [r2, #0]
    2118:	4013      	ands	r3, r2
    211a:	b2db      	uxtb	r3, r3
    211c:	2b00      	cmp	r3, #0
    211e:	d002      	beq.n	2126 <event_subscribe+0x82>
		return ERR_NO_CHANGE; /* Already subscribed */
    2120:	2302      	movs	r3, #2
    2122:	425b      	negs	r3, r3
    2124:	e03e      	b.n	21a4 <event_subscribe+0x100>
	}

	if (!is_list_element(&events, event)) {
    2126:	68fa      	ldr	r2, [r7, #12]
    2128:	4b22      	ldr	r3, [pc, #136]	; (21b4 <event_subscribe+0x110>)
    212a:	0011      	movs	r1, r2
    212c:	0018      	movs	r0, r3
    212e:	4b22      	ldr	r3, [pc, #136]	; (21b8 <event_subscribe+0x114>)
    2130:	4798      	blx	r3
    2132:	0003      	movs	r3, r0
    2134:	001a      	movs	r2, r3
    2136:	2301      	movs	r3, #1
    2138:	4053      	eors	r3, r2
    213a:	b2db      	uxtb	r3, r3
    213c:	2b00      	cmp	r3, #0
    213e:	d00c      	beq.n	215a <event_subscribe+0xb6>
		memset(event->mask, 0, EVENT_MASK_SIZE);
    2140:	68fb      	ldr	r3, [r7, #12]
    2142:	3304      	adds	r3, #4
    2144:	2201      	movs	r2, #1
    2146:	2100      	movs	r1, #0
    2148:	0018      	movs	r0, r3
    214a:	4b1c      	ldr	r3, [pc, #112]	; (21bc <event_subscribe+0x118>)
    214c:	4798      	blx	r3
		list_insert_as_head(&events, event);
    214e:	68fa      	ldr	r2, [r7, #12]
    2150:	4b18      	ldr	r3, [pc, #96]	; (21b4 <event_subscribe+0x110>)
    2152:	0011      	movs	r1, r2
    2154:	0018      	movs	r0, r3
    2156:	4b1a      	ldr	r3, [pc, #104]	; (21c0 <event_subscribe+0x11c>)
    2158:	4798      	blx	r3
	}
	event->cb = cb;
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	687a      	ldr	r2, [r7, #4]
    215e:	609a      	str	r2, [r3, #8]
	event->mask[position] |= mask;
    2160:	2317      	movs	r3, #23
    2162:	18fb      	adds	r3, r7, r3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2217      	movs	r2, #23
    2168:	18ba      	adds	r2, r7, r2
    216a:	7812      	ldrb	r2, [r2, #0]
    216c:	68f9      	ldr	r1, [r7, #12]
    216e:	188a      	adds	r2, r1, r2
    2170:	7911      	ldrb	r1, [r2, #4]
    2172:	2216      	movs	r2, #22
    2174:	18ba      	adds	r2, r7, r2
    2176:	7812      	ldrb	r2, [r2, #0]
    2178:	430a      	orrs	r2, r1
    217a:	b2d1      	uxtb	r1, r2
    217c:	68fa      	ldr	r2, [r7, #12]
    217e:	18d3      	adds	r3, r2, r3
    2180:	1c0a      	adds	r2, r1, #0
    2182:	711a      	strb	r2, [r3, #4]

	subscribed[position] |= mask;
    2184:	2317      	movs	r3, #23
    2186:	18fb      	adds	r3, r7, r3
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	2217      	movs	r2, #23
    218c:	18ba      	adds	r2, r7, r2
    218e:	7812      	ldrb	r2, [r2, #0]
    2190:	490c      	ldr	r1, [pc, #48]	; (21c4 <event_subscribe+0x120>)
    2192:	5c89      	ldrb	r1, [r1, r2]
    2194:	2216      	movs	r2, #22
    2196:	18ba      	adds	r2, r7, r2
    2198:	7812      	ldrb	r2, [r2, #0]
    219a:	430a      	orrs	r2, r1
    219c:	b2d1      	uxtb	r1, r2
    219e:	4a09      	ldr	r2, [pc, #36]	; (21c4 <event_subscribe+0x120>)
    21a0:	54d1      	strb	r1, [r2, r3]

	return ERR_NONE;
    21a2:	2300      	movs	r3, #0
}
    21a4:	0018      	movs	r0, r3
    21a6:	46bd      	mov	sp, r7
    21a8:	b006      	add	sp, #24
    21aa:	bd80      	pop	{r7, pc}
    21ac:	00006eac 	.word	0x00006eac
    21b0:	00002077 	.word	0x00002077
    21b4:	20000080 	.word	0x20000080
    21b8:	000021c9 	.word	0x000021c9
    21bc:	00006d25 	.word	0x00006d25
    21c0:	000021fd 	.word	0x000021fd
    21c4:	20000084 	.word	0x20000084

000021c8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    21c8:	b580      	push	{r7, lr}
    21ca:	b084      	sub	sp, #16
    21cc:	af00      	add	r7, sp, #0
    21ce:	6078      	str	r0, [r7, #4]
    21d0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	681b      	ldr	r3, [r3, #0]
    21d6:	60fb      	str	r3, [r7, #12]
    21d8:	e008      	b.n	21ec <is_list_element+0x24>
		if (it == element) {
    21da:	68fa      	ldr	r2, [r7, #12]
    21dc:	683b      	ldr	r3, [r7, #0]
    21de:	429a      	cmp	r2, r3
    21e0:	d101      	bne.n	21e6 <is_list_element+0x1e>
			return true;
    21e2:	2301      	movs	r3, #1
    21e4:	e006      	b.n	21f4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	60fb      	str	r3, [r7, #12]
    21ec:	68fb      	ldr	r3, [r7, #12]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d1f3      	bne.n	21da <is_list_element+0x12>
		}
	}

	return false;
    21f2:	2300      	movs	r3, #0
}
    21f4:	0018      	movs	r0, r3
    21f6:	46bd      	mov	sp, r7
    21f8:	b004      	add	sp, #16
    21fa:	bd80      	pop	{r7, pc}

000021fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
    2204:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2206:	683a      	ldr	r2, [r7, #0]
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	0011      	movs	r1, r2
    220c:	0018      	movs	r0, r3
    220e:	4b0e      	ldr	r3, [pc, #56]	; (2248 <list_insert_as_head+0x4c>)
    2210:	4798      	blx	r3
    2212:	0003      	movs	r3, r0
    2214:	1e5a      	subs	r2, r3, #1
    2216:	4193      	sbcs	r3, r2
    2218:	b2db      	uxtb	r3, r3
    221a:	2201      	movs	r2, #1
    221c:	4053      	eors	r3, r2
    221e:	b2db      	uxtb	r3, r3
    2220:	1c1a      	adds	r2, r3, #0
    2222:	2301      	movs	r3, #1
    2224:	4013      	ands	r3, r2
    2226:	b2db      	uxtb	r3, r3
    2228:	4908      	ldr	r1, [pc, #32]	; (224c <list_insert_as_head+0x50>)
    222a:	2239      	movs	r2, #57	; 0x39
    222c:	0018      	movs	r0, r3
    222e:	4b08      	ldr	r3, [pc, #32]	; (2250 <list_insert_as_head+0x54>)
    2230:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	681a      	ldr	r2, [r3, #0]
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	683a      	ldr	r2, [r7, #0]
    223e:	601a      	str	r2, [r3, #0]
}
    2240:	46c0      	nop			; (mov r8, r8)
    2242:	46bd      	mov	sp, r7
    2244:	b002      	add	sp, #8
    2246:	bd80      	pop	{r7, pc}
    2248:	000021c9 	.word	0x000021c9
    224c:	00006ecc 	.word	0x00006ecc
    2250:	00002077 	.word	0x00002077

00002254 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2254:	b580      	push	{r7, lr}
    2256:	b082      	sub	sp, #8
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
    225c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	681a      	ldr	r2, [r3, #0]
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	683a      	ldr	r2, [r7, #0]
    226a:	601a      	str	r2, [r3, #0]
}
    226c:	46c0      	nop			; (mov r8, r8)
    226e:	46bd      	mov	sp, r7
    2270:	b002      	add	sp, #8
    2272:	bd80      	pop	{r7, pc}

00002274 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2274:	b580      	push	{r7, lr}
    2276:	b084      	sub	sp, #16
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	2b00      	cmp	r3, #0
    2282:	d009      	beq.n	2298 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	681b      	ldr	r3, [r3, #0]
    228e:	681a      	ldr	r2, [r3, #0]
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	e000      	b.n	229a <list_remove_head+0x26>
	}

	return NULL;
    2298:	2300      	movs	r3, #0
}
    229a:	0018      	movs	r0, r3
    229c:	46bd      	mov	sp, r7
    229e:	b004      	add	sp, #16
    22a0:	bd80      	pop	{r7, pc}
	...

000022a4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    22a4:	b580      	push	{r7, lr}
    22a6:	b084      	sub	sp, #16
    22a8:	af00      	add	r7, sp, #0
    22aa:	60f8      	str	r0, [r7, #12]
    22ac:	60b9      	str	r1, [r7, #8]
    22ae:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d007      	beq.n	22c6 <ringbuffer_init+0x22>
    22b6:	68bb      	ldr	r3, [r7, #8]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d004      	beq.n	22c6 <ringbuffer_init+0x22>
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	2b00      	cmp	r3, #0
    22c0:	d001      	beq.n	22c6 <ringbuffer_init+0x22>
    22c2:	2301      	movs	r3, #1
    22c4:	e000      	b.n	22c8 <ringbuffer_init+0x24>
    22c6:	2300      	movs	r3, #0
    22c8:	1c1a      	adds	r2, r3, #0
    22ca:	2301      	movs	r3, #1
    22cc:	4013      	ands	r3, r2
    22ce:	b2db      	uxtb	r3, r3
    22d0:	490f      	ldr	r1, [pc, #60]	; (2310 <ringbuffer_init+0x6c>)
    22d2:	2228      	movs	r2, #40	; 0x28
    22d4:	0018      	movs	r0, r3
    22d6:	4b0f      	ldr	r3, [pc, #60]	; (2314 <ringbuffer_init+0x70>)
    22d8:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	3b01      	subs	r3, #1
    22de:	687a      	ldr	r2, [r7, #4]
    22e0:	4013      	ands	r3, r2
    22e2:	d002      	beq.n	22ea <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    22e4:	230d      	movs	r3, #13
    22e6:	425b      	negs	r3, r3
    22e8:	e00e      	b.n	2308 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	1e5a      	subs	r2, r3, #1
    22ee:	68fb      	ldr	r3, [r7, #12]
    22f0:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    22f2:	68fb      	ldr	r3, [r7, #12]
    22f4:	2200      	movs	r2, #0
    22f6:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    22f8:	68fb      	ldr	r3, [r7, #12]
    22fa:	689a      	ldr	r2, [r3, #8]
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    2300:	68fb      	ldr	r3, [r7, #12]
    2302:	68ba      	ldr	r2, [r7, #8]
    2304:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2306:	2300      	movs	r3, #0
}
    2308:	0018      	movs	r0, r3
    230a:	46bd      	mov	sp, r7
    230c:	b004      	add	sp, #16
    230e:	bd80      	pop	{r7, pc}
    2310:	00006eec 	.word	0x00006eec
    2314:	00002077 	.word	0x00002077

00002318 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2318:	b580      	push	{r7, lr}
    231a:	b082      	sub	sp, #8
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
    2320:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	2b00      	cmp	r3, #0
    2326:	d004      	beq.n	2332 <ringbuffer_get+0x1a>
    2328:	683b      	ldr	r3, [r7, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d001      	beq.n	2332 <ringbuffer_get+0x1a>
    232e:	2301      	movs	r3, #1
    2330:	e000      	b.n	2334 <ringbuffer_get+0x1c>
    2332:	2300      	movs	r3, #0
    2334:	1c1a      	adds	r2, r3, #0
    2336:	2301      	movs	r3, #1
    2338:	4013      	ands	r3, r2
    233a:	b2db      	uxtb	r3, r3
    233c:	4911      	ldr	r1, [pc, #68]	; (2384 <ringbuffer_get+0x6c>)
    233e:	2240      	movs	r2, #64	; 0x40
    2340:	0018      	movs	r0, r3
    2342:	4b11      	ldr	r3, [pc, #68]	; (2388 <ringbuffer_get+0x70>)
    2344:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	68da      	ldr	r2, [r3, #12]
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	689b      	ldr	r3, [r3, #8]
    234e:	429a      	cmp	r2, r3
    2350:	d011      	beq.n	2376 <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	681a      	ldr	r2, [r3, #0]
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	6899      	ldr	r1, [r3, #8]
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	685b      	ldr	r3, [r3, #4]
    235e:	400b      	ands	r3, r1
    2360:	18d3      	adds	r3, r2, r3
    2362:	781a      	ldrb	r2, [r3, #0]
    2364:	683b      	ldr	r3, [r7, #0]
    2366:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	689b      	ldr	r3, [r3, #8]
    236c:	1c5a      	adds	r2, r3, #1
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    2372:	2300      	movs	r3, #0
    2374:	e001      	b.n	237a <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
    2376:	230a      	movs	r3, #10
    2378:	425b      	negs	r3, r3
}
    237a:	0018      	movs	r0, r3
    237c:	46bd      	mov	sp, r7
    237e:	b002      	add	sp, #8
    2380:	bd80      	pop	{r7, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	00006eec 	.word	0x00006eec
    2388:	00002077 	.word	0x00002077

0000238c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	000a      	movs	r2, r1
    2396:	1cfb      	adds	r3, r7, #3
    2398:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	1e5a      	subs	r2, r3, #1
    239e:	4193      	sbcs	r3, r2
    23a0:	b2db      	uxtb	r3, r3
    23a2:	4915      	ldr	r1, [pc, #84]	; (23f8 <ringbuffer_put+0x6c>)
    23a4:	2251      	movs	r2, #81	; 0x51
    23a6:	0018      	movs	r0, r3
    23a8:	4b14      	ldr	r3, [pc, #80]	; (23fc <ringbuffer_put+0x70>)
    23aa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	68d9      	ldr	r1, [r3, #12]
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	685b      	ldr	r3, [r3, #4]
    23b8:	400b      	ands	r3, r1
    23ba:	18d3      	adds	r3, r2, r3
    23bc:	1cfa      	adds	r2, r7, #3
    23be:	7812      	ldrb	r2, [r2, #0]
    23c0:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	68da      	ldr	r2, [r3, #12]
    23c6:	687b      	ldr	r3, [r7, #4]
    23c8:	689b      	ldr	r3, [r3, #8]
    23ca:	1ad2      	subs	r2, r2, r3
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	685b      	ldr	r3, [r3, #4]
    23d0:	429a      	cmp	r2, r3
    23d2:	d906      	bls.n	23e2 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	685b      	ldr	r3, [r3, #4]
    23dc:	1ad2      	subs	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	68db      	ldr	r3, [r3, #12]
    23e6:	1c5a      	adds	r2, r3, #1
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    23ec:	2300      	movs	r3, #0
}
    23ee:	0018      	movs	r0, r3
    23f0:	46bd      	mov	sp, r7
    23f2:	b002      	add	sp, #8
    23f4:	bd80      	pop	{r7, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	00006eec 	.word	0x00006eec
    23fc:	00002077 	.word	0x00002077

00002400 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2400:	b580      	push	{r7, lr}
    2402:	b082      	sub	sp, #8
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	1e5a      	subs	r2, r3, #1
    240c:	4193      	sbcs	r3, r2
    240e:	b2db      	uxtb	r3, r3
    2410:	4906      	ldr	r1, [pc, #24]	; (242c <ringbuffer_num+0x2c>)
    2412:	2267      	movs	r2, #103	; 0x67
    2414:	0018      	movs	r0, r3
    2416:	4b06      	ldr	r3, [pc, #24]	; (2430 <ringbuffer_num+0x30>)
    2418:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	68da      	ldr	r2, [r3, #12]
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	689b      	ldr	r3, [r3, #8]
    2422:	1ad3      	subs	r3, r2, r3
}
    2424:	0018      	movs	r0, r3
    2426:	46bd      	mov	sp, r7
    2428:	b002      	add	sp, #8
    242a:	bd80      	pop	{r7, pc}
    242c:	00006eec 	.word	0x00006eec
    2430:	00002077 	.word	0x00002077

00002434 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2434:	b590      	push	{r4, r7, lr}
    2436:	b083      	sub	sp, #12
    2438:	af00      	add	r7, sp, #0
    243a:	6039      	str	r1, [r7, #0]
    243c:	0011      	movs	r1, r2
    243e:	1dbb      	adds	r3, r7, #6
    2440:	1c02      	adds	r2, r0, #0
    2442:	801a      	strh	r2, [r3, #0]
    2444:	1d7b      	adds	r3, r7, #5
    2446:	1c0a      	adds	r2, r1, #0
    2448:	701a      	strb	r2, [r3, #0]
	switch (power) {
    244a:	1d7b      	adds	r3, r7, #5
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	3b04      	subs	r3, #4
    2450:	2b04      	cmp	r3, #4
    2452:	d859      	bhi.n	2508 <_get_cycles_for_us_internal+0xd4>
    2454:	009a      	lsls	r2, r3, #2
    2456:	4b34      	ldr	r3, [pc, #208]	; (2528 <_get_cycles_for_us_internal+0xf4>)
    2458:	18d3      	adds	r3, r2, r3
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    245e:	1dbb      	adds	r3, r7, #6
    2460:	881c      	ldrh	r4, [r3, #0]
    2462:	683a      	ldr	r2, [r7, #0]
    2464:	4b31      	ldr	r3, [pc, #196]	; (252c <_get_cycles_for_us_internal+0xf8>)
    2466:	4932      	ldr	r1, [pc, #200]	; (2530 <_get_cycles_for_us_internal+0xfc>)
    2468:	0010      	movs	r0, r2
    246a:	4798      	blx	r3
    246c:	0003      	movs	r3, r0
    246e:	4363      	muls	r3, r4
    2470:	1e5a      	subs	r2, r3, #1
    2472:	4b2e      	ldr	r3, [pc, #184]	; (252c <_get_cycles_for_us_internal+0xf8>)
    2474:	210a      	movs	r1, #10
    2476:	0010      	movs	r0, r2
    2478:	4798      	blx	r3
    247a:	0003      	movs	r3, r0
    247c:	3301      	adds	r3, #1
    247e:	e04e      	b.n	251e <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    2480:	1dbb      	adds	r3, r7, #6
    2482:	881c      	ldrh	r4, [r3, #0]
    2484:	683a      	ldr	r2, [r7, #0]
    2486:	4b29      	ldr	r3, [pc, #164]	; (252c <_get_cycles_for_us_internal+0xf8>)
    2488:	492a      	ldr	r1, [pc, #168]	; (2534 <_get_cycles_for_us_internal+0x100>)
    248a:	0010      	movs	r0, r2
    248c:	4798      	blx	r3
    248e:	0003      	movs	r3, r0
    2490:	4363      	muls	r3, r4
    2492:	1e5a      	subs	r2, r3, #1
    2494:	4b25      	ldr	r3, [pc, #148]	; (252c <_get_cycles_for_us_internal+0xf8>)
    2496:	2164      	movs	r1, #100	; 0x64
    2498:	0010      	movs	r0, r2
    249a:	4798      	blx	r3
    249c:	0003      	movs	r3, r0
    249e:	3301      	adds	r3, #1
    24a0:	e03d      	b.n	251e <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    24a2:	1dbb      	adds	r3, r7, #6
    24a4:	881c      	ldrh	r4, [r3, #0]
    24a6:	6838      	ldr	r0, [r7, #0]
    24a8:	4b20      	ldr	r3, [pc, #128]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24aa:	22fa      	movs	r2, #250	; 0xfa
    24ac:	0091      	lsls	r1, r2, #2
    24ae:	4798      	blx	r3
    24b0:	0003      	movs	r3, r0
    24b2:	4363      	muls	r3, r4
    24b4:	1e58      	subs	r0, r3, #1
    24b6:	4b1d      	ldr	r3, [pc, #116]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24b8:	22fa      	movs	r2, #250	; 0xfa
    24ba:	0091      	lsls	r1, r2, #2
    24bc:	4798      	blx	r3
    24be:	0003      	movs	r3, r0
    24c0:	3301      	adds	r3, #1
    24c2:	e02c      	b.n	251e <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    24c4:	1dbb      	adds	r3, r7, #6
    24c6:	881c      	ldrh	r4, [r3, #0]
    24c8:	683a      	ldr	r2, [r7, #0]
    24ca:	4b18      	ldr	r3, [pc, #96]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24cc:	2164      	movs	r1, #100	; 0x64
    24ce:	0010      	movs	r0, r2
    24d0:	4798      	blx	r3
    24d2:	0003      	movs	r3, r0
    24d4:	4363      	muls	r3, r4
    24d6:	1e5a      	subs	r2, r3, #1
    24d8:	4b14      	ldr	r3, [pc, #80]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24da:	4916      	ldr	r1, [pc, #88]	; (2534 <_get_cycles_for_us_internal+0x100>)
    24dc:	0010      	movs	r0, r2
    24de:	4798      	blx	r3
    24e0:	0003      	movs	r3, r0
    24e2:	3301      	adds	r3, #1
    24e4:	e01b      	b.n	251e <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    24e6:	1dbb      	adds	r3, r7, #6
    24e8:	881c      	ldrh	r4, [r3, #0]
    24ea:	683a      	ldr	r2, [r7, #0]
    24ec:	4b0f      	ldr	r3, [pc, #60]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24ee:	210a      	movs	r1, #10
    24f0:	0010      	movs	r0, r2
    24f2:	4798      	blx	r3
    24f4:	0003      	movs	r3, r0
    24f6:	4363      	muls	r3, r4
    24f8:	1e5a      	subs	r2, r3, #1
    24fa:	4b0c      	ldr	r3, [pc, #48]	; (252c <_get_cycles_for_us_internal+0xf8>)
    24fc:	490c      	ldr	r1, [pc, #48]	; (2530 <_get_cycles_for_us_internal+0xfc>)
    24fe:	0010      	movs	r0, r2
    2500:	4798      	blx	r3
    2502:	0003      	movs	r3, r0
    2504:	3301      	adds	r3, #1
    2506:	e00a      	b.n	251e <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    2508:	1dbb      	adds	r3, r7, #6
    250a:	881b      	ldrh	r3, [r3, #0]
    250c:	683a      	ldr	r2, [r7, #0]
    250e:	4353      	muls	r3, r2
    2510:	1e5a      	subs	r2, r3, #1
    2512:	4b06      	ldr	r3, [pc, #24]	; (252c <_get_cycles_for_us_internal+0xf8>)
    2514:	4908      	ldr	r1, [pc, #32]	; (2538 <_get_cycles_for_us_internal+0x104>)
    2516:	0010      	movs	r0, r2
    2518:	4798      	blx	r3
    251a:	0003      	movs	r3, r0
    251c:	3301      	adds	r3, #1
	}
}
    251e:	0018      	movs	r0, r3
    2520:	46bd      	mov	sp, r7
    2522:	b003      	add	sp, #12
    2524:	bd90      	pop	{r4, r7, pc}
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	00006f34 	.word	0x00006f34
    252c:	00005e99 	.word	0x00005e99
    2530:	000186a0 	.word	0x000186a0
    2534:	00002710 	.word	0x00002710
    2538:	000f4240 	.word	0x000f4240

0000253c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    253c:	b590      	push	{r4, r7, lr}
    253e:	b083      	sub	sp, #12
    2540:	af00      	add	r7, sp, #0
    2542:	6039      	str	r1, [r7, #0]
    2544:	0011      	movs	r1, r2
    2546:	1dbb      	adds	r3, r7, #6
    2548:	1c02      	adds	r2, r0, #0
    254a:	801a      	strh	r2, [r3, #0]
    254c:	1d7b      	adds	r3, r7, #5
    254e:	1c0a      	adds	r2, r1, #0
    2550:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2552:	1d7b      	adds	r3, r7, #5
    2554:	781b      	ldrb	r3, [r3, #0]
    2556:	3b04      	subs	r3, #4
    2558:	2b04      	cmp	r3, #4
    255a:	d84b      	bhi.n	25f4 <_get_cycles_for_ms_internal+0xb8>
    255c:	009a      	lsls	r2, r3, #2
    255e:	4b2d      	ldr	r3, [pc, #180]	; (2614 <_get_cycles_for_ms_internal+0xd8>)
    2560:	18d3      	adds	r3, r2, r3
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    2566:	1dbb      	adds	r3, r7, #6
    2568:	881c      	ldrh	r4, [r3, #0]
    256a:	683a      	ldr	r2, [r7, #0]
    256c:	4b2a      	ldr	r3, [pc, #168]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    256e:	492b      	ldr	r1, [pc, #172]	; (261c <_get_cycles_for_ms_internal+0xe0>)
    2570:	0010      	movs	r0, r2
    2572:	4798      	blx	r3
    2574:	0003      	movs	r3, r0
    2576:	4363      	muls	r3, r4
    2578:	2264      	movs	r2, #100	; 0x64
    257a:	4353      	muls	r3, r2
    257c:	e045      	b.n	260a <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    257e:	1dbb      	adds	r3, r7, #6
    2580:	881c      	ldrh	r4, [r3, #0]
    2582:	683a      	ldr	r2, [r7, #0]
    2584:	4b24      	ldr	r3, [pc, #144]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    2586:	4926      	ldr	r1, [pc, #152]	; (2620 <_get_cycles_for_ms_internal+0xe4>)
    2588:	0010      	movs	r0, r2
    258a:	4798      	blx	r3
    258c:	0003      	movs	r3, r0
    258e:	4363      	muls	r3, r4
    2590:	001a      	movs	r2, r3
    2592:	0013      	movs	r3, r2
    2594:	009b      	lsls	r3, r3, #2
    2596:	189b      	adds	r3, r3, r2
    2598:	005b      	lsls	r3, r3, #1
    259a:	e036      	b.n	260a <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    259c:	1dbb      	adds	r3, r7, #6
    259e:	881c      	ldrh	r4, [r3, #0]
    25a0:	6838      	ldr	r0, [r7, #0]
    25a2:	4b1d      	ldr	r3, [pc, #116]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    25a4:	22fa      	movs	r2, #250	; 0xfa
    25a6:	0091      	lsls	r1, r2, #2
    25a8:	4798      	blx	r3
    25aa:	0003      	movs	r3, r0
    25ac:	4363      	muls	r3, r4
    25ae:	e02c      	b.n	260a <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    25b0:	1dbb      	adds	r3, r7, #6
    25b2:	881c      	ldrh	r4, [r3, #0]
    25b4:	683a      	ldr	r2, [r7, #0]
    25b6:	4b18      	ldr	r3, [pc, #96]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    25b8:	2164      	movs	r1, #100	; 0x64
    25ba:	0010      	movs	r0, r2
    25bc:	4798      	blx	r3
    25be:	0003      	movs	r3, r0
    25c0:	4363      	muls	r3, r4
    25c2:	1e5a      	subs	r2, r3, #1
    25c4:	4b14      	ldr	r3, [pc, #80]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    25c6:	210a      	movs	r1, #10
    25c8:	0010      	movs	r0, r2
    25ca:	4798      	blx	r3
    25cc:	0003      	movs	r3, r0
    25ce:	3301      	adds	r3, #1
    25d0:	e01b      	b.n	260a <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    25d2:	1dbb      	adds	r3, r7, #6
    25d4:	881c      	ldrh	r4, [r3, #0]
    25d6:	683a      	ldr	r2, [r7, #0]
    25d8:	4b0f      	ldr	r3, [pc, #60]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    25da:	210a      	movs	r1, #10
    25dc:	0010      	movs	r0, r2
    25de:	4798      	blx	r3
    25e0:	0003      	movs	r3, r0
    25e2:	4363      	muls	r3, r4
    25e4:	1e5a      	subs	r2, r3, #1
    25e6:	4b0c      	ldr	r3, [pc, #48]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    25e8:	2164      	movs	r1, #100	; 0x64
    25ea:	0010      	movs	r0, r2
    25ec:	4798      	blx	r3
    25ee:	0003      	movs	r3, r0
    25f0:	3301      	adds	r3, #1
    25f2:	e00a      	b.n	260a <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    25f4:	1dbb      	adds	r3, r7, #6
    25f6:	881b      	ldrh	r3, [r3, #0]
    25f8:	683a      	ldr	r2, [r7, #0]
    25fa:	4353      	muls	r3, r2
    25fc:	1e58      	subs	r0, r3, #1
    25fe:	4b06      	ldr	r3, [pc, #24]	; (2618 <_get_cycles_for_ms_internal+0xdc>)
    2600:	22fa      	movs	r2, #250	; 0xfa
    2602:	0091      	lsls	r1, r2, #2
    2604:	4798      	blx	r3
    2606:	0003      	movs	r3, r0
    2608:	3301      	adds	r3, #1
	}
}
    260a:	0018      	movs	r0, r3
    260c:	46bd      	mov	sp, r7
    260e:	b003      	add	sp, #12
    2610:	bd90      	pop	{r4, r7, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	00006f48 	.word	0x00006f48
    2618:	00005e99 	.word	0x00005e99
    261c:	000186a0 	.word	0x000186a0
    2620:	00002710 	.word	0x00002710

00002624 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2624:	b580      	push	{r7, lr}
    2626:	b082      	sub	sp, #8
    2628:	af00      	add	r7, sp, #0
    262a:	0002      	movs	r2, r0
    262c:	1dbb      	adds	r3, r7, #6
    262e:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2630:	4905      	ldr	r1, [pc, #20]	; (2648 <_get_cycles_for_ms+0x24>)
    2632:	1dbb      	adds	r3, r7, #6
    2634:	881b      	ldrh	r3, [r3, #0]
    2636:	2207      	movs	r2, #7
    2638:	0018      	movs	r0, r3
    263a:	4b04      	ldr	r3, [pc, #16]	; (264c <_get_cycles_for_ms+0x28>)
    263c:	4798      	blx	r3
    263e:	0003      	movs	r3, r0
}
    2640:	0018      	movs	r0, r3
    2642:	46bd      	mov	sp, r7
    2644:	b002      	add	sp, #8
    2646:	bd80      	pop	{r7, pc}
    2648:	003d0900 	.word	0x003d0900
    264c:	0000253d 	.word	0x0000253d

00002650 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
    2658:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	685a      	ldr	r2, [r3, #4]
    265e:	683b      	ldr	r3, [r7, #0]
    2660:	005b      	lsls	r3, r3, #1
    2662:	211e      	movs	r1, #30
    2664:	400b      	ands	r3, r1
    2666:	431a      	orrs	r2, r3
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    266c:	46c0      	nop			; (mov r8, r8)
    266e:	46bd      	mov	sp, r7
    2670:	b002      	add	sp, #8
    2672:	bd80      	pop	{r7, pc}

00002674 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2674:	b580      	push	{r7, lr}
    2676:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2678:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <_init_chip+0x30>)
    267a:	2100      	movs	r1, #0
    267c:	0018      	movs	r0, r3
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <_init_chip+0x34>)
    2680:	4798      	blx	r3

	_set_performance_level(2);
    2682:	2002      	movs	r0, #2
    2684:	4b09      	ldr	r3, [pc, #36]	; (26ac <_init_chip+0x38>)
    2686:	4798      	blx	r3

	_osc32kctrl_init_sources();
    2688:	4b09      	ldr	r3, [pc, #36]	; (26b0 <_init_chip+0x3c>)
    268a:	4798      	blx	r3
	_oscctrl_init_sources();
    268c:	4b09      	ldr	r3, [pc, #36]	; (26b4 <_init_chip+0x40>)
    268e:	4798      	blx	r3
	_mclk_init();
    2690:	4b09      	ldr	r3, [pc, #36]	; (26b8 <_init_chip+0x44>)
    2692:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2694:	4b09      	ldr	r3, [pc, #36]	; (26bc <_init_chip+0x48>)
    2696:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2698:	20ff      	movs	r0, #255	; 0xff
    269a:	4b09      	ldr	r3, [pc, #36]	; (26c0 <_init_chip+0x4c>)
    269c:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}
    26a4:	41004000 	.word	0x41004000
    26a8:	00002651 	.word	0x00002651
    26ac:	00002a71 	.word	0x00002a71
    26b0:	00002845 	.word	0x00002845
    26b4:	00002945 	.word	0x00002945
    26b8:	000027b1 	.word	0x000027b1
    26bc:	00002991 	.word	0x00002991
    26c0:	00002725 	.word	0x00002725

000026c4 <hri_gclk_wait_for_sync>:
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b082      	sub	sp, #8
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
    26cc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	685b      	ldr	r3, [r3, #4]
    26d4:	683a      	ldr	r2, [r7, #0]
    26d6:	4013      	ands	r3, r2
    26d8:	d1fa      	bne.n	26d0 <hri_gclk_wait_for_sync+0xc>
}
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	46bd      	mov	sp, r7
    26de:	b002      	add	sp, #8
    26e0:	bd80      	pop	{r7, pc}
	...

000026e4 <hri_gclk_write_GENCTRL_reg>:
{
    26e4:	b580      	push	{r7, lr}
    26e6:	b084      	sub	sp, #16
    26e8:	af00      	add	r7, sp, #0
    26ea:	60f8      	str	r0, [r7, #12]
    26ec:	607a      	str	r2, [r7, #4]
    26ee:	230b      	movs	r3, #11
    26f0:	18fb      	adds	r3, r7, r3
    26f2:	1c0a      	adds	r2, r1, #0
    26f4:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    26f6:	230b      	movs	r3, #11
    26f8:	18fb      	adds	r3, r7, r3
    26fa:	781a      	ldrb	r2, [r3, #0]
    26fc:	68fb      	ldr	r3, [r7, #12]
    26fe:	3208      	adds	r2, #8
    2700:	0092      	lsls	r2, r2, #2
    2702:	6879      	ldr	r1, [r7, #4]
    2704:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    2706:	4a05      	ldr	r2, [pc, #20]	; (271c <hri_gclk_write_GENCTRL_reg+0x38>)
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	0011      	movs	r1, r2
    270c:	0018      	movs	r0, r3
    270e:	4b04      	ldr	r3, [pc, #16]	; (2720 <hri_gclk_write_GENCTRL_reg+0x3c>)
    2710:	4798      	blx	r3
}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	46bd      	mov	sp, r7
    2716:	b004      	add	sp, #16
    2718:	bd80      	pop	{r7, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	000007fd 	.word	0x000007fd
    2720:	000026c5 	.word	0x000026c5

00002724 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2724:	b580      	push	{r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	2201      	movs	r2, #1
    2730:	4013      	ands	r3, r2
    2732:	d005      	beq.n	2740 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2734:	4a04      	ldr	r2, [pc, #16]	; (2748 <_gclk_init_generators_by_fref+0x24>)
    2736:	4b05      	ldr	r3, [pc, #20]	; (274c <_gclk_init_generators_by_fref+0x28>)
    2738:	2100      	movs	r1, #0
    273a:	0018      	movs	r0, r3
    273c:	4b04      	ldr	r3, [pc, #16]	; (2750 <_gclk_init_generators_by_fref+0x2c>)
    273e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    2740:	46c0      	nop			; (mov r8, r8)
    2742:	46bd      	mov	sp, r7
    2744:	b002      	add	sp, #8
    2746:	bd80      	pop	{r7, pc}
    2748:	00010106 	.word	0x00010106
    274c:	40001800 	.word	0x40001800
    2750:	000026e5 	.word	0x000026e5

00002754 <hri_mclk_write_CPUDIV_reg>:
{
    2754:	b580      	push	{r7, lr}
    2756:	b082      	sub	sp, #8
    2758:	af00      	add	r7, sp, #0
    275a:	6078      	str	r0, [r7, #4]
    275c:	000a      	movs	r2, r1
    275e:	1cfb      	adds	r3, r7, #3
    2760:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	1cfa      	adds	r2, r7, #3
    2766:	7812      	ldrb	r2, [r2, #0]
    2768:	711a      	strb	r2, [r3, #4]
}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	46bd      	mov	sp, r7
    276e:	b002      	add	sp, #8
    2770:	bd80      	pop	{r7, pc}

00002772 <hri_mclk_write_LPDIV_reg>:
{
    2772:	b580      	push	{r7, lr}
    2774:	b082      	sub	sp, #8
    2776:	af00      	add	r7, sp, #0
    2778:	6078      	str	r0, [r7, #4]
    277a:	000a      	movs	r2, r1
    277c:	1cfb      	adds	r3, r7, #3
    277e:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->LPDIV.reg = data;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	1cfa      	adds	r2, r7, #3
    2784:	7812      	ldrb	r2, [r2, #0]
    2786:	715a      	strb	r2, [r3, #5]
}
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46bd      	mov	sp, r7
    278c:	b002      	add	sp, #8
    278e:	bd80      	pop	{r7, pc}

00002790 <hri_mclk_write_BUPDIV_reg>:
{
    2790:	b580      	push	{r7, lr}
    2792:	b082      	sub	sp, #8
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	000a      	movs	r2, r1
    279a:	1cfb      	adds	r3, r7, #3
    279c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->BUPDIV.reg = data;
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	1cfa      	adds	r2, r7, #3
    27a2:	7812      	ldrb	r2, [r2, #0]
    27a4:	719a      	strb	r2, [r3, #6]
}
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	46bd      	mov	sp, r7
    27aa:	b002      	add	sp, #8
    27ac:	bd80      	pop	{r7, pc}
	...

000027b0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    27b6:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <_mclk_init+0x30>)
    27b8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	2108      	movs	r1, #8
    27be:	0018      	movs	r0, r3
    27c0:	4b08      	ldr	r3, [pc, #32]	; (27e4 <_mclk_init+0x34>)
    27c2:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	2104      	movs	r1, #4
    27c8:	0018      	movs	r0, r3
    27ca:	4b07      	ldr	r3, [pc, #28]	; (27e8 <_mclk_init+0x38>)
    27cc:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2101      	movs	r1, #1
    27d2:	0018      	movs	r0, r3
    27d4:	4b05      	ldr	r3, [pc, #20]	; (27ec <_mclk_init+0x3c>)
    27d6:	4798      	blx	r3
}
    27d8:	46c0      	nop			; (mov r8, r8)
    27da:	46bd      	mov	sp, r7
    27dc:	b002      	add	sp, #8
    27de:	bd80      	pop	{r7, pc}
    27e0:	40000400 	.word	0x40000400
    27e4:	00002791 	.word	0x00002791
    27e8:	00002773 	.word	0x00002773
    27ec:	00002755 	.word	0x00002755

000027f0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b082      	sub	sp, #8
    27f4:	af00      	add	r7, sp, #0
    27f6:	6078      	str	r0, [r7, #4]
    27f8:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	683a      	ldr	r2, [r7, #0]
    27fe:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2800:	46c0      	nop			; (mov r8, r8)
    2802:	46bd      	mov	sp, r7
    2804:	b002      	add	sp, #8
    2806:	bd80      	pop	{r7, pc}

00002808 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    2808:	b580      	push	{r7, lr}
    280a:	b084      	sub	sp, #16
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	69db      	ldr	r3, [r3, #28]
    2814:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    2816:	68fb      	ldr	r3, [r7, #12]
    2818:	0a1b      	lsrs	r3, r3, #8
    281a:	221f      	movs	r2, #31
    281c:	4013      	ands	r3, r2
    281e:	60fb      	str	r3, [r7, #12]
	return tmp;
    2820:	68fb      	ldr	r3, [r7, #12]
}
    2822:	0018      	movs	r0, r3
    2824:	46bd      	mov	sp, r7
    2826:	b004      	add	sp, #16
    2828:	bd80      	pop	{r7, pc}

0000282a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    282a:	b580      	push	{r7, lr}
    282c:	b082      	sub	sp, #8
    282e:	af00      	add	r7, sp, #0
    2830:	6078      	str	r0, [r7, #4]
    2832:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	683a      	ldr	r2, [r7, #0]
    2838:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	46bd      	mov	sp, r7
    283e:	b002      	add	sp, #8
    2840:	bd80      	pop	{r7, pc}
	...

00002844 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2844:	b580      	push	{r7, lr}
    2846:	b082      	sub	sp, #8
    2848:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    284a:	4b10      	ldr	r3, [pc, #64]	; (288c <_osc32kctrl_init_sources+0x48>)
    284c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    284e:	1cbb      	adds	r3, r7, #2
    2850:	2200      	movs	r2, #0
    2852:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	0018      	movs	r0, r3
    2858:	4b0d      	ldr	r3, [pc, #52]	; (2890 <_osc32kctrl_init_sources+0x4c>)
    285a:	4798      	blx	r3
    285c:	0002      	movs	r2, r0
    285e:	1cbb      	adds	r3, r7, #2
    2860:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2862:	1cbb      	adds	r3, r7, #2
    2864:	881b      	ldrh	r3, [r3, #0]
    2866:	021b      	lsls	r3, r3, #8
    2868:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    286a:	23f8      	movs	r3, #248	; 0xf8
    286c:	015b      	lsls	r3, r3, #5
    286e:	401a      	ands	r2, r3
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	0011      	movs	r1, r2
    2874:	0018      	movs	r0, r3
    2876:	4b07      	ldr	r3, [pc, #28]	; (2894 <_osc32kctrl_init_sources+0x50>)
    2878:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	2105      	movs	r1, #5
    287e:	0018      	movs	r0, r3
    2880:	4b05      	ldr	r3, [pc, #20]	; (2898 <_osc32kctrl_init_sources+0x54>)
    2882:	4798      	blx	r3
	(void)calib;
}
    2884:	46c0      	nop			; (mov r8, r8)
    2886:	46bd      	mov	sp, r7
    2888:	b002      	add	sp, #8
    288a:	bd80      	pop	{r7, pc}
    288c:	40001000 	.word	0x40001000
    2890:	00002809 	.word	0x00002809
    2894:	0000282b 	.word	0x0000282b
    2898:	000027f1 	.word	0x000027f1

0000289c <hri_oscctrl_wait_for_sync>:
typedef uint8_t  hri_oscctrl_dpllstatus_reg_t;
typedef uint8_t  hri_oscctrl_dpllsyncbusy_reg_t;
typedef uint8_t  hri_oscctrl_osc16mctrl_reg_t;

static inline void hri_oscctrl_wait_for_sync(const void *const hw, hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    289c:	b580      	push	{r7, lr}
    289e:	b082      	sub	sp, #8
    28a0:	af00      	add	r7, sp, #0
    28a2:	6078      	str	r0, [r7, #4]
    28a4:	000a      	movs	r2, r1
    28a6:	1cfb      	adds	r3, r7, #3
    28a8:	701a      	strb	r2, [r3, #0]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	2238      	movs	r2, #56	; 0x38
    28b0:	5c9b      	ldrb	r3, [r3, r2]
    28b2:	b2db      	uxtb	r3, r3
    28b4:	1cfa      	adds	r2, r7, #3
    28b6:	7812      	ldrb	r2, [r2, #0]
    28b8:	4013      	ands	r3, r2
    28ba:	b2db      	uxtb	r3, r3
    28bc:	2b00      	cmp	r3, #0
    28be:	d1f5      	bne.n	28ac <hri_oscctrl_wait_for_sync+0x10>
	};
}
    28c0:	46c0      	nop			; (mov r8, r8)
    28c2:	46bd      	mov	sp, r7
    28c4:	b002      	add	sp, #8
    28c6:	bd80      	pop	{r7, pc}

000028c8 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b082      	sub	sp, #8
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	68db      	ldr	r3, [r3, #12]
    28d4:	091b      	lsrs	r3, r3, #4
    28d6:	2201      	movs	r2, #1
    28d8:	4013      	ands	r3, r2
    28da:	1e5a      	subs	r2, r3, #1
    28dc:	4193      	sbcs	r3, r2
    28de:	b2db      	uxtb	r3, r3
}
    28e0:	0018      	movs	r0, r3
    28e2:	46bd      	mov	sp, r7
    28e4:	b002      	add	sp, #8
    28e6:	bd80      	pop	{r7, pc}

000028e8 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b082      	sub	sp, #8
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	7d1b      	ldrb	r3, [r3, #20]
    28f4:	b2db      	uxtb	r3, r3
    28f6:	2280      	movs	r2, #128	; 0x80
    28f8:	4252      	negs	r2, r2
    28fa:	4313      	orrs	r3, r2
    28fc:	b2da      	uxtb	r2, r3
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	210e      	movs	r1, #14
    2906:	0018      	movs	r0, r3
    2908:	4b02      	ldr	r3, [pc, #8]	; (2914 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit+0x2c>)
    290a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    290c:	46c0      	nop			; (mov r8, r8)
    290e:	46bd      	mov	sp, r7
    2910:	b002      	add	sp, #8
    2912:	bd80      	pop	{r7, pc}
    2914:	0000289d 	.word	0x0000289d

00002918 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    2918:	b580      	push	{r7, lr}
    291a:	b082      	sub	sp, #8
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
    2920:	000a      	movs	r2, r1
    2922:	1cfb      	adds	r3, r7, #3
    2924:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	1cfa      	adds	r2, r7, #3
    292a:	7812      	ldrb	r2, [r2, #0]
    292c:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	2102      	movs	r1, #2
    2932:	0018      	movs	r0, r3
    2934:	4b02      	ldr	r3, [pc, #8]	; (2940 <hri_oscctrl_write_OSC16MCTRL_reg+0x28>)
    2936:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2938:	46c0      	nop			; (mov r8, r8)
    293a:	46bd      	mov	sp, r7
    293c:	b002      	add	sp, #8
    293e:	bd80      	pop	{r7, pc}
    2940:	0000289d 	.word	0x0000289d

00002944 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    294a:	4b0d      	ldr	r3, [pc, #52]	; (2980 <_oscctrl_init_sources+0x3c>)
    294c:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	2182      	movs	r1, #130	; 0x82
    2952:	0018      	movs	r0, r3
    2954:	4b0b      	ldr	r3, [pc, #44]	; (2984 <_oscctrl_init_sources+0x40>)
    2956:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    2958:	46c0      	nop			; (mov r8, r8)
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	0018      	movs	r0, r3
    295e:	4b0a      	ldr	r3, [pc, #40]	; (2988 <_oscctrl_init_sources+0x44>)
    2960:	4798      	blx	r3
    2962:	0003      	movs	r3, r0
    2964:	001a      	movs	r2, r3
    2966:	2301      	movs	r3, #1
    2968:	4053      	eors	r3, r2
    296a:	b2db      	uxtb	r3, r3
    296c:	2b00      	cmp	r3, #0
    296e:	d1f4      	bne.n	295a <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	0018      	movs	r0, r3
    2974:	4b05      	ldr	r3, [pc, #20]	; (298c <_oscctrl_init_sources+0x48>)
    2976:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	46bd      	mov	sp, r7
    297c:	b002      	add	sp, #8
    297e:	bd80      	pop	{r7, pc}
    2980:	40000c00 	.word	0x40000c00
    2984:	00002919 	.word	0x00002919
    2988:	000028c9 	.word	0x000028c9
    298c:	000028e9 	.word	0x000028e9

00002990 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2990:	b580      	push	{r7, lr}
    2992:	b082      	sub	sp, #8
    2994:	af00      	add	r7, sp, #0
	void *                     hw  = (void *)OSCCTRL;
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <_oscctrl_init_referenced_generators+0x18>)
    2998:	607b      	str	r3, [r7, #4]
	hri_oscctrl_dfllctrl_reg_t tmp = 0;
    299a:	1cbb      	adds	r3, r7, #2
    299c:	2200      	movs	r2, #0
    299e:	801a      	strh	r2, [r3, #0]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    29a0:	46c0      	nop			; (mov r8, r8)
    29a2:	46bd      	mov	sp, r7
    29a4:	b002      	add	sp, #8
    29a6:	bd80      	pop	{r7, pc}
    29a8:	40000c00 	.word	0x40000c00

000029ac <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    29ac:	b580      	push	{r7, lr}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	799b      	ldrb	r3, [r3, #6]
    29b8:	b2db      	uxtb	r3, r3
}
    29ba:	0018      	movs	r0, r3
    29bc:	46bd      	mov	sp, r7
    29be:	b002      	add	sp, #8
    29c0:	bd80      	pop	{r7, pc}

000029c2 <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    29c2:	b580      	push	{r7, lr}
    29c4:	b082      	sub	sp, #8
    29c6:	af00      	add	r7, sp, #0
    29c8:	6078      	str	r0, [r7, #4]
    29ca:	000a      	movs	r2, r1
    29cc:	1cfb      	adds	r3, r7, #3
    29ce:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	1cfa      	adds	r2, r7, #3
    29d4:	7812      	ldrb	r2, [r2, #0]
    29d6:	719a      	strb	r2, [r3, #6]
}
    29d8:	46c0      	nop			; (mov r8, r8)
    29da:	46bd      	mov	sp, r7
    29dc:	b002      	add	sp, #8
    29de:	bd80      	pop	{r7, pc}

000029e0 <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    29e0:	b580      	push	{r7, lr}
    29e2:	b084      	sub	sp, #16
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    29e8:	000a      	movs	r2, r1
    29ea:	1cfb      	adds	r3, r7, #3
    29ec:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    29ee:	230f      	movs	r3, #15
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	687a      	ldr	r2, [r7, #4]
    29f4:	7892      	ldrb	r2, [r2, #2]
    29f6:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    29f8:	230f      	movs	r3, #15
    29fa:	18fb      	adds	r3, r7, r3
    29fc:	1cfa      	adds	r2, r7, #3
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	7812      	ldrb	r2, [r2, #0]
    2a02:	4013      	ands	r3, r2
    2a04:	b2da      	uxtb	r2, r3
    2a06:	230f      	movs	r3, #15
    2a08:	18fb      	adds	r3, r7, r3
    2a0a:	2103      	movs	r1, #3
    2a0c:	400a      	ands	r2, r1
    2a0e:	701a      	strb	r2, [r3, #0]
	return tmp;
    2a10:	230f      	movs	r3, #15
    2a12:	18fb      	adds	r3, r7, r3
    2a14:	781b      	ldrb	r3, [r3, #0]
}
    2a16:	0018      	movs	r0, r3
    2a18:	46bd      	mov	sp, r7
    2a1a:	b004      	add	sp, #16
    2a1c:	bd80      	pop	{r7, pc}

00002a1e <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    2a1e:	b580      	push	{r7, lr}
    2a20:	b084      	sub	sp, #16
    2a22:	af00      	add	r7, sp, #0
    2a24:	6078      	str	r0, [r7, #4]
    2a26:	000a      	movs	r2, r1
    2a28:	1cfb      	adds	r3, r7, #3
    2a2a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    2a2c:	230f      	movs	r3, #15
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	687a      	ldr	r2, [r7, #4]
    2a32:	7892      	ldrb	r2, [r2, #2]
    2a34:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    2a36:	230f      	movs	r3, #15
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	220f      	movs	r2, #15
    2a3c:	18ba      	adds	r2, r7, r2
    2a3e:	7812      	ldrb	r2, [r2, #0]
    2a40:	2103      	movs	r1, #3
    2a42:	438a      	bics	r2, r1
    2a44:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    2a46:	1cfb      	adds	r3, r7, #3
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2203      	movs	r2, #3
    2a4c:	4013      	ands	r3, r2
    2a4e:	b2d9      	uxtb	r1, r3
    2a50:	230f      	movs	r3, #15
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	220f      	movs	r2, #15
    2a56:	18ba      	adds	r2, r7, r2
    2a58:	7812      	ldrb	r2, [r2, #0]
    2a5a:	430a      	orrs	r2, r1
    2a5c:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	220f      	movs	r2, #15
    2a62:	18ba      	adds	r2, r7, r2
    2a64:	7812      	ldrb	r2, [r2, #0]
    2a66:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    2a68:	46c0      	nop			; (mov r8, r8)
    2a6a:	46bd      	mov	sp, r7
    2a6c:	b004      	add	sp, #16
    2a6e:	bd80      	pop	{r7, pc}

00002a70 <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	b082      	sub	sp, #8
    2a74:	af00      	add	r7, sp, #0
    2a76:	0002      	movs	r2, r0
    2a78:	1dfb      	adds	r3, r7, #7
    2a7a:	701a      	strb	r2, [r3, #0]
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    2a7c:	2380      	movs	r3, #128	; 0x80
    2a7e:	05db      	lsls	r3, r3, #23
    2a80:	2103      	movs	r1, #3
    2a82:	0018      	movs	r0, r3
    2a84:	4b10      	ldr	r3, [pc, #64]	; (2ac8 <_set_performance_level+0x58>)
    2a86:	4798      	blx	r3
    2a88:	0003      	movs	r3, r0
    2a8a:	001a      	movs	r2, r3
    2a8c:	1dfb      	adds	r3, r7, #7
    2a8e:	781b      	ldrb	r3, [r3, #0]
    2a90:	4293      	cmp	r3, r2
    2a92:	d015      	beq.n	2ac0 <_set_performance_level+0x50>
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    2a94:	2380      	movs	r3, #128	; 0x80
    2a96:	05db      	lsls	r3, r3, #23
    2a98:	21ff      	movs	r1, #255	; 0xff
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b0b      	ldr	r3, [pc, #44]	; (2acc <_set_performance_level+0x5c>)
    2a9e:	4798      	blx	r3
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    2aa0:	1dfb      	adds	r3, r7, #7
    2aa2:	781a      	ldrb	r2, [r3, #0]
    2aa4:	2380      	movs	r3, #128	; 0x80
    2aa6:	05db      	lsls	r3, r3, #23
    2aa8:	0011      	movs	r1, r2
    2aaa:	0018      	movs	r0, r3
    2aac:	4b08      	ldr	r3, [pc, #32]	; (2ad0 <_set_performance_level+0x60>)
    2aae:	4798      	blx	r3
		while (!hri_pm_read_INTFLAG_reg(PM))
    2ab0:	46c0      	nop			; (mov r8, r8)
    2ab2:	2380      	movs	r3, #128	; 0x80
    2ab4:	05db      	lsls	r3, r3, #23
    2ab6:	0018      	movs	r0, r3
    2ab8:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <_set_performance_level+0x64>)
    2aba:	4798      	blx	r3
    2abc:	1e03      	subs	r3, r0, #0
    2abe:	d0f8      	beq.n	2ab2 <_set_performance_level+0x42>
			;
	}
}
    2ac0:	46c0      	nop			; (mov r8, r8)
    2ac2:	46bd      	mov	sp, r7
    2ac4:	b002      	add	sp, #8
    2ac6:	bd80      	pop	{r7, pc}
    2ac8:	000029e1 	.word	0x000029e1
    2acc:	000029c3 	.word	0x000029c3
    2ad0:	00002a1f 	.word	0x00002a1f
    2ad4:	000029ad 	.word	0x000029ad

00002ad8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
    2ae0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	691b      	ldr	r3, [r3, #16]
    2ae8:	683a      	ldr	r2, [r7, #0]
    2aea:	4013      	ands	r3, r2
    2aec:	d1fa      	bne.n	2ae4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	46bd      	mov	sp, r7
    2af2:	b002      	add	sp, #8
    2af4:	bd80      	pop	{r7, pc}

00002af6 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    2af6:	b580      	push	{r7, lr}
    2af8:	b082      	sub	sp, #8
    2afa:	af00      	add	r7, sp, #0
    2afc:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	2280      	movs	r2, #128	; 0x80
    2b02:	0052      	lsls	r2, r2, #1
    2b04:	819a      	strh	r2, [r3, #12]
}
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	46bd      	mov	sp, r7
    2b0a:	b002      	add	sp, #8
    2b0c:	bd80      	pop	{r7, pc}

00002b0e <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    2b0e:	b580      	push	{r7, lr}
    2b10:	b082      	sub	sp, #8
    2b12:	af00      	add	r7, sp, #0
    2b14:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	899b      	ldrh	r3, [r3, #12]
    2b1a:	b29b      	uxth	r3, r3
}
    2b1c:	0018      	movs	r0, r3
    2b1e:	46bd      	mov	sp, r7
    2b20:	b002      	add	sp, #8
    2b22:	bd80      	pop	{r7, pc}

00002b24 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
{
	return ((Rtc *)hw)->MODE2.SYNCBUSY.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	b082      	sub	sp, #8
    2b28:	af00      	add	r7, sp, #0
    2b2a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	881b      	ldrh	r3, [r3, #0]
    2b30:	b29b      	uxth	r3, r3
    2b32:	2201      	movs	r2, #1
    2b34:	4313      	orrs	r3, r2
    2b36:	b29a      	uxth	r2, r3
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	2101      	movs	r1, #1
    2b40:	0018      	movs	r0, r3
    2b42:	4b03      	ldr	r3, [pc, #12]	; (2b50 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x2c>)
    2b44:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	46bd      	mov	sp, r7
    2b4a:	b002      	add	sp, #8
    2b4c:	bd80      	pop	{r7, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	00002ad9 	.word	0x00002ad9

00002b54 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2b5c:	4a0f      	ldr	r2, [pc, #60]	; (2b9c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x48>)
    2b5e:	687b      	ldr	r3, [r7, #4]
    2b60:	0011      	movs	r1, r2
    2b62:	0018      	movs	r0, r3
    2b64:	4b0e      	ldr	r3, [pc, #56]	; (2ba0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x4c>)
    2b66:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2b68:	230e      	movs	r3, #14
    2b6a:	18fb      	adds	r3, r7, r3
    2b6c:	687a      	ldr	r2, [r7, #4]
    2b6e:	8812      	ldrh	r2, [r2, #0]
    2b70:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    2b72:	230e      	movs	r3, #14
    2b74:	18fb      	adds	r3, r7, r3
    2b76:	881b      	ldrh	r3, [r3, #0]
    2b78:	085b      	lsrs	r3, r3, #1
    2b7a:	b29a      	uxth	r2, r3
    2b7c:	230e      	movs	r3, #14
    2b7e:	18fb      	adds	r3, r7, r3
    2b80:	2101      	movs	r1, #1
    2b82:	400a      	ands	r2, r1
    2b84:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    2b86:	230e      	movs	r3, #14
    2b88:	18fb      	adds	r3, r7, r3
    2b8a:	881b      	ldrh	r3, [r3, #0]
    2b8c:	1e5a      	subs	r2, r3, #1
    2b8e:	4193      	sbcs	r3, r2
    2b90:	b2db      	uxtb	r3, r3
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00008003 	.word	0x00008003
    2ba0:	00002ad9 	.word	0x00002ad9

00002ba4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b082      	sub	sp, #8
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	881b      	ldrh	r3, [r3, #0]
    2bb0:	b29b      	uxth	r3, r3
    2bb2:	2202      	movs	r2, #2
    2bb4:	4393      	bics	r3, r2
    2bb6:	b29a      	uxth	r2, r3
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2bbc:	4a04      	ldr	r2, [pc, #16]	; (2bd0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	0011      	movs	r1, r2
    2bc2:	0018      	movs	r0, r3
    2bc4:	4b03      	ldr	r3, [pc, #12]	; (2bd4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x30>)
    2bc6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2bc8:	46c0      	nop			; (mov r8, r8)
    2bca:	46bd      	mov	sp, r7
    2bcc:	b002      	add	sp, #8
    2bce:	bd80      	pop	{r7, pc}
    2bd0:	00008003 	.word	0x00008003
    2bd4:	00002ad9 	.word	0x00002ad9

00002bd8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	b082      	sub	sp, #8
    2bdc:	af00      	add	r7, sp, #0
    2bde:	6078      	str	r0, [r7, #4]
    2be0:	000a      	movs	r2, r1
    2be2:	1cbb      	adds	r3, r7, #2
    2be4:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	1cba      	adds	r2, r7, #2
    2bea:	8812      	ldrh	r2, [r2, #0]
    2bec:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2bee:	4a05      	ldr	r2, [pc, #20]	; (2c04 <hri_rtcmode0_write_CTRLA_reg+0x2c>)
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	0011      	movs	r1, r2
    2bf4:	0018      	movs	r0, r3
    2bf6:	4b04      	ldr	r3, [pc, #16]	; (2c08 <hri_rtcmode0_write_CTRLA_reg+0x30>)
    2bf8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	46bd      	mov	sp, r7
    2bfe:	b002      	add	sp, #8
    2c00:	bd80      	pop	{r7, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	00008003 	.word	0x00008003
    2c08:	00002ad9 	.word	0x00002ad9

00002c0c <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b082      	sub	sp, #8
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	2108      	movs	r1, #8
    2c18:	0018      	movs	r0, r3
    2c1a:	4b04      	ldr	r3, [pc, #16]	; (2c2c <hri_rtcmode0_read_COUNT_reg+0x20>)
    2c1c:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	699b      	ldr	r3, [r3, #24]
}
    2c22:	0018      	movs	r0, r3
    2c24:	46bd      	mov	sp, r7
    2c26:	b002      	add	sp, #8
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	00002ad9 	.word	0x00002ad9

00002c30 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d005      	beq.n	2c4a <_calendar_init+0x1a>
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d001      	beq.n	2c4a <_calendar_init+0x1a>
    2c46:	2301      	movs	r3, #1
    2c48:	e000      	b.n	2c4c <_calendar_init+0x1c>
    2c4a:	2300      	movs	r3, #0
    2c4c:	1c1a      	adds	r2, r3, #0
    2c4e:	2301      	movs	r3, #1
    2c50:	4013      	ands	r3, r2
    2c52:	b2db      	uxtb	r3, r3
    2c54:	491b      	ldr	r1, [pc, #108]	; (2cc4 <_calendar_init+0x94>)
    2c56:	222f      	movs	r2, #47	; 0x2f
    2c58:	0018      	movs	r0, r3
    2c5a:	4b1b      	ldr	r3, [pc, #108]	; (2cc8 <_calendar_init+0x98>)
    2c5c:	4798      	blx	r3

	_rtc_dev = dev;
    2c5e:	4b1b      	ldr	r3, [pc, #108]	; (2ccc <_calendar_init+0x9c>)
    2c60:	687a      	ldr	r2, [r7, #4]
    2c62:	601a      	str	r2, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	681b      	ldr	r3, [r3, #0]
    2c68:	2101      	movs	r1, #1
    2c6a:	0018      	movs	r0, r3
    2c6c:	4b18      	ldr	r3, [pc, #96]	; (2cd0 <_calendar_init+0xa0>)
    2c6e:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	0018      	movs	r0, r3
    2c76:	4b17      	ldr	r3, [pc, #92]	; (2cd4 <_calendar_init+0xa4>)
    2c78:	4798      	blx	r3
    2c7a:	1e03      	subs	r3, r0, #0
    2c7c:	d00a      	beq.n	2c94 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	681b      	ldr	r3, [r3, #0]
    2c82:	0018      	movs	r0, r3
    2c84:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <_calendar_init+0xa8>)
    2c86:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	2102      	movs	r1, #2
    2c8e:	0018      	movs	r0, r3
    2c90:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <_calendar_init+0xa0>)
    2c92:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	0018      	movs	r0, r3
    2c9a:	4b10      	ldr	r3, [pc, #64]	; (2cdc <_calendar_init+0xac>)
    2c9c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	2101      	movs	r1, #1
    2ca4:	0018      	movs	r0, r3
    2ca6:	4b0a      	ldr	r3, [pc, #40]	; (2cd0 <_calendar_init+0xa0>)
    2ca8:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	681a      	ldr	r2, [r3, #0]
    2cae:	2381      	movs	r3, #129	; 0x81
    2cb0:	021b      	lsls	r3, r3, #8
    2cb2:	0019      	movs	r1, r3
    2cb4:	0010      	movs	r0, r2
    2cb6:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <_calendar_init+0xb0>)
    2cb8:	4798      	blx	r3

	return ERR_NONE;
    2cba:	2300      	movs	r3, #0
}
    2cbc:	0018      	movs	r0, r3
    2cbe:	46bd      	mov	sp, r7
    2cc0:	b002      	add	sp, #8
    2cc2:	bd80      	pop	{r7, pc}
    2cc4:	00006f5c 	.word	0x00006f5c
    2cc8:	00002077 	.word	0x00002077
    2ccc:	20000088 	.word	0x20000088
    2cd0:	00002ad9 	.word	0x00002ad9
    2cd4:	00002b55 	.word	0x00002b55
    2cd8:	00002ba5 	.word	0x00002ba5
    2cdc:	00002b25 	.word	0x00002b25
    2ce0:	00002bd9 	.word	0x00002bd9

00002ce4 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d005      	beq.n	2cfe <_calendar_get_counter+0x1a>
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	681b      	ldr	r3, [r3, #0]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d001      	beq.n	2cfe <_calendar_get_counter+0x1a>
    2cfa:	2301      	movs	r3, #1
    2cfc:	e000      	b.n	2d00 <_calendar_get_counter+0x1c>
    2cfe:	2300      	movs	r3, #0
    2d00:	1c1a      	adds	r2, r3, #0
    2d02:	2301      	movs	r3, #1
    2d04:	4013      	ands	r3, r2
    2d06:	b2db      	uxtb	r3, r3
    2d08:	4907      	ldr	r1, [pc, #28]	; (2d28 <_calendar_get_counter+0x44>)
    2d0a:	2287      	movs	r2, #135	; 0x87
    2d0c:	0018      	movs	r0, r3
    2d0e:	4b07      	ldr	r3, [pc, #28]	; (2d2c <_calendar_get_counter+0x48>)
    2d10:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	0018      	movs	r0, r3
    2d18:	4b05      	ldr	r3, [pc, #20]	; (2d30 <_calendar_get_counter+0x4c>)
    2d1a:	4798      	blx	r3
    2d1c:	0003      	movs	r3, r0
}
    2d1e:	0018      	movs	r0, r3
    2d20:	46bd      	mov	sp, r7
    2d22:	b002      	add	sp, #8
    2d24:	bd80      	pop	{r7, pc}
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	00006f5c 	.word	0x00006f5c
    2d2c:	00002077 	.word	0x00002077
    2d30:	00002c0d 	.word	0x00002c0d

00002d34 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2d34:	b590      	push	{r4, r7, lr}
    2d36:	b085      	sub	sp, #20
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	220e      	movs	r2, #14
    2d42:	18bc      	adds	r4, r7, r2
    2d44:	0018      	movs	r0, r3
    2d46:	4b0c      	ldr	r3, [pc, #48]	; (2d78 <_rtc_interrupt_handler+0x44>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	8023      	strh	r3, [r4, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    2d4e:	230e      	movs	r3, #14
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	881a      	ldrh	r2, [r3, #0]
    2d54:	2380      	movs	r3, #128	; 0x80
    2d56:	005b      	lsls	r3, r3, #1
    2d58:	4013      	ands	r3, r2
    2d5a:	d009      	beq.n	2d70 <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	685b      	ldr	r3, [r3, #4]
    2d60:	687a      	ldr	r2, [r7, #4]
    2d62:	0010      	movs	r0, r2
    2d64:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	0018      	movs	r0, r3
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <_rtc_interrupt_handler+0x48>)
    2d6e:	4798      	blx	r3
	}
}
    2d70:	46c0      	nop			; (mov r8, r8)
    2d72:	46bd      	mov	sp, r7
    2d74:	b005      	add	sp, #20
    2d76:	bd90      	pop	{r4, r7, pc}
    2d78:	00002b0f 	.word	0x00002b0f
    2d7c:	00002af7 	.word	0x00002af7

00002d80 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    2d84:	4b03      	ldr	r3, [pc, #12]	; (2d94 <RTC_Handler+0x14>)
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	0018      	movs	r0, r3
    2d8a:	4b03      	ldr	r3, [pc, #12]	; (2d98 <RTC_Handler+0x18>)
    2d8c:	4798      	blx	r3
}
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	46bd      	mov	sp, r7
    2d92:	bd80      	pop	{r7, pc}
    2d94:	20000088 	.word	0x20000088
    2d98:	00002d35 	.word	0x00002d35

00002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	af00      	add	r7, sp, #0
    2da2:	0002      	movs	r2, r0
    2da4:	1dfb      	adds	r3, r7, #7
    2da6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2da8:	1dfb      	adds	r3, r7, #7
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	2b7f      	cmp	r3, #127	; 0x7f
    2dae:	d809      	bhi.n	2dc4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2db0:	4b06      	ldr	r3, [pc, #24]	; (2dcc <__NVIC_EnableIRQ+0x30>)
    2db2:	1dfa      	adds	r2, r7, #7
    2db4:	7812      	ldrb	r2, [r2, #0]
    2db6:	0011      	movs	r1, r2
    2db8:	221f      	movs	r2, #31
    2dba:	400a      	ands	r2, r1
    2dbc:	2101      	movs	r1, #1
    2dbe:	4091      	lsls	r1, r2
    2dc0:	000a      	movs	r2, r1
    2dc2:	601a      	str	r2, [r3, #0]
  }
}
    2dc4:	46c0      	nop			; (mov r8, r8)
    2dc6:	46bd      	mov	sp, r7
    2dc8:	b002      	add	sp, #8
    2dca:	bd80      	pop	{r7, pc}
    2dcc:	e000e100 	.word	0xe000e100

00002dd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b082      	sub	sp, #8
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	0002      	movs	r2, r0
    2dd8:	1dfb      	adds	r3, r7, #7
    2dda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2ddc:	1dfb      	adds	r3, r7, #7
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	2b7f      	cmp	r3, #127	; 0x7f
    2de2:	d80e      	bhi.n	2e02 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2de4:	4909      	ldr	r1, [pc, #36]	; (2e0c <__NVIC_DisableIRQ+0x3c>)
    2de6:	1dfb      	adds	r3, r7, #7
    2de8:	781b      	ldrb	r3, [r3, #0]
    2dea:	001a      	movs	r2, r3
    2dec:	231f      	movs	r3, #31
    2dee:	4013      	ands	r3, r2
    2df0:	2201      	movs	r2, #1
    2df2:	409a      	lsls	r2, r3
    2df4:	0013      	movs	r3, r2
    2df6:	2280      	movs	r2, #128	; 0x80
    2df8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2dfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dfe:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	46bd      	mov	sp, r7
    2e06:	b002      	add	sp, #8
    2e08:	bd80      	pop	{r7, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	e000e100 	.word	0xe000e100

00002e10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	0002      	movs	r2, r0
    2e18:	1dfb      	adds	r3, r7, #7
    2e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2e1c:	1dfb      	adds	r3, r7, #7
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	2b7f      	cmp	r3, #127	; 0x7f
    2e22:	d80a      	bhi.n	2e3a <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e24:	4907      	ldr	r1, [pc, #28]	; (2e44 <__NVIC_ClearPendingIRQ+0x34>)
    2e26:	1dfb      	adds	r3, r7, #7
    2e28:	781b      	ldrb	r3, [r3, #0]
    2e2a:	001a      	movs	r2, r3
    2e2c:	231f      	movs	r3, #31
    2e2e:	4013      	ands	r3, r2
    2e30:	2201      	movs	r2, #1
    2e32:	409a      	lsls	r2, r3
    2e34:	23c0      	movs	r3, #192	; 0xc0
    2e36:	005b      	lsls	r3, r3, #1
    2e38:	50ca      	str	r2, [r1, r3]
  }
}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	46bd      	mov	sp, r7
    2e3e:	b002      	add	sp, #8
    2e40:	bd80      	pop	{r7, pc}
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	e000e100 	.word	0xe000e100

00002e48 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b082      	sub	sp, #8
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	6078      	str	r0, [r7, #4]
    2e50:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	69db      	ldr	r3, [r3, #28]
    2e58:	683a      	ldr	r2, [r7, #0]
    2e5a:	4013      	ands	r3, r2
    2e5c:	d1fa      	bne.n	2e54 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	46bd      	mov	sp, r7
    2e62:	b002      	add	sp, #8
    2e64:	bd80      	pop	{r7, pc}

00002e66 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2e66:	b580      	push	{r7, lr}
    2e68:	b082      	sub	sp, #8
    2e6a:	af00      	add	r7, sp, #0
    2e6c:	6078      	str	r0, [r7, #4]
    2e6e:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	69db      	ldr	r3, [r3, #28]
    2e74:	683a      	ldr	r2, [r7, #0]
    2e76:	4013      	ands	r3, r2
    2e78:	1e5a      	subs	r2, r3, #1
    2e7a:	4193      	sbcs	r3, r2
    2e7c:	b2db      	uxtb	r3, r3
}
    2e7e:	0018      	movs	r0, r3
    2e80:	46bd      	mov	sp, r7
    2e82:	b002      	add	sp, #8
    2e84:	bd80      	pop	{r7, pc}

00002e86 <hri_sercomi2cs_wait_for_sync>:

static inline void hri_sercomi2cs_wait_for_sync(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    2e86:	b580      	push	{r7, lr}
    2e88:	b082      	sub	sp, #8
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
    2e8e:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    2e90:	46c0      	nop			; (mov r8, r8)
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	69db      	ldr	r3, [r3, #28]
    2e96:	683a      	ldr	r2, [r7, #0]
    2e98:	4013      	ands	r3, r2
    2e9a:	d1fa      	bne.n	2e92 <hri_sercomi2cs_wait_for_sync+0xc>
	};
}
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	46bd      	mov	sp, r7
    2ea0:	b002      	add	sp, #8
    2ea2:	bd80      	pop	{r7, pc}

00002ea4 <hri_sercomi2cs_is_syncing>:

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b082      	sub	sp, #8
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	6078      	str	r0, [r7, #4]
    2eac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	69db      	ldr	r3, [r3, #28]
    2eb2:	683a      	ldr	r2, [r7, #0]
    2eb4:	4013      	ands	r3, r2
    2eb6:	1e5a      	subs	r2, r3, #1
    2eb8:	4193      	sbcs	r3, r2
    2eba:	b2db      	uxtb	r3, r3
}
    2ebc:	0018      	movs	r0, r3
    2ebe:	46bd      	mov	sp, r7
    2ec0:	b002      	add	sp, #8
    2ec2:	bd80      	pop	{r7, pc}

00002ec4 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b082      	sub	sp, #8
    2ec8:	af00      	add	r7, sp, #0
    2eca:	6078      	str	r0, [r7, #4]
    2ecc:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	69db      	ldr	r3, [r3, #28]
    2ed4:	683a      	ldr	r2, [r7, #0]
    2ed6:	4013      	ands	r3, r2
    2ed8:	d1fa      	bne.n	2ed0 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	46bd      	mov	sp, r7
    2ede:	b002      	add	sp, #8
    2ee0:	bd80      	pop	{r7, pc}

00002ee2 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2ee2:	b580      	push	{r7, lr}
    2ee4:	b082      	sub	sp, #8
    2ee6:	af00      	add	r7, sp, #0
    2ee8:	6078      	str	r0, [r7, #4]
    2eea:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	69db      	ldr	r3, [r3, #28]
    2ef0:	683a      	ldr	r2, [r7, #0]
    2ef2:	4013      	ands	r3, r2
    2ef4:	1e5a      	subs	r2, r3, #1
    2ef6:	4193      	sbcs	r3, r2
    2ef8:	b2db      	uxtb	r3, r3
}
    2efa:	0018      	movs	r0, r3
    2efc:	46bd      	mov	sp, r7
    2efe:	b002      	add	sp, #8
    2f00:	bd80      	pop	{r7, pc}

00002f02 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    2f02:	b580      	push	{r7, lr}
    2f04:	b082      	sub	sp, #8
    2f06:	af00      	add	r7, sp, #0
    2f08:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	2201      	movs	r2, #1
    2f0e:	761a      	strb	r2, [r3, #24]
}
    2f10:	46c0      	nop			; (mov r8, r8)
    2f12:	46bd      	mov	sp, r7
    2f14:	b002      	add	sp, #8
    2f16:	bd80      	pop	{r7, pc}

00002f18 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	2202      	movs	r2, #2
    2f24:	761a      	strb	r2, [r3, #24]
}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	46bd      	mov	sp, r7
    2f2a:	b002      	add	sp, #8
    2f2c:	bd80      	pop	{r7, pc}

00002f2e <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    2f2e:	b580      	push	{r7, lr}
    2f30:	b082      	sub	sp, #8
    2f32:	af00      	add	r7, sp, #0
    2f34:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	7e1b      	ldrb	r3, [r3, #24]
    2f3a:	b2db      	uxtb	r3, r3
}
    2f3c:	0018      	movs	r0, r3
    2f3e:	46bd      	mov	sp, r7
    2f40:	b002      	add	sp, #8
    2f42:	bd80      	pop	{r7, pc}

00002f44 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2f44:	b580      	push	{r7, lr}
    2f46:	b082      	sub	sp, #8
    2f48:	af00      	add	r7, sp, #0
    2f4a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	7e1b      	ldrb	r3, [r3, #24]
    2f50:	b2db      	uxtb	r3, r3
    2f52:	001a      	movs	r2, r3
    2f54:	2301      	movs	r3, #1
    2f56:	4013      	ands	r3, r2
    2f58:	1e5a      	subs	r2, r3, #1
    2f5a:	4193      	sbcs	r3, r2
    2f5c:	b2db      	uxtb	r3, r3
}
    2f5e:	0018      	movs	r0, r3
    2f60:	46bd      	mov	sp, r7
    2f62:	b002      	add	sp, #8
    2f64:	bd80      	pop	{r7, pc}

00002f66 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2f66:	b580      	push	{r7, lr}
    2f68:	b082      	sub	sp, #8
    2f6a:	af00      	add	r7, sp, #0
    2f6c:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	7e1b      	ldrb	r3, [r3, #24]
    2f72:	b2db      	uxtb	r3, r3
    2f74:	085b      	lsrs	r3, r3, #1
    2f76:	2201      	movs	r2, #1
    2f78:	4013      	ands	r3, r2
    2f7a:	1e5a      	subs	r2, r3, #1
    2f7c:	4193      	sbcs	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
}
    2f80:	0018      	movs	r0, r3
    2f82:	46bd      	mov	sp, r7
    2f84:	b002      	add	sp, #8
    2f86:	bd80      	pop	{r7, pc}

00002f88 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b082      	sub	sp, #8
    2f8c:	af00      	add	r7, sp, #0
    2f8e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	7e1b      	ldrb	r3, [r3, #24]
    2f94:	b2db      	uxtb	r3, r3
    2f96:	089b      	lsrs	r3, r3, #2
    2f98:	2201      	movs	r2, #1
    2f9a:	4013      	ands	r3, r2
    2f9c:	1e5a      	subs	r2, r3, #1
    2f9e:	4193      	sbcs	r3, r2
    2fa0:	b2db      	uxtb	r3, r3
}
    2fa2:	0018      	movs	r0, r3
    2fa4:	46bd      	mov	sp, r7
    2fa6:	b002      	add	sp, #8
    2fa8:	bd80      	pop	{r7, pc}

00002faa <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2faa:	b580      	push	{r7, lr}
    2fac:	b082      	sub	sp, #8
    2fae:	af00      	add	r7, sp, #0
    2fb0:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	7e1b      	ldrb	r3, [r3, #24]
    2fb6:	b2db      	uxtb	r3, r3
    2fb8:	09db      	lsrs	r3, r3, #7
    2fba:	2201      	movs	r2, #1
    2fbc:	4013      	ands	r3, r2
    2fbe:	1e5a      	subs	r2, r3, #1
    2fc0:	4193      	sbcs	r3, r2
    2fc2:	b2db      	uxtb	r3, r3
}
    2fc4:	0018      	movs	r0, r3
    2fc6:	46bd      	mov	sp, r7
    2fc8:	b002      	add	sp, #8
    2fca:	bd80      	pop	{r7, pc}

00002fcc <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b082      	sub	sp, #8
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	2280      	movs	r2, #128	; 0x80
    2fd8:	761a      	strb	r2, [r3, #24]
}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	46bd      	mov	sp, r7
    2fde:	b002      	add	sp, #8
    2fe0:	bd80      	pop	{r7, pc}

00002fe2 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    2fe2:	b580      	push	{r7, lr}
    2fe4:	b082      	sub	sp, #8
    2fe6:	af00      	add	r7, sp, #0
    2fe8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	2201      	movs	r2, #1
    2fee:	759a      	strb	r2, [r3, #22]
}
    2ff0:	46c0      	nop			; (mov r8, r8)
    2ff2:	46bd      	mov	sp, r7
    2ff4:	b002      	add	sp, #8
    2ff6:	bd80      	pop	{r7, pc}

00002ff8 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	7d9b      	ldrb	r3, [r3, #22]
    3004:	b2db      	uxtb	r3, r3
    3006:	001a      	movs	r2, r3
    3008:	2301      	movs	r3, #1
    300a:	4013      	ands	r3, r2
    300c:	1e5a      	subs	r2, r3, #1
    300e:	4193      	sbcs	r3, r2
    3010:	b2db      	uxtb	r3, r3
}
    3012:	0018      	movs	r0, r3
    3014:	46bd      	mov	sp, r7
    3016:	b002      	add	sp, #8
    3018:	bd80      	pop	{r7, pc}

0000301a <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    301a:	b580      	push	{r7, lr}
    301c:	b082      	sub	sp, #8
    301e:	af00      	add	r7, sp, #0
    3020:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	2201      	movs	r2, #1
    3026:	751a      	strb	r2, [r3, #20]
}
    3028:	46c0      	nop			; (mov r8, r8)
    302a:	46bd      	mov	sp, r7
    302c:	b002      	add	sp, #8
    302e:	bd80      	pop	{r7, pc}

00003030 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	2202      	movs	r2, #2
    303c:	759a      	strb	r2, [r3, #22]
}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	46bd      	mov	sp, r7
    3042:	b002      	add	sp, #8
    3044:	bd80      	pop	{r7, pc}

00003046 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    3046:	b580      	push	{r7, lr}
    3048:	b082      	sub	sp, #8
    304a:	af00      	add	r7, sp, #0
    304c:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	7d9b      	ldrb	r3, [r3, #22]
    3052:	b2db      	uxtb	r3, r3
    3054:	085b      	lsrs	r3, r3, #1
    3056:	2201      	movs	r2, #1
    3058:	4013      	ands	r3, r2
    305a:	1e5a      	subs	r2, r3, #1
    305c:	4193      	sbcs	r3, r2
    305e:	b2db      	uxtb	r3, r3
}
    3060:	0018      	movs	r0, r3
    3062:	46bd      	mov	sp, r7
    3064:	b002      	add	sp, #8
    3066:	bd80      	pop	{r7, pc}

00003068 <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    3068:	b580      	push	{r7, lr}
    306a:	b082      	sub	sp, #8
    306c:	af00      	add	r7, sp, #0
    306e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	2202      	movs	r2, #2
    3074:	751a      	strb	r2, [r3, #20]
}
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	46bd      	mov	sp, r7
    307a:	b002      	add	sp, #8
    307c:	bd80      	pop	{r7, pc}
	...

00003080 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3080:	b580      	push	{r7, lr}
    3082:	b082      	sub	sp, #8
    3084:	af00      	add	r7, sp, #0
    3086:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	681b      	ldr	r3, [r3, #0]
    308c:	2202      	movs	r2, #2
    308e:	431a      	orrs	r2, r3
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2103      	movs	r1, #3
    3098:	0018      	movs	r0, r3
    309a:	4b03      	ldr	r3, [pc, #12]	; (30a8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x28>)
    309c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	46bd      	mov	sp, r7
    30a2:	b002      	add	sp, #8
    30a4:	bd80      	pop	{r7, pc}
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	00002e49 	.word	0x00002e49

000030ac <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b082      	sub	sp, #8
    30b0:	af00      	add	r7, sp, #0
    30b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	2202      	movs	r2, #2
    30ba:	4393      	bics	r3, r2
    30bc:	001a      	movs	r2, r3
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	2103      	movs	r1, #3
    30c6:	0018      	movs	r0, r3
    30c8:	4b02      	ldr	r3, [pc, #8]	; (30d4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    30ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30cc:	46c0      	nop			; (mov r8, r8)
    30ce:	46bd      	mov	sp, r7
    30d0:	b002      	add	sp, #8
    30d2:	bd80      	pop	{r7, pc}
    30d4:	00002e49 	.word	0x00002e49

000030d8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b084      	sub	sp, #16
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    30e6:	68fb      	ldr	r3, [r7, #12]
    30e8:	0edb      	lsrs	r3, r3, #27
    30ea:	2201      	movs	r2, #1
    30ec:	4013      	ands	r3, r2
    30ee:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	1e5a      	subs	r2, r3, #1
    30f4:	4193      	sbcs	r3, r2
    30f6:	b2db      	uxtb	r3, r3
}
    30f8:	0018      	movs	r0, r3
    30fa:	46bd      	mov	sp, r7
    30fc:	b004      	add	sp, #16
    30fe:	bd80      	pop	{r7, pc}

00003100 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    3100:	b580      	push	{r7, lr}
    3102:	b084      	sub	sp, #16
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
    3108:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	2103      	movs	r1, #3
    310e:	0018      	movs	r0, r3
    3110:	4b06      	ldr	r3, [pc, #24]	; (312c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    3112:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    311a:	68fb      	ldr	r3, [r7, #12]
    311c:	683a      	ldr	r2, [r7, #0]
    311e:	4013      	ands	r3, r2
    3120:	60fb      	str	r3, [r7, #12]
	return tmp;
    3122:	68fb      	ldr	r3, [r7, #12]
}
    3124:	0018      	movs	r0, r3
    3126:	46bd      	mov	sp, r7
    3128:	b004      	add	sp, #16
    312a:	bd80      	pop	{r7, pc}
    312c:	00002e49 	.word	0x00002e49

00003130 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    3130:	b580      	push	{r7, lr}
    3132:	b082      	sub	sp, #8
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
    3138:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	683a      	ldr	r2, [r7, #0]
    313e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	2103      	movs	r1, #3
    3144:	0018      	movs	r0, r3
    3146:	4b03      	ldr	r3, [pc, #12]	; (3154 <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    3148:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	46bd      	mov	sp, r7
    314e:	b002      	add	sp, #8
    3150:	bd80      	pop	{r7, pc}
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	00002e49 	.word	0x00002e49

00003158 <hri_sercomi2cs_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cs_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3158:	b580      	push	{r7, lr}
    315a:	b082      	sub	sp, #8
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	2202      	movs	r2, #2
    3166:	4393      	bics	r3, r2
    3168:	001a      	movs	r2, r3
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	2103      	movs	r1, #3
    3172:	0018      	movs	r0, r3
    3174:	4b02      	ldr	r3, [pc, #8]	; (3180 <hri_sercomi2cs_clear_CTRLA_ENABLE_bit+0x28>)
    3176:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3178:	46c0      	nop			; (mov r8, r8)
    317a:	46bd      	mov	sp, r7
    317c:	b002      	add	sp, #8
    317e:	bd80      	pop	{r7, pc}
    3180:	00002e87 	.word	0x00002e87

00003184 <hri_sercomi2cs_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
    3184:	b580      	push	{r7, lr}
    3186:	b084      	sub	sp, #16
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
    318c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_MASK);
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	2103      	movs	r1, #3
    3192:	0018      	movs	r0, r3
    3194:	4b06      	ldr	r3, [pc, #24]	; (31b0 <hri_sercomi2cs_get_CTRLA_reg+0x2c>)
    3196:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	681b      	ldr	r3, [r3, #0]
    319c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    319e:	68fb      	ldr	r3, [r7, #12]
    31a0:	683a      	ldr	r2, [r7, #0]
    31a2:	4013      	ands	r3, r2
    31a4:	60fb      	str	r3, [r7, #12]
	return tmp;
    31a6:	68fb      	ldr	r3, [r7, #12]
}
    31a8:	0018      	movs	r0, r3
    31aa:	46bd      	mov	sp, r7
    31ac:	b004      	add	sp, #16
    31ae:	bd80      	pop	{r7, pc}
    31b0:	00002e87 	.word	0x00002e87

000031b4 <hri_sercomi2cs_write_CTRLA_reg>:

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b082      	sub	sp, #8
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
    31bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	683a      	ldr	r2, [r7, #0]
    31c2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_MASK);
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	2103      	movs	r1, #3
    31c8:	0018      	movs	r0, r3
    31ca:	4b03      	ldr	r3, [pc, #12]	; (31d8 <hri_sercomi2cs_write_CTRLA_reg+0x24>)
    31cc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	46bd      	mov	sp, r7
    31d2:	b002      	add	sp, #8
    31d4:	bd80      	pop	{r7, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00002e87 	.word	0x00002e87

000031dc <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	681b      	ldr	r3, [r3, #0]
    31e8:	2202      	movs	r2, #2
    31ea:	4393      	bics	r3, r2
    31ec:	001a      	movs	r2, r3
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	2103      	movs	r1, #3
    31f6:	0018      	movs	r0, r3
    31f8:	4b02      	ldr	r3, [pc, #8]	; (3204 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    31fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b002      	add	sp, #8
    3202:	bd80      	pop	{r7, pc}
    3204:	00002ec5 	.word	0x00002ec5

00003208 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    3208:	b580      	push	{r7, lr}
    320a:	b084      	sub	sp, #16
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	2103      	movs	r1, #3
    3216:	0018      	movs	r0, r3
    3218:	4b06      	ldr	r3, [pc, #24]	; (3234 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    321a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3222:	68fb      	ldr	r3, [r7, #12]
    3224:	683a      	ldr	r2, [r7, #0]
    3226:	4013      	ands	r3, r2
    3228:	60fb      	str	r3, [r7, #12]
	return tmp;
    322a:	68fb      	ldr	r3, [r7, #12]
}
    322c:	0018      	movs	r0, r3
    322e:	46bd      	mov	sp, r7
    3230:	b004      	add	sp, #16
    3232:	bd80      	pop	{r7, pc}
    3234:	00002ec5 	.word	0x00002ec5

00003238 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
    3240:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	2103      	movs	r1, #3
    324c:	0018      	movs	r0, r3
    324e:	4b03      	ldr	r3, [pc, #12]	; (325c <hri_sercomusart_write_CTRLA_reg+0x24>)
    3250:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	46bd      	mov	sp, r7
    3256:	b002      	add	sp, #8
    3258:	bd80      	pop	{r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	00002ec5 	.word	0x00002ec5

00003260 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    3260:	b580      	push	{r7, lr}
    3262:	b082      	sub	sp, #8
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	685b      	ldr	r3, [r3, #4]
    326c:	2280      	movs	r2, #128	; 0x80
    326e:	0052      	lsls	r2, r2, #1
    3270:	431a      	orrs	r2, r3
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	2104      	movs	r1, #4
    327a:	0018      	movs	r0, r3
    327c:	4b02      	ldr	r3, [pc, #8]	; (3288 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    327e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3280:	46c0      	nop			; (mov r8, r8)
    3282:	46bd      	mov	sp, r7
    3284:	b002      	add	sp, #8
    3286:	bd80      	pop	{r7, pc}
    3288:	00002e49 	.word	0x00002e49

0000328c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    328c:	b580      	push	{r7, lr}
    328e:	b082      	sub	sp, #8
    3290:	af00      	add	r7, sp, #0
    3292:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	685b      	ldr	r3, [r3, #4]
    3298:	4a06      	ldr	r2, [pc, #24]	; (32b4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    329a:	401a      	ands	r2, r3
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	2104      	movs	r1, #4
    32a4:	0018      	movs	r0, r3
    32a6:	4b04      	ldr	r3, [pc, #16]	; (32b8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    32a8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	46bd      	mov	sp, r7
    32ae:	b002      	add	sp, #8
    32b0:	bd80      	pop	{r7, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	fffffeff 	.word	0xfffffeff
    32b8:	00002e49 	.word	0x00002e49

000032bc <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b082      	sub	sp, #8
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	685b      	ldr	r3, [r3, #4]
    32c8:	2280      	movs	r2, #128	; 0x80
    32ca:	02d2      	lsls	r2, r2, #11
    32cc:	431a      	orrs	r2, r3
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	2104      	movs	r1, #4
    32d6:	0018      	movs	r0, r3
    32d8:	4b02      	ldr	r3, [pc, #8]	; (32e4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    32da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32dc:	46c0      	nop			; (mov r8, r8)
    32de:	46bd      	mov	sp, r7
    32e0:	b002      	add	sp, #8
    32e2:	bd80      	pop	{r7, pc}
    32e4:	00002e49 	.word	0x00002e49

000032e8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	685b      	ldr	r3, [r3, #4]
    32f4:	4a06      	ldr	r2, [pc, #24]	; (3310 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    32f6:	401a      	ands	r2, r3
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	2104      	movs	r1, #4
    3300:	0018      	movs	r0, r3
    3302:	4b04      	ldr	r3, [pc, #16]	; (3314 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    3304:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	46bd      	mov	sp, r7
    330a:	b002      	add	sp, #8
    330c:	bd80      	pop	{r7, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	fffbffff 	.word	0xfffbffff
    3314:	00002e49 	.word	0x00002e49

00003318 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
    3320:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	685a      	ldr	r2, [r3, #4]
    3326:	683b      	ldr	r3, [r7, #0]
    3328:	0419      	lsls	r1, r3, #16
    332a:	23c0      	movs	r3, #192	; 0xc0
    332c:	029b      	lsls	r3, r3, #10
    332e:	400b      	ands	r3, r1
    3330:	431a      	orrs	r2, r3
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	2104      	movs	r1, #4
    333a:	0018      	movs	r0, r3
    333c:	4b02      	ldr	r3, [pc, #8]	; (3348 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    333e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3340:	46c0      	nop			; (mov r8, r8)
    3342:	46bd      	mov	sp, r7
    3344:	b002      	add	sp, #8
    3346:	bd80      	pop	{r7, pc}
    3348:	00002e49 	.word	0x00002e49

0000334c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    334c:	b580      	push	{r7, lr}
    334e:	b082      	sub	sp, #8
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
    3354:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	683a      	ldr	r2, [r7, #0]
    335a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	2104      	movs	r1, #4
    3360:	0018      	movs	r0, r3
    3362:	4b03      	ldr	r3, [pc, #12]	; (3370 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    3364:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	46bd      	mov	sp, r7
    336a:	b002      	add	sp, #8
    336c:	bd80      	pop	{r7, pc}
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	00002e49 	.word	0x00002e49

00003374 <hri_sercomi2cs_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
    3374:	b580      	push	{r7, lr}
    3376:	b082      	sub	sp, #8
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	683a      	ldr	r2, [r7, #0]
    3382:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3384:	46c0      	nop			; (mov r8, r8)
    3386:	46bd      	mov	sp, r7
    3388:	b002      	add	sp, #8
    338a:	bd80      	pop	{r7, pc}

0000338c <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    338c:	b580      	push	{r7, lr}
    338e:	b082      	sub	sp, #8
    3390:	af00      	add	r7, sp, #0
    3392:	6078      	str	r0, [r7, #4]
    3394:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	683a      	ldr	r2, [r7, #0]
    339a:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	2107      	movs	r1, #7
    33a0:	0018      	movs	r0, r3
    33a2:	4b03      	ldr	r3, [pc, #12]	; (33b0 <hri_sercomusart_write_CTRLB_reg+0x24>)
    33a4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	46bd      	mov	sp, r7
    33aa:	b002      	add	sp, #8
    33ac:	bd80      	pop	{r7, pc}
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	00002ec5 	.word	0x00002ec5

000033b4 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    33b4:	b580      	push	{r7, lr}
    33b6:	b082      	sub	sp, #8
    33b8:	af00      	add	r7, sp, #0
    33ba:	6078      	str	r0, [r7, #4]
    33bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	683a      	ldr	r2, [r7, #0]
    33c2:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33c4:	46c0      	nop			; (mov r8, r8)
    33c6:	46bd      	mov	sp, r7
    33c8:	b002      	add	sp, #8
    33ca:	bd80      	pop	{r7, pc}

000033cc <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b082      	sub	sp, #8
    33d0:	af00      	add	r7, sp, #0
    33d2:	6078      	str	r0, [r7, #4]
    33d4:	000a      	movs	r2, r1
    33d6:	1cbb      	adds	r3, r7, #2
    33d8:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	1cba      	adds	r2, r7, #2
    33de:	8812      	ldrh	r2, [r2, #0]
    33e0:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	46bd      	mov	sp, r7
    33e6:	b002      	add	sp, #8
    33e8:	bd80      	pop	{r7, pc}

000033ea <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    33ea:	b580      	push	{r7, lr}
    33ec:	b082      	sub	sp, #8
    33ee:	af00      	add	r7, sp, #0
    33f0:	6078      	str	r0, [r7, #4]
    33f2:	000a      	movs	r2, r1
    33f4:	1cfb      	adds	r3, r7, #3
    33f6:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	1cfa      	adds	r2, r7, #3
    33fc:	7812      	ldrb	r2, [r2, #0]
    33fe:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3400:	46c0      	nop			; (mov r8, r8)
    3402:	46bd      	mov	sp, r7
    3404:	b002      	add	sp, #8
    3406:	bd80      	pop	{r7, pc}

00003408 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    3408:	b580      	push	{r7, lr}
    340a:	b084      	sub	sp, #16
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
    3410:	000a      	movs	r2, r1
    3412:	1cfb      	adds	r3, r7, #3
    3414:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    341a:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    341c:	68fb      	ldr	r3, [r7, #12]
    341e:	4a0b      	ldr	r2, [pc, #44]	; (344c <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    3420:	4013      	ands	r3, r2
    3422:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    3424:	1cfb      	adds	r3, r7, #3
    3426:	781b      	ldrb	r3, [r3, #0]
    3428:	039b      	lsls	r3, r3, #14
    342a:	001a      	movs	r2, r3
    342c:	68fb      	ldr	r3, [r7, #12]
    342e:	4313      	orrs	r3, r2
    3430:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	68fa      	ldr	r2, [r7, #12]
    3436:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	2104      	movs	r1, #4
    343c:	0018      	movs	r0, r3
    343e:	4b04      	ldr	r3, [pc, #16]	; (3450 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    3440:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	46bd      	mov	sp, r7
    3446:	b004      	add	sp, #16
    3448:	bd80      	pop	{r7, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	ffffbfff 	.word	0xffffbfff
    3450:	00002e49 	.word	0x00002e49

00003454 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    3454:	b580      	push	{r7, lr}
    3456:	b082      	sub	sp, #8
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
    345c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	683a      	ldr	r2, [r7, #0]
    3462:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	2104      	movs	r1, #4
    3468:	0018      	movs	r0, r3
    346a:	4b03      	ldr	r3, [pc, #12]	; (3478 <hri_sercomi2cm_write_ADDR_reg+0x24>)
    346c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	46bd      	mov	sp, r7
    3472:	b002      	add	sp, #8
    3474:	bd80      	pop	{r7, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	00002e49 	.word	0x00002e49

0000347c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	2104      	movs	r1, #4
    3488:	0018      	movs	r0, r3
    348a:	4b04      	ldr	r3, [pc, #16]	; (349c <hri_sercomi2cm_read_ADDR_reg+0x20>)
    348c:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    3492:	0018      	movs	r0, r3
    3494:	46bd      	mov	sp, r7
    3496:	b002      	add	sp, #8
    3498:	bd80      	pop	{r7, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00002e49 	.word	0x00002e49

000034a0 <hri_sercomi2cs_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	683a      	ldr	r2, [r7, #0]
    34ae:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	46bd      	mov	sp, r7
    34b4:	b002      	add	sp, #8
    34b6:	bd80      	pop	{r7, pc}

000034b8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b082      	sub	sp, #8
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
    34c0:	000a      	movs	r2, r1
    34c2:	1cfb      	adds	r3, r7, #3
    34c4:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	1cfa      	adds	r2, r7, #3
    34ca:	2128      	movs	r1, #40	; 0x28
    34cc:	7812      	ldrb	r2, [r2, #0]
    34ce:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	2104      	movs	r1, #4
    34d4:	0018      	movs	r0, r3
    34d6:	4b03      	ldr	r3, [pc, #12]	; (34e4 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    34d8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	46bd      	mov	sp, r7
    34de:	b002      	add	sp, #8
    34e0:	bd80      	pop	{r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00002e49 	.word	0x00002e49

000034e8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b082      	sub	sp, #8
    34ec:	af00      	add	r7, sp, #0
    34ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	2104      	movs	r1, #4
    34f4:	0018      	movs	r0, r3
    34f6:	4b05      	ldr	r3, [pc, #20]	; (350c <hri_sercomi2cm_read_DATA_reg+0x24>)
    34f8:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	2228      	movs	r2, #40	; 0x28
    34fe:	5c9b      	ldrb	r3, [r3, r2]
    3500:	b2db      	uxtb	r3, r3
}
    3502:	0018      	movs	r0, r3
    3504:	46bd      	mov	sp, r7
    3506:	b002      	add	sp, #8
    3508:	bd80      	pop	{r7, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	00002e49 	.word	0x00002e49

00003510 <hri_sercomi2cs_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
    3510:	b580      	push	{r7, lr}
    3512:	b082      	sub	sp, #8
    3514:	af00      	add	r7, sp, #0
    3516:	6078      	str	r0, [r7, #4]
    3518:	000a      	movs	r2, r1
    351a:	1cfb      	adds	r3, r7, #3
    351c:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	1cfa      	adds	r2, r7, #3
    3522:	2128      	movs	r1, #40	; 0x28
    3524:	7812      	ldrb	r2, [r2, #0]
    3526:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3528:	46c0      	nop			; (mov r8, r8)
    352a:	46bd      	mov	sp, r7
    352c:	b002      	add	sp, #8
    352e:	bd80      	pop	{r7, pc}

00003530 <hri_sercomi2cs_read_DATA_reg>:
	((Sercom *)hw)->I2CS.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
    3530:	b580      	push	{r7, lr}
    3532:	b082      	sub	sp, #8
    3534:	af00      	add	r7, sp, #0
    3536:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CS.DATA.reg;
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	2228      	movs	r2, #40	; 0x28
    353c:	5c9b      	ldrb	r3, [r3, r2]
    353e:	b2db      	uxtb	r3, r3
}
    3540:	0018      	movs	r0, r3
    3542:	46bd      	mov	sp, r7
    3544:	b002      	add	sp, #8
    3546:	bd80      	pop	{r7, pc}

00003548 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    3548:	b580      	push	{r7, lr}
    354a:	b082      	sub	sp, #8
    354c:	af00      	add	r7, sp, #0
    354e:	6078      	str	r0, [r7, #4]
    3550:	000a      	movs	r2, r1
    3552:	1cbb      	adds	r3, r7, #2
    3554:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	1cba      	adds	r2, r7, #2
    355a:	8812      	ldrh	r2, [r2, #0]
    355c:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	46bd      	mov	sp, r7
    3562:	b002      	add	sp, #8
    3564:	bd80      	pop	{r7, pc}

00003566 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    3566:	b580      	push	{r7, lr}
    3568:	b082      	sub	sp, #8
    356a:	af00      	add	r7, sp, #0
    356c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3572:	b29b      	uxth	r3, r3
}
    3574:	0018      	movs	r0, r3
    3576:	46bd      	mov	sp, r7
    3578:	b002      	add	sp, #8
    357a:	bd80      	pop	{r7, pc}

0000357c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    357c:	b580      	push	{r7, lr}
    357e:	b082      	sub	sp, #8
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
    3584:	000a      	movs	r2, r1
    3586:	1cfb      	adds	r3, r7, #3
    3588:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	1cfa      	adds	r2, r7, #3
    358e:	2130      	movs	r1, #48	; 0x30
    3590:	7812      	ldrb	r2, [r2, #0]
    3592:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3594:	46c0      	nop			; (mov r8, r8)
    3596:	46bd      	mov	sp, r7
    3598:	b002      	add	sp, #8
    359a:	bd80      	pop	{r7, pc}

0000359c <hri_sercomi2cs_get_STATUS_DIR_bit>:
	((Sercom *)hw)->I2CS.STATUS.reg = SERCOM_I2CS_STATUS_RXNACK;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cs_get_STATUS_DIR_bit(const void *const hw)
{
    359c:	b580      	push	{r7, lr}
    359e:	b082      	sub	sp, #8
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) >> SERCOM_I2CS_STATUS_DIR_Pos;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	8b5b      	ldrh	r3, [r3, #26]
    35a8:	b29b      	uxth	r3, r3
    35aa:	08db      	lsrs	r3, r3, #3
    35ac:	2201      	movs	r2, #1
    35ae:	4013      	ands	r3, r2
    35b0:	1e5a      	subs	r2, r3, #1
    35b2:	4193      	sbcs	r3, r2
    35b4:	b2db      	uxtb	r3, r3
}
    35b6:	0018      	movs	r0, r3
    35b8:	46bd      	mov	sp, r7
    35ba:	b002      	add	sp, #8
    35bc:	bd80      	pop	{r7, pc}

000035be <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    35be:	b580      	push	{r7, lr}
    35c0:	b082      	sub	sp, #8
    35c2:	af00      	add	r7, sp, #0
    35c4:	6078      	str	r0, [r7, #4]
    35c6:	000a      	movs	r2, r1
    35c8:	1cbb      	adds	r3, r7, #2
    35ca:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	1cba      	adds	r2, r7, #2
    35d0:	8812      	ldrh	r2, [r2, #0]
    35d2:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    35d4:	46c0      	nop			; (mov r8, r8)
    35d6:	46bd      	mov	sp, r7
    35d8:	b002      	add	sp, #8
    35da:	bd80      	pop	{r7, pc}

000035dc <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    35dc:	b580      	push	{r7, lr}
    35de:	b082      	sub	sp, #8
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	8b5b      	ldrh	r3, [r3, #26]
    35e8:	b29b      	uxth	r3, r3
}
    35ea:	0018      	movs	r0, r3
    35ec:	46bd      	mov	sp, r7
    35ee:	b002      	add	sp, #8
    35f0:	bd80      	pop	{r7, pc}
	...

000035f4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    35f4:	b580      	push	{r7, lr}
    35f6:	b082      	sub	sp, #8
    35f8:	af00      	add	r7, sp, #0
    35fa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	2104      	movs	r1, #4
    3600:	0018      	movs	r0, r3
    3602:	4b07      	ldr	r3, [pc, #28]	; (3620 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x2c>)
    3604:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	8b5b      	ldrh	r3, [r3, #26]
    360a:	b29b      	uxth	r3, r3
    360c:	091b      	lsrs	r3, r3, #4
    360e:	b29b      	uxth	r3, r3
    3610:	2203      	movs	r2, #3
    3612:	4013      	ands	r3, r2
    3614:	b29b      	uxth	r3, r3
}
    3616:	0018      	movs	r0, r3
    3618:	46bd      	mov	sp, r7
    361a:	b002      	add	sp, #8
    361c:	bd80      	pop	{r7, pc}
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	00002e49 	.word	0x00002e49

00003624 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    3624:	b580      	push	{r7, lr}
    3626:	b082      	sub	sp, #8
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	2104      	movs	r1, #4
    3630:	0018      	movs	r0, r3
    3632:	4b04      	ldr	r3, [pc, #16]	; (3644 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    3634:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	8b5b      	ldrh	r3, [r3, #26]
    363a:	b29b      	uxth	r3, r3
}
    363c:	0018      	movs	r0, r3
    363e:	46bd      	mov	sp, r7
    3640:	b002      	add	sp, #8
    3642:	bd80      	pop	{r7, pc}
    3644:	00002e49 	.word	0x00002e49

00003648 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    364e:	6078      	str	r0, [r7, #4]
    3650:	000a      	movs	r2, r1
    3652:	1cbb      	adds	r3, r7, #2
    3654:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	1cba      	adds	r2, r7, #2
    365a:	8812      	ldrh	r2, [r2, #0]
    365c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	2104      	movs	r1, #4
    3662:	0018      	movs	r0, r3
    3664:	4b02      	ldr	r3, [pc, #8]	; (3670 <hri_sercomi2cm_clear_STATUS_reg+0x28>)
    3666:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3668:	46c0      	nop			; (mov r8, r8)
    366a:	46bd      	mov	sp, r7
    366c:	b002      	add	sp, #8
    366e:	bd80      	pop	{r7, pc}
    3670:	00002e49 	.word	0x00002e49

00003674 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    3674:	b580      	push	{r7, lr}
    3676:	b084      	sub	sp, #16
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
    367c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	1e5a      	subs	r2, r3, #1
    3682:	4193      	sbcs	r3, r2
    3684:	b2db      	uxtb	r3, r3
    3686:	491c      	ldr	r1, [pc, #112]	; (36f8 <_usart_async_init+0x84>)
    3688:	22c6      	movs	r2, #198	; 0xc6
    368a:	0018      	movs	r0, r3
    368c:	4b1b      	ldr	r3, [pc, #108]	; (36fc <_usart_async_init+0x88>)
    368e:	4798      	blx	r3

	init_status = _usart_init(hw);
    3690:	683b      	ldr	r3, [r7, #0]
    3692:	0018      	movs	r0, r3
    3694:	4b1a      	ldr	r3, [pc, #104]	; (3700 <_usart_async_init+0x8c>)
    3696:	4798      	blx	r3
    3698:	0003      	movs	r3, r0
    369a:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	2b00      	cmp	r3, #0
    36a0:	d001      	beq.n	36a6 <_usart_async_init+0x32>
		return init_status;
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	e024      	b.n	36f0 <_usart_async_init+0x7c>
	}
	device->hw = hw;
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	683a      	ldr	r2, [r7, #0]
    36aa:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    36ac:	687a      	ldr	r2, [r7, #4]
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	0011      	movs	r1, r2
    36b2:	0018      	movs	r0, r3
    36b4:	4b13      	ldr	r3, [pc, #76]	; (3704 <_usart_async_init+0x90>)
    36b6:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36b8:	683b      	ldr	r3, [r7, #0]
    36ba:	0018      	movs	r0, r3
    36bc:	4b12      	ldr	r3, [pc, #72]	; (3708 <_usart_async_init+0x94>)
    36be:	4798      	blx	r3
    36c0:	0003      	movs	r3, r0
    36c2:	b25b      	sxtb	r3, r3
    36c4:	0018      	movs	r0, r3
    36c6:	4b11      	ldr	r3, [pc, #68]	; (370c <_usart_async_init+0x98>)
    36c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	0018      	movs	r0, r3
    36ce:	4b0e      	ldr	r3, [pc, #56]	; (3708 <_usart_async_init+0x94>)
    36d0:	4798      	blx	r3
    36d2:	0003      	movs	r3, r0
    36d4:	b25b      	sxtb	r3, r3
    36d6:	0018      	movs	r0, r3
    36d8:	4b0d      	ldr	r3, [pc, #52]	; (3710 <_usart_async_init+0x9c>)
    36da:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36dc:	683b      	ldr	r3, [r7, #0]
    36de:	0018      	movs	r0, r3
    36e0:	4b09      	ldr	r3, [pc, #36]	; (3708 <_usart_async_init+0x94>)
    36e2:	4798      	blx	r3
    36e4:	0003      	movs	r3, r0
    36e6:	b25b      	sxtb	r3, r3
    36e8:	0018      	movs	r0, r3
    36ea:	4b0a      	ldr	r3, [pc, #40]	; (3714 <_usart_async_init+0xa0>)
    36ec:	4798      	blx	r3

	return ERR_NONE;
    36ee:	2300      	movs	r3, #0
}
    36f0:	0018      	movs	r0, r3
    36f2:	46bd      	mov	sp, r7
    36f4:	b004      	add	sp, #16
    36f6:	bd80      	pop	{r7, pc}
    36f8:	00006f74 	.word	0x00006f74
    36fc:	00002077 	.word	0x00002077
    3700:	00003991 	.word	0x00003991
    3704:	00003955 	.word	0x00003955
    3708:	00003e9d 	.word	0x00003e9d
    370c:	00002dd1 	.word	0x00002dd1
    3710:	00002e11 	.word	0x00002e11
    3714:	00002d9d 	.word	0x00002d9d

00003718 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    3718:	b580      	push	{r7, lr}
    371a:	b082      	sub	sp, #8
    371c:	af00      	add	r7, sp, #0
    371e:	6078      	str	r0, [r7, #4]
    3720:	000a      	movs	r2, r1
    3722:	1cfb      	adds	r3, r7, #3
    3724:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	699a      	ldr	r2, [r3, #24]
    372a:	1cfb      	adds	r3, r7, #3
    372c:	781b      	ldrb	r3, [r3, #0]
    372e:	b29b      	uxth	r3, r3
    3730:	0019      	movs	r1, r3
    3732:	0010      	movs	r0, r2
    3734:	4b02      	ldr	r3, [pc, #8]	; (3740 <_usart_async_write_byte+0x28>)
    3736:	4798      	blx	r3
}
    3738:	46c0      	nop			; (mov r8, r8)
    373a:	46bd      	mov	sp, r7
    373c:	b002      	add	sp, #8
    373e:	bd80      	pop	{r7, pc}
    3740:	00003549 	.word	0x00003549

00003744 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    3744:	b580      	push	{r7, lr}
    3746:	b082      	sub	sp, #8
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	699b      	ldr	r3, [r3, #24]
    3750:	0018      	movs	r0, r3
    3752:	4b03      	ldr	r3, [pc, #12]	; (3760 <_usart_async_enable_byte_sent_irq+0x1c>)
    3754:	4798      	blx	r3
}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	46bd      	mov	sp, r7
    375a:	b002      	add	sp, #8
    375c:	bd80      	pop	{r7, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	00002fe3 	.word	0x00002fe3

00003764 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    3764:	b580      	push	{r7, lr}
    3766:	b082      	sub	sp, #8
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	699b      	ldr	r3, [r3, #24]
    3770:	0018      	movs	r0, r3
    3772:	4b03      	ldr	r3, [pc, #12]	; (3780 <_usart_async_enable_tx_done_irq+0x1c>)
    3774:	4798      	blx	r3
}
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	46bd      	mov	sp, r7
    377a:	b002      	add	sp, #8
    377c:	bd80      	pop	{r7, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	00003031 	.word	0x00003031

00003784 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3784:	b580      	push	{r7, lr}
    3786:	b082      	sub	sp, #8
    3788:	af00      	add	r7, sp, #0
    378a:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	4a08      	ldr	r2, [pc, #32]	; (37b0 <_sercom_get_hardware_index+0x2c>)
    3790:	4293      	cmp	r3, r2
    3792:	d101      	bne.n	3798 <_sercom_get_hardware_index+0x14>
		return 5;
    3794:	2305      	movs	r3, #5
    3796:	e006      	b.n	37a6 <_sercom_get_hardware_index+0x22>
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	22be      	movs	r2, #190	; 0xbe
    379c:	0612      	lsls	r2, r2, #24
    379e:	4694      	mov	ip, r2
    37a0:	4463      	add	r3, ip
    37a2:	0a9b      	lsrs	r3, r3, #10
    37a4:	b2db      	uxtb	r3, r3
}
    37a6:	0018      	movs	r0, r3
    37a8:	46bd      	mov	sp, r7
    37aa:	b002      	add	sp, #8
    37ac:	bd80      	pop	{r7, pc}
    37ae:	46c0      	nop			; (mov r8, r8)
    37b0:	43000400 	.word	0x43000400

000037b4 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    37b4:	b590      	push	{r4, r7, lr}
    37b6:	b085      	sub	sp, #20
    37b8:	af00      	add	r7, sp, #0
    37ba:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	699b      	ldr	r3, [r3, #24]
    37c0:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	0018      	movs	r0, r3
    37c6:	4b35      	ldr	r3, [pc, #212]	; (389c <_sercom_usart_interrupt_handler+0xe8>)
    37c8:	4798      	blx	r3
    37ca:	1e03      	subs	r3, r0, #0
    37cc:	d00f      	beq.n	37ee <_sercom_usart_interrupt_handler+0x3a>
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	0018      	movs	r0, r3
    37d2:	4b33      	ldr	r3, [pc, #204]	; (38a0 <_sercom_usart_interrupt_handler+0xec>)
    37d4:	4798      	blx	r3
    37d6:	1e03      	subs	r3, r0, #0
    37d8:	d009      	beq.n	37ee <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	0018      	movs	r0, r3
    37de:	4b31      	ldr	r3, [pc, #196]	; (38a4 <_sercom_usart_interrupt_handler+0xf0>)
    37e0:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	687a      	ldr	r2, [r7, #4]
    37e8:	0010      	movs	r0, r2
    37ea:	4798      	blx	r3
    37ec:	e053      	b.n	3896 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    37ee:	68fb      	ldr	r3, [r7, #12]
    37f0:	0018      	movs	r0, r3
    37f2:	4b2d      	ldr	r3, [pc, #180]	; (38a8 <_sercom_usart_interrupt_handler+0xf4>)
    37f4:	4798      	blx	r3
    37f6:	1e03      	subs	r3, r0, #0
    37f8:	d00f      	beq.n	381a <_sercom_usart_interrupt_handler+0x66>
    37fa:	68fb      	ldr	r3, [r7, #12]
    37fc:	0018      	movs	r0, r3
    37fe:	4b2b      	ldr	r3, [pc, #172]	; (38ac <_sercom_usart_interrupt_handler+0xf8>)
    3800:	4798      	blx	r3
    3802:	1e03      	subs	r3, r0, #0
    3804:	d009      	beq.n	381a <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    3806:	68fb      	ldr	r3, [r7, #12]
    3808:	0018      	movs	r0, r3
    380a:	4b29      	ldr	r3, [pc, #164]	; (38b0 <_sercom_usart_interrupt_handler+0xfc>)
    380c:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	689b      	ldr	r3, [r3, #8]
    3812:	687a      	ldr	r2, [r7, #4]
    3814:	0010      	movs	r0, r2
    3816:	4798      	blx	r3
    3818:	e03d      	b.n	3896 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	0018      	movs	r0, r3
    381e:	4b25      	ldr	r3, [pc, #148]	; (38b4 <_sercom_usart_interrupt_handler+0x100>)
    3820:	4798      	blx	r3
    3822:	1e03      	subs	r3, r0, #0
    3824:	d01b      	beq.n	385e <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    3826:	68fb      	ldr	r3, [r7, #12]
    3828:	0018      	movs	r0, r3
    382a:	4b23      	ldr	r3, [pc, #140]	; (38b8 <_sercom_usart_interrupt_handler+0x104>)
    382c:	4798      	blx	r3
    382e:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    3830:	001a      	movs	r2, r3
    3832:	2337      	movs	r3, #55	; 0x37
    3834:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    3836:	d005      	beq.n	3844 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    3838:	68fb      	ldr	r3, [r7, #12]
    383a:	213f      	movs	r1, #63	; 0x3f
    383c:	0018      	movs	r0, r3
    383e:	4b1f      	ldr	r3, [pc, #124]	; (38bc <_sercom_usart_interrupt_handler+0x108>)
    3840:	4798      	blx	r3
			return;
    3842:	e028      	b.n	3896 <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	685c      	ldr	r4, [r3, #4]
    3848:	68fb      	ldr	r3, [r7, #12]
    384a:	0018      	movs	r0, r3
    384c:	4b1c      	ldr	r3, [pc, #112]	; (38c0 <_sercom_usart_interrupt_handler+0x10c>)
    384e:	4798      	blx	r3
    3850:	0003      	movs	r3, r0
    3852:	b2da      	uxtb	r2, r3
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	0011      	movs	r1, r2
    3858:	0018      	movs	r0, r3
    385a:	47a0      	blx	r4
    385c:	e01b      	b.n	3896 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	0018      	movs	r0, r3
    3862:	4b18      	ldr	r3, [pc, #96]	; (38c4 <_sercom_usart_interrupt_handler+0x110>)
    3864:	4798      	blx	r3
    3866:	1e03      	subs	r3, r0, #0
    3868:	d015      	beq.n	3896 <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	0018      	movs	r0, r3
    386e:	4b16      	ldr	r3, [pc, #88]	; (38c8 <_sercom_usart_interrupt_handler+0x114>)
    3870:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	68db      	ldr	r3, [r3, #12]
    3876:	687a      	ldr	r2, [r7, #4]
    3878:	0010      	movs	r0, r2
    387a:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    387c:	68fb      	ldr	r3, [r7, #12]
    387e:	0018      	movs	r0, r3
    3880:	4b0d      	ldr	r3, [pc, #52]	; (38b8 <_sercom_usart_interrupt_handler+0x104>)
    3882:	4798      	blx	r3
    3884:	0003      	movs	r3, r0
    3886:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    3888:	68bb      	ldr	r3, [r7, #8]
    388a:	b29a      	uxth	r2, r3
    388c:	68fb      	ldr	r3, [r7, #12]
    388e:	0011      	movs	r1, r2
    3890:	0018      	movs	r0, r3
    3892:	4b0a      	ldr	r3, [pc, #40]	; (38bc <_sercom_usart_interrupt_handler+0x108>)
    3894:	4798      	blx	r3
	}
}
    3896:	46bd      	mov	sp, r7
    3898:	b005      	add	sp, #20
    389a:	bd90      	pop	{r4, r7, pc}
    389c:	00002f45 	.word	0x00002f45
    38a0:	00002ff9 	.word	0x00002ff9
    38a4:	0000301b 	.word	0x0000301b
    38a8:	00002f67 	.word	0x00002f67
    38ac:	00003047 	.word	0x00003047
    38b0:	00003069 	.word	0x00003069
    38b4:	00002f89 	.word	0x00002f89
    38b8:	000035dd 	.word	0x000035dd
    38bc:	000035bf 	.word	0x000035bf
    38c0:	00003567 	.word	0x00003567
    38c4:	00002fab 	.word	0x00002fab
    38c8:	00002fcd 	.word	0x00002fcd

000038cc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    38cc:	b590      	push	{r4, r7, lr}
    38ce:	b085      	sub	sp, #20
    38d0:	af00      	add	r7, sp, #0
    38d2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    38d4:	230e      	movs	r3, #14
    38d6:	18fc      	adds	r4, r7, r3
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	0018      	movs	r0, r3
    38dc:	4b18      	ldr	r3, [pc, #96]	; (3940 <_get_sercom_index+0x74>)
    38de:	4798      	blx	r3
    38e0:	0003      	movs	r3, r0
    38e2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    38e4:	230f      	movs	r3, #15
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	2200      	movs	r2, #0
    38ea:	701a      	strb	r2, [r3, #0]
    38ec:	e018      	b.n	3920 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    38ee:	230f      	movs	r3, #15
    38f0:	18fb      	adds	r3, r7, r3
    38f2:	781a      	ldrb	r2, [r3, #0]
    38f4:	4913      	ldr	r1, [pc, #76]	; (3944 <_get_sercom_index+0x78>)
    38f6:	0013      	movs	r3, r2
    38f8:	009b      	lsls	r3, r3, #2
    38fa:	189b      	adds	r3, r3, r2
    38fc:	009b      	lsls	r3, r3, #2
    38fe:	5c5b      	ldrb	r3, [r3, r1]
    3900:	220e      	movs	r2, #14
    3902:	18ba      	adds	r2, r7, r2
    3904:	7812      	ldrb	r2, [r2, #0]
    3906:	429a      	cmp	r2, r3
    3908:	d103      	bne.n	3912 <_get_sercom_index+0x46>
			return i;
    390a:	230f      	movs	r3, #15
    390c:	18fb      	adds	r3, r7, r3
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	e012      	b.n	3938 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3912:	230f      	movs	r3, #15
    3914:	18fb      	adds	r3, r7, r3
    3916:	781a      	ldrb	r2, [r3, #0]
    3918:	230f      	movs	r3, #15
    391a:	18fb      	adds	r3, r7, r3
    391c:	3201      	adds	r2, #1
    391e:	701a      	strb	r2, [r3, #0]
    3920:	230f      	movs	r3, #15
    3922:	18fb      	adds	r3, r7, r3
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b00      	cmp	r3, #0
    3928:	d0e1      	beq.n	38ee <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    392a:	4a07      	ldr	r2, [pc, #28]	; (3948 <_get_sercom_index+0x7c>)
    392c:	4b07      	ldr	r3, [pc, #28]	; (394c <_get_sercom_index+0x80>)
    392e:	0019      	movs	r1, r3
    3930:	2000      	movs	r0, #0
    3932:	4b07      	ldr	r3, [pc, #28]	; (3950 <_get_sercom_index+0x84>)
    3934:	4798      	blx	r3
	return 0;
    3936:	2300      	movs	r3, #0
}
    3938:	0018      	movs	r0, r3
    393a:	46bd      	mov	sp, r7
    393c:	b005      	add	sp, #20
    393e:	bd90      	pop	{r4, r7, pc}
    3940:	00003785 	.word	0x00003785
    3944:	20000000 	.word	0x20000000
    3948:	00000263 	.word	0x00000263
    394c:	00006f74 	.word	0x00006f74
    3950:	00002077 	.word	0x00002077

00003954 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    3954:	b580      	push	{r7, lr}
    3956:	b082      	sub	sp, #8
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    395e:	687a      	ldr	r2, [r7, #4]
    3960:	2384      	movs	r3, #132	; 0x84
    3962:	05db      	lsls	r3, r3, #23
    3964:	429a      	cmp	r2, r3
    3966:	d102      	bne.n	396e <_sercom_init_irq_param+0x1a>
		_sercom0_dev = (struct _usart_async_device *)dev;
    3968:	4b06      	ldr	r3, [pc, #24]	; (3984 <_sercom_init_irq_param+0x30>)
    396a:	683a      	ldr	r2, [r7, #0]
    396c:	601a      	str	r2, [r3, #0]
	}

	if (hw == SERCOM1) {
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	4a05      	ldr	r2, [pc, #20]	; (3988 <_sercom_init_irq_param+0x34>)
    3972:	4293      	cmp	r3, r2
    3974:	d102      	bne.n	397c <_sercom_init_irq_param+0x28>
		_sercom1_dev = (struct _i2c_s_async_device *)dev;
    3976:	4b05      	ldr	r3, [pc, #20]	; (398c <_sercom_init_irq_param+0x38>)
    3978:	683a      	ldr	r2, [r7, #0]
    397a:	601a      	str	r2, [r3, #0]
	}
}
    397c:	46c0      	nop			; (mov r8, r8)
    397e:	46bd      	mov	sp, r7
    3980:	b002      	add	sp, #8
    3982:	bd80      	pop	{r7, pc}
    3984:	2000008c 	.word	0x2000008c
    3988:	42000400 	.word	0x42000400
    398c:	20000090 	.word	0x20000090

00003990 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3990:	b590      	push	{r4, r7, lr}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    3998:	230f      	movs	r3, #15
    399a:	18fc      	adds	r4, r7, r3
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	0018      	movs	r0, r3
    39a0:	4b6f      	ldr	r3, [pc, #444]	; (3b60 <_usart_init+0x1d0>)
    39a2:	4798      	blx	r3
    39a4:	0003      	movs	r3, r0
    39a6:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	2101      	movs	r1, #1
    39ac:	0018      	movs	r0, r3
    39ae:	4b6d      	ldr	r3, [pc, #436]	; (3b64 <_usart_init+0x1d4>)
    39b0:	4798      	blx	r3
    39b2:	0003      	movs	r3, r0
    39b4:	001a      	movs	r2, r3
    39b6:	2301      	movs	r3, #1
    39b8:	4053      	eors	r3, r2
    39ba:	b2db      	uxtb	r3, r3
    39bc:	2b00      	cmp	r3, #0
    39be:	d025      	beq.n	3a0c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    39c0:	230f      	movs	r3, #15
    39c2:	18fb      	adds	r3, r7, r3
    39c4:	781a      	ldrb	r2, [r3, #0]
    39c6:	4968      	ldr	r1, [pc, #416]	; (3b68 <_usart_init+0x1d8>)
    39c8:	0013      	movs	r3, r2
    39ca:	009b      	lsls	r3, r3, #2
    39cc:	189b      	adds	r3, r3, r2
    39ce:	009b      	lsls	r3, r3, #2
    39d0:	18cb      	adds	r3, r1, r3
    39d2:	3304      	adds	r3, #4
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	221c      	movs	r2, #28
    39d8:	4013      	ands	r3, r2
    39da:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	2102      	movs	r1, #2
    39e0:	0018      	movs	r0, r3
    39e2:	4b62      	ldr	r3, [pc, #392]	; (3b6c <_usart_init+0x1dc>)
    39e4:	4798      	blx	r3
    39e6:	1e03      	subs	r3, r0, #0
    39e8:	d008      	beq.n	39fc <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b60      	ldr	r3, [pc, #384]	; (3b70 <_usart_init+0x1e0>)
    39f0:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	2102      	movs	r1, #2
    39f6:	0018      	movs	r0, r3
    39f8:	4b5e      	ldr	r3, [pc, #376]	; (3b74 <_usart_init+0x1e4>)
    39fa:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    39fc:	68bb      	ldr	r3, [r7, #8]
    39fe:	2201      	movs	r2, #1
    3a00:	431a      	orrs	r2, r3
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	0011      	movs	r1, r2
    3a06:	0018      	movs	r0, r3
    3a08:	4b5b      	ldr	r3, [pc, #364]	; (3b78 <_usart_init+0x1e8>)
    3a0a:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	2101      	movs	r1, #1
    3a10:	0018      	movs	r0, r3
    3a12:	4b58      	ldr	r3, [pc, #352]	; (3b74 <_usart_init+0x1e4>)
    3a14:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3a16:	230f      	movs	r3, #15
    3a18:	18fb      	adds	r3, r7, r3
    3a1a:	781a      	ldrb	r2, [r3, #0]
    3a1c:	4952      	ldr	r1, [pc, #328]	; (3b68 <_usart_init+0x1d8>)
    3a1e:	0013      	movs	r3, r2
    3a20:	009b      	lsls	r3, r3, #2
    3a22:	189b      	adds	r3, r3, r2
    3a24:	009b      	lsls	r3, r3, #2
    3a26:	18cb      	adds	r3, r1, r3
    3a28:	3304      	adds	r3, #4
    3a2a:	681a      	ldr	r2, [r3, #0]
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	0011      	movs	r1, r2
    3a30:	0018      	movs	r0, r3
    3a32:	4b51      	ldr	r3, [pc, #324]	; (3b78 <_usart_init+0x1e8>)
    3a34:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3a36:	230f      	movs	r3, #15
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	781a      	ldrb	r2, [r3, #0]
    3a3c:	494a      	ldr	r1, [pc, #296]	; (3b68 <_usart_init+0x1d8>)
    3a3e:	0013      	movs	r3, r2
    3a40:	009b      	lsls	r3, r3, #2
    3a42:	189b      	adds	r3, r3, r2
    3a44:	009b      	lsls	r3, r3, #2
    3a46:	18cb      	adds	r3, r1, r3
    3a48:	3308      	adds	r3, #8
    3a4a:	681a      	ldr	r2, [r3, #0]
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	0011      	movs	r1, r2
    3a50:	0018      	movs	r0, r3
    3a52:	4b4a      	ldr	r3, [pc, #296]	; (3b7c <_usart_init+0x1ec>)
    3a54:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3a56:	230f      	movs	r3, #15
    3a58:	18fb      	adds	r3, r7, r3
    3a5a:	781a      	ldrb	r2, [r3, #0]
    3a5c:	4942      	ldr	r1, [pc, #264]	; (3b68 <_usart_init+0x1d8>)
    3a5e:	0013      	movs	r3, r2
    3a60:	009b      	lsls	r3, r3, #2
    3a62:	189b      	adds	r3, r3, r2
    3a64:	009b      	lsls	r3, r3, #2
    3a66:	18cb      	adds	r3, r1, r3
    3a68:	3304      	adds	r3, #4
    3a6a:	681a      	ldr	r2, [r3, #0]
    3a6c:	2380      	movs	r3, #128	; 0x80
    3a6e:	019b      	lsls	r3, r3, #6
    3a70:	4013      	ands	r3, r2
    3a72:	d10e      	bne.n	3a92 <_usart_init+0x102>
    3a74:	230f      	movs	r3, #15
    3a76:	18fb      	adds	r3, r7, r3
    3a78:	781a      	ldrb	r2, [r3, #0]
    3a7a:	493b      	ldr	r1, [pc, #236]	; (3b68 <_usart_init+0x1d8>)
    3a7c:	0013      	movs	r3, r2
    3a7e:	009b      	lsls	r3, r3, #2
    3a80:	189b      	adds	r3, r3, r2
    3a82:	009b      	lsls	r3, r3, #2
    3a84:	18cb      	adds	r3, r1, r3
    3a86:	3304      	adds	r3, #4
    3a88:	681a      	ldr	r2, [r3, #0]
    3a8a:	23c0      	movs	r3, #192	; 0xc0
    3a8c:	01db      	lsls	r3, r3, #7
    3a8e:	4013      	ands	r3, r2
    3a90:	d030      	beq.n	3af4 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3a92:	230f      	movs	r3, #15
    3a94:	18fb      	adds	r3, r7, r3
    3a96:	781a      	ldrb	r2, [r3, #0]
    3a98:	4933      	ldr	r1, [pc, #204]	; (3b68 <_usart_init+0x1d8>)
    3a9a:	0013      	movs	r3, r2
    3a9c:	009b      	lsls	r3, r3, #2
    3a9e:	189b      	adds	r3, r3, r2
    3aa0:	009b      	lsls	r3, r3, #2
    3aa2:	18cb      	adds	r3, r1, r3
    3aa4:	330c      	adds	r3, #12
    3aa6:	881b      	ldrh	r3, [r3, #0]
    3aa8:	04db      	lsls	r3, r3, #19
    3aaa:	0cdb      	lsrs	r3, r3, #19
    3aac:	b299      	uxth	r1, r3
    3aae:	687a      	ldr	r2, [r7, #4]
    3ab0:	8993      	ldrh	r3, [r2, #12]
    3ab2:	04c9      	lsls	r1, r1, #19
    3ab4:	0cc8      	lsrs	r0, r1, #19
    3ab6:	0b5b      	lsrs	r3, r3, #13
    3ab8:	035b      	lsls	r3, r3, #13
    3aba:	1c19      	adds	r1, r3, #0
    3abc:	1c03      	adds	r3, r0, #0
    3abe:	430b      	orrs	r3, r1
    3ac0:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3ac2:	230f      	movs	r3, #15
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	781a      	ldrb	r2, [r3, #0]
    3ac8:	4927      	ldr	r1, [pc, #156]	; (3b68 <_usart_init+0x1d8>)
    3aca:	0013      	movs	r3, r2
    3acc:	009b      	lsls	r3, r3, #2
    3ace:	189b      	adds	r3, r3, r2
    3ad0:	009b      	lsls	r3, r3, #2
    3ad2:	18cb      	adds	r3, r1, r3
    3ad4:	330e      	adds	r3, #14
    3ad6:	781b      	ldrb	r3, [r3, #0]
    3ad8:	1c1a      	adds	r2, r3, #0
    3ada:	2307      	movs	r3, #7
    3adc:	4013      	ands	r3, r2
    3ade:	b2d9      	uxtb	r1, r3
    3ae0:	687a      	ldr	r2, [r7, #4]
    3ae2:	8993      	ldrh	r3, [r2, #12]
    3ae4:	0348      	lsls	r0, r1, #13
    3ae6:	04db      	lsls	r3, r3, #19
    3ae8:	0cdb      	lsrs	r3, r3, #19
    3aea:	1c19      	adds	r1, r3, #0
    3aec:	1c03      	adds	r3, r0, #0
    3aee:	430b      	orrs	r3, r1
    3af0:	8193      	strh	r3, [r2, #12]
    3af2:	e00f      	b.n	3b14 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3af4:	230f      	movs	r3, #15
    3af6:	18fb      	adds	r3, r7, r3
    3af8:	781a      	ldrb	r2, [r3, #0]
    3afa:	491b      	ldr	r1, [pc, #108]	; (3b68 <_usart_init+0x1d8>)
    3afc:	0013      	movs	r3, r2
    3afe:	009b      	lsls	r3, r3, #2
    3b00:	189b      	adds	r3, r3, r2
    3b02:	009b      	lsls	r3, r3, #2
    3b04:	18cb      	adds	r3, r1, r3
    3b06:	330c      	adds	r3, #12
    3b08:	881a      	ldrh	r2, [r3, #0]
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	0011      	movs	r1, r2
    3b0e:	0018      	movs	r0, r3
    3b10:	4b1b      	ldr	r3, [pc, #108]	; (3b80 <_usart_init+0x1f0>)
    3b12:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3b14:	230f      	movs	r3, #15
    3b16:	18fb      	adds	r3, r7, r3
    3b18:	781a      	ldrb	r2, [r3, #0]
    3b1a:	4913      	ldr	r1, [pc, #76]	; (3b68 <_usart_init+0x1d8>)
    3b1c:	0013      	movs	r3, r2
    3b1e:	009b      	lsls	r3, r3, #2
    3b20:	189b      	adds	r3, r3, r2
    3b22:	009b      	lsls	r3, r3, #2
    3b24:	18cb      	adds	r3, r1, r3
    3b26:	330f      	adds	r3, #15
    3b28:	781a      	ldrb	r2, [r3, #0]
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	0011      	movs	r1, r2
    3b2e:	0018      	movs	r0, r3
    3b30:	4b14      	ldr	r3, [pc, #80]	; (3b84 <_usart_init+0x1f4>)
    3b32:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3b34:	230f      	movs	r3, #15
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	781a      	ldrb	r2, [r3, #0]
    3b3a:	490b      	ldr	r1, [pc, #44]	; (3b68 <_usart_init+0x1d8>)
    3b3c:	0013      	movs	r3, r2
    3b3e:	009b      	lsls	r3, r3, #2
    3b40:	189b      	adds	r3, r3, r2
    3b42:	009b      	lsls	r3, r3, #2
    3b44:	18cb      	adds	r3, r1, r3
    3b46:	3310      	adds	r3, #16
    3b48:	781a      	ldrb	r2, [r3, #0]
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	0011      	movs	r1, r2
    3b4e:	0018      	movs	r0, r3
    3b50:	4b0d      	ldr	r3, [pc, #52]	; (3b88 <_usart_init+0x1f8>)
    3b52:	4798      	blx	r3

	return ERR_NONE;
    3b54:	2300      	movs	r3, #0
}
    3b56:	0018      	movs	r0, r3
    3b58:	46bd      	mov	sp, r7
    3b5a:	b005      	add	sp, #20
    3b5c:	bd90      	pop	{r4, r7, pc}
    3b5e:	46c0      	nop			; (mov r8, r8)
    3b60:	000038cd 	.word	0x000038cd
    3b64:	00002ee3 	.word	0x00002ee3
    3b68:	20000000 	.word	0x20000000
    3b6c:	00003209 	.word	0x00003209
    3b70:	000031dd 	.word	0x000031dd
    3b74:	00002ec5 	.word	0x00002ec5
    3b78:	00003239 	.word	0x00003239
    3b7c:	0000338d 	.word	0x0000338d
    3b80:	000033cd 	.word	0x000033cd
    3b84:	000033eb 	.word	0x000033eb
    3b88:	0000357d 	.word	0x0000357d

00003b8c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    3b8c:	b590      	push	{r4, r7, lr}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3b94:	230e      	movs	r3, #14
    3b96:	18fc      	adds	r4, r7, r3
    3b98:	687b      	ldr	r3, [r7, #4]
    3b9a:	0018      	movs	r0, r3
    3b9c:	4b19      	ldr	r3, [pc, #100]	; (3c04 <_get_i2cm_index+0x78>)
    3b9e:	4798      	blx	r3
    3ba0:	0003      	movs	r3, r0
    3ba2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3ba4:	230f      	movs	r3, #15
    3ba6:	18fb      	adds	r3, r7, r3
    3ba8:	2200      	movs	r2, #0
    3baa:	701a      	strb	r2, [r3, #0]
    3bac:	e019      	b.n	3be2 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    3bae:	230f      	movs	r3, #15
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	781a      	ldrb	r2, [r3, #0]
    3bb4:	4914      	ldr	r1, [pc, #80]	; (3c08 <_get_i2cm_index+0x7c>)
    3bb6:	0013      	movs	r3, r2
    3bb8:	005b      	lsls	r3, r3, #1
    3bba:	189b      	adds	r3, r3, r2
    3bbc:	00db      	lsls	r3, r3, #3
    3bbe:	5c5b      	ldrb	r3, [r3, r1]
    3bc0:	220e      	movs	r2, #14
    3bc2:	18ba      	adds	r2, r7, r2
    3bc4:	7812      	ldrb	r2, [r2, #0]
    3bc6:	429a      	cmp	r2, r3
    3bc8:	d104      	bne.n	3bd4 <_get_i2cm_index+0x48>
			return i;
    3bca:	230f      	movs	r3, #15
    3bcc:	18fb      	adds	r3, r7, r3
    3bce:	781b      	ldrb	r3, [r3, #0]
    3bd0:	b25b      	sxtb	r3, r3
    3bd2:	e013      	b.n	3bfc <_get_i2cm_index+0x70>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3bd4:	230f      	movs	r3, #15
    3bd6:	18fb      	adds	r3, r7, r3
    3bd8:	781a      	ldrb	r2, [r3, #0]
    3bda:	230f      	movs	r3, #15
    3bdc:	18fb      	adds	r3, r7, r3
    3bde:	3201      	adds	r2, #1
    3be0:	701a      	strb	r2, [r3, #0]
    3be2:	230f      	movs	r3, #15
    3be4:	18fb      	adds	r3, r7, r3
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d0e0      	beq.n	3bae <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    3bec:	4a07      	ldr	r2, [pc, #28]	; (3c0c <_get_i2cm_index+0x80>)
    3bee:	4b08      	ldr	r3, [pc, #32]	; (3c10 <_get_i2cm_index+0x84>)
    3bf0:	0019      	movs	r1, r3
    3bf2:	2000      	movs	r0, #0
    3bf4:	4b07      	ldr	r3, [pc, #28]	; (3c14 <_get_i2cm_index+0x88>)
    3bf6:	4798      	blx	r3
	return -1;
    3bf8:	2301      	movs	r3, #1
    3bfa:	425b      	negs	r3, r3
}
    3bfc:	0018      	movs	r0, r3
    3bfe:	46bd      	mov	sp, r7
    3c00:	b005      	add	sp, #20
    3c02:	bd90      	pop	{r4, r7, pc}
    3c04:	00003785 	.word	0x00003785
    3c08:	20000014 	.word	0x20000014
    3c0c:	000003c9 	.word	0x000003c9
    3c10:	00006f74 	.word	0x00006f74
    3c14:	00002077 	.word	0x00002077

00003c18 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b082      	sub	sp, #8
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	2103      	movs	r1, #3
    3c24:	0018      	movs	r0, r3
    3c26:	4b03      	ldr	r3, [pc, #12]	; (3c34 <_sercom_i2c_send_stop+0x1c>)
    3c28:	4798      	blx	r3
}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	46bd      	mov	sp, r7
    3c2e:	b002      	add	sp, #8
    3c30:	bd80      	pop	{r7, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	00003319 	.word	0x00003319

00003c38 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    3c38:	b590      	push	{r4, r7, lr}
    3c3a:	b087      	sub	sp, #28
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	60f8      	str	r0, [r7, #12]
    3c40:	60b9      	str	r1, [r7, #8]
    3c42:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    3c44:	68fb      	ldr	r3, [r7, #12]
    3c46:	0018      	movs	r0, r3
    3c48:	4b87      	ldr	r3, [pc, #540]	; (3e68 <_sercom_i2c_sync_analyse_flags+0x230>)
    3c4a:	4798      	blx	r3
    3c4c:	0003      	movs	r3, r0
    3c4e:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    3c50:	2312      	movs	r3, #18
    3c52:	18fc      	adds	r4, r7, r3
    3c54:	68fb      	ldr	r3, [r7, #12]
    3c56:	0018      	movs	r0, r3
    3c58:	4b84      	ldr	r3, [pc, #528]	; (3e6c <_sercom_i2c_sync_analyse_flags+0x234>)
    3c5a:	4798      	blx	r3
    3c5c:	0003      	movs	r3, r0
    3c5e:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    3c60:	68bb      	ldr	r3, [r7, #8]
    3c62:	2201      	movs	r2, #1
    3c64:	4013      	ands	r3, r2
    3c66:	d100      	bne.n	3c6a <_sercom_i2c_sync_analyse_flags+0x32>
    3c68:	e0a3      	b.n	3db2 <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    3c6a:	2312      	movs	r3, #18
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	881b      	ldrh	r3, [r3, #0]
    3c70:	2202      	movs	r2, #2
    3c72:	4013      	ands	r3, r2
    3c74:	d020      	beq.n	3cb8 <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	0018      	movs	r0, r3
    3c7a:	4b7d      	ldr	r3, [pc, #500]	; (3e70 <_sercom_i2c_sync_analyse_flags+0x238>)
    3c7c:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	885b      	ldrh	r3, [r3, #2]
    3c82:	b29b      	uxth	r3, r3
    3c84:	2280      	movs	r2, #128	; 0x80
    3c86:	0152      	lsls	r2, r2, #5
    3c88:	4313      	orrs	r3, r2
    3c8a:	b29a      	uxth	r2, r3
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    3c90:	687b      	ldr	r3, [r7, #4]
    3c92:	885b      	ldrh	r3, [r3, #2]
    3c94:	b29b      	uxth	r3, r3
    3c96:	4a77      	ldr	r2, [pc, #476]	; (3e74 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3c98:	4013      	ands	r3, r2
    3c9a:	b29a      	uxth	r2, r3
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3ca0:	2312      	movs	r3, #18
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	881b      	ldrh	r3, [r3, #0]
    3ca6:	2201      	movs	r2, #1
    3ca8:	4013      	ands	r3, r2
    3caa:	d002      	beq.n	3cb2 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    3cac:	2305      	movs	r3, #5
    3cae:	425b      	negs	r3, r3
    3cb0:	e0d6      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    3cb2:	2304      	movs	r3, #4
    3cb4:	425b      	negs	r3, r3
    3cb6:	e0d3      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3cb8:	2312      	movs	r3, #18
    3cba:	18fb      	adds	r3, r7, r3
    3cbc:	881b      	ldrh	r3, [r3, #0]
    3cbe:	2204      	movs	r2, #4
    3cc0:	4013      	ands	r3, r2
    3cc2:	d021      	beq.n	3d08 <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	685b      	ldr	r3, [r3, #4]
    3cc8:	2b00      	cmp	r3, #0
    3cca:	dd08      	ble.n	3cde <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	885b      	ldrh	r3, [r3, #2]
    3cd0:	b29b      	uxth	r3, r3
    3cd2:	2280      	movs	r2, #128	; 0x80
    3cd4:	0152      	lsls	r2, r2, #5
    3cd6:	4313      	orrs	r3, r2
    3cd8:	b29a      	uxth	r2, r3
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	885b      	ldrh	r3, [r3, #2]
    3ce2:	b29b      	uxth	r3, r3
    3ce4:	b21b      	sxth	r3, r3
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	da03      	bge.n	3cf2 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	0018      	movs	r0, r3
    3cee:	4b62      	ldr	r3, [pc, #392]	; (3e78 <_sercom_i2c_sync_analyse_flags+0x240>)
    3cf0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	885b      	ldrh	r3, [r3, #2]
    3cf6:	b29b      	uxth	r3, r3
    3cf8:	4a5e      	ldr	r2, [pc, #376]	; (3e74 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3cfa:	4013      	ands	r3, r2
    3cfc:	b29a      	uxth	r2, r3
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    3d02:	2302      	movs	r3, #2
    3d04:	425b      	negs	r3, r3
    3d06:	e0ab      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	885b      	ldrh	r3, [r3, #2]
    3d0c:	b29b      	uxth	r3, r3
    3d0e:	001a      	movs	r2, r3
    3d10:	2380      	movs	r3, #128	; 0x80
    3d12:	00db      	lsls	r3, r3, #3
    3d14:	4013      	ands	r3, r2
    3d16:	d021      	beq.n	3d5c <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	881b      	ldrh	r3, [r3, #0]
    3d1c:	121b      	asrs	r3, r3, #8
    3d1e:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3d20:	001a      	movs	r2, r3
    3d22:	2306      	movs	r3, #6
    3d24:	401a      	ands	r2, r3
    3d26:	0014      	movs	r4, r2
    3d28:	68fb      	ldr	r3, [r7, #12]
    3d2a:	0018      	movs	r0, r3
    3d2c:	4b53      	ldr	r3, [pc, #332]	; (3e7c <_sercom_i2c_sync_analyse_flags+0x244>)
    3d2e:	4798      	blx	r3
    3d30:	0002      	movs	r2, r0
    3d32:	2380      	movs	r3, #128	; 0x80
    3d34:	01db      	lsls	r3, r3, #7
    3d36:	4013      	ands	r3, r2
    3d38:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    3d3a:	22f1      	movs	r2, #241	; 0xf1
    3d3c:	431a      	orrs	r2, r3
    3d3e:	68fb      	ldr	r3, [r7, #12]
    3d40:	0011      	movs	r1, r2
    3d42:	0018      	movs	r0, r3
    3d44:	4b4e      	ldr	r3, [pc, #312]	; (3e80 <_sercom_i2c_sync_analyse_flags+0x248>)
    3d46:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	885b      	ldrh	r3, [r3, #2]
    3d4c:	b29b      	uxth	r3, r3
    3d4e:	4a4d      	ldr	r2, [pc, #308]	; (3e84 <_sercom_i2c_sync_analyse_flags+0x24c>)
    3d50:	4013      	ands	r3, r2
    3d52:	b29a      	uxth	r2, r3
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    3d58:	2300      	movs	r3, #0
    3d5a:	e081      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	685b      	ldr	r3, [r3, #4]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d112      	bne.n	3d8a <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	885b      	ldrh	r3, [r3, #2]
    3d68:	b29b      	uxth	r3, r3
    3d6a:	b21b      	sxth	r3, r3
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	da03      	bge.n	3d78 <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    3d70:	68fb      	ldr	r3, [r7, #12]
    3d72:	0018      	movs	r0, r3
    3d74:	4b40      	ldr	r3, [pc, #256]	; (3e78 <_sercom_i2c_sync_analyse_flags+0x240>)
    3d76:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	885b      	ldrh	r3, [r3, #2]
    3d7c:	b29b      	uxth	r3, r3
    3d7e:	4a3d      	ldr	r2, [pc, #244]	; (3e74 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3d80:	4013      	ands	r3, r2
    3d82:	b29a      	uxth	r2, r3
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	805a      	strh	r2, [r3, #2]
    3d88:	e011      	b.n	3dae <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	689b      	ldr	r3, [r3, #8]
    3d8e:	781a      	ldrb	r2, [r3, #0]
    3d90:	68fb      	ldr	r3, [r7, #12]
    3d92:	0011      	movs	r1, r2
    3d94:	0018      	movs	r0, r3
    3d96:	4b3c      	ldr	r3, [pc, #240]	; (3e88 <_sercom_i2c_sync_analyse_flags+0x250>)
    3d98:	4798      	blx	r3
				msg->buffer++;
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	689b      	ldr	r3, [r3, #8]
    3d9e:	1c5a      	adds	r2, r3, #1
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	609a      	str	r2, [r3, #8]
				msg->len--;
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	685b      	ldr	r3, [r3, #4]
    3da8:	1e5a      	subs	r2, r3, #1
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    3dae:	2300      	movs	r3, #0
    3db0:	e056      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    3db2:	68bb      	ldr	r3, [r7, #8]
    3db4:	2202      	movs	r2, #2
    3db6:	4013      	ands	r3, r2
    3db8:	d051      	beq.n	3e5e <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	685b      	ldr	r3, [r3, #4]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d046      	beq.n	3e50 <_sercom_i2c_sync_analyse_flags+0x218>
    3dc2:	2312      	movs	r3, #18
    3dc4:	18fb      	adds	r3, r7, r3
    3dc6:	881b      	ldrh	r3, [r3, #0]
    3dc8:	2204      	movs	r2, #4
    3dca:	4013      	ands	r3, r2
    3dcc:	d140      	bne.n	3e50 <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	685b      	ldr	r3, [r3, #4]
    3dd2:	1e5a      	subs	r2, r3, #1
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	685b      	ldr	r3, [r3, #4]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d102      	bne.n	3de6 <_sercom_i2c_sync_analyse_flags+0x1ae>
    3de0:	697b      	ldr	r3, [r7, #20]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d006      	beq.n	3df4 <_sercom_i2c_sync_analyse_flags+0x1bc>
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	685b      	ldr	r3, [r3, #4]
    3dea:	2b01      	cmp	r3, #1
    3dec:	d106      	bne.n	3dfc <_sercom_i2c_sync_analyse_flags+0x1c4>
    3dee:	697b      	ldr	r3, [r7, #20]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d003      	beq.n	3dfc <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    3df4:	68fb      	ldr	r3, [r7, #12]
    3df6:	0018      	movs	r0, r3
    3df8:	4b24      	ldr	r3, [pc, #144]	; (3e8c <_sercom_i2c_sync_analyse_flags+0x254>)
    3dfa:	4798      	blx	r3
			}

			if (msg->len == 0) {
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	685b      	ldr	r3, [r3, #4]
    3e00:	2b00      	cmp	r3, #0
    3e02:	d115      	bne.n	3e30 <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	885b      	ldrh	r3, [r3, #2]
    3e08:	b29b      	uxth	r3, r3
    3e0a:	b21b      	sxth	r3, r3
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	da07      	bge.n	3e20 <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    3e10:	68fb      	ldr	r3, [r7, #12]
    3e12:	0018      	movs	r0, r3
    3e14:	4b1e      	ldr	r3, [pc, #120]	; (3e90 <_sercom_i2c_sync_analyse_flags+0x258>)
    3e16:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    3e18:	68fb      	ldr	r3, [r7, #12]
    3e1a:	0018      	movs	r0, r3
    3e1c:	4b16      	ldr	r3, [pc, #88]	; (3e78 <_sercom_i2c_sync_analyse_flags+0x240>)
    3e1e:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	885b      	ldrh	r3, [r3, #2]
    3e24:	b29b      	uxth	r3, r3
    3e26:	4a13      	ldr	r2, [pc, #76]	; (3e74 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3e28:	4013      	ands	r3, r2
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3e30:	687b      	ldr	r3, [r7, #4]
    3e32:	689c      	ldr	r4, [r3, #8]
    3e34:	1c62      	adds	r2, r4, #1
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	609a      	str	r2, [r3, #8]
    3e3a:	68fb      	ldr	r3, [r7, #12]
    3e3c:	0018      	movs	r0, r3
    3e3e:	4b15      	ldr	r3, [pc, #84]	; (3e94 <_sercom_i2c_sync_analyse_flags+0x25c>)
    3e40:	4798      	blx	r3
    3e42:	0003      	movs	r3, r0
    3e44:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	0018      	movs	r0, r3
    3e4a:	4b13      	ldr	r3, [pc, #76]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x260>)
    3e4c:	4798      	blx	r3
    3e4e:	e006      	b.n	3e5e <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	0018      	movs	r0, r3
    3e54:	4b10      	ldr	r3, [pc, #64]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x260>)
    3e56:	4798      	blx	r3
			return I2C_NACK;
    3e58:	2302      	movs	r3, #2
    3e5a:	425b      	negs	r3, r3
    3e5c:	e000      	b.n	3e60 <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    3e5e:	2300      	movs	r3, #0
}
    3e60:	0018      	movs	r0, r3
    3e62:	46bd      	mov	sp, r7
    3e64:	b007      	add	sp, #28
    3e66:	bd90      	pop	{r4, r7, pc}
    3e68:	000030d9 	.word	0x000030d9
    3e6c:	00003625 	.word	0x00003625
    3e70:	00002f03 	.word	0x00002f03
    3e74:	fffffeff 	.word	0xfffffeff
    3e78:	00003c19 	.word	0x00003c19
    3e7c:	0000347d 	.word	0x0000347d
    3e80:	00003455 	.word	0x00003455
    3e84:	fffffbff 	.word	0xfffffbff
    3e88:	000034b9 	.word	0x000034b9
    3e8c:	000032bd 	.word	0x000032bd
    3e90:	0000328d 	.word	0x0000328d
    3e94:	000034e9 	.word	0x000034e9
    3e98:	00002f19 	.word	0x00002f19

00003e9c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	0018      	movs	r0, r3
    3ea8:	4b04      	ldr	r3, [pc, #16]	; (3ebc <_sercom_get_irq_num+0x20>)
    3eaa:	4798      	blx	r3
    3eac:	0003      	movs	r3, r0
    3eae:	3308      	adds	r3, #8
    3eb0:	b2db      	uxtb	r3, r3
}
    3eb2:	0018      	movs	r0, r3
    3eb4:	46bd      	mov	sp, r7
    3eb6:	b002      	add	sp, #8
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	00003785 	.word	0x00003785

00003ec0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b082      	sub	sp, #8
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
    3ec8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	1e5a      	subs	r2, r3, #1
    3ece:	4193      	sbcs	r3, r2
    3ed0:	b2d8      	uxtb	r0, r3
    3ed2:	23a7      	movs	r3, #167	; 0xa7
    3ed4:	00da      	lsls	r2, r3, #3
    3ed6:	4b09      	ldr	r3, [pc, #36]	; (3efc <_i2c_m_sync_init+0x3c>)
    3ed8:	0019      	movs	r1, r3
    3eda:	4b09      	ldr	r3, [pc, #36]	; (3f00 <_i2c_m_sync_init+0x40>)
    3edc:	4798      	blx	r3

	i2c_dev->hw = hw;
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	683a      	ldr	r2, [r7, #0]
    3ee2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	683a      	ldr	r2, [r7, #0]
    3ee8:	0011      	movs	r1, r2
    3eea:	0018      	movs	r0, r3
    3eec:	4b05      	ldr	r3, [pc, #20]	; (3f04 <_i2c_m_sync_init+0x44>)
    3eee:	4798      	blx	r3
    3ef0:	0003      	movs	r3, r0
}
    3ef2:	0018      	movs	r0, r3
    3ef4:	46bd      	mov	sp, r7
    3ef6:	b002      	add	sp, #8
    3ef8:	bd80      	pop	{r7, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	00006f74 	.word	0x00006f74
    3f00:	00002077 	.word	0x00002077
    3f04:	000042b1 	.word	0x000042b1

00003f08 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	1e5a      	subs	r2, r3, #1
    3f14:	4193      	sbcs	r3, r2
    3f16:	b2db      	uxtb	r3, r3
    3f18:	4a07      	ldr	r2, [pc, #28]	; (3f38 <_i2c_m_sync_enable+0x30>)
    3f1a:	4908      	ldr	r1, [pc, #32]	; (3f3c <_i2c_m_sync_enable+0x34>)
    3f1c:	0018      	movs	r0, r3
    3f1e:	4b08      	ldr	r3, [pc, #32]	; (3f40 <_i2c_m_sync_enable+0x38>)
    3f20:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	691b      	ldr	r3, [r3, #16]
    3f26:	0018      	movs	r0, r3
    3f28:	4b06      	ldr	r3, [pc, #24]	; (3f44 <_i2c_m_sync_enable+0x3c>)
    3f2a:	4798      	blx	r3
    3f2c:	0003      	movs	r3, r0
}
    3f2e:	0018      	movs	r0, r3
    3f30:	46bd      	mov	sp, r7
    3f32:	b002      	add	sp, #8
    3f34:	bd80      	pop	{r7, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	00000555 	.word	0x00000555
    3f3c:	00006f74 	.word	0x00006f74
    3f40:	00002077 	.word	0x00002077
    3f44:	00004221 	.word	0x00004221

00003f48 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b084      	sub	sp, #16
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    3f52:	4b12      	ldr	r3, [pc, #72]	; (3f9c <_sercom_i2c_sync_wait_bus+0x54>)
    3f54:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	691b      	ldr	r3, [r3, #16]
    3f5a:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    3f5c:	68bb      	ldr	r3, [r7, #8]
    3f5e:	0018      	movs	r0, r3
    3f60:	4b0f      	ldr	r3, [pc, #60]	; (3fa0 <_sercom_i2c_sync_wait_bus+0x58>)
    3f62:	4798      	blx	r3
    3f64:	0003      	movs	r3, r0
    3f66:	001a      	movs	r2, r3
    3f68:	683b      	ldr	r3, [r7, #0]
    3f6a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    3f6c:	68fb      	ldr	r3, [r7, #12]
    3f6e:	1e5a      	subs	r2, r3, #1
    3f70:	60fa      	str	r2, [r7, #12]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d102      	bne.n	3f7c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    3f76:	2305      	movs	r3, #5
    3f78:	425b      	negs	r3, r3
    3f7a:	e00a      	b.n	3f92 <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    3f7c:	683b      	ldr	r3, [r7, #0]
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	2201      	movs	r2, #1
    3f82:	4013      	ands	r3, r2
    3f84:	d104      	bne.n	3f90 <_sercom_i2c_sync_wait_bus+0x48>
    3f86:	683b      	ldr	r3, [r7, #0]
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	2202      	movs	r2, #2
    3f8c:	4013      	ands	r3, r2
    3f8e:	d0e5      	beq.n	3f5c <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    3f90:	2300      	movs	r3, #0
}
    3f92:	0018      	movs	r0, r3
    3f94:	46bd      	mov	sp, r7
    3f96:	b004      	add	sp, #16
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	0000ffff 	.word	0x0000ffff
    3fa0:	00002f2f 	.word	0x00002f2f

00003fa4 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    3fa4:	b590      	push	{r4, r7, lr}
    3fa6:	b087      	sub	sp, #28
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	691b      	ldr	r3, [r3, #16]
    3fb0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    3fb6:	697b      	ldr	r3, [r7, #20]
    3fb8:	0018      	movs	r0, r3
    3fba:	4b3f      	ldr	r3, [pc, #252]	; (40b8 <_sercom_i2c_sync_send_address+0x114>)
    3fbc:	4798      	blx	r3
    3fbe:	0003      	movs	r3, r0
    3fc0:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	1e5a      	subs	r2, r3, #1
    3fc6:	4193      	sbcs	r3, r2
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	4a3c      	ldr	r2, [pc, #240]	; (40bc <_sercom_i2c_sync_send_address+0x118>)
    3fcc:	493c      	ldr	r1, [pc, #240]	; (40c0 <_sercom_i2c_sync_send_address+0x11c>)
    3fce:	0018      	movs	r0, r3
    3fd0:	4b3c      	ldr	r3, [pc, #240]	; (40c4 <_sercom_i2c_sync_send_address+0x120>)
    3fd2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    3fd4:	693b      	ldr	r3, [r7, #16]
    3fd6:	685b      	ldr	r3, [r3, #4]
    3fd8:	2b01      	cmp	r3, #1
    3fda:	d107      	bne.n	3fec <_sercom_i2c_sync_send_address+0x48>
    3fdc:	68fb      	ldr	r3, [r7, #12]
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d004      	beq.n	3fec <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    3fe2:	697b      	ldr	r3, [r7, #20]
    3fe4:	0018      	movs	r0, r3
    3fe6:	4b38      	ldr	r3, [pc, #224]	; (40c8 <_sercom_i2c_sync_send_address+0x124>)
    3fe8:	4798      	blx	r3
    3fea:	e003      	b.n	3ff4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    3fec:	697b      	ldr	r3, [r7, #20]
    3fee:	0018      	movs	r0, r3
    3ff0:	4b36      	ldr	r3, [pc, #216]	; (40cc <_sercom_i2c_sync_send_address+0x128>)
    3ff2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    3ff4:	693b      	ldr	r3, [r7, #16]
    3ff6:	881b      	ldrh	r3, [r3, #0]
    3ff8:	001a      	movs	r2, r3
    3ffa:	2380      	movs	r3, #128	; 0x80
    3ffc:	00db      	lsls	r3, r3, #3
    3ffe:	4013      	ands	r3, r2
    4000:	d028      	beq.n	4054 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    4002:	693b      	ldr	r3, [r7, #16]
    4004:	885b      	ldrh	r3, [r3, #2]
    4006:	b29b      	uxth	r3, r3
    4008:	001a      	movs	r2, r3
    400a:	2301      	movs	r3, #1
    400c:	4013      	ands	r3, r2
    400e:	d008      	beq.n	4022 <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    4010:	693b      	ldr	r3, [r7, #16]
    4012:	885b      	ldrh	r3, [r3, #2]
    4014:	b29b      	uxth	r3, r3
    4016:	2280      	movs	r2, #128	; 0x80
    4018:	00d2      	lsls	r2, r2, #3
    401a:	4313      	orrs	r3, r2
    401c:	b29a      	uxth	r2, r3
    401e:	693b      	ldr	r3, [r7, #16]
    4020:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    4022:	693b      	ldr	r3, [r7, #16]
    4024:	881b      	ldrh	r3, [r3, #0]
    4026:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4028:	001a      	movs	r2, r3
    402a:	4b29      	ldr	r3, [pc, #164]	; (40d0 <_sercom_i2c_sync_send_address+0x12c>)
    402c:	401a      	ands	r2, r3
    402e:	0014      	movs	r4, r2
    4030:	697b      	ldr	r3, [r7, #20]
    4032:	0018      	movs	r0, r3
    4034:	4b27      	ldr	r3, [pc, #156]	; (40d4 <_sercom_i2c_sync_send_address+0x130>)
    4036:	4798      	blx	r3
    4038:	0002      	movs	r2, r0
    403a:	2380      	movs	r3, #128	; 0x80
    403c:	01db      	lsls	r3, r3, #7
    403e:	4013      	ands	r3, r2
    4040:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    4042:	2280      	movs	r2, #128	; 0x80
    4044:	0212      	lsls	r2, r2, #8
    4046:	431a      	orrs	r2, r3
    4048:	697b      	ldr	r3, [r7, #20]
    404a:	0011      	movs	r1, r2
    404c:	0018      	movs	r0, r3
    404e:	4b22      	ldr	r3, [pc, #136]	; (40d8 <_sercom_i2c_sync_send_address+0x134>)
    4050:	4798      	blx	r3
    4052:	e01e      	b.n	4092 <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    4054:	693b      	ldr	r3, [r7, #16]
    4056:	881b      	ldrh	r3, [r3, #0]
    4058:	005b      	lsls	r3, r3, #1
    405a:	22ff      	movs	r2, #255	; 0xff
    405c:	4013      	ands	r3, r2
    405e:	693a      	ldr	r2, [r7, #16]
    4060:	8852      	ldrh	r2, [r2, #2]
    4062:	b292      	uxth	r2, r2
    4064:	0011      	movs	r1, r2
    4066:	2201      	movs	r2, #1
    4068:	400a      	ands	r2, r1
    406a:	1e51      	subs	r1, r2, #1
    406c:	418a      	sbcs	r2, r1
    406e:	b2d2      	uxtb	r2, r2
    4070:	4313      	orrs	r3, r2
    4072:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4074:	697b      	ldr	r3, [r7, #20]
    4076:	0018      	movs	r0, r3
    4078:	4b16      	ldr	r3, [pc, #88]	; (40d4 <_sercom_i2c_sync_send_address+0x130>)
    407a:	4798      	blx	r3
    407c:	0002      	movs	r2, r0
    407e:	2380      	movs	r3, #128	; 0x80
    4080:	01db      	lsls	r3, r3, #7
    4082:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    4084:	0022      	movs	r2, r4
    4086:	431a      	orrs	r2, r3
    4088:	697b      	ldr	r3, [r7, #20]
    408a:	0011      	movs	r1, r2
    408c:	0018      	movs	r0, r3
    408e:	4b12      	ldr	r3, [pc, #72]	; (40d8 <_sercom_i2c_sync_send_address+0x134>)
    4090:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    4092:	2308      	movs	r3, #8
    4094:	18fa      	adds	r2, r7, r3
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	0011      	movs	r1, r2
    409a:	0018      	movs	r0, r3
    409c:	4b0f      	ldr	r3, [pc, #60]	; (40dc <_sercom_i2c_sync_send_address+0x138>)
    409e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    40a0:	68b9      	ldr	r1, [r7, #8]
    40a2:	693a      	ldr	r2, [r7, #16]
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	0018      	movs	r0, r3
    40a8:	4b0d      	ldr	r3, [pc, #52]	; (40e0 <_sercom_i2c_sync_send_address+0x13c>)
    40aa:	4798      	blx	r3
    40ac:	0003      	movs	r3, r0
}
    40ae:	0018      	movs	r0, r3
    40b0:	46bd      	mov	sp, r7
    40b2:	b007      	add	sp, #28
    40b4:	bd90      	pop	{r4, r7, pc}
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	000030d9 	.word	0x000030d9
    40bc:	000005c5 	.word	0x000005c5
    40c0:	00006f74 	.word	0x00006f74
    40c4:	00002077 	.word	0x00002077
    40c8:	000032bd 	.word	0x000032bd
    40cc:	000032e9 	.word	0x000032e9
    40d0:	000007fe 	.word	0x000007fe
    40d4:	0000347d 	.word	0x0000347d
    40d8:	00003455 	.word	0x00003455
    40dc:	00003f49 	.word	0x00003f49
    40e0:	00003c39 	.word	0x00003c39

000040e4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    40e4:	b590      	push	{r4, r7, lr}
    40e6:	b087      	sub	sp, #28
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	691b      	ldr	r3, [r3, #16]
    40f2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	1e5a      	subs	r2, r3, #1
    40f8:	4193      	sbcs	r3, r2
    40fa:	b2d8      	uxtb	r0, r3
    40fc:	23be      	movs	r3, #190	; 0xbe
    40fe:	00da      	lsls	r2, r3, #3
    4100:	4b3d      	ldr	r3, [pc, #244]	; (41f8 <_i2c_m_sync_transfer+0x114>)
    4102:	0019      	movs	r1, r3
    4104:	4b3d      	ldr	r3, [pc, #244]	; (41fc <_i2c_m_sync_transfer+0x118>)
    4106:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	691b      	ldr	r3, [r3, #16]
    410c:	1e5a      	subs	r2, r3, #1
    410e:	4193      	sbcs	r3, r2
    4110:	b2db      	uxtb	r3, r3
    4112:	4a3b      	ldr	r2, [pc, #236]	; (4200 <_i2c_m_sync_transfer+0x11c>)
    4114:	4938      	ldr	r1, [pc, #224]	; (41f8 <_i2c_m_sync_transfer+0x114>)
    4116:	0018      	movs	r0, r3
    4118:	4b38      	ldr	r3, [pc, #224]	; (41fc <_i2c_m_sync_transfer+0x118>)
    411a:	4798      	blx	r3
	ASSERT(msg);
    411c:	683b      	ldr	r3, [r7, #0]
    411e:	1e5a      	subs	r2, r3, #1
    4120:	4193      	sbcs	r3, r2
    4122:	b2db      	uxtb	r3, r3
    4124:	4a37      	ldr	r2, [pc, #220]	; (4204 <_i2c_m_sync_transfer+0x120>)
    4126:	4934      	ldr	r1, [pc, #208]	; (41f8 <_i2c_m_sync_transfer+0x114>)
    4128:	0018      	movs	r0, r3
    412a:	4b34      	ldr	r3, [pc, #208]	; (41fc <_i2c_m_sync_transfer+0x118>)
    412c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	885b      	ldrh	r3, [r3, #2]
    4132:	b29b      	uxth	r3, r3
    4134:	001a      	movs	r2, r3
    4136:	2380      	movs	r3, #128	; 0x80
    4138:	005b      	lsls	r3, r3, #1
    413a:	4013      	ands	r3, r2
    413c:	d002      	beq.n	4144 <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    413e:	2306      	movs	r3, #6
    4140:	425b      	negs	r3, r3
    4142:	e054      	b.n	41ee <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    4144:	683b      	ldr	r3, [r7, #0]
    4146:	885b      	ldrh	r3, [r3, #2]
    4148:	b29b      	uxth	r3, r3
    414a:	2280      	movs	r2, #128	; 0x80
    414c:	0052      	lsls	r2, r2, #1
    414e:	4313      	orrs	r3, r2
    4150:	b29a      	uxth	r2, r3
    4152:	683b      	ldr	r3, [r7, #0]
    4154:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	683a      	ldr	r2, [r7, #0]
    415a:	ca13      	ldmia	r2!, {r0, r1, r4}
    415c:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    415e:	693b      	ldr	r3, [r7, #16]
    4160:	0018      	movs	r0, r3
    4162:	4b29      	ldr	r3, [pc, #164]	; (4208 <_i2c_m_sync_transfer+0x124>)
    4164:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	0018      	movs	r0, r3
    416a:	4b28      	ldr	r3, [pc, #160]	; (420c <_i2c_m_sync_transfer+0x128>)
    416c:	4798      	blx	r3
    416e:	0003      	movs	r3, r0
    4170:	617b      	str	r3, [r7, #20]

	if (ret) {
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	2b00      	cmp	r3, #0
    4176:	d031      	beq.n	41dc <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	885b      	ldrh	r3, [r3, #2]
    417c:	b29b      	uxth	r3, r3
    417e:	4a24      	ldr	r2, [pc, #144]	; (4210 <_i2c_m_sync_transfer+0x12c>)
    4180:	4013      	ands	r3, r2
    4182:	b29a      	uxth	r2, r3
    4184:	687b      	ldr	r3, [r7, #4]
    4186:	805a      	strh	r2, [r3, #2]

		return ret;
    4188:	697b      	ldr	r3, [r7, #20]
    418a:	e030      	b.n	41ee <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    418c:	230c      	movs	r3, #12
    418e:	18fa      	adds	r2, r7, r3
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	0011      	movs	r1, r2
    4194:	0018      	movs	r0, r3
    4196:	4b1f      	ldr	r3, [pc, #124]	; (4214 <_i2c_m_sync_transfer+0x130>)
    4198:	4798      	blx	r3
    419a:	0003      	movs	r3, r0
    419c:	617b      	str	r3, [r7, #20]

		if (ret) {
    419e:	697b      	ldr	r3, [r7, #20]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d013      	beq.n	41cc <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    41a4:	683b      	ldr	r3, [r7, #0]
    41a6:	885b      	ldrh	r3, [r3, #2]
    41a8:	b29b      	uxth	r3, r3
    41aa:	b21b      	sxth	r3, r3
    41ac:	2b00      	cmp	r3, #0
    41ae:	da03      	bge.n	41b8 <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    41b0:	693b      	ldr	r3, [r7, #16]
    41b2:	0018      	movs	r0, r3
    41b4:	4b18      	ldr	r3, [pc, #96]	; (4218 <_i2c_m_sync_transfer+0x134>)
    41b6:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	885b      	ldrh	r3, [r3, #2]
    41bc:	b29b      	uxth	r3, r3
    41be:	4a14      	ldr	r2, [pc, #80]	; (4210 <_i2c_m_sync_transfer+0x12c>)
    41c0:	4013      	ands	r3, r2
    41c2:	b29a      	uxth	r2, r3
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	805a      	strh	r2, [r3, #2]

			return ret;
    41c8:	697b      	ldr	r3, [r7, #20]
    41ca:	e010      	b.n	41ee <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    41cc:	68f9      	ldr	r1, [r7, #12]
    41ce:	687a      	ldr	r2, [r7, #4]
    41d0:	693b      	ldr	r3, [r7, #16]
    41d2:	0018      	movs	r0, r3
    41d4:	4b11      	ldr	r3, [pc, #68]	; (421c <_i2c_m_sync_transfer+0x138>)
    41d6:	4798      	blx	r3
    41d8:	0003      	movs	r3, r0
    41da:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	885b      	ldrh	r3, [r3, #2]
    41e0:	b29b      	uxth	r3, r3
    41e2:	001a      	movs	r2, r3
    41e4:	2380      	movs	r3, #128	; 0x80
    41e6:	005b      	lsls	r3, r3, #1
    41e8:	4013      	ands	r3, r2
    41ea:	d1cf      	bne.n	418c <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    41ec:	697b      	ldr	r3, [r7, #20]
}
    41ee:	0018      	movs	r0, r3
    41f0:	46bd      	mov	sp, r7
    41f2:	b007      	add	sp, #28
    41f4:	bd90      	pop	{r4, r7, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	00006f74 	.word	0x00006f74
    41fc:	00002077 	.word	0x00002077
    4200:	000005f1 	.word	0x000005f1
    4204:	000005f2 	.word	0x000005f2
    4208:	00003261 	.word	0x00003261
    420c:	00003fa5 	.word	0x00003fa5
    4210:	fffffeff 	.word	0xfffffeff
    4214:	00003f49 	.word	0x00003f49
    4218:	00003c19 	.word	0x00003c19
    421c:	00003c39 	.word	0x00003c39

00004220 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    4220:	b580      	push	{r7, lr}
    4222:	b084      	sub	sp, #16
    4224:	af00      	add	r7, sp, #0
    4226:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    4228:	4b1a      	ldr	r3, [pc, #104]	; (4294 <_i2c_m_enable_implementation+0x74>)
    422a:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    422c:	2304      	movs	r3, #4
    422e:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	1e5a      	subs	r2, r3, #1
    4234:	4193      	sbcs	r3, r2
    4236:	b2db      	uxtb	r3, r3
    4238:	4a17      	ldr	r2, [pc, #92]	; (4298 <_i2c_m_enable_implementation+0x78>)
    423a:	4918      	ldr	r1, [pc, #96]	; (429c <_i2c_m_enable_implementation+0x7c>)
    423c:	0018      	movs	r0, r3
    423e:	4b18      	ldr	r3, [pc, #96]	; (42a0 <_i2c_m_enable_implementation+0x80>)
    4240:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	0018      	movs	r0, r3
    4246:	4b17      	ldr	r3, [pc, #92]	; (42a4 <_i2c_m_enable_implementation+0x84>)
    4248:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    424a:	e016      	b.n	427a <_i2c_m_enable_implementation+0x5a>
		timeout--;
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	3b01      	subs	r3, #1
    4250:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    4252:	68fb      	ldr	r3, [r7, #12]
    4254:	2b00      	cmp	r3, #0
    4256:	dc10      	bgt.n	427a <_i2c_m_enable_implementation+0x5a>
			if (--timeout_attempt)
    4258:	68bb      	ldr	r3, [r7, #8]
    425a:	3b01      	subs	r3, #1
    425c:	60bb      	str	r3, [r7, #8]
    425e:	68bb      	ldr	r3, [r7, #8]
    4260:	2b00      	cmp	r3, #0
    4262:	d007      	beq.n	4274 <_i2c_m_enable_implementation+0x54>
				timeout = 65535;
    4264:	4b0b      	ldr	r3, [pc, #44]	; (4294 <_i2c_m_enable_implementation+0x74>)
    4266:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	2110      	movs	r1, #16
    426c:	0018      	movs	r0, r3
    426e:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <_i2c_m_enable_implementation+0x88>)
    4270:	4798      	blx	r3
    4272:	e002      	b.n	427a <_i2c_m_enable_implementation+0x5a>
				return I2C_ERR_BUSY;
    4274:	2306      	movs	r3, #6
    4276:	425b      	negs	r3, r3
    4278:	e007      	b.n	428a <_i2c_m_enable_implementation+0x6a>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	0018      	movs	r0, r3
    427e:	4b0b      	ldr	r3, [pc, #44]	; (42ac <_i2c_m_enable_implementation+0x8c>)
    4280:	4798      	blx	r3
    4282:	0003      	movs	r3, r0
    4284:	2b01      	cmp	r3, #1
    4286:	d1e1      	bne.n	424c <_i2c_m_enable_implementation+0x2c>
		}
	}
	return ERR_NONE;
    4288:	2300      	movs	r3, #0
}
    428a:	0018      	movs	r0, r3
    428c:	46bd      	mov	sp, r7
    428e:	b004      	add	sp, #16
    4290:	bd80      	pop	{r7, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	0000ffff 	.word	0x0000ffff
    4298:	00000625 	.word	0x00000625
    429c:	00006f74 	.word	0x00006f74
    42a0:	00002077 	.word	0x00002077
    42a4:	00003081 	.word	0x00003081
    42a8:	00003649 	.word	0x00003649
    42ac:	000035f5 	.word	0x000035f5

000042b0 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    42b0:	b580      	push	{r7, lr}
    42b2:	b084      	sub	sp, #16
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
    42b8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    42ba:	683b      	ldr	r3, [r7, #0]
    42bc:	0018      	movs	r0, r3
    42be:	4b4f      	ldr	r3, [pc, #316]	; (43fc <_i2c_m_sync_init_impl+0x14c>)
    42c0:	4798      	blx	r3
    42c2:	0003      	movs	r3, r0
    42c4:	001a      	movs	r2, r3
    42c6:	230f      	movs	r3, #15
    42c8:	18fb      	adds	r3, r7, r3
    42ca:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    42cc:	683b      	ldr	r3, [r7, #0]
    42ce:	2101      	movs	r1, #1
    42d0:	0018      	movs	r0, r3
    42d2:	4b4b      	ldr	r3, [pc, #300]	; (4400 <_i2c_m_sync_init_impl+0x150>)
    42d4:	4798      	blx	r3
    42d6:	0003      	movs	r3, r0
    42d8:	001a      	movs	r2, r3
    42da:	2301      	movs	r3, #1
    42dc:	4053      	eors	r3, r2
    42de:	b2db      	uxtb	r3, r3
    42e0:	2b00      	cmp	r3, #0
    42e2:	d025      	beq.n	4330 <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    42e4:	230f      	movs	r3, #15
    42e6:	18fb      	adds	r3, r7, r3
    42e8:	781a      	ldrb	r2, [r3, #0]
    42ea:	4946      	ldr	r1, [pc, #280]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    42ec:	0013      	movs	r3, r2
    42ee:	005b      	lsls	r3, r3, #1
    42f0:	189b      	adds	r3, r3, r2
    42f2:	00db      	lsls	r3, r3, #3
    42f4:	18cb      	adds	r3, r1, r3
    42f6:	3304      	adds	r3, #4
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	221c      	movs	r2, #28
    42fc:	4013      	ands	r3, r2
    42fe:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	2102      	movs	r1, #2
    4304:	0018      	movs	r0, r3
    4306:	4b40      	ldr	r3, [pc, #256]	; (4408 <_i2c_m_sync_init_impl+0x158>)
    4308:	4798      	blx	r3
    430a:	1e03      	subs	r3, r0, #0
    430c:	d008      	beq.n	4320 <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    430e:	683b      	ldr	r3, [r7, #0]
    4310:	0018      	movs	r0, r3
    4312:	4b3e      	ldr	r3, [pc, #248]	; (440c <_i2c_m_sync_init_impl+0x15c>)
    4314:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    4316:	683b      	ldr	r3, [r7, #0]
    4318:	2102      	movs	r1, #2
    431a:	0018      	movs	r0, r3
    431c:	4b3c      	ldr	r3, [pc, #240]	; (4410 <_i2c_m_sync_init_impl+0x160>)
    431e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    4320:	68bb      	ldr	r3, [r7, #8]
    4322:	2201      	movs	r2, #1
    4324:	431a      	orrs	r2, r3
    4326:	683b      	ldr	r3, [r7, #0]
    4328:	0011      	movs	r1, r2
    432a:	0018      	movs	r0, r3
    432c:	4b39      	ldr	r3, [pc, #228]	; (4414 <_i2c_m_sync_init_impl+0x164>)
    432e:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    4330:	683b      	ldr	r3, [r7, #0]
    4332:	2101      	movs	r1, #1
    4334:	0018      	movs	r0, r3
    4336:	4b36      	ldr	r3, [pc, #216]	; (4410 <_i2c_m_sync_init_impl+0x160>)
    4338:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    433a:	230f      	movs	r3, #15
    433c:	18fb      	adds	r3, r7, r3
    433e:	781a      	ldrb	r2, [r3, #0]
    4340:	4930      	ldr	r1, [pc, #192]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    4342:	0013      	movs	r3, r2
    4344:	005b      	lsls	r3, r3, #1
    4346:	189b      	adds	r3, r3, r2
    4348:	00db      	lsls	r3, r3, #3
    434a:	18cb      	adds	r3, r1, r3
    434c:	3304      	adds	r3, #4
    434e:	681a      	ldr	r2, [r3, #0]
    4350:	683b      	ldr	r3, [r7, #0]
    4352:	0011      	movs	r1, r2
    4354:	0018      	movs	r0, r3
    4356:	4b2f      	ldr	r3, [pc, #188]	; (4414 <_i2c_m_sync_init_impl+0x164>)
    4358:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    435a:	230f      	movs	r3, #15
    435c:	18fb      	adds	r3, r7, r3
    435e:	781a      	ldrb	r2, [r3, #0]
    4360:	4928      	ldr	r1, [pc, #160]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    4362:	0013      	movs	r3, r2
    4364:	005b      	lsls	r3, r3, #1
    4366:	189b      	adds	r3, r3, r2
    4368:	00db      	lsls	r3, r3, #3
    436a:	18cb      	adds	r3, r1, r3
    436c:	3308      	adds	r3, #8
    436e:	681a      	ldr	r2, [r3, #0]
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	0011      	movs	r1, r2
    4374:	0018      	movs	r0, r3
    4376:	4b28      	ldr	r3, [pc, #160]	; (4418 <_i2c_m_sync_init_impl+0x168>)
    4378:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    437a:	230f      	movs	r3, #15
    437c:	18fb      	adds	r3, r7, r3
    437e:	781a      	ldrb	r2, [r3, #0]
    4380:	4920      	ldr	r1, [pc, #128]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    4382:	0013      	movs	r3, r2
    4384:	005b      	lsls	r3, r3, #1
    4386:	189b      	adds	r3, r3, r2
    4388:	00db      	lsls	r3, r3, #3
    438a:	18cb      	adds	r3, r1, r3
    438c:	330c      	adds	r3, #12
    438e:	681a      	ldr	r2, [r3, #0]
    4390:	683b      	ldr	r3, [r7, #0]
    4392:	0011      	movs	r1, r2
    4394:	0018      	movs	r0, r3
    4396:	4b21      	ldr	r3, [pc, #132]	; (441c <_i2c_m_sync_init_impl+0x16c>)
    4398:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    439a:	230f      	movs	r3, #15
    439c:	18fb      	adds	r3, r7, r3
    439e:	781a      	ldrb	r2, [r3, #0]
    43a0:	4918      	ldr	r1, [pc, #96]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    43a2:	0013      	movs	r3, r2
    43a4:	005b      	lsls	r3, r3, #1
    43a6:	189b      	adds	r3, r3, r2
    43a8:	00db      	lsls	r3, r3, #3
    43aa:	18cb      	adds	r3, r1, r3
    43ac:	3304      	adds	r3, #4
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	0e1b      	lsrs	r3, r3, #24
    43b2:	b29b      	uxth	r3, r3
    43b4:	2203      	movs	r2, #3
    43b6:	4013      	ands	r3, r2
    43b8:	b29a      	uxth	r2, r3
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	899b      	ldrh	r3, [r3, #12]
    43c2:	2201      	movs	r2, #1
    43c4:	429a      	cmp	r2, r3
    43c6:	419b      	sbcs	r3, r3
    43c8:	425b      	negs	r3, r3
    43ca:	b2da      	uxtb	r2, r3
    43cc:	683b      	ldr	r3, [r7, #0]
    43ce:	0011      	movs	r1, r2
    43d0:	0018      	movs	r0, r3
    43d2:	4b13      	ldr	r3, [pc, #76]	; (4420 <_i2c_m_sync_init_impl+0x170>)
    43d4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    43d6:	230f      	movs	r3, #15
    43d8:	18fb      	adds	r3, r7, r3
    43da:	781a      	ldrb	r2, [r3, #0]
    43dc:	4909      	ldr	r1, [pc, #36]	; (4404 <_i2c_m_sync_init_impl+0x154>)
    43de:	0013      	movs	r3, r2
    43e0:	005b      	lsls	r3, r3, #1
    43e2:	189b      	adds	r3, r3, r2
    43e4:	00db      	lsls	r3, r3, #3
    43e6:	18cb      	adds	r3, r1, r3
    43e8:	3312      	adds	r3, #18
    43ea:	881a      	ldrh	r2, [r3, #0]
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    43f0:	2300      	movs	r3, #0
}
    43f2:	0018      	movs	r0, r3
    43f4:	46bd      	mov	sp, r7
    43f6:	b004      	add	sp, #16
    43f8:	bd80      	pop	{r7, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	00003b8d 	.word	0x00003b8d
    4400:	00002e67 	.word	0x00002e67
    4404:	20000014 	.word	0x20000014
    4408:	00003101 	.word	0x00003101
    440c:	000030ad 	.word	0x000030ad
    4410:	00002e49 	.word	0x00002e49
    4414:	00003131 	.word	0x00003131
    4418:	0000334d 	.word	0x0000334d
    441c:	000033b5 	.word	0x000033b5
    4420:	00003409 	.word	0x00003409

00004424 <_i2c_s_async_init>:

/**
 * \brief Initialize asynchronous I2C slave
 */
int32_t _i2c_s_async_init(struct _i2c_s_async_device *const device, void *const hw)
{
    4424:	b580      	push	{r7, lr}
    4426:	b084      	sub	sp, #16
    4428:	af00      	add	r7, sp, #0
    442a:	6078      	str	r0, [r7, #4]
    442c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    442e:	687b      	ldr	r3, [r7, #4]
    4430:	1e5a      	subs	r2, r3, #1
    4432:	4193      	sbcs	r3, r2
    4434:	b2db      	uxtb	r3, r3
    4436:	4a1c      	ldr	r2, [pc, #112]	; (44a8 <_i2c_s_async_init+0x84>)
    4438:	491c      	ldr	r1, [pc, #112]	; (44ac <_i2c_s_async_init+0x88>)
    443a:	0018      	movs	r0, r3
    443c:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <_i2c_s_async_init+0x8c>)
    443e:	4798      	blx	r3

	init_status = _i2c_s_init(hw);
    4440:	683b      	ldr	r3, [r7, #0]
    4442:	0018      	movs	r0, r3
    4444:	4b1b      	ldr	r3, [pc, #108]	; (44b4 <_i2c_s_async_init+0x90>)
    4446:	4798      	blx	r3
    4448:	0003      	movs	r3, r0
    444a:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	2b00      	cmp	r3, #0
    4450:	d001      	beq.n	4456 <_i2c_s_async_init+0x32>
		return init_status;
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	e024      	b.n	44a0 <_i2c_s_async_init+0x7c>
	}

	device->hw = hw;
    4456:	687b      	ldr	r3, [r7, #4]
    4458:	683a      	ldr	r2, [r7, #0]
    445a:	601a      	str	r2, [r3, #0]
	_sercom_init_irq_param(hw, (void *)device);
    445c:	687a      	ldr	r2, [r7, #4]
    445e:	683b      	ldr	r3, [r7, #0]
    4460:	0011      	movs	r1, r2
    4462:	0018      	movs	r0, r3
    4464:	4b14      	ldr	r3, [pc, #80]	; (44b8 <_i2c_s_async_init+0x94>)
    4466:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    4468:	683b      	ldr	r3, [r7, #0]
    446a:	0018      	movs	r0, r3
    446c:	4b13      	ldr	r3, [pc, #76]	; (44bc <_i2c_s_async_init+0x98>)
    446e:	4798      	blx	r3
    4470:	0003      	movs	r3, r0
    4472:	b25b      	sxtb	r3, r3
    4474:	0018      	movs	r0, r3
    4476:	4b12      	ldr	r3, [pc, #72]	; (44c0 <_i2c_s_async_init+0x9c>)
    4478:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    447a:	683b      	ldr	r3, [r7, #0]
    447c:	0018      	movs	r0, r3
    447e:	4b0f      	ldr	r3, [pc, #60]	; (44bc <_i2c_s_async_init+0x98>)
    4480:	4798      	blx	r3
    4482:	0003      	movs	r3, r0
    4484:	b25b      	sxtb	r3, r3
    4486:	0018      	movs	r0, r3
    4488:	4b0e      	ldr	r3, [pc, #56]	; (44c4 <_i2c_s_async_init+0xa0>)
    448a:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    448c:	683b      	ldr	r3, [r7, #0]
    448e:	0018      	movs	r0, r3
    4490:	4b0a      	ldr	r3, [pc, #40]	; (44bc <_i2c_s_async_init+0x98>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	b25b      	sxtb	r3, r3
    4498:	0018      	movs	r0, r3
    449a:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <_i2c_s_async_init+0xa4>)
    449c:	4798      	blx	r3

	return ERR_NONE;
    449e:	2300      	movs	r3, #0
}
    44a0:	0018      	movs	r0, r3
    44a2:	46bd      	mov	sp, r7
    44a4:	b004      	add	sp, #16
    44a6:	bd80      	pop	{r7, pc}
    44a8:	000006d2 	.word	0x000006d2
    44ac:	00006f74 	.word	0x00006f74
    44b0:	00002077 	.word	0x00002077
    44b4:	000045cd 	.word	0x000045cd
    44b8:	00003955 	.word	0x00003955
    44bc:	00003e9d 	.word	0x00003e9d
    44c0:	00002dd1 	.word	0x00002dd1
    44c4:	00002e11 	.word	0x00002e11
    44c8:	00002d9d 	.word	0x00002d9d

000044cc <_i2c_s_async_write_byte>:

/**
 * \brief Write a byte to the given I2C instance
 */
void _i2c_s_async_write_byte(struct _i2c_s_async_device *const device, const uint8_t data)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b082      	sub	sp, #8
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
    44d4:	000a      	movs	r2, r1
    44d6:	1cfb      	adds	r3, r7, #3
    44d8:	701a      	strb	r2, [r3, #0]
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	681a      	ldr	r2, [r3, #0]
    44de:	1cfb      	adds	r3, r7, #3
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	0019      	movs	r1, r3
    44e4:	0010      	movs	r0, r2
    44e6:	4b03      	ldr	r3, [pc, #12]	; (44f4 <_i2c_s_async_write_byte+0x28>)
    44e8:	4798      	blx	r3
}
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	46bd      	mov	sp, r7
    44ee:	b002      	add	sp, #8
    44f0:	bd80      	pop	{r7, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00003511 	.word	0x00003511

000044f8 <_sercom_i2c_s_irq_handler>:
 * \internal Sercom i2c slave interrupt handler
 *
 * \param[in] p The pointer to i2c slave device
 */
static void _sercom_i2c_s_irq_handler(struct _i2c_s_async_device *device)
{
    44f8:	b590      	push	{r4, r7, lr}
    44fa:	b085      	sub	sp, #20
    44fc:	af00      	add	r7, sp, #0
    44fe:	6078      	str	r0, [r7, #4]
	void *   hw    = device->hw;
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	60fb      	str	r3, [r7, #12]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	0018      	movs	r0, r3
    450a:	4b28      	ldr	r3, [pc, #160]	; (45ac <_sercom_i2c_s_irq_handler+0xb4>)
    450c:	4798      	blx	r3
    450e:	0003      	movs	r3, r0
    4510:	60bb      	str	r3, [r7, #8]

	if (flags & SERCOM_I2CS_INTFLAG_ERROR) {
    4512:	68bb      	ldr	r3, [r7, #8]
    4514:	2280      	movs	r2, #128	; 0x80
    4516:	4013      	ands	r3, r2
    4518:	d00f      	beq.n	453a <_sercom_i2c_s_irq_handler+0x42>
		ASSERT(device->cb.error);
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	685b      	ldr	r3, [r3, #4]
    451e:	1e5a      	subs	r2, r3, #1
    4520:	4193      	sbcs	r3, r2
    4522:	b2db      	uxtb	r3, r3
    4524:	4a22      	ldr	r2, [pc, #136]	; (45b0 <_sercom_i2c_s_irq_handler+0xb8>)
    4526:	4923      	ldr	r1, [pc, #140]	; (45b4 <_sercom_i2c_s_irq_handler+0xbc>)
    4528:	0018      	movs	r0, r3
    452a:	4b23      	ldr	r3, [pc, #140]	; (45b8 <_sercom_i2c_s_irq_handler+0xc0>)
    452c:	4798      	blx	r3
		device->cb.error(device);
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	685b      	ldr	r3, [r3, #4]
    4532:	687a      	ldr	r2, [r7, #4]
    4534:	0010      	movs	r0, r2
    4536:	4798      	blx	r3
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
#endif
	}
}
    4538:	e034      	b.n	45a4 <_sercom_i2c_s_irq_handler+0xac>
	} else if (flags & SERCOM_I2CS_INTFLAG_DRDY) {
    453a:	68bb      	ldr	r3, [r7, #8]
    453c:	2204      	movs	r2, #4
    453e:	4013      	ands	r3, r2
    4540:	d030      	beq.n	45a4 <_sercom_i2c_s_irq_handler+0xac>
		if (!hri_sercomi2cs_get_STATUS_DIR_bit(hw)) {
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	0018      	movs	r0, r3
    4546:	4b1d      	ldr	r3, [pc, #116]	; (45bc <_sercom_i2c_s_irq_handler+0xc4>)
    4548:	4798      	blx	r3
    454a:	0003      	movs	r3, r0
    454c:	001a      	movs	r2, r3
    454e:	2301      	movs	r3, #1
    4550:	4053      	eors	r3, r2
    4552:	b2db      	uxtb	r3, r3
    4554:	2b00      	cmp	r3, #0
    4556:	d016      	beq.n	4586 <_sercom_i2c_s_irq_handler+0x8e>
			ASSERT(device->cb.rx_done);
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	68db      	ldr	r3, [r3, #12]
    455c:	1e5a      	subs	r2, r3, #1
    455e:	4193      	sbcs	r3, r2
    4560:	b2db      	uxtb	r3, r3
    4562:	4a17      	ldr	r2, [pc, #92]	; (45c0 <_sercom_i2c_s_irq_handler+0xc8>)
    4564:	4913      	ldr	r1, [pc, #76]	; (45b4 <_sercom_i2c_s_irq_handler+0xbc>)
    4566:	0018      	movs	r0, r3
    4568:	4b13      	ldr	r3, [pc, #76]	; (45b8 <_sercom_i2c_s_irq_handler+0xc0>)
    456a:	4798      	blx	r3
			device->cb.rx_done(device, hri_sercomi2cs_read_DATA_reg(hw));
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	68dc      	ldr	r4, [r3, #12]
    4570:	68fb      	ldr	r3, [r7, #12]
    4572:	0018      	movs	r0, r3
    4574:	4b13      	ldr	r3, [pc, #76]	; (45c4 <_sercom_i2c_s_irq_handler+0xcc>)
    4576:	4798      	blx	r3
    4578:	0003      	movs	r3, r0
    457a:	001a      	movs	r2, r3
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	0011      	movs	r1, r2
    4580:	0018      	movs	r0, r3
    4582:	47a0      	blx	r4
}
    4584:	e00e      	b.n	45a4 <_sercom_i2c_s_irq_handler+0xac>
			ASSERT(device->cb.tx);
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	689b      	ldr	r3, [r3, #8]
    458a:	1e5a      	subs	r2, r3, #1
    458c:	4193      	sbcs	r3, r2
    458e:	b2db      	uxtb	r3, r3
    4590:	4a0d      	ldr	r2, [pc, #52]	; (45c8 <_sercom_i2c_s_irq_handler+0xd0>)
    4592:	4908      	ldr	r1, [pc, #32]	; (45b4 <_sercom_i2c_s_irq_handler+0xbc>)
    4594:	0018      	movs	r0, r3
    4596:	4b08      	ldr	r3, [pc, #32]	; (45b8 <_sercom_i2c_s_irq_handler+0xc0>)
    4598:	4798      	blx	r3
			device->cb.tx(device);
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	689b      	ldr	r3, [r3, #8]
    459e:	687a      	ldr	r2, [r7, #4]
    45a0:	0010      	movs	r0, r2
    45a2:	4798      	blx	r3
}
    45a4:	46c0      	nop			; (mov r8, r8)
    45a6:	46bd      	mov	sp, r7
    45a8:	b005      	add	sp, #20
    45aa:	bd90      	pop	{r4, r7, pc}
    45ac:	00002f2f 	.word	0x00002f2f
    45b0:	000007a7 	.word	0x000007a7
    45b4:	00006f74 	.word	0x00006f74
    45b8:	00002077 	.word	0x00002077
    45bc:	0000359d 	.word	0x0000359d
    45c0:	000007ab 	.word	0x000007ab
    45c4:	00003531 	.word	0x00003531
    45c8:	000007ae 	.word	0x000007ae

000045cc <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
    45cc:	b590      	push	{r4, r7, lr}
    45ce:	b085      	sub	sp, #20
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
	int8_t i = _get_i2c_s_index(hw);
    45d4:	230f      	movs	r3, #15
    45d6:	18fc      	adds	r4, r7, r3
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	0018      	movs	r0, r3
    45dc:	4b38      	ldr	r3, [pc, #224]	; (46c0 <_i2c_s_init+0xf4>)
    45de:	4798      	blx	r3
    45e0:	0003      	movs	r3, r0
    45e2:	7023      	strb	r3, [r4, #0]
	if (i == -1) {
    45e4:	230f      	movs	r3, #15
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	b25b      	sxtb	r3, r3
    45ec:	3301      	adds	r3, #1
    45ee:	d102      	bne.n	45f6 <_i2c_s_init+0x2a>
		return ERR_INVALID_ARG;
    45f0:	230d      	movs	r3, #13
    45f2:	425b      	negs	r3, r3
    45f4:	e05f      	b.n	46b6 <_i2c_s_init+0xea>
	}

	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	2101      	movs	r1, #1
    45fa:	0018      	movs	r0, r3
    45fc:	4b31      	ldr	r3, [pc, #196]	; (46c4 <_i2c_s_init+0xf8>)
    45fe:	4798      	blx	r3
    4600:	0003      	movs	r3, r0
    4602:	001a      	movs	r2, r3
    4604:	2301      	movs	r3, #1
    4606:	4053      	eors	r3, r2
    4608:	b2db      	uxtb	r3, r3
    460a:	2b00      	cmp	r3, #0
    460c:	d023      	beq.n	4656 <_i2c_s_init+0x8a>
		uint32_t mode = _i2css[i].ctrl_a & SERCOM_I2CS_CTRLA_MODE_Msk;
    460e:	230f      	movs	r3, #15
    4610:	18fb      	adds	r3, r7, r3
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	b25b      	sxtb	r3, r3
    4616:	4a2c      	ldr	r2, [pc, #176]	; (46c8 <_i2c_s_init+0xfc>)
    4618:	011b      	lsls	r3, r3, #4
    461a:	18d3      	adds	r3, r2, r3
    461c:	3304      	adds	r3, #4
    461e:	681b      	ldr	r3, [r3, #0]
    4620:	221c      	movs	r2, #28
    4622:	4013      	ands	r3, r2
    4624:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	2102      	movs	r1, #2
    462a:	0018      	movs	r0, r3
    462c:	4b27      	ldr	r3, [pc, #156]	; (46cc <_i2c_s_init+0x100>)
    462e:	4798      	blx	r3
    4630:	1e03      	subs	r3, r0, #0
    4632:	d008      	beq.n	4646 <_i2c_s_init+0x7a>
			hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
    4634:	687b      	ldr	r3, [r7, #4]
    4636:	0018      	movs	r0, r3
    4638:	4b25      	ldr	r3, [pc, #148]	; (46d0 <_i2c_s_init+0x104>)
    463a:	4798      	blx	r3
			hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_ENABLE);
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	2102      	movs	r1, #2
    4640:	0018      	movs	r0, r3
    4642:	4b24      	ldr	r3, [pc, #144]	; (46d4 <_i2c_s_init+0x108>)
    4644:	4798      	blx	r3
		}
		hri_sercomi2cs_write_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_SWRST | mode);
    4646:	68bb      	ldr	r3, [r7, #8]
    4648:	2201      	movs	r2, #1
    464a:	431a      	orrs	r2, r3
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	0011      	movs	r1, r2
    4650:	0018      	movs	r0, r3
    4652:	4b21      	ldr	r3, [pc, #132]	; (46d8 <_i2c_s_init+0x10c>)
    4654:	4798      	blx	r3
	}
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST);
    4656:	687b      	ldr	r3, [r7, #4]
    4658:	2101      	movs	r1, #1
    465a:	0018      	movs	r0, r3
    465c:	4b1d      	ldr	r3, [pc, #116]	; (46d4 <_i2c_s_init+0x108>)
    465e:	4798      	blx	r3

	hri_sercomi2cs_write_CTRLA_reg(hw, _i2css[i].ctrl_a);
    4660:	230f      	movs	r3, #15
    4662:	18fb      	adds	r3, r7, r3
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	b25b      	sxtb	r3, r3
    4668:	4a17      	ldr	r2, [pc, #92]	; (46c8 <_i2c_s_init+0xfc>)
    466a:	011b      	lsls	r3, r3, #4
    466c:	18d3      	adds	r3, r2, r3
    466e:	3304      	adds	r3, #4
    4670:	681a      	ldr	r2, [r3, #0]
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	0011      	movs	r1, r2
    4676:	0018      	movs	r0, r3
    4678:	4b17      	ldr	r3, [pc, #92]	; (46d8 <_i2c_s_init+0x10c>)
    467a:	4798      	blx	r3
	hri_sercomi2cs_write_CTRLB_reg(hw, _i2css[i].ctrl_b);
    467c:	230f      	movs	r3, #15
    467e:	18fb      	adds	r3, r7, r3
    4680:	781b      	ldrb	r3, [r3, #0]
    4682:	b25b      	sxtb	r3, r3
    4684:	4a10      	ldr	r2, [pc, #64]	; (46c8 <_i2c_s_init+0xfc>)
    4686:	011b      	lsls	r3, r3, #4
    4688:	18d3      	adds	r3, r2, r3
    468a:	3308      	adds	r3, #8
    468c:	681a      	ldr	r2, [r3, #0]
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	0011      	movs	r1, r2
    4692:	0018      	movs	r0, r3
    4694:	4b11      	ldr	r3, [pc, #68]	; (46dc <_i2c_s_init+0x110>)
    4696:	4798      	blx	r3
	hri_sercomi2cs_write_ADDR_reg(hw, _i2css[i].address);
    4698:	230f      	movs	r3, #15
    469a:	18fb      	adds	r3, r7, r3
    469c:	781b      	ldrb	r3, [r3, #0]
    469e:	b25b      	sxtb	r3, r3
    46a0:	4a09      	ldr	r2, [pc, #36]	; (46c8 <_i2c_s_init+0xfc>)
    46a2:	011b      	lsls	r3, r3, #4
    46a4:	18d3      	adds	r3, r2, r3
    46a6:	330c      	adds	r3, #12
    46a8:	681a      	ldr	r2, [r3, #0]
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	0011      	movs	r1, r2
    46ae:	0018      	movs	r0, r3
    46b0:	4b0b      	ldr	r3, [pc, #44]	; (46e0 <_i2c_s_init+0x114>)
    46b2:	4798      	blx	r3

	return ERR_NONE;
    46b4:	2300      	movs	r3, #0
}
    46b6:	0018      	movs	r0, r3
    46b8:	46bd      	mov	sp, r7
    46ba:	b005      	add	sp, #20
    46bc:	bd90      	pop	{r4, r7, pc}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	000046e5 	.word	0x000046e5
    46c4:	00002ea5 	.word	0x00002ea5
    46c8:	2000002c 	.word	0x2000002c
    46cc:	00003185 	.word	0x00003185
    46d0:	00003159 	.word	0x00003159
    46d4:	00002e87 	.word	0x00002e87
    46d8:	000031b5 	.word	0x000031b5
    46dc:	00003375 	.word	0x00003375
    46e0:	000034a1 	.word	0x000034a1

000046e4 <_get_i2c_s_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
    46e4:	b590      	push	{r4, r7, lr}
    46e6:	b085      	sub	sp, #20
    46e8:	af00      	add	r7, sp, #0
    46ea:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    46ec:	230e      	movs	r3, #14
    46ee:	18fc      	adds	r4, r7, r3
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	0018      	movs	r0, r3
    46f4:	4b18      	ldr	r3, [pc, #96]	; (4758 <_get_i2c_s_index+0x74>)
    46f6:	4798      	blx	r3
    46f8:	0003      	movs	r3, r0
    46fa:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    46fc:	230f      	movs	r3, #15
    46fe:	18fb      	adds	r3, r7, r3
    4700:	2200      	movs	r2, #0
    4702:	701a      	strb	r2, [r3, #0]
    4704:	e016      	b.n	4734 <_get_i2c_s_index+0x50>
		if (_i2css[i].number == sercom_offset) {
    4706:	230f      	movs	r3, #15
    4708:	18fb      	adds	r3, r7, r3
    470a:	781a      	ldrb	r2, [r3, #0]
    470c:	4b13      	ldr	r3, [pc, #76]	; (475c <_get_i2c_s_index+0x78>)
    470e:	0112      	lsls	r2, r2, #4
    4710:	5cd3      	ldrb	r3, [r2, r3]
    4712:	220e      	movs	r2, #14
    4714:	18ba      	adds	r2, r7, r2
    4716:	7812      	ldrb	r2, [r2, #0]
    4718:	429a      	cmp	r2, r3
    471a:	d104      	bne.n	4726 <_get_i2c_s_index+0x42>
			return i;
    471c:	230f      	movs	r3, #15
    471e:	18fb      	adds	r3, r7, r3
    4720:	781b      	ldrb	r3, [r3, #0]
    4722:	b25b      	sxtb	r3, r3
    4724:	e013      	b.n	474e <_get_i2c_s_index+0x6a>
	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    4726:	230f      	movs	r3, #15
    4728:	18fb      	adds	r3, r7, r3
    472a:	781a      	ldrb	r2, [r3, #0]
    472c:	230f      	movs	r3, #15
    472e:	18fb      	adds	r3, r7, r3
    4730:	3201      	adds	r2, #1
    4732:	701a      	strb	r2, [r3, #0]
    4734:	230f      	movs	r3, #15
    4736:	18fb      	adds	r3, r7, r3
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	2b00      	cmp	r3, #0
    473c:	d0e3      	beq.n	4706 <_get_i2c_s_index+0x22>
		}
	}

	ASSERT(false);
    473e:	4a08      	ldr	r2, [pc, #32]	; (4760 <_get_i2c_s_index+0x7c>)
    4740:	4b08      	ldr	r3, [pc, #32]	; (4764 <_get_i2c_s_index+0x80>)
    4742:	0019      	movs	r1, r3
    4744:	2000      	movs	r0, #0
    4746:	4b08      	ldr	r3, [pc, #32]	; (4768 <_get_i2c_s_index+0x84>)
    4748:	4798      	blx	r3
	return -1;
    474a:	2301      	movs	r3, #1
    474c:	425b      	negs	r3, r3
}
    474e:	0018      	movs	r0, r3
    4750:	46bd      	mov	sp, r7
    4752:	b005      	add	sp, #20
    4754:	bd90      	pop	{r4, r7, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	00003785 	.word	0x00003785
    475c:	2000002c 	.word	0x2000002c
    4760:	000007eb 	.word	0x000007eb
    4764:	00006f74 	.word	0x00006f74
    4768:	00002077 	.word	0x00002077

0000476c <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    476c:	b580      	push	{r7, lr}
    476e:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    4770:	4b03      	ldr	r3, [pc, #12]	; (4780 <SERCOM0_Handler+0x14>)
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	0018      	movs	r0, r3
    4776:	4b03      	ldr	r3, [pc, #12]	; (4784 <SERCOM0_Handler+0x18>)
    4778:	4798      	blx	r3
}
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	46bd      	mov	sp, r7
    477e:	bd80      	pop	{r7, pc}
    4780:	2000008c 	.word	0x2000008c
    4784:	000037b5 	.word	0x000037b5

00004788 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    4788:	b580      	push	{r7, lr}
    478a:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom1_dev);
    478c:	4b03      	ldr	r3, [pc, #12]	; (479c <SERCOM1_Handler+0x14>)
    478e:	681b      	ldr	r3, [r3, #0]
    4790:	0018      	movs	r0, r3
    4792:	4b03      	ldr	r3, [pc, #12]	; (47a0 <SERCOM1_Handler+0x18>)
    4794:	4798      	blx	r3
}
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	46bd      	mov	sp, r7
    479a:	bd80      	pop	{r7, pc}
    479c:	20000090 	.word	0x20000090
    47a0:	000044f9 	.word	0x000044f9

000047a4 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b082      	sub	sp, #8
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    47ac:	4b04      	ldr	r3, [pc, #16]	; (47c0 <_system_time_init+0x1c>)
    47ae:	4a05      	ldr	r2, [pc, #20]	; (47c4 <_system_time_init+0x20>)
    47b0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    47b2:	4b03      	ldr	r3, [pc, #12]	; (47c0 <_system_time_init+0x1c>)
    47b4:	2205      	movs	r2, #5
    47b6:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    47b8:	46c0      	nop			; (mov r8, r8)
    47ba:	46bd      	mov	sp, r7
    47bc:	b002      	add	sp, #8
    47be:	bd80      	pop	{r7, pc}
    47c0:	e000e010 	.word	0xe000e010
    47c4:	00ffffff 	.word	0x00ffffff

000047c8 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b082      	sub	sp, #8
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	0018      	movs	r0, r3
    47d4:	4b02      	ldr	r3, [pc, #8]	; (47e0 <_delay_init+0x18>)
    47d6:	4798      	blx	r3
}
    47d8:	46c0      	nop			; (mov r8, r8)
    47da:	46bd      	mov	sp, r7
    47dc:	b002      	add	sp, #8
    47de:	bd80      	pop	{r7, pc}
    47e0:	000047a5 	.word	0x000047a5

000047e4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    47e4:	b580      	push	{r7, lr}
    47e6:	b084      	sub	sp, #16
    47e8:	af00      	add	r7, sp, #0
    47ea:	6078      	str	r0, [r7, #4]
    47ec:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    47ee:	683b      	ldr	r3, [r7, #0]
    47f0:	0e1a      	lsrs	r2, r3, #24
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    47f8:	683b      	ldr	r3, [r7, #0]
    47fa:	60bb      	str	r3, [r7, #8]

	while (n--) {
    47fc:	e011      	b.n	4822 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    47fe:	4b16      	ldr	r3, [pc, #88]	; (4858 <_delay_cycles+0x74>)
    4800:	4a16      	ldr	r2, [pc, #88]	; (485c <_delay_cycles+0x78>)
    4802:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4804:	4b14      	ldr	r3, [pc, #80]	; (4858 <_delay_cycles+0x74>)
    4806:	4a15      	ldr	r2, [pc, #84]	; (485c <_delay_cycles+0x78>)
    4808:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    480a:	46c0      	nop			; (mov r8, r8)
    480c:	4b12      	ldr	r3, [pc, #72]	; (4858 <_delay_cycles+0x74>)
    480e:	681a      	ldr	r2, [r3, #0]
    4810:	2380      	movs	r3, #128	; 0x80
    4812:	025b      	lsls	r3, r3, #9
    4814:	4013      	ands	r3, r2
    4816:	d0f9      	beq.n	480c <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    4818:	68bb      	ldr	r3, [r7, #8]
    481a:	4a11      	ldr	r2, [pc, #68]	; (4860 <_delay_cycles+0x7c>)
    481c:	4694      	mov	ip, r2
    481e:	4463      	add	r3, ip
    4820:	60bb      	str	r3, [r7, #8]
	while (n--) {
    4822:	230f      	movs	r3, #15
    4824:	18fb      	adds	r3, r7, r3
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	220f      	movs	r2, #15
    482a:	18ba      	adds	r2, r7, r2
    482c:	1e59      	subs	r1, r3, #1
    482e:	7011      	strb	r1, [r2, #0]
    4830:	2b00      	cmp	r3, #0
    4832:	d1e4      	bne.n	47fe <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    4834:	4b08      	ldr	r3, [pc, #32]	; (4858 <_delay_cycles+0x74>)
    4836:	68ba      	ldr	r2, [r7, #8]
    4838:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    483a:	4b07      	ldr	r3, [pc, #28]	; (4858 <_delay_cycles+0x74>)
    483c:	68ba      	ldr	r2, [r7, #8]
    483e:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4840:	46c0      	nop			; (mov r8, r8)
    4842:	4b05      	ldr	r3, [pc, #20]	; (4858 <_delay_cycles+0x74>)
    4844:	681a      	ldr	r2, [r3, #0]
    4846:	2380      	movs	r3, #128	; 0x80
    4848:	025b      	lsls	r3, r3, #9
    484a:	4013      	ands	r3, r2
    484c:	d0f9      	beq.n	4842 <_delay_cycles+0x5e>
		;
}
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	46bd      	mov	sp, r7
    4852:	b004      	add	sp, #16
    4854:	bd80      	pop	{r7, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	e000e010 	.word	0xe000e010
    485c:	00ffffff 	.word	0x00ffffff
    4860:	ff000001 	.word	0xff000001

00004864 <__NVIC_EnableIRQ>:
{
    4864:	b580      	push	{r7, lr}
    4866:	b082      	sub	sp, #8
    4868:	af00      	add	r7, sp, #0
    486a:	0002      	movs	r2, r0
    486c:	1dfb      	adds	r3, r7, #7
    486e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4870:	1dfb      	adds	r3, r7, #7
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	2b7f      	cmp	r3, #127	; 0x7f
    4876:	d809      	bhi.n	488c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4878:	4b06      	ldr	r3, [pc, #24]	; (4894 <__NVIC_EnableIRQ+0x30>)
    487a:	1dfa      	adds	r2, r7, #7
    487c:	7812      	ldrb	r2, [r2, #0]
    487e:	0011      	movs	r1, r2
    4880:	221f      	movs	r2, #31
    4882:	400a      	ands	r2, r1
    4884:	2101      	movs	r1, #1
    4886:	4091      	lsls	r1, r2
    4888:	000a      	movs	r2, r1
    488a:	601a      	str	r2, [r3, #0]
}
    488c:	46c0      	nop			; (mov r8, r8)
    488e:	46bd      	mov	sp, r7
    4890:	b002      	add	sp, #8
    4892:	bd80      	pop	{r7, pc}
    4894:	e000e100 	.word	0xe000e100

00004898 <__NVIC_DisableIRQ>:
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	0002      	movs	r2, r0
    48a0:	1dfb      	adds	r3, r7, #7
    48a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    48a4:	1dfb      	adds	r3, r7, #7
    48a6:	781b      	ldrb	r3, [r3, #0]
    48a8:	2b7f      	cmp	r3, #127	; 0x7f
    48aa:	d80e      	bhi.n	48ca <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ac:	4909      	ldr	r1, [pc, #36]	; (48d4 <__NVIC_DisableIRQ+0x3c>)
    48ae:	1dfb      	adds	r3, r7, #7
    48b0:	781b      	ldrb	r3, [r3, #0]
    48b2:	001a      	movs	r2, r3
    48b4:	231f      	movs	r3, #31
    48b6:	4013      	ands	r3, r2
    48b8:	2201      	movs	r2, #1
    48ba:	409a      	lsls	r2, r3
    48bc:	0013      	movs	r3, r2
    48be:	2280      	movs	r2, #128	; 0x80
    48c0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    48c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48c6:	f3bf 8f6f 	isb	sy
}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	46bd      	mov	sp, r7
    48ce:	b002      	add	sp, #8
    48d0:	bd80      	pop	{r7, pc}
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	e000e100 	.word	0xe000e100

000048d8 <__NVIC_ClearPendingIRQ>:
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	0002      	movs	r2, r0
    48e0:	1dfb      	adds	r3, r7, #7
    48e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    48e4:	1dfb      	adds	r3, r7, #7
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	2b7f      	cmp	r3, #127	; 0x7f
    48ea:	d80a      	bhi.n	4902 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ec:	4907      	ldr	r1, [pc, #28]	; (490c <__NVIC_ClearPendingIRQ+0x34>)
    48ee:	1dfb      	adds	r3, r7, #7
    48f0:	781b      	ldrb	r3, [r3, #0]
    48f2:	001a      	movs	r2, r3
    48f4:	231f      	movs	r3, #31
    48f6:	4013      	ands	r3, r2
    48f8:	2201      	movs	r2, #1
    48fa:	409a      	lsls	r2, r3
    48fc:	23c0      	movs	r3, #192	; 0xc0
    48fe:	005b      	lsls	r3, r3, #1
    4900:	50ca      	str	r2, [r1, r3]
}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	46bd      	mov	sp, r7
    4906:	b002      	add	sp, #8
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	e000e100 	.word	0xe000e100

00004910 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    4910:	b580      	push	{r7, lr}
    4912:	b082      	sub	sp, #8
    4914:	af00      	add	r7, sp, #0
    4916:	6078      	str	r0, [r7, #4]
    4918:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	691b      	ldr	r3, [r3, #16]
    4920:	683a      	ldr	r2, [r7, #0]
    4922:	4013      	ands	r3, r2
    4924:	d1fa      	bne.n	491c <hri_tc_wait_for_sync+0xc>
	};
}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	46bd      	mov	sp, r7
    492a:	b002      	add	sp, #8
    492c:	bd80      	pop	{r7, pc}

0000492e <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    492e:	b580      	push	{r7, lr}
    4930:	b082      	sub	sp, #8
    4932:	af00      	add	r7, sp, #0
    4934:	6078      	str	r0, [r7, #4]
    4936:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	691b      	ldr	r3, [r3, #16]
    493c:	683a      	ldr	r2, [r7, #0]
    493e:	4013      	ands	r3, r2
    4940:	1e5a      	subs	r2, r3, #1
    4942:	4193      	sbcs	r3, r2
    4944:	b2db      	uxtb	r3, r3
}
    4946:	0018      	movs	r0, r3
    4948:	46bd      	mov	sp, r7
    494a:	b002      	add	sp, #8
    494c:	bd80      	pop	{r7, pc}

0000494e <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    494e:	b580      	push	{r7, lr}
    4950:	b082      	sub	sp, #8
    4952:	af00      	add	r7, sp, #0
    4954:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4956:	687b      	ldr	r3, [r7, #4]
    4958:	7a9b      	ldrb	r3, [r3, #10]
    495a:	b2db      	uxtb	r3, r3
    495c:	001a      	movs	r2, r3
    495e:	2301      	movs	r3, #1
    4960:	4013      	ands	r3, r2
    4962:	1e5a      	subs	r2, r3, #1
    4964:	4193      	sbcs	r3, r2
    4966:	b2db      	uxtb	r3, r3
}
    4968:	0018      	movs	r0, r3
    496a:	46bd      	mov	sp, r7
    496c:	b002      	add	sp, #8
    496e:	bd80      	pop	{r7, pc}

00004970 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	2201      	movs	r2, #1
    497c:	729a      	strb	r2, [r3, #10]
}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	46bd      	mov	sp, r7
    4982:	b002      	add	sp, #8
    4984:	bd80      	pop	{r7, pc}

00004986 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    4986:	b580      	push	{r7, lr}
    4988:	b082      	sub	sp, #8
    498a:	af00      	add	r7, sp, #0
    498c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    498e:	687b      	ldr	r3, [r7, #4]
    4990:	2201      	movs	r2, #1
    4992:	725a      	strb	r2, [r3, #9]
}
    4994:	46c0      	nop			; (mov r8, r8)
    4996:	46bd      	mov	sp, r7
    4998:	b002      	add	sp, #8
    499a:	bd80      	pop	{r7, pc}

0000499c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	2202      	movs	r2, #2
    49aa:	4393      	bics	r3, r2
    49ac:	001a      	movs	r2, r3
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	2103      	movs	r1, #3
    49b6:	0018      	movs	r0, r3
    49b8:	4b02      	ldr	r3, [pc, #8]	; (49c4 <hri_tc_clear_CTRLA_ENABLE_bit+0x28>)
    49ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    49bc:	46c0      	nop			; (mov r8, r8)
    49be:	46bd      	mov	sp, r7
    49c0:	b002      	add	sp, #8
    49c2:	bd80      	pop	{r7, pc}
    49c4:	00004911 	.word	0x00004911

000049c8 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	b084      	sub	sp, #16
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
    49d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    49d2:	687b      	ldr	r3, [r7, #4]
    49d4:	2103      	movs	r1, #3
    49d6:	0018      	movs	r0, r3
    49d8:	4b06      	ldr	r3, [pc, #24]	; (49f4 <hri_tc_get_CTRLA_reg+0x2c>)
    49da:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	683a      	ldr	r2, [r7, #0]
    49e6:	4013      	ands	r3, r2
    49e8:	60fb      	str	r3, [r7, #12]
	return tmp;
    49ea:	68fb      	ldr	r3, [r7, #12]
}
    49ec:	0018      	movs	r0, r3
    49ee:	46bd      	mov	sp, r7
    49f0:	b004      	add	sp, #16
    49f2:	bd80      	pop	{r7, pc}
    49f4:	00004911 	.word	0x00004911

000049f8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b082      	sub	sp, #8
    49fc:	af00      	add	r7, sp, #0
    49fe:	6078      	str	r0, [r7, #4]
    4a00:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	683a      	ldr	r2, [r7, #0]
    4a06:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	2103      	movs	r1, #3
    4a0c:	0018      	movs	r0, r3
    4a0e:	4b03      	ldr	r3, [pc, #12]	; (4a1c <hri_tc_write_CTRLA_reg+0x24>)
    4a10:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	46bd      	mov	sp, r7
    4a16:	b002      	add	sp, #8
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	00004911 	.word	0x00004911

00004a20 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    4a20:	b580      	push	{r7, lr}
    4a22:	b082      	sub	sp, #8
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
    4a28:	000a      	movs	r2, r1
    4a2a:	1cbb      	adds	r3, r7, #2
    4a2c:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	1cba      	adds	r2, r7, #2
    4a32:	8812      	ldrh	r2, [r2, #0]
    4a34:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	46bd      	mov	sp, r7
    4a3a:	b002      	add	sp, #8
    4a3c:	bd80      	pop	{r7, pc}

00004a3e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    4a3e:	b580      	push	{r7, lr}
    4a40:	b082      	sub	sp, #8
    4a42:	af00      	add	r7, sp, #0
    4a44:	6078      	str	r0, [r7, #4]
    4a46:	000a      	movs	r2, r1
    4a48:	1cfb      	adds	r3, r7, #3
    4a4a:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	1cfa      	adds	r2, r7, #3
    4a50:	7812      	ldrb	r2, [r2, #0]
    4a52:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a54:	46c0      	nop			; (mov r8, r8)
    4a56:	46bd      	mov	sp, r7
    4a58:	b002      	add	sp, #8
    4a5a:	bd80      	pop	{r7, pc}

00004a5c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    4a5c:	b580      	push	{r7, lr}
    4a5e:	b082      	sub	sp, #8
    4a60:	af00      	add	r7, sp, #0
    4a62:	6078      	str	r0, [r7, #4]
    4a64:	000a      	movs	r2, r1
    4a66:	1cfb      	adds	r3, r7, #3
    4a68:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	1cfa      	adds	r2, r7, #3
    4a6e:	7812      	ldrb	r2, [r2, #0]
    4a70:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	46bd      	mov	sp, r7
    4a76:	b002      	add	sp, #8
    4a78:	bd80      	pop	{r7, pc}
	...

00004a7c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b082      	sub	sp, #8
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
    4a84:	000a      	movs	r2, r1
    4a86:	1cfb      	adds	r3, r7, #3
    4a88:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	1cfa      	adds	r2, r7, #3
    4a8e:	7812      	ldrb	r2, [r2, #0]
    4a90:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    4a92:	687b      	ldr	r3, [r7, #4]
    4a94:	2120      	movs	r1, #32
    4a96:	0018      	movs	r0, r3
    4a98:	4b02      	ldr	r3, [pc, #8]	; (4aa4 <hri_tccount8_write_PER_reg+0x28>)
    4a9a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4a9c:	46c0      	nop			; (mov r8, r8)
    4a9e:	46bd      	mov	sp, r7
    4aa0:	b002      	add	sp, #8
    4aa2:	bd80      	pop	{r7, pc}
    4aa4:	00004911 	.word	0x00004911

00004aa8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    4aa8:	b580      	push	{r7, lr}
    4aaa:	b082      	sub	sp, #8
    4aac:	af00      	add	r7, sp, #0
    4aae:	6078      	str	r0, [r7, #4]
    4ab0:	0008      	movs	r0, r1
    4ab2:	0011      	movs	r1, r2
    4ab4:	1cfb      	adds	r3, r7, #3
    4ab6:	1c02      	adds	r2, r0, #0
    4ab8:	701a      	strb	r2, [r3, #0]
    4aba:	1cbb      	adds	r3, r7, #2
    4abc:	1c0a      	adds	r2, r1, #0
    4abe:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    4ac0:	1cfb      	adds	r3, r7, #3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	687a      	ldr	r2, [r7, #4]
    4ac6:	18d3      	adds	r3, r2, r3
    4ac8:	1cba      	adds	r2, r7, #2
    4aca:	7812      	ldrb	r2, [r2, #0]
    4acc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	21c0      	movs	r1, #192	; 0xc0
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b02      	ldr	r3, [pc, #8]	; (4ae0 <hri_tccount8_write_CC_reg+0x38>)
    4ad6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4ad8:	46c0      	nop			; (mov r8, r8)
    4ada:	46bd      	mov	sp, r7
    4adc:	b002      	add	sp, #8
    4ade:	bd80      	pop	{r7, pc}
    4ae0:	00004911 	.word	0x00004911

00004ae4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
    4aec:	0008      	movs	r0, r1
    4aee:	0011      	movs	r1, r2
    4af0:	1cfb      	adds	r3, r7, #3
    4af2:	1c02      	adds	r2, r0, #0
    4af4:	701a      	strb	r2, [r3, #0]
    4af6:	003b      	movs	r3, r7
    4af8:	1c0a      	adds	r2, r1, #0
    4afa:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4afc:	1cfb      	adds	r3, r7, #3
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	687a      	ldr	r2, [r7, #4]
    4b02:	330c      	adds	r3, #12
    4b04:	005b      	lsls	r3, r3, #1
    4b06:	18d3      	adds	r3, r2, r3
    4b08:	3304      	adds	r3, #4
    4b0a:	003a      	movs	r2, r7
    4b0c:	8812      	ldrh	r2, [r2, #0]
    4b0e:	801a      	strh	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	21c0      	movs	r1, #192	; 0xc0
    4b14:	0018      	movs	r0, r3
    4b16:	4b03      	ldr	r3, [pc, #12]	; (4b24 <hri_tccount16_write_CC_reg+0x40>)
    4b18:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	46bd      	mov	sp, r7
    4b1e:	b002      	add	sp, #8
    4b20:	bd80      	pop	{r7, pc}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	00004911 	.word	0x00004911

00004b28 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	60f8      	str	r0, [r7, #12]
    4b30:	607a      	str	r2, [r7, #4]
    4b32:	230b      	movs	r3, #11
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	1c0a      	adds	r2, r1, #0
    4b38:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4b3a:	230b      	movs	r3, #11
    4b3c:	18fb      	adds	r3, r7, r3
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	68fa      	ldr	r2, [r7, #12]
    4b42:	3306      	adds	r3, #6
    4b44:	009b      	lsls	r3, r3, #2
    4b46:	18d3      	adds	r3, r2, r3
    4b48:	3304      	adds	r3, #4
    4b4a:	687a      	ldr	r2, [r7, #4]
    4b4c:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	21c0      	movs	r1, #192	; 0xc0
    4b52:	0018      	movs	r0, r3
    4b54:	4b02      	ldr	r3, [pc, #8]	; (4b60 <hri_tccount32_write_CC_reg+0x38>)
    4b56:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4b58:	46c0      	nop			; (mov r8, r8)
    4b5a:	46bd      	mov	sp, r7
    4b5c:	b004      	add	sp, #16
    4b5e:	bd80      	pop	{r7, pc}
    4b60:	00004911 	.word	0x00004911

00004b64 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    4b64:	b590      	push	{r4, r7, lr}
    4b66:	b085      	sub	sp, #20
    4b68:	af00      	add	r7, sp, #0
    4b6a:	6078      	str	r0, [r7, #4]
    4b6c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    4b6e:	230f      	movs	r3, #15
    4b70:	18fc      	adds	r4, r7, r3
    4b72:	683b      	ldr	r3, [r7, #0]
    4b74:	0018      	movs	r0, r3
    4b76:	4bab      	ldr	r3, [pc, #684]	; (4e24 <_timer_init+0x2c0>)
    4b78:	4798      	blx	r3
    4b7a:	0003      	movs	r3, r0
    4b7c:	7023      	strb	r3, [r4, #0]

	device->hw = hw;
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	683a      	ldr	r2, [r7, #0]
    4b82:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4b84:	4ba8      	ldr	r3, [pc, #672]	; (4e28 <_timer_init+0x2c4>)
    4b86:	228d      	movs	r2, #141	; 0x8d
    4b88:	0019      	movs	r1, r3
    4b8a:	2001      	movs	r0, #1
    4b8c:	4ba7      	ldr	r3, [pc, #668]	; (4e2c <_timer_init+0x2c8>)
    4b8e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    4b90:	683b      	ldr	r3, [r7, #0]
    4b92:	2101      	movs	r1, #1
    4b94:	0018      	movs	r0, r3
    4b96:	4ba6      	ldr	r3, [pc, #664]	; (4e30 <_timer_init+0x2cc>)
    4b98:	4798      	blx	r3
    4b9a:	0003      	movs	r3, r0
    4b9c:	001a      	movs	r2, r3
    4b9e:	2301      	movs	r3, #1
    4ba0:	4053      	eors	r3, r2
    4ba2:	b2db      	uxtb	r3, r3
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d014      	beq.n	4bd2 <_timer_init+0x6e>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4ba8:	683b      	ldr	r3, [r7, #0]
    4baa:	2102      	movs	r1, #2
    4bac:	0018      	movs	r0, r3
    4bae:	4ba1      	ldr	r3, [pc, #644]	; (4e34 <_timer_init+0x2d0>)
    4bb0:	4798      	blx	r3
    4bb2:	1e03      	subs	r3, r0, #0
    4bb4:	d008      	beq.n	4bc8 <_timer_init+0x64>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    4bb6:	683b      	ldr	r3, [r7, #0]
    4bb8:	0018      	movs	r0, r3
    4bba:	4b9f      	ldr	r3, [pc, #636]	; (4e38 <_timer_init+0x2d4>)
    4bbc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    4bbe:	683b      	ldr	r3, [r7, #0]
    4bc0:	2102      	movs	r1, #2
    4bc2:	0018      	movs	r0, r3
    4bc4:	4b9d      	ldr	r3, [pc, #628]	; (4e3c <_timer_init+0x2d8>)
    4bc6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    4bc8:	683b      	ldr	r3, [r7, #0]
    4bca:	2101      	movs	r1, #1
    4bcc:	0018      	movs	r0, r3
    4bce:	4b9c      	ldr	r3, [pc, #624]	; (4e40 <_timer_init+0x2dc>)
    4bd0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    4bd2:	683b      	ldr	r3, [r7, #0]
    4bd4:	2101      	movs	r1, #1
    4bd6:	0018      	movs	r0, r3
    4bd8:	4b98      	ldr	r3, [pc, #608]	; (4e3c <_timer_init+0x2d8>)
    4bda:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4bdc:	230f      	movs	r3, #15
    4bde:	18fb      	adds	r3, r7, r3
    4be0:	2200      	movs	r2, #0
    4be2:	569a      	ldrsb	r2, [r3, r2]
    4be4:	4997      	ldr	r1, [pc, #604]	; (4e44 <_timer_init+0x2e0>)
    4be6:	0013      	movs	r3, r2
    4be8:	009b      	lsls	r3, r3, #2
    4bea:	189b      	adds	r3, r3, r2
    4bec:	009b      	lsls	r3, r3, #2
    4bee:	18cb      	adds	r3, r1, r3
    4bf0:	3304      	adds	r3, #4
    4bf2:	681a      	ldr	r2, [r3, #0]
    4bf4:	683b      	ldr	r3, [r7, #0]
    4bf6:	0011      	movs	r1, r2
    4bf8:	0018      	movs	r0, r3
    4bfa:	4b91      	ldr	r3, [pc, #580]	; (4e40 <_timer_init+0x2dc>)
    4bfc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4bfe:	230f      	movs	r3, #15
    4c00:	18fb      	adds	r3, r7, r3
    4c02:	2200      	movs	r2, #0
    4c04:	569a      	ldrsb	r2, [r3, r2]
    4c06:	498f      	ldr	r1, [pc, #572]	; (4e44 <_timer_init+0x2e0>)
    4c08:	0013      	movs	r3, r2
    4c0a:	009b      	lsls	r3, r3, #2
    4c0c:	189b      	adds	r3, r3, r2
    4c0e:	009b      	lsls	r3, r3, #2
    4c10:	18cb      	adds	r3, r1, r3
    4c12:	330a      	adds	r3, #10
    4c14:	781a      	ldrb	r2, [r3, #0]
    4c16:	683b      	ldr	r3, [r7, #0]
    4c18:	0011      	movs	r1, r2
    4c1a:	0018      	movs	r0, r3
    4c1c:	4b8a      	ldr	r3, [pc, #552]	; (4e48 <_timer_init+0x2e4>)
    4c1e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4c20:	230f      	movs	r3, #15
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	2200      	movs	r2, #0
    4c26:	569a      	ldrsb	r2, [r3, r2]
    4c28:	4986      	ldr	r1, [pc, #536]	; (4e44 <_timer_init+0x2e0>)
    4c2a:	0013      	movs	r3, r2
    4c2c:	009b      	lsls	r3, r3, #2
    4c2e:	189b      	adds	r3, r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	18cb      	adds	r3, r1, r3
    4c34:	3308      	adds	r3, #8
    4c36:	881a      	ldrh	r2, [r3, #0]
    4c38:	683b      	ldr	r3, [r7, #0]
    4c3a:	0011      	movs	r1, r2
    4c3c:	0018      	movs	r0, r3
    4c3e:	4b83      	ldr	r3, [pc, #524]	; (4e4c <_timer_init+0x2e8>)
    4c40:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    4c42:	683b      	ldr	r3, [r7, #0]
    4c44:	2101      	movs	r1, #1
    4c46:	0018      	movs	r0, r3
    4c48:	4b81      	ldr	r3, [pc, #516]	; (4e50 <_timer_init+0x2ec>)
    4c4a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4c4c:	230f      	movs	r3, #15
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	2200      	movs	r2, #0
    4c52:	569a      	ldrsb	r2, [r3, r2]
    4c54:	497b      	ldr	r1, [pc, #492]	; (4e44 <_timer_init+0x2e0>)
    4c56:	0013      	movs	r3, r2
    4c58:	009b      	lsls	r3, r3, #2
    4c5a:	189b      	adds	r3, r3, r2
    4c5c:	009b      	lsls	r3, r3, #2
    4c5e:	18cb      	adds	r3, r1, r3
    4c60:	3304      	adds	r3, #4
    4c62:	681b      	ldr	r3, [r3, #0]
    4c64:	220c      	movs	r2, #12
    4c66:	4013      	ands	r3, r2
    4c68:	2b08      	cmp	r3, #8
    4c6a:	d122      	bne.n	4cb2 <_timer_init+0x14e>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4c6c:	230f      	movs	r3, #15
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	2200      	movs	r2, #0
    4c72:	569a      	ldrsb	r2, [r3, r2]
    4c74:	4973      	ldr	r1, [pc, #460]	; (4e44 <_timer_init+0x2e0>)
    4c76:	0013      	movs	r3, r2
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	189b      	adds	r3, r3, r2
    4c7c:	009b      	lsls	r3, r3, #2
    4c7e:	18cb      	adds	r3, r1, r3
    4c80:	330c      	adds	r3, #12
    4c82:	681a      	ldr	r2, [r3, #0]
    4c84:	683b      	ldr	r3, [r7, #0]
    4c86:	2100      	movs	r1, #0
    4c88:	0018      	movs	r0, r3
    4c8a:	4b72      	ldr	r3, [pc, #456]	; (4e54 <_timer_init+0x2f0>)
    4c8c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4c8e:	230f      	movs	r3, #15
    4c90:	18fb      	adds	r3, r7, r3
    4c92:	2200      	movs	r2, #0
    4c94:	569a      	ldrsb	r2, [r3, r2]
    4c96:	496b      	ldr	r1, [pc, #428]	; (4e44 <_timer_init+0x2e0>)
    4c98:	0013      	movs	r3, r2
    4c9a:	009b      	lsls	r3, r3, #2
    4c9c:	189b      	adds	r3, r3, r2
    4c9e:	009b      	lsls	r3, r3, #2
    4ca0:	18cb      	adds	r3, r1, r3
    4ca2:	3310      	adds	r3, #16
    4ca4:	681a      	ldr	r2, [r3, #0]
    4ca6:	683b      	ldr	r3, [r7, #0]
    4ca8:	2101      	movs	r1, #1
    4caa:	0018      	movs	r0, r3
    4cac:	4b69      	ldr	r3, [pc, #420]	; (4e54 <_timer_init+0x2f0>)
    4cae:	4798      	blx	r3
    4cb0:	e078      	b.n	4da4 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4cb2:	230f      	movs	r3, #15
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	2200      	movs	r2, #0
    4cb8:	569a      	ldrsb	r2, [r3, r2]
    4cba:	4962      	ldr	r1, [pc, #392]	; (4e44 <_timer_init+0x2e0>)
    4cbc:	0013      	movs	r3, r2
    4cbe:	009b      	lsls	r3, r3, #2
    4cc0:	189b      	adds	r3, r3, r2
    4cc2:	009b      	lsls	r3, r3, #2
    4cc4:	18cb      	adds	r3, r1, r3
    4cc6:	3304      	adds	r3, #4
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	220c      	movs	r2, #12
    4ccc:	4013      	ands	r3, r2
    4cce:	d124      	bne.n	4d1a <_timer_init+0x1b6>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4cd0:	230f      	movs	r3, #15
    4cd2:	18fb      	adds	r3, r7, r3
    4cd4:	2200      	movs	r2, #0
    4cd6:	569a      	ldrsb	r2, [r3, r2]
    4cd8:	495a      	ldr	r1, [pc, #360]	; (4e44 <_timer_init+0x2e0>)
    4cda:	0013      	movs	r3, r2
    4cdc:	009b      	lsls	r3, r3, #2
    4cde:	189b      	adds	r3, r3, r2
    4ce0:	009b      	lsls	r3, r3, #2
    4ce2:	18cb      	adds	r3, r1, r3
    4ce4:	330c      	adds	r3, #12
    4ce6:	681b      	ldr	r3, [r3, #0]
    4ce8:	b29a      	uxth	r2, r3
    4cea:	683b      	ldr	r3, [r7, #0]
    4cec:	2100      	movs	r1, #0
    4cee:	0018      	movs	r0, r3
    4cf0:	4b59      	ldr	r3, [pc, #356]	; (4e58 <_timer_init+0x2f4>)
    4cf2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4cf4:	230f      	movs	r3, #15
    4cf6:	18fb      	adds	r3, r7, r3
    4cf8:	2200      	movs	r2, #0
    4cfa:	569a      	ldrsb	r2, [r3, r2]
    4cfc:	4951      	ldr	r1, [pc, #324]	; (4e44 <_timer_init+0x2e0>)
    4cfe:	0013      	movs	r3, r2
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	189b      	adds	r3, r3, r2
    4d04:	009b      	lsls	r3, r3, #2
    4d06:	18cb      	adds	r3, r1, r3
    4d08:	3310      	adds	r3, #16
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	b29a      	uxth	r2, r3
    4d0e:	683b      	ldr	r3, [r7, #0]
    4d10:	2101      	movs	r1, #1
    4d12:	0018      	movs	r0, r3
    4d14:	4b50      	ldr	r3, [pc, #320]	; (4e58 <_timer_init+0x2f4>)
    4d16:	4798      	blx	r3
    4d18:	e044      	b.n	4da4 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4d1a:	230f      	movs	r3, #15
    4d1c:	18fb      	adds	r3, r7, r3
    4d1e:	2200      	movs	r2, #0
    4d20:	569a      	ldrsb	r2, [r3, r2]
    4d22:	4948      	ldr	r1, [pc, #288]	; (4e44 <_timer_init+0x2e0>)
    4d24:	0013      	movs	r3, r2
    4d26:	009b      	lsls	r3, r3, #2
    4d28:	189b      	adds	r3, r3, r2
    4d2a:	009b      	lsls	r3, r3, #2
    4d2c:	18cb      	adds	r3, r1, r3
    4d2e:	3304      	adds	r3, #4
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	220c      	movs	r2, #12
    4d34:	4013      	ands	r3, r2
    4d36:	2b04      	cmp	r3, #4
    4d38:	d134      	bne.n	4da4 <_timer_init+0x240>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4d3a:	230f      	movs	r3, #15
    4d3c:	18fb      	adds	r3, r7, r3
    4d3e:	2200      	movs	r2, #0
    4d40:	569a      	ldrsb	r2, [r3, r2]
    4d42:	4940      	ldr	r1, [pc, #256]	; (4e44 <_timer_init+0x2e0>)
    4d44:	0013      	movs	r3, r2
    4d46:	009b      	lsls	r3, r3, #2
    4d48:	189b      	adds	r3, r3, r2
    4d4a:	009b      	lsls	r3, r3, #2
    4d4c:	18cb      	adds	r3, r1, r3
    4d4e:	330c      	adds	r3, #12
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	b2da      	uxtb	r2, r3
    4d54:	683b      	ldr	r3, [r7, #0]
    4d56:	2100      	movs	r1, #0
    4d58:	0018      	movs	r0, r3
    4d5a:	4b40      	ldr	r3, [pc, #256]	; (4e5c <_timer_init+0x2f8>)
    4d5c:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    4d5e:	230f      	movs	r3, #15
    4d60:	18fb      	adds	r3, r7, r3
    4d62:	2200      	movs	r2, #0
    4d64:	569a      	ldrsb	r2, [r3, r2]
    4d66:	4937      	ldr	r1, [pc, #220]	; (4e44 <_timer_init+0x2e0>)
    4d68:	0013      	movs	r3, r2
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	189b      	adds	r3, r3, r2
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	18cb      	adds	r3, r1, r3
    4d72:	3310      	adds	r3, #16
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	b2da      	uxtb	r2, r3
    4d78:	683b      	ldr	r3, [r7, #0]
    4d7a:	2101      	movs	r1, #1
    4d7c:	0018      	movs	r0, r3
    4d7e:	4b37      	ldr	r3, [pc, #220]	; (4e5c <_timer_init+0x2f8>)
    4d80:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    4d82:	230f      	movs	r3, #15
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	2200      	movs	r2, #0
    4d88:	569a      	ldrsb	r2, [r3, r2]
    4d8a:	492e      	ldr	r1, [pc, #184]	; (4e44 <_timer_init+0x2e0>)
    4d8c:	0013      	movs	r3, r2
    4d8e:	009b      	lsls	r3, r3, #2
    4d90:	189b      	adds	r3, r3, r2
    4d92:	009b      	lsls	r3, r3, #2
    4d94:	18cb      	adds	r3, r1, r3
    4d96:	330b      	adds	r3, #11
    4d98:	781a      	ldrb	r2, [r3, #0]
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	0011      	movs	r1, r2
    4d9e:	0018      	movs	r0, r3
    4da0:	4b2f      	ldr	r3, [pc, #188]	; (4e60 <_timer_init+0x2fc>)
    4da2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    4da4:	683b      	ldr	r3, [r7, #0]
    4da6:	0018      	movs	r0, r3
    4da8:	4b2e      	ldr	r3, [pc, #184]	; (4e64 <_timer_init+0x300>)
    4daa:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    4dac:	687a      	ldr	r2, [r7, #4]
    4dae:	683b      	ldr	r3, [r7, #0]
    4db0:	0011      	movs	r1, r2
    4db2:	0018      	movs	r0, r3
    4db4:	4b2c      	ldr	r3, [pc, #176]	; (4e68 <_timer_init+0x304>)
    4db6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4db8:	230f      	movs	r3, #15
    4dba:	18fb      	adds	r3, r7, r3
    4dbc:	2200      	movs	r2, #0
    4dbe:	569a      	ldrsb	r2, [r3, r2]
    4dc0:	4920      	ldr	r1, [pc, #128]	; (4e44 <_timer_init+0x2e0>)
    4dc2:	0013      	movs	r3, r2
    4dc4:	009b      	lsls	r3, r3, #2
    4dc6:	189b      	adds	r3, r3, r2
    4dc8:	009b      	lsls	r3, r3, #2
    4dca:	18cb      	adds	r3, r1, r3
    4dcc:	3301      	adds	r3, #1
    4dce:	781b      	ldrb	r3, [r3, #0]
    4dd0:	b25b      	sxtb	r3, r3
    4dd2:	0018      	movs	r0, r3
    4dd4:	4b25      	ldr	r3, [pc, #148]	; (4e6c <_timer_init+0x308>)
    4dd6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4dd8:	230f      	movs	r3, #15
    4dda:	18fb      	adds	r3, r7, r3
    4ddc:	2200      	movs	r2, #0
    4dde:	569a      	ldrsb	r2, [r3, r2]
    4de0:	4918      	ldr	r1, [pc, #96]	; (4e44 <_timer_init+0x2e0>)
    4de2:	0013      	movs	r3, r2
    4de4:	009b      	lsls	r3, r3, #2
    4de6:	189b      	adds	r3, r3, r2
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	18cb      	adds	r3, r1, r3
    4dec:	3301      	adds	r3, #1
    4dee:	781b      	ldrb	r3, [r3, #0]
    4df0:	b25b      	sxtb	r3, r3
    4df2:	0018      	movs	r0, r3
    4df4:	4b1e      	ldr	r3, [pc, #120]	; (4e70 <_timer_init+0x30c>)
    4df6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    4df8:	230f      	movs	r3, #15
    4dfa:	18fb      	adds	r3, r7, r3
    4dfc:	2200      	movs	r2, #0
    4dfe:	569a      	ldrsb	r2, [r3, r2]
    4e00:	4910      	ldr	r1, [pc, #64]	; (4e44 <_timer_init+0x2e0>)
    4e02:	0013      	movs	r3, r2
    4e04:	009b      	lsls	r3, r3, #2
    4e06:	189b      	adds	r3, r3, r2
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	18cb      	adds	r3, r1, r3
    4e0c:	3301      	adds	r3, #1
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	b25b      	sxtb	r3, r3
    4e12:	0018      	movs	r0, r3
    4e14:	4b17      	ldr	r3, [pc, #92]	; (4e74 <_timer_init+0x310>)
    4e16:	4798      	blx	r3

	return ERR_NONE;
    4e18:	2300      	movs	r3, #0
}
    4e1a:	0018      	movs	r0, r3
    4e1c:	46bd      	mov	sp, r7
    4e1e:	b005      	add	sp, #20
    4e20:	bd90      	pop	{r4, r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	00004edd 	.word	0x00004edd
    4e28:	00006fa4 	.word	0x00006fa4
    4e2c:	00002077 	.word	0x00002077
    4e30:	0000492f 	.word	0x0000492f
    4e34:	000049c9 	.word	0x000049c9
    4e38:	0000499d 	.word	0x0000499d
    4e3c:	00004911 	.word	0x00004911
    4e40:	000049f9 	.word	0x000049f9
    4e44:	2000003c 	.word	0x2000003c
    4e48:	00004a5d 	.word	0x00004a5d
    4e4c:	00004a21 	.word	0x00004a21
    4e50:	00004a3f 	.word	0x00004a3f
    4e54:	00004b29 	.word	0x00004b29
    4e58:	00004ae5 	.word	0x00004ae5
    4e5c:	00004aa9 	.word	0x00004aa9
    4e60:	00004a7d 	.word	0x00004a7d
    4e64:	00004987 	.word	0x00004987
    4e68:	00004f69 	.word	0x00004f69
    4e6c:	00004899 	.word	0x00004899
    4e70:	000048d9 	.word	0x000048d9
    4e74:	00004865 	.word	0x00004865

00004e78 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	af00      	add	r7, sp, #0
	return NULL;
    4e7c:	2300      	movs	r3, #0
}
    4e7e:	0018      	movs	r0, r3
    4e80:	46bd      	mov	sp, r7
    4e82:	bd80      	pop	{r7, pc}

00004e84 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4e84:	b580      	push	{r7, lr}
    4e86:	b084      	sub	sp, #16
    4e88:	af00      	add	r7, sp, #0
    4e8a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	68db      	ldr	r3, [r3, #12]
    4e90:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4e92:	68fb      	ldr	r3, [r7, #12]
    4e94:	0018      	movs	r0, r3
    4e96:	4b08      	ldr	r3, [pc, #32]	; (4eb8 <tc_interrupt_handler+0x34>)
    4e98:	4798      	blx	r3
    4e9a:	1e03      	subs	r3, r0, #0
    4e9c:	d008      	beq.n	4eb0 <tc_interrupt_handler+0x2c>
		hri_tc_clear_interrupt_OVF_bit(hw);
    4e9e:	68fb      	ldr	r3, [r7, #12]
    4ea0:	0018      	movs	r0, r3
    4ea2:	4b06      	ldr	r3, [pc, #24]	; (4ebc <tc_interrupt_handler+0x38>)
    4ea4:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	681b      	ldr	r3, [r3, #0]
    4eaa:	687a      	ldr	r2, [r7, #4]
    4eac:	0010      	movs	r0, r2
    4eae:	4798      	blx	r3
	}
}
    4eb0:	46c0      	nop			; (mov r8, r8)
    4eb2:	46bd      	mov	sp, r7
    4eb4:	b004      	add	sp, #16
    4eb6:	bd80      	pop	{r7, pc}
    4eb8:	0000494f 	.word	0x0000494f
    4ebc:	00004971 	.word	0x00004971

00004ec0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    4ec4:	4b03      	ldr	r3, [pc, #12]	; (4ed4 <TC0_Handler+0x14>)
    4ec6:	681b      	ldr	r3, [r3, #0]
    4ec8:	0018      	movs	r0, r3
    4eca:	4b03      	ldr	r3, [pc, #12]	; (4ed8 <TC0_Handler+0x18>)
    4ecc:	4798      	blx	r3
}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	46bd      	mov	sp, r7
    4ed2:	bd80      	pop	{r7, pc}
    4ed4:	20000094 	.word	0x20000094
    4ed8:	00004e85 	.word	0x00004e85

00004edc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    4edc:	b590      	push	{r4, r7, lr}
    4ede:	b085      	sub	sp, #20
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    4ee4:	230e      	movs	r3, #14
    4ee6:	18fc      	adds	r4, r7, r3
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	0018      	movs	r0, r3
    4eec:	4b1a      	ldr	r3, [pc, #104]	; (4f58 <get_tc_index+0x7c>)
    4eee:	4798      	blx	r3
    4ef0:	0003      	movs	r3, r0
    4ef2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4ef4:	230f      	movs	r3, #15
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	2200      	movs	r2, #0
    4efa:	701a      	strb	r2, [r3, #0]
    4efc:	e019      	b.n	4f32 <get_tc_index+0x56>
		if (_tcs[i].number == index) {
    4efe:	230f      	movs	r3, #15
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	781a      	ldrb	r2, [r3, #0]
    4f04:	4915      	ldr	r1, [pc, #84]	; (4f5c <get_tc_index+0x80>)
    4f06:	0013      	movs	r3, r2
    4f08:	009b      	lsls	r3, r3, #2
    4f0a:	189b      	adds	r3, r3, r2
    4f0c:	009b      	lsls	r3, r3, #2
    4f0e:	5c5b      	ldrb	r3, [r3, r1]
    4f10:	220e      	movs	r2, #14
    4f12:	18ba      	adds	r2, r7, r2
    4f14:	7812      	ldrb	r2, [r2, #0]
    4f16:	429a      	cmp	r2, r3
    4f18:	d104      	bne.n	4f24 <get_tc_index+0x48>
			return i;
    4f1a:	230f      	movs	r3, #15
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	781b      	ldrb	r3, [r3, #0]
    4f20:	b25b      	sxtb	r3, r3
    4f22:	e014      	b.n	4f4e <get_tc_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4f24:	230f      	movs	r3, #15
    4f26:	18fb      	adds	r3, r7, r3
    4f28:	781a      	ldrb	r2, [r3, #0]
    4f2a:	230f      	movs	r3, #15
    4f2c:	18fb      	adds	r3, r7, r3
    4f2e:	3201      	adds	r2, #1
    4f30:	701a      	strb	r2, [r3, #0]
    4f32:	230f      	movs	r3, #15
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d0e0      	beq.n	4efe <get_tc_index+0x22>
		}
	}

	ASSERT(false);
    4f3c:	239e      	movs	r3, #158	; 0x9e
    4f3e:	005a      	lsls	r2, r3, #1
    4f40:	4b07      	ldr	r3, [pc, #28]	; (4f60 <get_tc_index+0x84>)
    4f42:	0019      	movs	r1, r3
    4f44:	2000      	movs	r0, #0
    4f46:	4b07      	ldr	r3, [pc, #28]	; (4f64 <get_tc_index+0x88>)
    4f48:	4798      	blx	r3
	return -1;
    4f4a:	2301      	movs	r3, #1
    4f4c:	425b      	negs	r3, r3
}
    4f4e:	0018      	movs	r0, r3
    4f50:	46bd      	mov	sp, r7
    4f52:	b005      	add	sp, #20
    4f54:	bd90      	pop	{r4, r7, pc}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	00004f91 	.word	0x00004f91
    4f5c:	2000003c 	.word	0x2000003c
    4f60:	00006fa4 	.word	0x00006fa4
    4f64:	00002077 	.word	0x00002077

00004f68 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	b082      	sub	sp, #8
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	6078      	str	r0, [r7, #4]
    4f70:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	4a04      	ldr	r2, [pc, #16]	; (4f88 <_tc_init_irq_param+0x20>)
    4f76:	4293      	cmp	r3, r2
    4f78:	d102      	bne.n	4f80 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    4f7a:	4b04      	ldr	r3, [pc, #16]	; (4f8c <_tc_init_irq_param+0x24>)
    4f7c:	683a      	ldr	r2, [r7, #0]
    4f7e:	601a      	str	r2, [r3, #0]
	}
}
    4f80:	46c0      	nop			; (mov r8, r8)
    4f82:	46bd      	mov	sp, r7
    4f84:	b002      	add	sp, #8
    4f86:	bd80      	pop	{r7, pc}
    4f88:	42002000 	.word	0x42002000
    4f8c:	20000094 	.word	0x20000094

00004f90 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b082      	sub	sp, #8
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
	if ((uint32_t)TC4 == (uint32_t)hw) {
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	4a07      	ldr	r2, [pc, #28]	; (4fb8 <_get_hardware_offset+0x28>)
    4f9c:	4293      	cmp	r3, r2
    4f9e:	d101      	bne.n	4fa4 <_get_hardware_offset+0x14>
		return 4;
    4fa0:	2304      	movs	r3, #4
    4fa2:	e005      	b.n	4fb0 <_get_hardware_offset+0x20>
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	4a05      	ldr	r2, [pc, #20]	; (4fbc <_get_hardware_offset+0x2c>)
    4fa8:	4694      	mov	ip, r2
    4faa:	4463      	add	r3, ip
    4fac:	0a9b      	lsrs	r3, r3, #10
    4fae:	b2db      	uxtb	r3, r3
}
    4fb0:	0018      	movs	r0, r3
    4fb2:	46bd      	mov	sp, r7
    4fb4:	b002      	add	sp, #8
    4fb6:	bd80      	pop	{r7, pc}
    4fb8:	43000800 	.word	0x43000800
    4fbc:	bdffe000 	.word	0xbdffe000

00004fc0 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	b082      	sub	sp, #8
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
    4fc8:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	689b      	ldr	r3, [r3, #8]
    4fd0:	683a      	ldr	r2, [r7, #0]
    4fd2:	4013      	ands	r3, r2
    4fd4:	d1fa      	bne.n	4fcc <hri_wdt_wait_for_sync+0xc>
	};
}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	46bd      	mov	sp, r7
    4fda:	b002      	add	sp, #8
    4fdc:	bd80      	pop	{r7, pc}
	...

00004fe0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	b084      	sub	sp, #16
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	210e      	movs	r1, #14
    4fec:	0018      	movs	r0, r3
    4fee:	4b0d      	ldr	r3, [pc, #52]	; (5024 <hri_wdt_get_CTRLA_ENABLE_bit+0x44>)
    4ff0:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4ff2:	230f      	movs	r3, #15
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	687a      	ldr	r2, [r7, #4]
    4ff8:	7812      	ldrb	r2, [r2, #0]
    4ffa:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    4ffc:	230f      	movs	r3, #15
    4ffe:	18fb      	adds	r3, r7, r3
    5000:	781b      	ldrb	r3, [r3, #0]
    5002:	085b      	lsrs	r3, r3, #1
    5004:	b2da      	uxtb	r2, r3
    5006:	230f      	movs	r3, #15
    5008:	18fb      	adds	r3, r7, r3
    500a:	2101      	movs	r1, #1
    500c:	400a      	ands	r2, r1
    500e:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    5010:	230f      	movs	r3, #15
    5012:	18fb      	adds	r3, r7, r3
    5014:	781b      	ldrb	r3, [r3, #0]
    5016:	1e5a      	subs	r2, r3, #1
    5018:	4193      	sbcs	r3, r2
    501a:	b2db      	uxtb	r3, r3
}
    501c:	0018      	movs	r0, r3
    501e:	46bd      	mov	sp, r7
    5020:	b004      	add	sp, #16
    5022:	bd80      	pop	{r7, pc}
    5024:	00004fc1 	.word	0x00004fc1

00005028 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    5028:	b580      	push	{r7, lr}
    502a:	b082      	sub	sp, #8
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	781b      	ldrb	r3, [r3, #0]
    5034:	b2db      	uxtb	r3, r3
    5036:	2204      	movs	r2, #4
    5038:	4393      	bics	r3, r2
    503a:	b2da      	uxtb	r2, r3
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	210e      	movs	r1, #14
    5044:	0018      	movs	r0, r3
    5046:	4b03      	ldr	r3, [pc, #12]	; (5054 <hri_wdt_clear_CTRLA_WEN_bit+0x2c>)
    5048:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    504a:	46c0      	nop			; (mov r8, r8)
    504c:	46bd      	mov	sp, r7
    504e:	b002      	add	sp, #8
    5050:	bd80      	pop	{r7, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	00004fc1 	.word	0x00004fc1

00005058 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    5058:	b580      	push	{r7, lr}
    505a:	b084      	sub	sp, #16
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	210e      	movs	r1, #14
    5064:	0018      	movs	r0, r3
    5066:	4b0c      	ldr	r3, [pc, #48]	; (5098 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x40>)
    5068:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    506a:	230f      	movs	r3, #15
    506c:	18fb      	adds	r3, r7, r3
    506e:	687a      	ldr	r2, [r7, #4]
    5070:	7812      	ldrb	r2, [r2, #0]
    5072:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    5074:	230f      	movs	r3, #15
    5076:	18fb      	adds	r3, r7, r3
    5078:	220f      	movs	r2, #15
    507a:	18ba      	adds	r2, r7, r2
    507c:	7812      	ldrb	r2, [r2, #0]
    507e:	09d2      	lsrs	r2, r2, #7
    5080:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    5082:	230f      	movs	r3, #15
    5084:	18fb      	adds	r3, r7, r3
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	1e5a      	subs	r2, r3, #1
    508a:	4193      	sbcs	r3, r2
    508c:	b2db      	uxtb	r3, r3
}
    508e:	0018      	movs	r0, r3
    5090:	46bd      	mov	sp, r7
    5092:	b004      	add	sp, #16
    5094:	bd80      	pop	{r7, pc}
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	00004fc1 	.word	0x00004fc1

0000509c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    509c:	b580      	push	{r7, lr}
    509e:	b084      	sub	sp, #16
    50a0:	af00      	add	r7, sp, #0
    50a2:	6078      	str	r0, [r7, #4]
    50a4:	000a      	movs	r2, r1
    50a6:	1cfb      	adds	r3, r7, #3
    50a8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    50aa:	230f      	movs	r3, #15
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	687a      	ldr	r2, [r7, #4]
    50b0:	7852      	ldrb	r2, [r2, #1]
    50b2:	701a      	strb	r2, [r3, #0]
	tmp &= ~WDT_CONFIG_PER_Msk;
    50b4:	230f      	movs	r3, #15
    50b6:	18fb      	adds	r3, r7, r3
    50b8:	220f      	movs	r2, #15
    50ba:	18ba      	adds	r2, r7, r2
    50bc:	7812      	ldrb	r2, [r2, #0]
    50be:	210f      	movs	r1, #15
    50c0:	438a      	bics	r2, r1
    50c2:	701a      	strb	r2, [r3, #0]
	tmp |= WDT_CONFIG_PER(data);
    50c4:	1cfb      	adds	r3, r7, #3
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	220f      	movs	r2, #15
    50ca:	4013      	ands	r3, r2
    50cc:	b2d9      	uxtb	r1, r3
    50ce:	230f      	movs	r3, #15
    50d0:	18fb      	adds	r3, r7, r3
    50d2:	220f      	movs	r2, #15
    50d4:	18ba      	adds	r2, r7, r2
    50d6:	7812      	ldrb	r2, [r2, #0]
    50d8:	430a      	orrs	r2, r1
    50da:	701a      	strb	r2, [r3, #0]
	((Wdt *)hw)->CONFIG.reg = tmp;
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	220f      	movs	r2, #15
    50e0:	18ba      	adds	r2, r7, r2
    50e2:	7812      	ldrb	r2, [r2, #0]
    50e4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	46bd      	mov	sp, r7
    50ea:	b004      	add	sp, #16
    50ec:	bd80      	pop	{r7, pc}

000050ee <hri_wdt_read_CONFIG_PER_bf>:
	((Wdt *)hw)->CONFIG.reg ^= WDT_CONFIG_PER(mask);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline hri_wdt_config_reg_t hri_wdt_read_CONFIG_PER_bf(const void *const hw)
{
    50ee:	b580      	push	{r7, lr}
    50f0:	b084      	sub	sp, #16
    50f2:	af00      	add	r7, sp, #0
    50f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Wdt *)hw)->CONFIG.reg;
    50f6:	230f      	movs	r3, #15
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	687a      	ldr	r2, [r7, #4]
    50fc:	7852      	ldrb	r2, [r2, #1]
    50fe:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CONFIG_PER_Msk) >> WDT_CONFIG_PER_Pos;
    5100:	230f      	movs	r3, #15
    5102:	18fb      	adds	r3, r7, r3
    5104:	220f      	movs	r2, #15
    5106:	18ba      	adds	r2, r7, r2
    5108:	7812      	ldrb	r2, [r2, #0]
    510a:	210f      	movs	r1, #15
    510c:	400a      	ands	r2, r1
    510e:	701a      	strb	r2, [r3, #0]
	return tmp;
    5110:	230f      	movs	r3, #15
    5112:	18fb      	adds	r3, r7, r3
    5114:	781b      	ldrb	r3, [r3, #0]
}
    5116:	0018      	movs	r0, r3
    5118:	46bd      	mov	sp, r7
    511a:	b004      	add	sp, #16
    511c:	bd80      	pop	{r7, pc}
	...

00005120 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    5120:	b580      	push	{r7, lr}
    5122:	b082      	sub	sp, #8
    5124:	af00      	add	r7, sp, #0
    5126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5128:	687b      	ldr	r3, [r7, #4]
    512a:	2b00      	cmp	r3, #0
    512c:	d005      	beq.n	513a <_wdt_init+0x1a>
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	2b00      	cmp	r3, #0
    5134:	d001      	beq.n	513a <_wdt_init+0x1a>
    5136:	2301      	movs	r3, #1
    5138:	e000      	b.n	513c <_wdt_init+0x1c>
    513a:	2300      	movs	r3, #0
    513c:	1c1a      	adds	r2, r3, #0
    513e:	2301      	movs	r3, #1
    5140:	4013      	ands	r3, r2
    5142:	b2db      	uxtb	r3, r3
    5144:	4912      	ldr	r1, [pc, #72]	; (5190 <_wdt_init+0x70>)
    5146:	2250      	movs	r2, #80	; 0x50
    5148:	0018      	movs	r0, r3
    514a:	4b12      	ldr	r3, [pc, #72]	; (5194 <_wdt_init+0x74>)
    514c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	0018      	movs	r0, r3
    5154:	4b10      	ldr	r3, [pc, #64]	; (5198 <_wdt_init+0x78>)
    5156:	4798      	blx	r3
    5158:	1e03      	subs	r3, r0, #0
    515a:	d106      	bne.n	516a <_wdt_init+0x4a>
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	0018      	movs	r0, r3
    5162:	4b0e      	ldr	r3, [pc, #56]	; (519c <_wdt_init+0x7c>)
    5164:	4798      	blx	r3
    5166:	1e03      	subs	r3, r0, #0
    5168:	d002      	beq.n	5170 <_wdt_init+0x50>
		return ERR_DENIED;
    516a:	2311      	movs	r3, #17
    516c:	425b      	negs	r3, r3
    516e:	e00b      	b.n	5188 <_wdt_init+0x68>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	681b      	ldr	r3, [r3, #0]
    5174:	0018      	movs	r0, r3
    5176:	4b0a      	ldr	r3, [pc, #40]	; (51a0 <_wdt_init+0x80>)
    5178:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	2100      	movs	r1, #0
    5180:	0018      	movs	r0, r3
    5182:	4b08      	ldr	r3, [pc, #32]	; (51a4 <_wdt_init+0x84>)
    5184:	4798      	blx	r3
	}

	return ERR_NONE;
    5186:	2300      	movs	r3, #0
}
    5188:	0018      	movs	r0, r3
    518a:	46bd      	mov	sp, r7
    518c:	b002      	add	sp, #8
    518e:	bd80      	pop	{r7, pc}
    5190:	00006fb8 	.word	0x00006fb8
    5194:	00002077 	.word	0x00002077
    5198:	00005059 	.word	0x00005059
    519c:	00004fe1 	.word	0x00004fe1
    51a0:	00005029 	.word	0x00005029
    51a4:	0000509d 	.word	0x0000509d

000051a8 <_wdt_get_timeout_period>:

/**
 * \brief get timeout period for WDT instance
 */
uint32_t _wdt_get_timeout_period(const struct wdt_dev *const dev, const uint32_t clk_rate)
{
    51a8:	b590      	push	{r4, r7, lr}
    51aa:	b087      	sub	sp, #28
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	uint32_t period_cycles;
	uint32_t timeout_period;
	uint8_t  timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	2b00      	cmp	r3, #0
    51b6:	d005      	beq.n	51c4 <_wdt_get_timeout_period+0x1c>
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	681b      	ldr	r3, [r3, #0]
    51bc:	2b00      	cmp	r3, #0
    51be:	d001      	beq.n	51c4 <_wdt_get_timeout_period+0x1c>
    51c0:	2301      	movs	r3, #1
    51c2:	e000      	b.n	51c6 <_wdt_get_timeout_period+0x1e>
    51c4:	2300      	movs	r3, #0
    51c6:	1c1a      	adds	r2, r3, #0
    51c8:	2301      	movs	r3, #1
    51ca:	4013      	ands	r3, r2
    51cc:	b2db      	uxtb	r3, r3
    51ce:	492a      	ldr	r1, [pc, #168]	; (5278 <_wdt_get_timeout_period+0xd0>)
    51d0:	22c1      	movs	r2, #193	; 0xc1
    51d2:	0018      	movs	r0, r3
    51d4:	4b29      	ldr	r3, [pc, #164]	; (527c <_wdt_get_timeout_period+0xd4>)
    51d6:	4798      	blx	r3

	/* get the register value */
	timeout_period_reg = hri_wdt_read_CONFIG_PER_bf(dev->hw);
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	681b      	ldr	r3, [r3, #0]
    51dc:	2213      	movs	r2, #19
    51de:	18bc      	adds	r4, r7, r2
    51e0:	0018      	movs	r0, r3
    51e2:	4b27      	ldr	r3, [pc, #156]	; (5280 <_wdt_get_timeout_period+0xd8>)
    51e4:	4798      	blx	r3
    51e6:	0003      	movs	r3, r0
    51e8:	7023      	strb	r3, [r4, #0]
	/* convert register value to period cycles(clock cycles) */
	switch (timeout_period_reg) {
    51ea:	2313      	movs	r3, #19
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2b0b      	cmp	r3, #11
    51f2:	d82f      	bhi.n	5254 <_wdt_get_timeout_period+0xac>
    51f4:	009a      	lsls	r2, r3, #2
    51f6:	4b23      	ldr	r3, [pc, #140]	; (5284 <_wdt_get_timeout_period+0xdc>)
    51f8:	18d3      	adds	r3, r2, r3
    51fa:	681b      	ldr	r3, [r3, #0]
    51fc:	469f      	mov	pc, r3
	case WDT_PERIOD_8CYCLE:
		period_cycles = WDT_CLK_8CYCLE;
    51fe:	2308      	movs	r3, #8
    5200:	617b      	str	r3, [r7, #20]
		break;
    5202:	e02a      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_16CYCLE:
		period_cycles = WDT_CLK_16CYCLE;
    5204:	2310      	movs	r3, #16
    5206:	617b      	str	r3, [r7, #20]
		break;
    5208:	e027      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_32CYCLE:
		period_cycles = WDT_CLK_32CYCLE;
    520a:	2320      	movs	r3, #32
    520c:	617b      	str	r3, [r7, #20]
		break;
    520e:	e024      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_64CYCLE:
		period_cycles = WDT_CLK_64CYCLE;
    5210:	2340      	movs	r3, #64	; 0x40
    5212:	617b      	str	r3, [r7, #20]
		break;
    5214:	e021      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_128CYCLE:
		period_cycles = WDT_CLK_128CYCLE;
    5216:	2380      	movs	r3, #128	; 0x80
    5218:	617b      	str	r3, [r7, #20]
		break;
    521a:	e01e      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_256CYCLE:
		period_cycles = WDT_CLK_256CYCLE;
    521c:	2380      	movs	r3, #128	; 0x80
    521e:	005b      	lsls	r3, r3, #1
    5220:	617b      	str	r3, [r7, #20]
		break;
    5222:	e01a      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_512CYCLE:
		period_cycles = WDT_CLK_512CYCLE;
    5224:	2380      	movs	r3, #128	; 0x80
    5226:	009b      	lsls	r3, r3, #2
    5228:	617b      	str	r3, [r7, #20]
		break;
    522a:	e016      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_1024CYCLE:
		period_cycles = WDT_CLK_1024CYCLE;
    522c:	2380      	movs	r3, #128	; 0x80
    522e:	00db      	lsls	r3, r3, #3
    5230:	617b      	str	r3, [r7, #20]
		break;
    5232:	e012      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_2048CYCLE:
		period_cycles = WDT_CLK_2048CYCLE;
    5234:	2380      	movs	r3, #128	; 0x80
    5236:	011b      	lsls	r3, r3, #4
    5238:	617b      	str	r3, [r7, #20]
		break;
    523a:	e00e      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_4096CYCLE:
		period_cycles = WDT_CLK_4096CYCLE;
    523c:	2380      	movs	r3, #128	; 0x80
    523e:	015b      	lsls	r3, r3, #5
    5240:	617b      	str	r3, [r7, #20]
		break;
    5242:	e00a      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_8192CYCLE:
		period_cycles = WDT_CLK_8192CYCLE;
    5244:	2380      	movs	r3, #128	; 0x80
    5246:	019b      	lsls	r3, r3, #6
    5248:	617b      	str	r3, [r7, #20]
		break;
    524a:	e006      	b.n	525a <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_16384CYCLE:
		period_cycles = WDT_CLK_16384CYCLE;
    524c:	2380      	movs	r3, #128	; 0x80
    524e:	01db      	lsls	r3, r3, #7
    5250:	617b      	str	r3, [r7, #20]
		break;
    5252:	e002      	b.n	525a <_wdt_get_timeout_period+0xb2>
	default:
		return (uint32_t)-1;
    5254:	2301      	movs	r3, #1
    5256:	425b      	negs	r3, r3
    5258:	e00a      	b.n	5270 <_wdt_get_timeout_period+0xc8>
	}

	/* convert period cycles(clock cycles) to timeout period(ms) */
	timeout_period = period_cycles * 1000 / clk_rate;
    525a:	697b      	ldr	r3, [r7, #20]
    525c:	22fa      	movs	r2, #250	; 0xfa
    525e:	0092      	lsls	r2, r2, #2
    5260:	435a      	muls	r2, r3
    5262:	4b09      	ldr	r3, [pc, #36]	; (5288 <_wdt_get_timeout_period+0xe0>)
    5264:	6839      	ldr	r1, [r7, #0]
    5266:	0010      	movs	r0, r2
    5268:	4798      	blx	r3
    526a:	0003      	movs	r3, r0
    526c:	60fb      	str	r3, [r7, #12]

	return timeout_period;
    526e:	68fb      	ldr	r3, [r7, #12]
}
    5270:	0018      	movs	r0, r3
    5272:	46bd      	mov	sp, r7
    5274:	b007      	add	sp, #28
    5276:	bd90      	pop	{r4, r7, pc}
    5278:	00006fb8 	.word	0x00006fb8
    527c:	00002077 	.word	0x00002077
    5280:	000050ef 	.word	0x000050ef
    5284:	00006fd0 	.word	0x00006fd0
    5288:	00005e99 	.word	0x00005e99

0000528c <main>:
	BLOCK_1_ERROR,
	BLOCK_2_ERROR,
};

int main(void)
{
    528c:	b580      	push	{r7, lr}
    528e:	af00      	add	r7, sp, #0
	
	atmel_start_init();
    5290:	4b02      	ldr	r3, [pc, #8]	; (529c <main+0x10>)
    5292:	4798      	blx	r3
	
	temperature_sensors_init();
    5294:	4b02      	ldr	r3, [pc, #8]	; (52a0 <main+0x14>)
    5296:	4798      	blx	r3

	while (1) {
    5298:	e7fe      	b.n	5298 <main+0xc>
    529a:	46c0      	nop			; (mov r8, r8)
    529c:	00000115 	.word	0x00000115
    52a0:	00005e61 	.word	0x00005e61

000052a4 <list_get_head>:
{
    52a4:	b580      	push	{r7, lr}
    52a6:	b082      	sub	sp, #8
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	681b      	ldr	r3, [r3, #0]
}
    52b0:	0018      	movs	r0, r3
    52b2:	46bd      	mov	sp, r7
    52b4:	b002      	add	sp, #8
    52b6:	bd80      	pop	{r7, pc}

000052b8 <list_get_next_element>:
{
    52b8:	b580      	push	{r7, lr}
    52ba:	b082      	sub	sp, #8
    52bc:	af00      	add	r7, sp, #0
    52be:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d002      	beq.n	52cc <list_get_next_element+0x14>
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	e000      	b.n	52ce <list_get_next_element+0x16>
    52cc:	2300      	movs	r3, #0
}
    52ce:	0018      	movs	r0, r3
    52d0:	46bd      	mov	sp, r7
    52d2:	b002      	add	sp, #8
    52d4:	bd80      	pop	{r7, pc}
	...

000052d8 <sleepmgr_init>:

/**
 * \brief Initialize sleep manager
 */
void sleepmgr_init(void)
{
    52d8:	b580      	push	{r7, lr}
    52da:	af00      	add	r7, sp, #0
	event_subscribe(&sleepmgr_event, EVENT_PREPARE_TO_SLEEP_ID, sleepmgr_event_callback);
    52dc:	4a0a      	ldr	r2, [pc, #40]	; (5308 <sleepmgr_init+0x30>)
    52de:	4b0b      	ldr	r3, [pc, #44]	; (530c <sleepmgr_init+0x34>)
    52e0:	2101      	movs	r1, #1
    52e2:	0018      	movs	r0, r3
    52e4:	4b0a      	ldr	r3, [pc, #40]	; (5310 <sleepmgr_init+0x38>)
    52e6:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_IS_READY_TO_SLEEP_ID, sleepmgr_event_callback);
    52e8:	4a07      	ldr	r2, [pc, #28]	; (5308 <sleepmgr_init+0x30>)
    52ea:	4b08      	ldr	r3, [pc, #32]	; (530c <sleepmgr_init+0x34>)
    52ec:	2100      	movs	r1, #0
    52ee:	0018      	movs	r0, r3
    52f0:	4b07      	ldr	r3, [pc, #28]	; (5310 <sleepmgr_init+0x38>)
    52f2:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_WOKEN_UP_ID, sleepmgr_event_callback);
    52f4:	4a04      	ldr	r2, [pc, #16]	; (5308 <sleepmgr_init+0x30>)
    52f6:	4b05      	ldr	r3, [pc, #20]	; (530c <sleepmgr_init+0x34>)
    52f8:	2102      	movs	r1, #2
    52fa:	0018      	movs	r0, r3
    52fc:	4b04      	ldr	r3, [pc, #16]	; (5310 <sleepmgr_init+0x38>)
    52fe:	4798      	blx	r3
}
    5300:	46c0      	nop			; (mov r8, r8)
    5302:	46bd      	mov	sp, r7
    5304:	bd80      	pop	{r7, pc}
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	00005355 	.word	0x00005355
    530c:	20000098 	.word	0x20000098
    5310:	000020a5 	.word	0x000020a5

00005314 <sleepmgr_register_ready_to_sleep_callback>:

/**
 * \brief Register sleep callback
 */
void sleepmgr_register_ready_to_sleep_callback(struct sleepmgr_ready_to_sleep_cb *const cb)
{
    5314:	b580      	push	{r7, lr}
    5316:	b082      	sub	sp, #8
    5318:	af00      	add	r7, sp, #0
    531a:	6078      	str	r0, [r7, #4]
	ASSERT(cb);
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	1e5a      	subs	r2, r3, #1
    5320:	4193      	sbcs	r3, r2
    5322:	b2db      	uxtb	r3, r3
    5324:	4907      	ldr	r1, [pc, #28]	; (5344 <sleepmgr_register_ready_to_sleep_callback+0x30>)
    5326:	2240      	movs	r2, #64	; 0x40
    5328:	0018      	movs	r0, r3
    532a:	4b07      	ldr	r3, [pc, #28]	; (5348 <sleepmgr_register_ready_to_sleep_callback+0x34>)
    532c:	4798      	blx	r3

	list_insert_as_head(&ready_to_sleep_cbs, cb);
    532e:	687a      	ldr	r2, [r7, #4]
    5330:	4b06      	ldr	r3, [pc, #24]	; (534c <sleepmgr_register_ready_to_sleep_callback+0x38>)
    5332:	0011      	movs	r1, r2
    5334:	0018      	movs	r0, r3
    5336:	4b06      	ldr	r3, [pc, #24]	; (5350 <sleepmgr_register_ready_to_sleep_callback+0x3c>)
    5338:	4798      	blx	r3
}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	46bd      	mov	sp, r7
    533e:	b002      	add	sp, #8
    5340:	bd80      	pop	{r7, pc}
    5342:	46c0      	nop			; (mov r8, r8)
    5344:	00007000 	.word	0x00007000
    5348:	00002077 	.word	0x00002077
    534c:	200000a4 	.word	0x200000a4
    5350:	000021fd 	.word	0x000021fd

00005354 <sleepmgr_event_callback>:
 *
 * \param[in] id The event ID to process
 * \param[in] data Not used
 */
static void sleepmgr_event_callback(event_id_t id, event_data_t data)
{
    5354:	b580      	push	{r7, lr}
    5356:	b088      	sub	sp, #32
    5358:	af00      	add	r7, sp, #0
    535a:	0002      	movs	r2, r0
    535c:	6039      	str	r1, [r7, #0]
    535e:	1dfb      	adds	r3, r7, #7
    5360:	701a      	strb	r2, [r3, #0]
	if (EVENT_IS_READY_TO_SLEEP_ID == id) {
    5362:	1dfb      	adds	r3, r7, #7
    5364:	781b      	ldrb	r3, [r3, #0]
    5366:	2b00      	cmp	r3, #0
    5368:	d12d      	bne.n	53c6 <sleepmgr_event_callback+0x72>
		struct sleepmgr_ready_to_sleep_cb *cur;
		struct sleepmgr_ready_to_sleep *   ret_val = (struct sleepmgr_ready_to_sleep *)data;
    536a:	683b      	ldr	r3, [r7, #0]
    536c:	613b      	str	r3, [r7, #16]
		struct sleepmgr_ready_to_sleep     ready;

		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    536e:	4b32      	ldr	r3, [pc, #200]	; (5438 <sleepmgr_event_callback+0xe4>)
    5370:	0018      	movs	r0, r3
    5372:	4b32      	ldr	r3, [pc, #200]	; (543c <sleepmgr_event_callback+0xe8>)
    5374:	4798      	blx	r3
    5376:	0003      	movs	r3, r0
    5378:	61fb      	str	r3, [r7, #28]
    537a:	e020      	b.n	53be <sleepmgr_event_callback+0x6a>
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
			ready.mode  = ret_val->mode;
    537c:	693b      	ldr	r3, [r7, #16]
    537e:	785a      	ldrb	r2, [r3, #1]
    5380:	230c      	movs	r3, #12
    5382:	18fb      	adds	r3, r7, r3
    5384:	705a      	strb	r2, [r3, #1]
			ready.ready = true;
    5386:	230c      	movs	r3, #12
    5388:	18fb      	adds	r3, r7, r3
    538a:	2201      	movs	r2, #1
    538c:	701a      	strb	r2, [r3, #0]
			cur->cb(&ready);
    538e:	69fb      	ldr	r3, [r7, #28]
    5390:	685b      	ldr	r3, [r3, #4]
    5392:	220c      	movs	r2, #12
    5394:	18ba      	adds	r2, r7, r2
    5396:	0010      	movs	r0, r2
    5398:	4798      	blx	r3
			ret_val->ready &= ready.ready;
    539a:	693b      	ldr	r3, [r7, #16]
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	001a      	movs	r2, r3
    53a0:	230c      	movs	r3, #12
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	4013      	ands	r3, r2
    53a8:	1e5a      	subs	r2, r3, #1
    53aa:	4193      	sbcs	r3, r2
    53ac:	b2da      	uxtb	r2, r3
    53ae:	693b      	ldr	r3, [r7, #16]
    53b0:	701a      	strb	r2, [r3, #0]
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
    53b2:	69fb      	ldr	r3, [r7, #28]
    53b4:	0018      	movs	r0, r3
    53b6:	4b22      	ldr	r3, [pc, #136]	; (5440 <sleepmgr_event_callback+0xec>)
    53b8:	4798      	blx	r3
    53ba:	0003      	movs	r3, r0
    53bc:	61fb      	str	r3, [r7, #28]
		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    53be:	69fb      	ldr	r3, [r7, #28]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d1db      	bne.n	537c <sleepmgr_event_callback+0x28>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
			cur->cb(data);
		}
	}
}
    53c4:	e034      	b.n	5430 <sleepmgr_event_callback+0xdc>
	} else if (EVENT_WOKEN_UP_ID == id) {
    53c6:	1dfb      	adds	r3, r7, #7
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	2b02      	cmp	r3, #2
    53cc:	d116      	bne.n	53fc <sleepmgr_event_callback+0xa8>
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    53ce:	4b1d      	ldr	r3, [pc, #116]	; (5444 <sleepmgr_event_callback+0xf0>)
    53d0:	0018      	movs	r0, r3
    53d2:	4b1a      	ldr	r3, [pc, #104]	; (543c <sleepmgr_event_callback+0xe8>)
    53d4:	4798      	blx	r3
    53d6:	0003      	movs	r3, r0
    53d8:	61bb      	str	r3, [r7, #24]
    53da:	e00b      	b.n	53f4 <sleepmgr_event_callback+0xa0>
			cur->cb((const enum sleepmgr_wakeup_source)data);
    53dc:	69bb      	ldr	r3, [r7, #24]
    53de:	685b      	ldr	r3, [r3, #4]
    53e0:	683a      	ldr	r2, [r7, #0]
    53e2:	b2d2      	uxtb	r2, r2
    53e4:	0010      	movs	r0, r2
    53e6:	4798      	blx	r3
		     cur = (struct sleepmgr_wake_up_cb *)list_get_next_element(cur)) {
    53e8:	69bb      	ldr	r3, [r7, #24]
    53ea:	0018      	movs	r0, r3
    53ec:	4b14      	ldr	r3, [pc, #80]	; (5440 <sleepmgr_event_callback+0xec>)
    53ee:	4798      	blx	r3
    53f0:	0003      	movs	r3, r0
    53f2:	61bb      	str	r3, [r7, #24]
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    53f4:	69bb      	ldr	r3, [r7, #24]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d1f0      	bne.n	53dc <sleepmgr_event_callback+0x88>
}
    53fa:	e019      	b.n	5430 <sleepmgr_event_callback+0xdc>
	} else if (EVENT_PREPARE_TO_SLEEP_ID == id) {
    53fc:	1dfb      	adds	r3, r7, #7
    53fe:	781b      	ldrb	r3, [r3, #0]
    5400:	2b01      	cmp	r3, #1
    5402:	d115      	bne.n	5430 <sleepmgr_event_callback+0xdc>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    5404:	4b10      	ldr	r3, [pc, #64]	; (5448 <sleepmgr_event_callback+0xf4>)
    5406:	0018      	movs	r0, r3
    5408:	4b0c      	ldr	r3, [pc, #48]	; (543c <sleepmgr_event_callback+0xe8>)
    540a:	4798      	blx	r3
    540c:	0003      	movs	r3, r0
    540e:	617b      	str	r3, [r7, #20]
    5410:	e00b      	b.n	542a <sleepmgr_event_callback+0xd6>
			cur->cb(data);
    5412:	697b      	ldr	r3, [r7, #20]
    5414:	685b      	ldr	r3, [r3, #4]
    5416:	683a      	ldr	r2, [r7, #0]
    5418:	b2d2      	uxtb	r2, r2
    541a:	0010      	movs	r0, r2
    541c:	4798      	blx	r3
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
    541e:	697b      	ldr	r3, [r7, #20]
    5420:	0018      	movs	r0, r3
    5422:	4b07      	ldr	r3, [pc, #28]	; (5440 <sleepmgr_event_callback+0xec>)
    5424:	4798      	blx	r3
    5426:	0003      	movs	r3, r0
    5428:	617b      	str	r3, [r7, #20]
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    542a:	697b      	ldr	r3, [r7, #20]
    542c:	2b00      	cmp	r3, #0
    542e:	d1f0      	bne.n	5412 <sleepmgr_event_callback+0xbe>
}
    5430:	46c0      	nop			; (mov r8, r8)
    5432:	46bd      	mov	sp, r7
    5434:	b008      	add	sp, #32
    5436:	bd80      	pop	{r7, pc}
    5438:	200000a4 	.word	0x200000a4
    543c:	000052a5 	.word	0x000052a5
    5440:	000052b9 	.word	0x000052b9
    5444:	200000ac 	.word	0x200000ac
    5448:	200000a8 	.word	0x200000a8

0000544c <sleep_cb>:
#include "sleep_manager_main.h"

static struct sleepmgr_ready_to_sleep_cb sleepmgr_cb;

static void sleep_cb(struct sleepmgr_ready_to_sleep *const ready)
{
    544c:	b580      	push	{r7, lr}
    544e:	b082      	sub	sp, #8
    5450:	af00      	add	r7, sp, #0
    5452:	6078      	str	r0, [r7, #4]
	ready->ready = false;
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	2200      	movs	r2, #0
    5458:	701a      	strb	r2, [r3, #0]
}
    545a:	46c0      	nop			; (mov r8, r8)
    545c:	46bd      	mov	sp, r7
    545e:	b002      	add	sp, #8
    5460:	bd80      	pop	{r7, pc}
	...

00005464 <sleep_manager_init>:

void sleep_manager_init(void)
{
    5464:	b580      	push	{r7, lr}
    5466:	af00      	add	r7, sp, #0
	sleepmgr_init();
    5468:	4b05      	ldr	r3, [pc, #20]	; (5480 <sleep_manager_init+0x1c>)
    546a:	4798      	blx	r3

	sleepmgr_cb.cb = sleep_cb;
    546c:	4b05      	ldr	r3, [pc, #20]	; (5484 <sleep_manager_init+0x20>)
    546e:	4a06      	ldr	r2, [pc, #24]	; (5488 <sleep_manager_init+0x24>)
    5470:	605a      	str	r2, [r3, #4]
	sleepmgr_register_ready_to_sleep_callback(&sleepmgr_cb);
    5472:	4b04      	ldr	r3, [pc, #16]	; (5484 <sleep_manager_init+0x20>)
    5474:	0018      	movs	r0, r3
    5476:	4b05      	ldr	r3, [pc, #20]	; (548c <sleep_manager_init+0x28>)
    5478:	4798      	blx	r3
}
    547a:	46c0      	nop			; (mov r8, r8)
    547c:	46bd      	mov	sp, r7
    547e:	bd80      	pop	{r7, pc}
    5480:	000052d9 	.word	0x000052d9
    5484:	200000b0 	.word	0x200000b0
    5488:	0000544d 	.word	0x0000544d
    548c:	00005315 	.word	0x00005315

00005490 <mcp980X_construct>:


static const struct temperature_sensor_interface mcp980x_interface = {mcp980x_read, mcp980x_config};

struct temperature_sensor *mcp980X_construct(struct temperature_sensor *const me, void *const io, const uint8_t resolution)
{
    5490:	b580      	push	{r7, lr}
    5492:	b086      	sub	sp, #24
    5494:	af00      	add	r7, sp, #0
    5496:	60f8      	str	r0, [r7, #12]
    5498:	60b9      	str	r1, [r7, #8]
    549a:	1dfb      	adds	r3, r7, #7
    549c:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr;
	struct mcp980x *     mcp98 = (struct mcp980x *)me;
    549e:	68fb      	ldr	r3, [r7, #12]
    54a0:	617b      	str	r3, [r7, #20]

	temperature_sensor_construct(me, io, &mcp980x_interface);
    54a2:	4a0a      	ldr	r2, [pc, #40]	; (54cc <mcp980X_construct+0x3c>)
    54a4:	68b9      	ldr	r1, [r7, #8]
    54a6:	68fb      	ldr	r3, [r7, #12]
    54a8:	0018      	movs	r0, r3
    54aa:	4b09      	ldr	r3, [pc, #36]	; (54d0 <mcp980X_construct+0x40>)
    54ac:	4798      	blx	r3
	descr            = (struct i2c_m_sync_desc *)(me->io);
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	613b      	str	r3, [r7, #16]
	
	i2c_m_sync_set_slaveaddr(descr, CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    54b4:	2380      	movs	r3, #128	; 0x80
    54b6:	011a      	lsls	r2, r3, #4
    54b8:	693b      	ldr	r3, [r7, #16]
    54ba:	2118      	movs	r1, #24
    54bc:	0018      	movs	r0, r3
    54be:	4b05      	ldr	r3, [pc, #20]	; (54d4 <mcp980X_construct+0x44>)
    54c0:	4798      	blx	r3

	return me;
    54c2:	68fb      	ldr	r3, [r7, #12]
}
    54c4:	0018      	movs	r0, r3
    54c6:	46bd      	mov	sp, r7
    54c8:	b006      	add	sp, #24
    54ca:	bd80      	pop	{r7, pc}
    54cc:	00007024 	.word	0x00007024
    54d0:	00005e3d 	.word	0x00005e3d
    54d4:	000016ed 	.word	0x000016ed

000054d8 <mcp980x_read>:

/**
 * \brief Read temperature from the given sensor
 */
float mcp980x_read(const struct temperature_sensor *const me)
{
    54d8:	b590      	push	{r4, r7, lr}
    54da:	b089      	sub	sp, #36	; 0x24
    54dc:	af00      	add	r7, sp, #0
    54de:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2]; 
	buffer[0]=MCP980X_TEMP_REG;
    54e0:	230c      	movs	r3, #12
    54e2:	18fb      	adds	r3, r7, r3
    54e4:	2205      	movs	r2, #5
    54e6:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	61bb      	str	r3, [r7, #24]
	  
	int x = 0;
    54ee:	2300      	movs	r3, #0
    54f0:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(descr,CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    54f2:	2380      	movs	r3, #128	; 0x80
    54f4:	011a      	lsls	r2, r3, #4
    54f6:	69bb      	ldr	r3, [r7, #24]
    54f8:	2118      	movs	r1, #24
    54fa:	0018      	movs	r0, r3
    54fc:	4b20      	ldr	r3, [pc, #128]	; (5580 <mcp980x_read+0xa8>)
    54fe:	4798      	blx	r3
	
	x = io_write(&descr->io, buffer, 1);
    5500:	69bb      	ldr	r3, [r7, #24]
    5502:	3314      	adds	r3, #20
    5504:	220c      	movs	r2, #12
    5506:	18b9      	adds	r1, r7, r2
    5508:	2201      	movs	r2, #1
    550a:	0018      	movs	r0, r3
    550c:	4b1d      	ldr	r3, [pc, #116]	; (5584 <mcp980x_read+0xac>)
    550e:	4798      	blx	r3
    5510:	0003      	movs	r3, r0
    5512:	617b      	str	r3, [r7, #20]
	x = io_read(&descr->io, buffer, 2);
    5514:	69bb      	ldr	r3, [r7, #24]
    5516:	3314      	adds	r3, #20
    5518:	220c      	movs	r2, #12
    551a:	18b9      	adds	r1, r7, r2
    551c:	2202      	movs	r2, #2
    551e:	0018      	movs	r0, r3
    5520:	4b19      	ldr	r3, [pc, #100]	; (5588 <mcp980x_read+0xb0>)
    5522:	4798      	blx	r3
    5524:	0003      	movs	r3, r0
    5526:	617b      	str	r3, [r7, #20]
	
	int temp = ((buffer[0] & 0x1F) * 256 + buffer[1]);
    5528:	230c      	movs	r3, #12
    552a:	18fb      	adds	r3, r7, r3
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	001a      	movs	r2, r3
    5530:	231f      	movs	r3, #31
    5532:	4013      	ands	r3, r2
    5534:	021b      	lsls	r3, r3, #8
    5536:	220c      	movs	r2, #12
    5538:	18ba      	adds	r2, r7, r2
    553a:	7852      	ldrb	r2, [r2, #1]
    553c:	189b      	adds	r3, r3, r2
    553e:	61fb      	str	r3, [r7, #28]
	if(temp > 4095)
    5540:	69fb      	ldr	r3, [r7, #28]
    5542:	4a12      	ldr	r2, [pc, #72]	; (558c <mcp980x_read+0xb4>)
    5544:	4293      	cmp	r3, r2
    5546:	dd04      	ble.n	5552 <mcp980x_read+0x7a>
	{
		temp -= 8192;
    5548:	69fb      	ldr	r3, [r7, #28]
    554a:	4a11      	ldr	r2, [pc, #68]	; (5590 <mcp980x_read+0xb8>)
    554c:	4694      	mov	ip, r2
    554e:	4463      	add	r3, ip
    5550:	61fb      	str	r3, [r7, #28]
	}
	float cTemp = temp * 0.0625;
    5552:	4b10      	ldr	r3, [pc, #64]	; (5594 <mcp980x_read+0xbc>)
    5554:	69f8      	ldr	r0, [r7, #28]
    5556:	4798      	blx	r3
    5558:	4c0f      	ldr	r4, [pc, #60]	; (5598 <mcp980x_read+0xc0>)
    555a:	2200      	movs	r2, #0
    555c:	4b0f      	ldr	r3, [pc, #60]	; (559c <mcp980x_read+0xc4>)
    555e:	47a0      	blx	r4
    5560:	0003      	movs	r3, r0
    5562:	000c      	movs	r4, r1
    5564:	0019      	movs	r1, r3
    5566:	0022      	movs	r2, r4
    5568:	4b0d      	ldr	r3, [pc, #52]	; (55a0 <mcp980x_read+0xc8>)
    556a:	0008      	movs	r0, r1
    556c:	0011      	movs	r1, r2
    556e:	4798      	blx	r3
    5570:	1c03      	adds	r3, r0, #0
    5572:	613b      	str	r3, [r7, #16]
	
	return cTemp; 
    5574:	693b      	ldr	r3, [r7, #16]
}
    5576:	1c18      	adds	r0, r3, #0
    5578:	46bd      	mov	sp, r7
    557a:	b009      	add	sp, #36	; 0x24
    557c:	bd90      	pop	{r4, r7, pc}
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	000016ed 	.word	0x000016ed
    5584:	00001a65 	.word	0x00001a65
    5588:	00001ab9 	.word	0x00001ab9
    558c:	00000fff 	.word	0x00000fff
    5590:	ffffe000 	.word	0xffffe000
    5594:	00006b09 	.word	0x00006b09
    5598:	00006609 	.word	0x00006609
    559c:	3fb00000 	.word	0x3fb00000
    55a0:	00006b8d 	.word	0x00006b8d

000055a4 <mcp980x_config>:

/**
 *  \brief setup sensor by tempereture sensor settings !!!DONT WORK  !!!! RETURN BAD VALUES !!!!!!
 */
int16_t mcp980x_config(const struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{ 
    55a4:	b580      	push	{r7, lr}
    55a6:	b082      	sub	sp, #8
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
    55ac:	6039      	str	r1, [r7, #0]
	if(_mcp980x_set_setup(me,temp_set)==MCP980X_ERROR){
    55ae:	683a      	ldr	r2, [r7, #0]
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	0011      	movs	r1, r2
    55b4:	0018      	movs	r0, r3
    55b6:	4b1e      	ldr	r3, [pc, #120]	; (5630 <mcp980x_config+0x8c>)
    55b8:	4798      	blx	r3
    55ba:	0003      	movs	r3, r0
    55bc:	3301      	adds	r3, #1
    55be:	d102      	bne.n	55c6 <mcp980x_config+0x22>
		return MCP980X_ERROR;
    55c0:	2301      	movs	r3, #1
    55c2:	425b      	negs	r3, r3
    55c4:	e030      	b.n	5628 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_tupper(me,temp_set)==MCP980X_ERROR){
    55c6:	683a      	ldr	r2, [r7, #0]
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	0011      	movs	r1, r2
    55cc:	0018      	movs	r0, r3
    55ce:	4b19      	ldr	r3, [pc, #100]	; (5634 <mcp980x_config+0x90>)
    55d0:	4798      	blx	r3
    55d2:	0003      	movs	r3, r0
    55d4:	3301      	adds	r3, #1
    55d6:	d102      	bne.n	55de <mcp980x_config+0x3a>
		return MCP980X_ERROR;
    55d8:	2301      	movs	r3, #1
    55da:	425b      	negs	r3, r3
    55dc:	e024      	b.n	5628 <mcp980x_config+0x84>
	}
	
	if(_mcp980x_set_lower(me,temp_set)==MCP980X_ERROR) {
    55de:	683a      	ldr	r2, [r7, #0]
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	0011      	movs	r1, r2
    55e4:	0018      	movs	r0, r3
    55e6:	4b14      	ldr	r3, [pc, #80]	; (5638 <mcp980x_config+0x94>)
    55e8:	4798      	blx	r3
    55ea:	0003      	movs	r3, r0
    55ec:	3301      	adds	r3, #1
    55ee:	d102      	bne.n	55f6 <mcp980x_config+0x52>
		return MCP980X_ERROR; 
    55f0:	2301      	movs	r3, #1
    55f2:	425b      	negs	r3, r3
    55f4:	e018      	b.n	5628 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_critical(me,temp_set)==MCP980X_ERROR){
    55f6:	683a      	ldr	r2, [r7, #0]
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	0011      	movs	r1, r2
    55fc:	0018      	movs	r0, r3
    55fe:	4b0f      	ldr	r3, [pc, #60]	; (563c <mcp980x_config+0x98>)
    5600:	4798      	blx	r3
    5602:	0003      	movs	r3, r0
    5604:	3301      	adds	r3, #1
    5606:	d102      	bne.n	560e <mcp980x_config+0x6a>
		return MCP980X_ERROR; 
    5608:	2301      	movs	r3, #1
    560a:	425b      	negs	r3, r3
    560c:	e00c      	b.n	5628 <mcp980x_config+0x84>
	} 
	if(_mcp980x_set_resolution(me,temp_set)==MCP980X_ERROR){
    560e:	683a      	ldr	r2, [r7, #0]
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	0011      	movs	r1, r2
    5614:	0018      	movs	r0, r3
    5616:	4b0a      	ldr	r3, [pc, #40]	; (5640 <mcp980x_config+0x9c>)
    5618:	4798      	blx	r3
    561a:	0003      	movs	r3, r0
    561c:	3301      	adds	r3, #1
    561e:	d102      	bne.n	5626 <mcp980x_config+0x82>
		return MCP980X_ERROR; 
    5620:	2301      	movs	r3, #1
    5622:	425b      	negs	r3, r3
    5624:	e000      	b.n	5628 <mcp980x_config+0x84>
	} 	
return MCP980X_ERROR_NONE; 
    5626:	2300      	movs	r3, #0
}
    5628:	0018      	movs	r0, r3
    562a:	46bd      	mov	sp, r7
    562c:	b002      	add	sp, #8
    562e:	bd80      	pop	{r7, pc}
    5630:	00005645 	.word	0x00005645
    5634:	00005809 	.word	0x00005809
    5638:	000059e5 	.word	0x000059e5
    563c:	00005bc1 	.word	0x00005bc1
    5640:	00005d9d 	.word	0x00005d9d

00005644 <_mcp980x_set_setup>:

int16_t _mcp980x_set_setup(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{
    5644:	b580      	push	{r7, lr}
    5646:	b086      	sub	sp, #24
    5648:	af00      	add	r7, sp, #0
    564a:	6078      	str	r0, [r7, #4]
    564c:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    564e:	687b      	ldr	r3, [r7, #4]
    5650:	681b      	ldr	r3, [r3, #0]
    5652:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(&descr->io, 0x18, I2C_M_SEVEN); 
    5654:	697b      	ldr	r3, [r7, #20]
    5656:	3314      	adds	r3, #20
    5658:	0018      	movs	r0, r3
    565a:	2380      	movs	r3, #128	; 0x80
    565c:	011b      	lsls	r3, r3, #4
    565e:	001a      	movs	r2, r3
    5660:	2118      	movs	r1, #24
    5662:	4b64      	ldr	r3, [pc, #400]	; (57f4 <_mcp980x_set_setup+0x1b0>)
    5664:	4798      	blx	r3
	
	uint8_t buffer_setup[3];
	uint8_t buffer_read[2];
	
	memset(buffer_read,0,sizeof(buffer_read));
    5666:	230c      	movs	r3, #12
    5668:	18fb      	adds	r3, r7, r3
    566a:	2202      	movs	r2, #2
    566c:	2100      	movs	r1, #0
    566e:	0018      	movs	r0, r3
    5670:	4b61      	ldr	r3, [pc, #388]	; (57f8 <_mcp980x_set_setup+0x1b4>)
    5672:	4798      	blx	r3
	 
	buffer_setup[0]=MCP980X_SETUP_REG; 
    5674:	2310      	movs	r3, #16
    5676:	18fb      	adds	r3, r7, r3
    5678:	2201      	movs	r2, #1
    567a:	701a      	strb	r2, [r3, #0]
	
	buffer_setup[1] = temp_set->mcp980x->mcp980x_hysteresis << 1; 
    567c:	683b      	ldr	r3, [r7, #0]
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	7b5b      	ldrb	r3, [r3, #13]
    5682:	18db      	adds	r3, r3, r3
    5684:	b2da      	uxtb	r2, r3
    5686:	2310      	movs	r3, #16
    5688:	18fb      	adds	r3, r7, r3
    568a:	705a      	strb	r2, [r3, #1]
	
	if (temp_set->mcp980x->shutdown)
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	7bdb      	ldrb	r3, [r3, #15]
    5692:	2b00      	cmp	r3, #0
    5694:	d007      	beq.n	56a6 <_mcp980x_set_setup+0x62>
	{
		buffer_setup[1] +=1;
    5696:	2310      	movs	r3, #16
    5698:	18fb      	adds	r3, r7, r3
    569a:	785b      	ldrb	r3, [r3, #1]
    569c:	3301      	adds	r3, #1
    569e:	b2da      	uxtb	r2, r3
    56a0:	2310      	movs	r3, #16
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	705a      	strb	r2, [r3, #1]
	}
	if (temp_set->mcp980x->ctr_loc)
    56a6:	683b      	ldr	r3, [r7, #0]
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	7c1b      	ldrb	r3, [r3, #16]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d009      	beq.n	56c4 <_mcp980x_set_setup+0x80>
	{
		buffer_setup[2]|=0b10000000; 
    56b0:	2310      	movs	r3, #16
    56b2:	18fb      	adds	r3, r7, r3
    56b4:	789b      	ldrb	r3, [r3, #2]
    56b6:	2280      	movs	r2, #128	; 0x80
    56b8:	4252      	negs	r2, r2
    56ba:	4313      	orrs	r3, r2
    56bc:	b2da      	uxtb	r2, r3
    56be:	2310      	movs	r3, #16
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->win_loc)
    56c4:	683b      	ldr	r3, [r7, #0]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	7c5b      	ldrb	r3, [r3, #17]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d008      	beq.n	56e0 <_mcp980x_set_setup+0x9c>
	{
		buffer_setup[2]|=0b01000000; 		
    56ce:	2310      	movs	r3, #16
    56d0:	18fb      	adds	r3, r7, r3
    56d2:	789b      	ldrb	r3, [r3, #2]
    56d4:	2240      	movs	r2, #64	; 0x40
    56d6:	4313      	orrs	r3, r2
    56d8:	b2da      	uxtb	r2, r3
    56da:	2310      	movs	r3, #16
    56dc:	18fb      	adds	r3, r7, r3
    56de:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->int_crl)
    56e0:	683b      	ldr	r3, [r7, #0]
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	7c9b      	ldrb	r3, [r3, #18]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d008      	beq.n	56fc <_mcp980x_set_setup+0xb8>
	{
		buffer_setup[2]|=0b00100000; 	
    56ea:	2310      	movs	r3, #16
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	789b      	ldrb	r3, [r3, #2]
    56f0:	2220      	movs	r2, #32
    56f2:	4313      	orrs	r3, r2
    56f4:	b2da      	uxtb	r2, r3
    56f6:	2310      	movs	r3, #16
    56f8:	18fb      	adds	r3, r7, r3
    56fa:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_stat)
    56fc:	683b      	ldr	r3, [r7, #0]
    56fe:	681b      	ldr	r3, [r3, #0]
    5700:	7cdb      	ldrb	r3, [r3, #19]
    5702:	2b00      	cmp	r3, #0
    5704:	d008      	beq.n	5718 <_mcp980x_set_setup+0xd4>
	{
		buffer_setup[2]|=0b00010000; 	
    5706:	2310      	movs	r3, #16
    5708:	18fb      	adds	r3, r7, r3
    570a:	789b      	ldrb	r3, [r3, #2]
    570c:	2210      	movs	r2, #16
    570e:	4313      	orrs	r3, r2
    5710:	b2da      	uxtb	r2, r3
    5712:	2310      	movs	r3, #16
    5714:	18fb      	adds	r3, r7, r3
    5716:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_cnt)
    5718:	683b      	ldr	r3, [r7, #0]
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	7ddb      	ldrb	r3, [r3, #23]
    571e:	2b00      	cmp	r3, #0
    5720:	d008      	beq.n	5734 <_mcp980x_set_setup+0xf0>
	{
		buffer_setup[2]|=0b00001000; 	
    5722:	2310      	movs	r3, #16
    5724:	18fb      	adds	r3, r7, r3
    5726:	789b      	ldrb	r3, [r3, #2]
    5728:	2208      	movs	r2, #8
    572a:	4313      	orrs	r3, r2
    572c:	b2da      	uxtb	r2, r3
    572e:	2310      	movs	r3, #16
    5730:	18fb      	adds	r3, r7, r3
    5732:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_sel)
    5734:	683b      	ldr	r3, [r7, #0]
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	7d1b      	ldrb	r3, [r3, #20]
    573a:	2b00      	cmp	r3, #0
    573c:	d008      	beq.n	5750 <_mcp980x_set_setup+0x10c>
	{
		buffer_setup[2]|=0b00000100; 	
    573e:	2310      	movs	r3, #16
    5740:	18fb      	adds	r3, r7, r3
    5742:	789b      	ldrb	r3, [r3, #2]
    5744:	2204      	movs	r2, #4
    5746:	4313      	orrs	r3, r2
    5748:	b2da      	uxtb	r2, r3
    574a:	2310      	movs	r3, #16
    574c:	18fb      	adds	r3, r7, r3
    574e:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_pol)
    5750:	683b      	ldr	r3, [r7, #0]
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	7d5b      	ldrb	r3, [r3, #21]
    5756:	2b00      	cmp	r3, #0
    5758:	d008      	beq.n	576c <_mcp980x_set_setup+0x128>
	{
		buffer_setup[2]|=0b00000010; 	
    575a:	2310      	movs	r3, #16
    575c:	18fb      	adds	r3, r7, r3
    575e:	789b      	ldrb	r3, [r3, #2]
    5760:	2202      	movs	r2, #2
    5762:	4313      	orrs	r3, r2
    5764:	b2da      	uxtb	r2, r3
    5766:	2310      	movs	r3, #16
    5768:	18fb      	adds	r3, r7, r3
    576a:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_mod)
    576c:	683b      	ldr	r3, [r7, #0]
    576e:	681b      	ldr	r3, [r3, #0]
    5770:	7d9b      	ldrb	r3, [r3, #22]
    5772:	2b00      	cmp	r3, #0
    5774:	d008      	beq.n	5788 <_mcp980x_set_setup+0x144>
	{
		buffer_setup[2]|=0b00000001; 	
    5776:	2310      	movs	r3, #16
    5778:	18fb      	adds	r3, r7, r3
    577a:	789b      	ldrb	r3, [r3, #2]
    577c:	2201      	movs	r2, #1
    577e:	4313      	orrs	r3, r2
    5780:	b2da      	uxtb	r2, r3
    5782:	2310      	movs	r3, #16
    5784:	18fb      	adds	r3, r7, r3
    5786:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_setup, 3);
    5788:	697b      	ldr	r3, [r7, #20]
    578a:	3314      	adds	r3, #20
    578c:	2210      	movs	r2, #16
    578e:	18b9      	adds	r1, r7, r2
    5790:	2203      	movs	r2, #3
    5792:	0018      	movs	r0, r3
    5794:	4b19      	ldr	r3, [pc, #100]	; (57fc <_mcp980x_set_setup+0x1b8>)
    5796:	4798      	blx	r3
	delay_ms(1000); 
    5798:	23fa      	movs	r3, #250	; 0xfa
    579a:	009b      	lsls	r3, r3, #2
    579c:	0018      	movs	r0, r3
    579e:	4b18      	ldr	r3, [pc, #96]	; (5800 <_mcp980x_set_setup+0x1bc>)
    57a0:	4798      	blx	r3
	io_write(&descr->io, buffer_setup, 1);
    57a2:	697b      	ldr	r3, [r7, #20]
    57a4:	3314      	adds	r3, #20
    57a6:	2210      	movs	r2, #16
    57a8:	18b9      	adds	r1, r7, r2
    57aa:	2201      	movs	r2, #1
    57ac:	0018      	movs	r0, r3
    57ae:	4b13      	ldr	r3, [pc, #76]	; (57fc <_mcp980x_set_setup+0x1b8>)
    57b0:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    57b2:	697b      	ldr	r3, [r7, #20]
    57b4:	3314      	adds	r3, #20
    57b6:	220c      	movs	r2, #12
    57b8:	18b9      	adds	r1, r7, r2
    57ba:	2202      	movs	r2, #2
    57bc:	0018      	movs	r0, r3
    57be:	4b11      	ldr	r3, [pc, #68]	; (5804 <_mcp980x_set_setup+0x1c0>)
    57c0:	4798      	blx	r3
	
	if (buffer_setup[1]!=buffer_read[0] || buffer_setup[2]!=buffer_read[1])
    57c2:	2310      	movs	r3, #16
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	785a      	ldrb	r2, [r3, #1]
    57c8:	230c      	movs	r3, #12
    57ca:	18fb      	adds	r3, r7, r3
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	429a      	cmp	r2, r3
    57d0:	d107      	bne.n	57e2 <_mcp980x_set_setup+0x19e>
    57d2:	2310      	movs	r3, #16
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	789a      	ldrb	r2, [r3, #2]
    57d8:	230c      	movs	r3, #12
    57da:	18fb      	adds	r3, r7, r3
    57dc:	785b      	ldrb	r3, [r3, #1]
    57de:	429a      	cmp	r2, r3
    57e0:	d002      	beq.n	57e8 <_mcp980x_set_setup+0x1a4>
	{
		return MCP980X_ERROR;
    57e2:	2301      	movs	r3, #1
    57e4:	425b      	negs	r3, r3
    57e6:	e000      	b.n	57ea <_mcp980x_set_setup+0x1a6>
	}
	return MCP980X_ERROR_NONE; 
    57e8:	2300      	movs	r3, #0
}
    57ea:	0018      	movs	r0, r3
    57ec:	46bd      	mov	sp, r7
    57ee:	b006      	add	sp, #24
    57f0:	bd80      	pop	{r7, pc}
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	000016ed 	.word	0x000016ed
    57f8:	00006d25 	.word	0x00006d25
    57fc:	00001a65 	.word	0x00001a65
    5800:	00001565 	.word	0x00001565
    5804:	00001ab9 	.word	0x00001ab9

00005808 <_mcp980x_set_tupper>:

int16_t _mcp980x_set_tupper(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    5808:	b590      	push	{r4, r7, lr}
    580a:	b089      	sub	sp, #36	; 0x24
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
    5810:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_upper [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_upper,0,sizeof(buffer_temp_upper));
    5818:	230c      	movs	r3, #12
    581a:	18fb      	adds	r3, r7, r3
    581c:	2203      	movs	r2, #3
    581e:	2100      	movs	r1, #0
    5820:	0018      	movs	r0, r3
    5822:	4b68      	ldr	r3, [pc, #416]	; (59c4 <_mcp980x_set_tupper+0x1bc>)
    5824:	4798      	blx	r3
	
	buffer_temp_upper[0]=MCP980X_ALERT_TUPPER_REG; 
    5826:	230c      	movs	r3, #12
    5828:	18fb      	adds	r3, r7, r3
    582a:	2202      	movs	r2, #2
    582c:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->tupper;
    582e:	683b      	ldr	r3, [r7, #0]
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	681a      	ldr	r2, [r3, #0]
    5834:	231e      	movs	r3, #30
    5836:	18fc      	adds	r4, r7, r3
    5838:	4b63      	ldr	r3, [pc, #396]	; (59c8 <_mcp980x_set_tupper+0x1c0>)
    583a:	1c10      	adds	r0, r2, #0
    583c:	4798      	blx	r3
    583e:	0003      	movs	r3, r0
    5840:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->tupper;
    5842:	683b      	ldr	r3, [r7, #0]
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    584a:	231e      	movs	r3, #30
    584c:	18fb      	adds	r3, r7, r3
    584e:	2200      	movs	r2, #0
    5850:	5e9b      	ldrsh	r3, [r3, r2]
    5852:	2b00      	cmp	r3, #0
    5854:	da17      	bge.n	5886 <_mcp980x_set_tupper+0x7e>
	{
		buffer_temp_upper[1]|=0b0010000;
    5856:	230c      	movs	r3, #12
    5858:	18fb      	adds	r3, r7, r3
    585a:	785b      	ldrb	r3, [r3, #1]
    585c:	2210      	movs	r2, #16
    585e:	4313      	orrs	r3, r2
    5860:	b2da      	uxtb	r2, r3
    5862:	230c      	movs	r3, #12
    5864:	18fb      	adds	r3, r7, r3
    5866:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    5868:	231e      	movs	r3, #30
    586a:	18fb      	adds	r3, r7, r3
    586c:	881b      	ldrh	r3, [r3, #0]
    586e:	425b      	negs	r3, r3
    5870:	b29a      	uxth	r2, r3
    5872:	231e      	movs	r3, #30
    5874:	18fb      	adds	r3, r7, r3
    5876:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    5878:	683b      	ldr	r3, [r7, #0]
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	2280      	movs	r2, #128	; 0x80
    5880:	0612      	lsls	r2, r2, #24
    5882:	4053      	eors	r3, r2
    5884:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_upper[1] = temp_int >> 4;     //move to fit in register   
    5886:	231e      	movs	r3, #30
    5888:	18fb      	adds	r3, r7, r3
    588a:	2200      	movs	r2, #0
    588c:	5e9b      	ldrsh	r3, [r3, r2]
    588e:	111b      	asrs	r3, r3, #4
    5890:	b21b      	sxth	r3, r3
    5892:	b2da      	uxtb	r2, r3
    5894:	230c      	movs	r3, #12
    5896:	18fb      	adds	r3, r7, r3
    5898:	705a      	strb	r2, [r3, #1]
	buffer_temp_upper[2] = temp_int << 4;       //move to fit in register   
    589a:	231e      	movs	r3, #30
    589c:	18fb      	adds	r3, r7, r3
    589e:	881b      	ldrh	r3, [r3, #0]
    58a0:	b2db      	uxtb	r3, r3
    58a2:	011b      	lsls	r3, r3, #4
    58a4:	b2da      	uxtb	r2, r3
    58a6:	230c      	movs	r3, #12
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    58ac:	4b46      	ldr	r3, [pc, #280]	; (59c8 <_mcp980x_set_tupper+0x1c0>)
    58ae:	69b8      	ldr	r0, [r7, #24]
    58b0:	4798      	blx	r3
    58b2:	0002      	movs	r2, r0
    58b4:	4b45      	ldr	r3, [pc, #276]	; (59cc <_mcp980x_set_tupper+0x1c4>)
    58b6:	0010      	movs	r0, r2
    58b8:	4798      	blx	r3
    58ba:	1c02      	adds	r2, r0, #0
    58bc:	4b44      	ldr	r3, [pc, #272]	; (59d0 <_mcp980x_set_tupper+0x1c8>)
    58be:	1c11      	adds	r1, r2, #0
    58c0:	69b8      	ldr	r0, [r7, #24]
    58c2:	4798      	blx	r3
    58c4:	1c03      	adds	r3, r0, #0
    58c6:	1c1a      	adds	r2, r3, #0
    58c8:	4b42      	ldr	r3, [pc, #264]	; (59d4 <_mcp980x_set_tupper+0x1cc>)
    58ca:	4943      	ldr	r1, [pc, #268]	; (59d8 <_mcp980x_set_tupper+0x1d0>)
    58cc:	1c10      	adds	r0, r2, #0
    58ce:	4798      	blx	r3
    58d0:	1c03      	adds	r3, r0, #0
    58d2:	1c1a      	adds	r2, r3, #0
    58d4:	231e      	movs	r3, #30
    58d6:	18fc      	adds	r4, r7, r3
    58d8:	4b3b      	ldr	r3, [pc, #236]	; (59c8 <_mcp980x_set_tupper+0x1c0>)
    58da:	1c10      	adds	r0, r2, #0
    58dc:	4798      	blx	r3
    58de:	0003      	movs	r3, r0
    58e0:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    58e2:	231e      	movs	r3, #30
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	2200      	movs	r2, #0
    58e8:	5e9b      	ldrsh	r3, [r3, r2]
    58ea:	2b56      	cmp	r3, #86	; 0x56
    58ec:	dc0f      	bgt.n	590e <_mcp980x_set_tupper+0x106>
    58ee:	231e      	movs	r3, #30
    58f0:	18fb      	adds	r3, r7, r3
    58f2:	2200      	movs	r2, #0
    58f4:	5e9b      	ldrsh	r3, [r3, r2]
    58f6:	2b3e      	cmp	r3, #62	; 0x3e
    58f8:	dd09      	ble.n	590e <_mcp980x_set_tupper+0x106>
	{
		buffer_temp_upper[2]|=0b00001100;
    58fa:	230c      	movs	r3, #12
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	789b      	ldrb	r3, [r3, #2]
    5900:	220c      	movs	r2, #12
    5902:	4313      	orrs	r3, r2
    5904:	b2da      	uxtb	r2, r3
    5906:	230c      	movs	r3, #12
    5908:	18fb      	adds	r3, r7, r3
    590a:	709a      	strb	r2, [r3, #2]
    590c:	e02a      	b.n	5964 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    590e:	231e      	movs	r3, #30
    5910:	18fb      	adds	r3, r7, r3
    5912:	2200      	movs	r2, #0
    5914:	5e9b      	ldrsh	r3, [r3, r2]
    5916:	2b3d      	cmp	r3, #61	; 0x3d
    5918:	dc0f      	bgt.n	593a <_mcp980x_set_tupper+0x132>
    591a:	231e      	movs	r3, #30
    591c:	18fb      	adds	r3, r7, r3
    591e:	2200      	movs	r2, #0
    5920:	5e9b      	ldrsh	r3, [r3, r2]
    5922:	2b30      	cmp	r3, #48	; 0x30
    5924:	dd09      	ble.n	593a <_mcp980x_set_tupper+0x132>
	{
		buffer_temp_upper[2]|=0b00001000;
    5926:	230c      	movs	r3, #12
    5928:	18fb      	adds	r3, r7, r3
    592a:	789b      	ldrb	r3, [r3, #2]
    592c:	2208      	movs	r2, #8
    592e:	4313      	orrs	r3, r2
    5930:	b2da      	uxtb	r2, r3
    5932:	230c      	movs	r3, #12
    5934:	18fb      	adds	r3, r7, r3
    5936:	709a      	strb	r2, [r3, #2]
    5938:	e014      	b.n	5964 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    593a:	231e      	movs	r3, #30
    593c:	18fb      	adds	r3, r7, r3
    593e:	2200      	movs	r2, #0
    5940:	5e9b      	ldrsh	r3, [r3, r2]
    5942:	2b2f      	cmp	r3, #47	; 0x2f
    5944:	dc0e      	bgt.n	5964 <_mcp980x_set_tupper+0x15c>
    5946:	231e      	movs	r3, #30
    5948:	18fb      	adds	r3, r7, r3
    594a:	2200      	movs	r2, #0
    594c:	5e9b      	ldrsh	r3, [r3, r2]
    594e:	2b0d      	cmp	r3, #13
    5950:	dd08      	ble.n	5964 <_mcp980x_set_tupper+0x15c>
	{
		buffer_temp_upper[2]|=0b00000100;
    5952:	230c      	movs	r3, #12
    5954:	18fb      	adds	r3, r7, r3
    5956:	789b      	ldrb	r3, [r3, #2]
    5958:	2204      	movs	r2, #4
    595a:	4313      	orrs	r3, r2
    595c:	b2da      	uxtb	r2, r3
    595e:	230c      	movs	r3, #12
    5960:	18fb      	adds	r3, r7, r3
    5962:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_upper, 3);
    5964:	697b      	ldr	r3, [r7, #20]
    5966:	3314      	adds	r3, #20
    5968:	220c      	movs	r2, #12
    596a:	18b9      	adds	r1, r7, r2
    596c:	2203      	movs	r2, #3
    596e:	0018      	movs	r0, r3
    5970:	4b1a      	ldr	r3, [pc, #104]	; (59dc <_mcp980x_set_tupper+0x1d4>)
    5972:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_upper, 1);
    5974:	697b      	ldr	r3, [r7, #20]
    5976:	3314      	adds	r3, #20
    5978:	220c      	movs	r2, #12
    597a:	18b9      	adds	r1, r7, r2
    597c:	2201      	movs	r2, #1
    597e:	0018      	movs	r0, r3
    5980:	4b16      	ldr	r3, [pc, #88]	; (59dc <_mcp980x_set_tupper+0x1d4>)
    5982:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    5984:	697b      	ldr	r3, [r7, #20]
    5986:	3314      	adds	r3, #20
    5988:	2210      	movs	r2, #16
    598a:	18b9      	adds	r1, r7, r2
    598c:	2202      	movs	r2, #2
    598e:	0018      	movs	r0, r3
    5990:	4b13      	ldr	r3, [pc, #76]	; (59e0 <_mcp980x_set_tupper+0x1d8>)
    5992:	4798      	blx	r3
	if (buffer_temp_upper[1]!=buffer_read[0] || buffer_temp_upper[2]!=buffer_read[1])
    5994:	230c      	movs	r3, #12
    5996:	18fb      	adds	r3, r7, r3
    5998:	785a      	ldrb	r2, [r3, #1]
    599a:	2310      	movs	r3, #16
    599c:	18fb      	adds	r3, r7, r3
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	429a      	cmp	r2, r3
    59a2:	d107      	bne.n	59b4 <_mcp980x_set_tupper+0x1ac>
    59a4:	230c      	movs	r3, #12
    59a6:	18fb      	adds	r3, r7, r3
    59a8:	789a      	ldrb	r2, [r3, #2]
    59aa:	2310      	movs	r3, #16
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	785b      	ldrb	r3, [r3, #1]
    59b0:	429a      	cmp	r2, r3
    59b2:	d002      	beq.n	59ba <_mcp980x_set_tupper+0x1b2>
	{
		return MCP980X_ERROR;
    59b4:	2301      	movs	r3, #1
    59b6:	425b      	negs	r3, r3
    59b8:	e000      	b.n	59bc <_mcp980x_set_tupper+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    59ba:	2300      	movs	r3, #0
}
    59bc:	0018      	movs	r0, r3
    59be:	46bd      	mov	sp, r7
    59c0:	b009      	add	sp, #36	; 0x24
    59c2:	bd90      	pop	{r4, r7, pc}
    59c4:	00006d25 	.word	0x00006d25
    59c8:	00006529 	.word	0x00006529
    59cc:	00006569 	.word	0x00006569
    59d0:	000061f1 	.word	0x000061f1
    59d4:	00005fb1 	.word	0x00005fb1
    59d8:	42c80000 	.word	0x42c80000
    59dc:	00001a65 	.word	0x00001a65
    59e0:	00001ab9 	.word	0x00001ab9

000059e4 <_mcp980x_set_lower>:

int16_t _mcp980x_set_lower(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    59e4:	b590      	push	{r4, r7, lr}
    59e6:	b089      	sub	sp, #36	; 0x24
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
    59ec:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_lower [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_lower,0,sizeof(buffer_temp_lower));
    59f4:	230c      	movs	r3, #12
    59f6:	18fb      	adds	r3, r7, r3
    59f8:	2203      	movs	r2, #3
    59fa:	2100      	movs	r1, #0
    59fc:	0018      	movs	r0, r3
    59fe:	4b68      	ldr	r3, [pc, #416]	; (5ba0 <_mcp980x_set_lower+0x1bc>)
    5a00:	4798      	blx	r3
	
	buffer_temp_lower[0]=MCP980X_ALERT_TLOWER_REG; 
    5a02:	230c      	movs	r3, #12
    5a04:	18fb      	adds	r3, r7, r3
    5a06:	2203      	movs	r2, #3
    5a08:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->lower;
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	685a      	ldr	r2, [r3, #4]
    5a10:	231e      	movs	r3, #30
    5a12:	18fc      	adds	r4, r7, r3
    5a14:	4b63      	ldr	r3, [pc, #396]	; (5ba4 <_mcp980x_set_lower+0x1c0>)
    5a16:	1c10      	adds	r0, r2, #0
    5a18:	4798      	blx	r3
    5a1a:	0003      	movs	r3, r0
    5a1c:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->lower;
    5a1e:	683b      	ldr	r3, [r7, #0]
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	685b      	ldr	r3, [r3, #4]
    5a24:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    5a26:	231e      	movs	r3, #30
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	2200      	movs	r2, #0
    5a2c:	5e9b      	ldrsh	r3, [r3, r2]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	da17      	bge.n	5a62 <_mcp980x_set_lower+0x7e>
	{
		buffer_temp_lower[1]|=0b0010000;
    5a32:	230c      	movs	r3, #12
    5a34:	18fb      	adds	r3, r7, r3
    5a36:	785b      	ldrb	r3, [r3, #1]
    5a38:	2210      	movs	r2, #16
    5a3a:	4313      	orrs	r3, r2
    5a3c:	b2da      	uxtb	r2, r3
    5a3e:	230c      	movs	r3, #12
    5a40:	18fb      	adds	r3, r7, r3
    5a42:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    5a44:	231e      	movs	r3, #30
    5a46:	18fb      	adds	r3, r7, r3
    5a48:	881b      	ldrh	r3, [r3, #0]
    5a4a:	425b      	negs	r3, r3
    5a4c:	b29a      	uxth	r2, r3
    5a4e:	231e      	movs	r3, #30
    5a50:	18fb      	adds	r3, r7, r3
    5a52:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    5a54:	683b      	ldr	r3, [r7, #0]
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	2280      	movs	r2, #128	; 0x80
    5a5c:	0612      	lsls	r2, r2, #24
    5a5e:	4053      	eors	r3, r2
    5a60:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_lower[1] = temp_int >> 4;     //move to fit in register   
    5a62:	231e      	movs	r3, #30
    5a64:	18fb      	adds	r3, r7, r3
    5a66:	2200      	movs	r2, #0
    5a68:	5e9b      	ldrsh	r3, [r3, r2]
    5a6a:	111b      	asrs	r3, r3, #4
    5a6c:	b21b      	sxth	r3, r3
    5a6e:	b2da      	uxtb	r2, r3
    5a70:	230c      	movs	r3, #12
    5a72:	18fb      	adds	r3, r7, r3
    5a74:	705a      	strb	r2, [r3, #1]
	buffer_temp_lower[2] = temp_int << 4;       //move to fit in register   
    5a76:	231e      	movs	r3, #30
    5a78:	18fb      	adds	r3, r7, r3
    5a7a:	881b      	ldrh	r3, [r3, #0]
    5a7c:	b2db      	uxtb	r3, r3
    5a7e:	011b      	lsls	r3, r3, #4
    5a80:	b2da      	uxtb	r2, r3
    5a82:	230c      	movs	r3, #12
    5a84:	18fb      	adds	r3, r7, r3
    5a86:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    5a88:	4b46      	ldr	r3, [pc, #280]	; (5ba4 <_mcp980x_set_lower+0x1c0>)
    5a8a:	69b8      	ldr	r0, [r7, #24]
    5a8c:	4798      	blx	r3
    5a8e:	0002      	movs	r2, r0
    5a90:	4b45      	ldr	r3, [pc, #276]	; (5ba8 <_mcp980x_set_lower+0x1c4>)
    5a92:	0010      	movs	r0, r2
    5a94:	4798      	blx	r3
    5a96:	1c02      	adds	r2, r0, #0
    5a98:	4b44      	ldr	r3, [pc, #272]	; (5bac <_mcp980x_set_lower+0x1c8>)
    5a9a:	1c11      	adds	r1, r2, #0
    5a9c:	69b8      	ldr	r0, [r7, #24]
    5a9e:	4798      	blx	r3
    5aa0:	1c03      	adds	r3, r0, #0
    5aa2:	1c1a      	adds	r2, r3, #0
    5aa4:	4b42      	ldr	r3, [pc, #264]	; (5bb0 <_mcp980x_set_lower+0x1cc>)
    5aa6:	4943      	ldr	r1, [pc, #268]	; (5bb4 <_mcp980x_set_lower+0x1d0>)
    5aa8:	1c10      	adds	r0, r2, #0
    5aaa:	4798      	blx	r3
    5aac:	1c03      	adds	r3, r0, #0
    5aae:	1c1a      	adds	r2, r3, #0
    5ab0:	231e      	movs	r3, #30
    5ab2:	18fc      	adds	r4, r7, r3
    5ab4:	4b3b      	ldr	r3, [pc, #236]	; (5ba4 <_mcp980x_set_lower+0x1c0>)
    5ab6:	1c10      	adds	r0, r2, #0
    5ab8:	4798      	blx	r3
    5aba:	0003      	movs	r3, r0
    5abc:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    5abe:	231e      	movs	r3, #30
    5ac0:	18fb      	adds	r3, r7, r3
    5ac2:	2200      	movs	r2, #0
    5ac4:	5e9b      	ldrsh	r3, [r3, r2]
    5ac6:	2b56      	cmp	r3, #86	; 0x56
    5ac8:	dc0f      	bgt.n	5aea <_mcp980x_set_lower+0x106>
    5aca:	231e      	movs	r3, #30
    5acc:	18fb      	adds	r3, r7, r3
    5ace:	2200      	movs	r2, #0
    5ad0:	5e9b      	ldrsh	r3, [r3, r2]
    5ad2:	2b3e      	cmp	r3, #62	; 0x3e
    5ad4:	dd09      	ble.n	5aea <_mcp980x_set_lower+0x106>
	{
		buffer_temp_lower[2]|=0b00001100;
    5ad6:	230c      	movs	r3, #12
    5ad8:	18fb      	adds	r3, r7, r3
    5ada:	789b      	ldrb	r3, [r3, #2]
    5adc:	220c      	movs	r2, #12
    5ade:	4313      	orrs	r3, r2
    5ae0:	b2da      	uxtb	r2, r3
    5ae2:	230c      	movs	r3, #12
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	709a      	strb	r2, [r3, #2]
    5ae8:	e02a      	b.n	5b40 <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    5aea:	231e      	movs	r3, #30
    5aec:	18fb      	adds	r3, r7, r3
    5aee:	2200      	movs	r2, #0
    5af0:	5e9b      	ldrsh	r3, [r3, r2]
    5af2:	2b3d      	cmp	r3, #61	; 0x3d
    5af4:	dc0f      	bgt.n	5b16 <_mcp980x_set_lower+0x132>
    5af6:	231e      	movs	r3, #30
    5af8:	18fb      	adds	r3, r7, r3
    5afa:	2200      	movs	r2, #0
    5afc:	5e9b      	ldrsh	r3, [r3, r2]
    5afe:	2b30      	cmp	r3, #48	; 0x30
    5b00:	dd09      	ble.n	5b16 <_mcp980x_set_lower+0x132>
	{
		buffer_temp_lower[2]|=0b00001000;
    5b02:	230c      	movs	r3, #12
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	789b      	ldrb	r3, [r3, #2]
    5b08:	2208      	movs	r2, #8
    5b0a:	4313      	orrs	r3, r2
    5b0c:	b2da      	uxtb	r2, r3
    5b0e:	230c      	movs	r3, #12
    5b10:	18fb      	adds	r3, r7, r3
    5b12:	709a      	strb	r2, [r3, #2]
    5b14:	e014      	b.n	5b40 <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    5b16:	231e      	movs	r3, #30
    5b18:	18fb      	adds	r3, r7, r3
    5b1a:	2200      	movs	r2, #0
    5b1c:	5e9b      	ldrsh	r3, [r3, r2]
    5b1e:	2b2f      	cmp	r3, #47	; 0x2f
    5b20:	dc0e      	bgt.n	5b40 <_mcp980x_set_lower+0x15c>
    5b22:	231e      	movs	r3, #30
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	2200      	movs	r2, #0
    5b28:	5e9b      	ldrsh	r3, [r3, r2]
    5b2a:	2b0d      	cmp	r3, #13
    5b2c:	dd08      	ble.n	5b40 <_mcp980x_set_lower+0x15c>
	{
		buffer_temp_lower[2]|=0b00000100;
    5b2e:	230c      	movs	r3, #12
    5b30:	18fb      	adds	r3, r7, r3
    5b32:	789b      	ldrb	r3, [r3, #2]
    5b34:	2204      	movs	r2, #4
    5b36:	4313      	orrs	r3, r2
    5b38:	b2da      	uxtb	r2, r3
    5b3a:	230c      	movs	r3, #12
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_lower, 3);
    5b40:	697b      	ldr	r3, [r7, #20]
    5b42:	3314      	adds	r3, #20
    5b44:	220c      	movs	r2, #12
    5b46:	18b9      	adds	r1, r7, r2
    5b48:	2203      	movs	r2, #3
    5b4a:	0018      	movs	r0, r3
    5b4c:	4b1a      	ldr	r3, [pc, #104]	; (5bb8 <_mcp980x_set_lower+0x1d4>)
    5b4e:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_lower, 1);
    5b50:	697b      	ldr	r3, [r7, #20]
    5b52:	3314      	adds	r3, #20
    5b54:	220c      	movs	r2, #12
    5b56:	18b9      	adds	r1, r7, r2
    5b58:	2201      	movs	r2, #1
    5b5a:	0018      	movs	r0, r3
    5b5c:	4b16      	ldr	r3, [pc, #88]	; (5bb8 <_mcp980x_set_lower+0x1d4>)
    5b5e:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    5b60:	697b      	ldr	r3, [r7, #20]
    5b62:	3314      	adds	r3, #20
    5b64:	2210      	movs	r2, #16
    5b66:	18b9      	adds	r1, r7, r2
    5b68:	2202      	movs	r2, #2
    5b6a:	0018      	movs	r0, r3
    5b6c:	4b13      	ldr	r3, [pc, #76]	; (5bbc <_mcp980x_set_lower+0x1d8>)
    5b6e:	4798      	blx	r3
	if (buffer_temp_lower[1]!=buffer_read[0] || buffer_temp_lower[2]!=buffer_read[1])
    5b70:	230c      	movs	r3, #12
    5b72:	18fb      	adds	r3, r7, r3
    5b74:	785a      	ldrb	r2, [r3, #1]
    5b76:	2310      	movs	r3, #16
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	781b      	ldrb	r3, [r3, #0]
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d107      	bne.n	5b90 <_mcp980x_set_lower+0x1ac>
    5b80:	230c      	movs	r3, #12
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	789a      	ldrb	r2, [r3, #2]
    5b86:	2310      	movs	r3, #16
    5b88:	18fb      	adds	r3, r7, r3
    5b8a:	785b      	ldrb	r3, [r3, #1]
    5b8c:	429a      	cmp	r2, r3
    5b8e:	d002      	beq.n	5b96 <_mcp980x_set_lower+0x1b2>
	{
		return MCP980X_ERROR;
    5b90:	2301      	movs	r3, #1
    5b92:	425b      	negs	r3, r3
    5b94:	e000      	b.n	5b98 <_mcp980x_set_lower+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    5b96:	2300      	movs	r3, #0
}
    5b98:	0018      	movs	r0, r3
    5b9a:	46bd      	mov	sp, r7
    5b9c:	b009      	add	sp, #36	; 0x24
    5b9e:	bd90      	pop	{r4, r7, pc}
    5ba0:	00006d25 	.word	0x00006d25
    5ba4:	00006529 	.word	0x00006529
    5ba8:	00006569 	.word	0x00006569
    5bac:	000061f1 	.word	0x000061f1
    5bb0:	00005fb1 	.word	0x00005fb1
    5bb4:	42c80000 	.word	0x42c80000
    5bb8:	00001a65 	.word	0x00001a65
    5bbc:	00001ab9 	.word	0x00001ab9

00005bc0 <_mcp980x_set_critical>:

int16_t _mcp980x_set_critical(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    5bc0:	b590      	push	{r4, r7, lr}
    5bc2:	b089      	sub	sp, #36	; 0x24
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
    5bc8:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	681b      	ldr	r3, [r3, #0]
    5bce:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_critical [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_critical,0,sizeof(buffer_temp_critical));
    5bd0:	230c      	movs	r3, #12
    5bd2:	18fb      	adds	r3, r7, r3
    5bd4:	2203      	movs	r2, #3
    5bd6:	2100      	movs	r1, #0
    5bd8:	0018      	movs	r0, r3
    5bda:	4b68      	ldr	r3, [pc, #416]	; (5d7c <_mcp980x_set_critical+0x1bc>)
    5bdc:	4798      	blx	r3
	
	buffer_temp_critical[0]=MCP980X_ALERT_TLOWER_REG; 
    5bde:	230c      	movs	r3, #12
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	2203      	movs	r2, #3
    5be4:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->critical;
    5be6:	683b      	ldr	r3, [r7, #0]
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	689a      	ldr	r2, [r3, #8]
    5bec:	231e      	movs	r3, #30
    5bee:	18fc      	adds	r4, r7, r3
    5bf0:	4b63      	ldr	r3, [pc, #396]	; (5d80 <_mcp980x_set_critical+0x1c0>)
    5bf2:	1c10      	adds	r0, r2, #0
    5bf4:	4798      	blx	r3
    5bf6:	0003      	movs	r3, r0
    5bf8:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->critical;
    5bfa:	683b      	ldr	r3, [r7, #0]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	689b      	ldr	r3, [r3, #8]
    5c00:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    5c02:	231e      	movs	r3, #30
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	2200      	movs	r2, #0
    5c08:	5e9b      	ldrsh	r3, [r3, r2]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	da17      	bge.n	5c3e <_mcp980x_set_critical+0x7e>
	{
		buffer_temp_critical[1]|=0b0010000;
    5c0e:	230c      	movs	r3, #12
    5c10:	18fb      	adds	r3, r7, r3
    5c12:	785b      	ldrb	r3, [r3, #1]
    5c14:	2210      	movs	r2, #16
    5c16:	4313      	orrs	r3, r2
    5c18:	b2da      	uxtb	r2, r3
    5c1a:	230c      	movs	r3, #12
    5c1c:	18fb      	adds	r3, r7, r3
    5c1e:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    5c20:	231e      	movs	r3, #30
    5c22:	18fb      	adds	r3, r7, r3
    5c24:	881b      	ldrh	r3, [r3, #0]
    5c26:	425b      	negs	r3, r3
    5c28:	b29a      	uxth	r2, r3
    5c2a:	231e      	movs	r3, #30
    5c2c:	18fb      	adds	r3, r7, r3
    5c2e:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    5c30:	683b      	ldr	r3, [r7, #0]
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	2280      	movs	r2, #128	; 0x80
    5c38:	0612      	lsls	r2, r2, #24
    5c3a:	4053      	eors	r3, r2
    5c3c:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_critical[1] = temp_int >> 4;     //move to fit in register   
    5c3e:	231e      	movs	r3, #30
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	2200      	movs	r2, #0
    5c44:	5e9b      	ldrsh	r3, [r3, r2]
    5c46:	111b      	asrs	r3, r3, #4
    5c48:	b21b      	sxth	r3, r3
    5c4a:	b2da      	uxtb	r2, r3
    5c4c:	230c      	movs	r3, #12
    5c4e:	18fb      	adds	r3, r7, r3
    5c50:	705a      	strb	r2, [r3, #1]
	buffer_temp_critical[2] = temp_int << 4;       //move to fit in register   
    5c52:	231e      	movs	r3, #30
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	881b      	ldrh	r3, [r3, #0]
    5c58:	b2db      	uxtb	r3, r3
    5c5a:	011b      	lsls	r3, r3, #4
    5c5c:	b2da      	uxtb	r2, r3
    5c5e:	230c      	movs	r3, #12
    5c60:	18fb      	adds	r3, r7, r3
    5c62:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    5c64:	4b46      	ldr	r3, [pc, #280]	; (5d80 <_mcp980x_set_critical+0x1c0>)
    5c66:	69b8      	ldr	r0, [r7, #24]
    5c68:	4798      	blx	r3
    5c6a:	0002      	movs	r2, r0
    5c6c:	4b45      	ldr	r3, [pc, #276]	; (5d84 <_mcp980x_set_critical+0x1c4>)
    5c6e:	0010      	movs	r0, r2
    5c70:	4798      	blx	r3
    5c72:	1c02      	adds	r2, r0, #0
    5c74:	4b44      	ldr	r3, [pc, #272]	; (5d88 <_mcp980x_set_critical+0x1c8>)
    5c76:	1c11      	adds	r1, r2, #0
    5c78:	69b8      	ldr	r0, [r7, #24]
    5c7a:	4798      	blx	r3
    5c7c:	1c03      	adds	r3, r0, #0
    5c7e:	1c1a      	adds	r2, r3, #0
    5c80:	4b42      	ldr	r3, [pc, #264]	; (5d8c <_mcp980x_set_critical+0x1cc>)
    5c82:	4943      	ldr	r1, [pc, #268]	; (5d90 <_mcp980x_set_critical+0x1d0>)
    5c84:	1c10      	adds	r0, r2, #0
    5c86:	4798      	blx	r3
    5c88:	1c03      	adds	r3, r0, #0
    5c8a:	1c1a      	adds	r2, r3, #0
    5c8c:	231e      	movs	r3, #30
    5c8e:	18fc      	adds	r4, r7, r3
    5c90:	4b3b      	ldr	r3, [pc, #236]	; (5d80 <_mcp980x_set_critical+0x1c0>)
    5c92:	1c10      	adds	r0, r2, #0
    5c94:	4798      	blx	r3
    5c96:	0003      	movs	r3, r0
    5c98:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    5c9a:	231e      	movs	r3, #30
    5c9c:	18fb      	adds	r3, r7, r3
    5c9e:	2200      	movs	r2, #0
    5ca0:	5e9b      	ldrsh	r3, [r3, r2]
    5ca2:	2b56      	cmp	r3, #86	; 0x56
    5ca4:	dc0f      	bgt.n	5cc6 <_mcp980x_set_critical+0x106>
    5ca6:	231e      	movs	r3, #30
    5ca8:	18fb      	adds	r3, r7, r3
    5caa:	2200      	movs	r2, #0
    5cac:	5e9b      	ldrsh	r3, [r3, r2]
    5cae:	2b3e      	cmp	r3, #62	; 0x3e
    5cb0:	dd09      	ble.n	5cc6 <_mcp980x_set_critical+0x106>
	{
		buffer_temp_critical[2]|=0b00001100;
    5cb2:	230c      	movs	r3, #12
    5cb4:	18fb      	adds	r3, r7, r3
    5cb6:	789b      	ldrb	r3, [r3, #2]
    5cb8:	220c      	movs	r2, #12
    5cba:	4313      	orrs	r3, r2
    5cbc:	b2da      	uxtb	r2, r3
    5cbe:	230c      	movs	r3, #12
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	709a      	strb	r2, [r3, #2]
    5cc4:	e02a      	b.n	5d1c <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    5cc6:	231e      	movs	r3, #30
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	2200      	movs	r2, #0
    5ccc:	5e9b      	ldrsh	r3, [r3, r2]
    5cce:	2b3d      	cmp	r3, #61	; 0x3d
    5cd0:	dc0f      	bgt.n	5cf2 <_mcp980x_set_critical+0x132>
    5cd2:	231e      	movs	r3, #30
    5cd4:	18fb      	adds	r3, r7, r3
    5cd6:	2200      	movs	r2, #0
    5cd8:	5e9b      	ldrsh	r3, [r3, r2]
    5cda:	2b30      	cmp	r3, #48	; 0x30
    5cdc:	dd09      	ble.n	5cf2 <_mcp980x_set_critical+0x132>
	{
		buffer_temp_critical[2]|=0b00001000;
    5cde:	230c      	movs	r3, #12
    5ce0:	18fb      	adds	r3, r7, r3
    5ce2:	789b      	ldrb	r3, [r3, #2]
    5ce4:	2208      	movs	r2, #8
    5ce6:	4313      	orrs	r3, r2
    5ce8:	b2da      	uxtb	r2, r3
    5cea:	230c      	movs	r3, #12
    5cec:	18fb      	adds	r3, r7, r3
    5cee:	709a      	strb	r2, [r3, #2]
    5cf0:	e014      	b.n	5d1c <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    5cf2:	231e      	movs	r3, #30
    5cf4:	18fb      	adds	r3, r7, r3
    5cf6:	2200      	movs	r2, #0
    5cf8:	5e9b      	ldrsh	r3, [r3, r2]
    5cfa:	2b2f      	cmp	r3, #47	; 0x2f
    5cfc:	dc0e      	bgt.n	5d1c <_mcp980x_set_critical+0x15c>
    5cfe:	231e      	movs	r3, #30
    5d00:	18fb      	adds	r3, r7, r3
    5d02:	2200      	movs	r2, #0
    5d04:	5e9b      	ldrsh	r3, [r3, r2]
    5d06:	2b0d      	cmp	r3, #13
    5d08:	dd08      	ble.n	5d1c <_mcp980x_set_critical+0x15c>
	{
		buffer_temp_critical[2]|=0b00000100;
    5d0a:	230c      	movs	r3, #12
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	789b      	ldrb	r3, [r3, #2]
    5d10:	2204      	movs	r2, #4
    5d12:	4313      	orrs	r3, r2
    5d14:	b2da      	uxtb	r2, r3
    5d16:	230c      	movs	r3, #12
    5d18:	18fb      	adds	r3, r7, r3
    5d1a:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_critical, 3);
    5d1c:	697b      	ldr	r3, [r7, #20]
    5d1e:	3314      	adds	r3, #20
    5d20:	220c      	movs	r2, #12
    5d22:	18b9      	adds	r1, r7, r2
    5d24:	2203      	movs	r2, #3
    5d26:	0018      	movs	r0, r3
    5d28:	4b1a      	ldr	r3, [pc, #104]	; (5d94 <_mcp980x_set_critical+0x1d4>)
    5d2a:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_critical, 1);
    5d2c:	697b      	ldr	r3, [r7, #20]
    5d2e:	3314      	adds	r3, #20
    5d30:	220c      	movs	r2, #12
    5d32:	18b9      	adds	r1, r7, r2
    5d34:	2201      	movs	r2, #1
    5d36:	0018      	movs	r0, r3
    5d38:	4b16      	ldr	r3, [pc, #88]	; (5d94 <_mcp980x_set_critical+0x1d4>)
    5d3a:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    5d3c:	697b      	ldr	r3, [r7, #20]
    5d3e:	3314      	adds	r3, #20
    5d40:	2210      	movs	r2, #16
    5d42:	18b9      	adds	r1, r7, r2
    5d44:	2202      	movs	r2, #2
    5d46:	0018      	movs	r0, r3
    5d48:	4b13      	ldr	r3, [pc, #76]	; (5d98 <_mcp980x_set_critical+0x1d8>)
    5d4a:	4798      	blx	r3
	if (buffer_temp_critical[1]!=buffer_read[0] || buffer_temp_critical[2]!=buffer_read[1])
    5d4c:	230c      	movs	r3, #12
    5d4e:	18fb      	adds	r3, r7, r3
    5d50:	785a      	ldrb	r2, [r3, #1]
    5d52:	2310      	movs	r3, #16
    5d54:	18fb      	adds	r3, r7, r3
    5d56:	781b      	ldrb	r3, [r3, #0]
    5d58:	429a      	cmp	r2, r3
    5d5a:	d107      	bne.n	5d6c <_mcp980x_set_critical+0x1ac>
    5d5c:	230c      	movs	r3, #12
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	789a      	ldrb	r2, [r3, #2]
    5d62:	2310      	movs	r3, #16
    5d64:	18fb      	adds	r3, r7, r3
    5d66:	785b      	ldrb	r3, [r3, #1]
    5d68:	429a      	cmp	r2, r3
    5d6a:	d002      	beq.n	5d72 <_mcp980x_set_critical+0x1b2>
	{
		return MCP980X_ERROR;
    5d6c:	2301      	movs	r3, #1
    5d6e:	425b      	negs	r3, r3
    5d70:	e000      	b.n	5d74 <_mcp980x_set_critical+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    5d72:	2300      	movs	r3, #0
}
    5d74:	0018      	movs	r0, r3
    5d76:	46bd      	mov	sp, r7
    5d78:	b009      	add	sp, #36	; 0x24
    5d7a:	bd90      	pop	{r4, r7, pc}
    5d7c:	00006d25 	.word	0x00006d25
    5d80:	00006529 	.word	0x00006529
    5d84:	00006569 	.word	0x00006569
    5d88:	000061f1 	.word	0x000061f1
    5d8c:	00005fb1 	.word	0x00005fb1
    5d90:	42c80000 	.word	0x42c80000
    5d94:	00001a65 	.word	0x00001a65
    5d98:	00001ab9 	.word	0x00001ab9

00005d9c <_mcp980x_set_resolution>:

int16_t _mcp980x_set_resolution(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set){
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b086      	sub	sp, #24
    5da0:	af00      	add	r7, sp, #0
    5da2:	6078      	str	r0, [r7, #4]
    5da4:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	617b      	str	r3, [r7, #20]
	
	uint8_t buffer_read[2]; 
	uint8_t buffer_resolution[3]; 
	

	memset(buffer_resolution,0,sizeof(buffer_resolution));
    5dac:	230c      	movs	r3, #12
    5dae:	18fb      	adds	r3, r7, r3
    5db0:	2203      	movs	r2, #3
    5db2:	2100      	movs	r1, #0
    5db4:	0018      	movs	r0, r3
    5db6:	4b1e      	ldr	r3, [pc, #120]	; (5e30 <_mcp980x_set_resolution+0x94>)
    5db8:	4798      	blx	r3

	buffer_resolution[0] = MCP980X_RESOLUTION_REG; 
    5dba:	230c      	movs	r3, #12
    5dbc:	18fb      	adds	r3, r7, r3
    5dbe:	2208      	movs	r2, #8
    5dc0:	701a      	strb	r2, [r3, #0]
	buffer_resolution[2] = temp_set->mcp980x->mcp980x_resolution;
    5dc2:	683b      	ldr	r3, [r7, #0]
    5dc4:	681b      	ldr	r3, [r3, #0]
    5dc6:	7b9a      	ldrb	r2, [r3, #14]
    5dc8:	230c      	movs	r3, #12
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	709a      	strb	r2, [r3, #2]
	 
	io_write(&descr->io, buffer_resolution, 3);
    5dce:	697b      	ldr	r3, [r7, #20]
    5dd0:	3314      	adds	r3, #20
    5dd2:	220c      	movs	r2, #12
    5dd4:	18b9      	adds	r1, r7, r2
    5dd6:	2203      	movs	r2, #3
    5dd8:	0018      	movs	r0, r3
    5dda:	4b16      	ldr	r3, [pc, #88]	; (5e34 <_mcp980x_set_resolution+0x98>)
    5ddc:	4798      	blx	r3
	
	io_write(&descr->io, buffer_resolution, 1);
    5dde:	697b      	ldr	r3, [r7, #20]
    5de0:	3314      	adds	r3, #20
    5de2:	220c      	movs	r2, #12
    5de4:	18b9      	adds	r1, r7, r2
    5de6:	2201      	movs	r2, #1
    5de8:	0018      	movs	r0, r3
    5dea:	4b12      	ldr	r3, [pc, #72]	; (5e34 <_mcp980x_set_resolution+0x98>)
    5dec:	4798      	blx	r3
	io_read(&descr->io, buffer_resolution, 2);
    5dee:	697b      	ldr	r3, [r7, #20]
    5df0:	3314      	adds	r3, #20
    5df2:	220c      	movs	r2, #12
    5df4:	18b9      	adds	r1, r7, r2
    5df6:	2202      	movs	r2, #2
    5df8:	0018      	movs	r0, r3
    5dfa:	4b0f      	ldr	r3, [pc, #60]	; (5e38 <_mcp980x_set_resolution+0x9c>)
    5dfc:	4798      	blx	r3
	if (buffer_resolution[1]!=buffer_read[0] || buffer_resolution[2]!=buffer_read[1])
    5dfe:	230c      	movs	r3, #12
    5e00:	18fb      	adds	r3, r7, r3
    5e02:	785a      	ldrb	r2, [r3, #1]
    5e04:	2310      	movs	r3, #16
    5e06:	18fb      	adds	r3, r7, r3
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	429a      	cmp	r2, r3
    5e0c:	d107      	bne.n	5e1e <_mcp980x_set_resolution+0x82>
    5e0e:	230c      	movs	r3, #12
    5e10:	18fb      	adds	r3, r7, r3
    5e12:	789a      	ldrb	r2, [r3, #2]
    5e14:	2310      	movs	r3, #16
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	785b      	ldrb	r3, [r3, #1]
    5e1a:	429a      	cmp	r2, r3
    5e1c:	d002      	beq.n	5e24 <_mcp980x_set_resolution+0x88>
	{
		return MCP980X_ERROR;
    5e1e:	2301      	movs	r3, #1
    5e20:	425b      	negs	r3, r3
    5e22:	e000      	b.n	5e26 <_mcp980x_set_resolution+0x8a>
	}
	return MCP980X_ERROR_NONE; 
    5e24:	2300      	movs	r3, #0
    5e26:	0018      	movs	r0, r3
    5e28:	46bd      	mov	sp, r7
    5e2a:	b006      	add	sp, #24
    5e2c:	bd80      	pop	{r7, pc}
    5e2e:	46c0      	nop			; (mov r8, r8)
    5e30:	00006d25 	.word	0x00006d25
    5e34:	00001a65 	.word	0x00001a65
    5e38:	00001ab9 	.word	0x00001ab9

00005e3c <temperature_sensor_construct>:
/**
 * \brief Construct abstract temperature sensor
 */
struct temperature_sensor *temperature_sensor_construct(struct temperature_sensor *const me, void *const io,
                                                        const struct temperature_sensor_interface *const interface)
{
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b084      	sub	sp, #16
    5e40:	af00      	add	r7, sp, #0
    5e42:	60f8      	str	r0, [r7, #12]
    5e44:	60b9      	str	r1, [r7, #8]
    5e46:	607a      	str	r2, [r7, #4]
	me->io        = io;
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	68ba      	ldr	r2, [r7, #8]
    5e4c:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	687a      	ldr	r2, [r7, #4]
    5e52:	605a      	str	r2, [r3, #4]

	return me;
    5e54:	68fb      	ldr	r3, [r7, #12]
}
    5e56:	0018      	movs	r0, r3
    5e58:	46bd      	mov	sp, r7
    5e5a:	b004      	add	sp, #16
    5e5c:	bd80      	pop	{r7, pc}
	...

00005e60 <temperature_sensors_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void temperature_sensors_init(void)
{
    5e60:	b580      	push	{r7, lr}
    5e62:	af00      	add	r7, sp, #0
	i2c_m_sync_enable(&I2C_OUT);
    5e64:	4b07      	ldr	r3, [pc, #28]	; (5e84 <temperature_sensors_init+0x24>)
    5e66:	0018      	movs	r0, r3
    5e68:	4b07      	ldr	r3, [pc, #28]	; (5e88 <temperature_sensors_init+0x28>)
    5e6a:	4798      	blx	r3
	TEMPERATURE_mcp980x = mcp980X_construct(&TEMPERATURE_SENSOR_descr_mcp.parent, &I2C_OUT, CONF_MCP980X_SENSOR_RESOLUTION);
    5e6c:	4905      	ldr	r1, [pc, #20]	; (5e84 <temperature_sensors_init+0x24>)
    5e6e:	4b07      	ldr	r3, [pc, #28]	; (5e8c <temperature_sensors_init+0x2c>)
    5e70:	2202      	movs	r2, #2
    5e72:	0018      	movs	r0, r3
    5e74:	4b06      	ldr	r3, [pc, #24]	; (5e90 <temperature_sensors_init+0x30>)
    5e76:	4798      	blx	r3
    5e78:	0002      	movs	r2, r0
    5e7a:	4b06      	ldr	r3, [pc, #24]	; (5e94 <temperature_sensors_init+0x34>)
    5e7c:	601a      	str	r2, [r3, #0]
	//read();
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	46bd      	mov	sp, r7
    5e82:	bd80      	pop	{r7, pc}
    5e84:	2000010c 	.word	0x2000010c
    5e88:	000016cd 	.word	0x000016cd
    5e8c:	200000b8 	.word	0x200000b8
    5e90:	00005491 	.word	0x00005491
    5e94:	200001c8 	.word	0x200001c8

00005e98 <__udivsi3>:
    5e98:	2200      	movs	r2, #0
    5e9a:	0843      	lsrs	r3, r0, #1
    5e9c:	428b      	cmp	r3, r1
    5e9e:	d374      	bcc.n	5f8a <__udivsi3+0xf2>
    5ea0:	0903      	lsrs	r3, r0, #4
    5ea2:	428b      	cmp	r3, r1
    5ea4:	d35f      	bcc.n	5f66 <__udivsi3+0xce>
    5ea6:	0a03      	lsrs	r3, r0, #8
    5ea8:	428b      	cmp	r3, r1
    5eaa:	d344      	bcc.n	5f36 <__udivsi3+0x9e>
    5eac:	0b03      	lsrs	r3, r0, #12
    5eae:	428b      	cmp	r3, r1
    5eb0:	d328      	bcc.n	5f04 <__udivsi3+0x6c>
    5eb2:	0c03      	lsrs	r3, r0, #16
    5eb4:	428b      	cmp	r3, r1
    5eb6:	d30d      	bcc.n	5ed4 <__udivsi3+0x3c>
    5eb8:	22ff      	movs	r2, #255	; 0xff
    5eba:	0209      	lsls	r1, r1, #8
    5ebc:	ba12      	rev	r2, r2
    5ebe:	0c03      	lsrs	r3, r0, #16
    5ec0:	428b      	cmp	r3, r1
    5ec2:	d302      	bcc.n	5eca <__udivsi3+0x32>
    5ec4:	1212      	asrs	r2, r2, #8
    5ec6:	0209      	lsls	r1, r1, #8
    5ec8:	d065      	beq.n	5f96 <__udivsi3+0xfe>
    5eca:	0b03      	lsrs	r3, r0, #12
    5ecc:	428b      	cmp	r3, r1
    5ece:	d319      	bcc.n	5f04 <__udivsi3+0x6c>
    5ed0:	e000      	b.n	5ed4 <__udivsi3+0x3c>
    5ed2:	0a09      	lsrs	r1, r1, #8
    5ed4:	0bc3      	lsrs	r3, r0, #15
    5ed6:	428b      	cmp	r3, r1
    5ed8:	d301      	bcc.n	5ede <__udivsi3+0x46>
    5eda:	03cb      	lsls	r3, r1, #15
    5edc:	1ac0      	subs	r0, r0, r3
    5ede:	4152      	adcs	r2, r2
    5ee0:	0b83      	lsrs	r3, r0, #14
    5ee2:	428b      	cmp	r3, r1
    5ee4:	d301      	bcc.n	5eea <__udivsi3+0x52>
    5ee6:	038b      	lsls	r3, r1, #14
    5ee8:	1ac0      	subs	r0, r0, r3
    5eea:	4152      	adcs	r2, r2
    5eec:	0b43      	lsrs	r3, r0, #13
    5eee:	428b      	cmp	r3, r1
    5ef0:	d301      	bcc.n	5ef6 <__udivsi3+0x5e>
    5ef2:	034b      	lsls	r3, r1, #13
    5ef4:	1ac0      	subs	r0, r0, r3
    5ef6:	4152      	adcs	r2, r2
    5ef8:	0b03      	lsrs	r3, r0, #12
    5efa:	428b      	cmp	r3, r1
    5efc:	d301      	bcc.n	5f02 <__udivsi3+0x6a>
    5efe:	030b      	lsls	r3, r1, #12
    5f00:	1ac0      	subs	r0, r0, r3
    5f02:	4152      	adcs	r2, r2
    5f04:	0ac3      	lsrs	r3, r0, #11
    5f06:	428b      	cmp	r3, r1
    5f08:	d301      	bcc.n	5f0e <__udivsi3+0x76>
    5f0a:	02cb      	lsls	r3, r1, #11
    5f0c:	1ac0      	subs	r0, r0, r3
    5f0e:	4152      	adcs	r2, r2
    5f10:	0a83      	lsrs	r3, r0, #10
    5f12:	428b      	cmp	r3, r1
    5f14:	d301      	bcc.n	5f1a <__udivsi3+0x82>
    5f16:	028b      	lsls	r3, r1, #10
    5f18:	1ac0      	subs	r0, r0, r3
    5f1a:	4152      	adcs	r2, r2
    5f1c:	0a43      	lsrs	r3, r0, #9
    5f1e:	428b      	cmp	r3, r1
    5f20:	d301      	bcc.n	5f26 <__udivsi3+0x8e>
    5f22:	024b      	lsls	r3, r1, #9
    5f24:	1ac0      	subs	r0, r0, r3
    5f26:	4152      	adcs	r2, r2
    5f28:	0a03      	lsrs	r3, r0, #8
    5f2a:	428b      	cmp	r3, r1
    5f2c:	d301      	bcc.n	5f32 <__udivsi3+0x9a>
    5f2e:	020b      	lsls	r3, r1, #8
    5f30:	1ac0      	subs	r0, r0, r3
    5f32:	4152      	adcs	r2, r2
    5f34:	d2cd      	bcs.n	5ed2 <__udivsi3+0x3a>
    5f36:	09c3      	lsrs	r3, r0, #7
    5f38:	428b      	cmp	r3, r1
    5f3a:	d301      	bcc.n	5f40 <__udivsi3+0xa8>
    5f3c:	01cb      	lsls	r3, r1, #7
    5f3e:	1ac0      	subs	r0, r0, r3
    5f40:	4152      	adcs	r2, r2
    5f42:	0983      	lsrs	r3, r0, #6
    5f44:	428b      	cmp	r3, r1
    5f46:	d301      	bcc.n	5f4c <__udivsi3+0xb4>
    5f48:	018b      	lsls	r3, r1, #6
    5f4a:	1ac0      	subs	r0, r0, r3
    5f4c:	4152      	adcs	r2, r2
    5f4e:	0943      	lsrs	r3, r0, #5
    5f50:	428b      	cmp	r3, r1
    5f52:	d301      	bcc.n	5f58 <__udivsi3+0xc0>
    5f54:	014b      	lsls	r3, r1, #5
    5f56:	1ac0      	subs	r0, r0, r3
    5f58:	4152      	adcs	r2, r2
    5f5a:	0903      	lsrs	r3, r0, #4
    5f5c:	428b      	cmp	r3, r1
    5f5e:	d301      	bcc.n	5f64 <__udivsi3+0xcc>
    5f60:	010b      	lsls	r3, r1, #4
    5f62:	1ac0      	subs	r0, r0, r3
    5f64:	4152      	adcs	r2, r2
    5f66:	08c3      	lsrs	r3, r0, #3
    5f68:	428b      	cmp	r3, r1
    5f6a:	d301      	bcc.n	5f70 <__udivsi3+0xd8>
    5f6c:	00cb      	lsls	r3, r1, #3
    5f6e:	1ac0      	subs	r0, r0, r3
    5f70:	4152      	adcs	r2, r2
    5f72:	0883      	lsrs	r3, r0, #2
    5f74:	428b      	cmp	r3, r1
    5f76:	d301      	bcc.n	5f7c <__udivsi3+0xe4>
    5f78:	008b      	lsls	r3, r1, #2
    5f7a:	1ac0      	subs	r0, r0, r3
    5f7c:	4152      	adcs	r2, r2
    5f7e:	0843      	lsrs	r3, r0, #1
    5f80:	428b      	cmp	r3, r1
    5f82:	d301      	bcc.n	5f88 <__udivsi3+0xf0>
    5f84:	004b      	lsls	r3, r1, #1
    5f86:	1ac0      	subs	r0, r0, r3
    5f88:	4152      	adcs	r2, r2
    5f8a:	1a41      	subs	r1, r0, r1
    5f8c:	d200      	bcs.n	5f90 <__udivsi3+0xf8>
    5f8e:	4601      	mov	r1, r0
    5f90:	4152      	adcs	r2, r2
    5f92:	4610      	mov	r0, r2
    5f94:	4770      	bx	lr
    5f96:	e7ff      	b.n	5f98 <__udivsi3+0x100>
    5f98:	b501      	push	{r0, lr}
    5f9a:	2000      	movs	r0, #0
    5f9c:	f000 f806 	bl	5fac <__aeabi_idiv0>
    5fa0:	bd02      	pop	{r1, pc}
    5fa2:	46c0      	nop			; (mov r8, r8)

00005fa4 <__aeabi_uidivmod>:
    5fa4:	2900      	cmp	r1, #0
    5fa6:	d0f7      	beq.n	5f98 <__udivsi3+0x100>
    5fa8:	e776      	b.n	5e98 <__udivsi3>
    5faa:	4770      	bx	lr

00005fac <__aeabi_idiv0>:
    5fac:	4770      	bx	lr
    5fae:	46c0      	nop			; (mov r8, r8)

00005fb0 <__aeabi_fmul>:
    5fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fb2:	4657      	mov	r7, sl
    5fb4:	464e      	mov	r6, r9
    5fb6:	4645      	mov	r5, r8
    5fb8:	46de      	mov	lr, fp
    5fba:	b5e0      	push	{r5, r6, r7, lr}
    5fbc:	0247      	lsls	r7, r0, #9
    5fbe:	0046      	lsls	r6, r0, #1
    5fc0:	4688      	mov	r8, r1
    5fc2:	0a7f      	lsrs	r7, r7, #9
    5fc4:	0e36      	lsrs	r6, r6, #24
    5fc6:	0fc4      	lsrs	r4, r0, #31
    5fc8:	2e00      	cmp	r6, #0
    5fca:	d047      	beq.n	605c <__aeabi_fmul+0xac>
    5fcc:	2eff      	cmp	r6, #255	; 0xff
    5fce:	d024      	beq.n	601a <__aeabi_fmul+0x6a>
    5fd0:	00fb      	lsls	r3, r7, #3
    5fd2:	2780      	movs	r7, #128	; 0x80
    5fd4:	04ff      	lsls	r7, r7, #19
    5fd6:	431f      	orrs	r7, r3
    5fd8:	2300      	movs	r3, #0
    5fda:	4699      	mov	r9, r3
    5fdc:	469a      	mov	sl, r3
    5fde:	3e7f      	subs	r6, #127	; 0x7f
    5fe0:	4643      	mov	r3, r8
    5fe2:	025d      	lsls	r5, r3, #9
    5fe4:	0058      	lsls	r0, r3, #1
    5fe6:	0fdb      	lsrs	r3, r3, #31
    5fe8:	0a6d      	lsrs	r5, r5, #9
    5fea:	0e00      	lsrs	r0, r0, #24
    5fec:	4698      	mov	r8, r3
    5fee:	d043      	beq.n	6078 <__aeabi_fmul+0xc8>
    5ff0:	28ff      	cmp	r0, #255	; 0xff
    5ff2:	d03b      	beq.n	606c <__aeabi_fmul+0xbc>
    5ff4:	00eb      	lsls	r3, r5, #3
    5ff6:	2580      	movs	r5, #128	; 0x80
    5ff8:	2200      	movs	r2, #0
    5ffa:	04ed      	lsls	r5, r5, #19
    5ffc:	431d      	orrs	r5, r3
    5ffe:	387f      	subs	r0, #127	; 0x7f
    6000:	1836      	adds	r6, r6, r0
    6002:	1c73      	adds	r3, r6, #1
    6004:	4641      	mov	r1, r8
    6006:	469b      	mov	fp, r3
    6008:	464b      	mov	r3, r9
    600a:	4061      	eors	r1, r4
    600c:	4313      	orrs	r3, r2
    600e:	2b0f      	cmp	r3, #15
    6010:	d864      	bhi.n	60dc <__aeabi_fmul+0x12c>
    6012:	4875      	ldr	r0, [pc, #468]	; (61e8 <__aeabi_fmul+0x238>)
    6014:	009b      	lsls	r3, r3, #2
    6016:	58c3      	ldr	r3, [r0, r3]
    6018:	469f      	mov	pc, r3
    601a:	2f00      	cmp	r7, #0
    601c:	d142      	bne.n	60a4 <__aeabi_fmul+0xf4>
    601e:	2308      	movs	r3, #8
    6020:	4699      	mov	r9, r3
    6022:	3b06      	subs	r3, #6
    6024:	26ff      	movs	r6, #255	; 0xff
    6026:	469a      	mov	sl, r3
    6028:	e7da      	b.n	5fe0 <__aeabi_fmul+0x30>
    602a:	4641      	mov	r1, r8
    602c:	2a02      	cmp	r2, #2
    602e:	d028      	beq.n	6082 <__aeabi_fmul+0xd2>
    6030:	2a03      	cmp	r2, #3
    6032:	d100      	bne.n	6036 <__aeabi_fmul+0x86>
    6034:	e0ce      	b.n	61d4 <__aeabi_fmul+0x224>
    6036:	2a01      	cmp	r2, #1
    6038:	d000      	beq.n	603c <__aeabi_fmul+0x8c>
    603a:	e0ac      	b.n	6196 <__aeabi_fmul+0x1e6>
    603c:	4011      	ands	r1, r2
    603e:	2000      	movs	r0, #0
    6040:	2200      	movs	r2, #0
    6042:	b2cc      	uxtb	r4, r1
    6044:	0240      	lsls	r0, r0, #9
    6046:	05d2      	lsls	r2, r2, #23
    6048:	0a40      	lsrs	r0, r0, #9
    604a:	07e4      	lsls	r4, r4, #31
    604c:	4310      	orrs	r0, r2
    604e:	4320      	orrs	r0, r4
    6050:	bc3c      	pop	{r2, r3, r4, r5}
    6052:	4690      	mov	r8, r2
    6054:	4699      	mov	r9, r3
    6056:	46a2      	mov	sl, r4
    6058:	46ab      	mov	fp, r5
    605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    605c:	2f00      	cmp	r7, #0
    605e:	d115      	bne.n	608c <__aeabi_fmul+0xdc>
    6060:	2304      	movs	r3, #4
    6062:	4699      	mov	r9, r3
    6064:	3b03      	subs	r3, #3
    6066:	2600      	movs	r6, #0
    6068:	469a      	mov	sl, r3
    606a:	e7b9      	b.n	5fe0 <__aeabi_fmul+0x30>
    606c:	20ff      	movs	r0, #255	; 0xff
    606e:	2202      	movs	r2, #2
    6070:	2d00      	cmp	r5, #0
    6072:	d0c5      	beq.n	6000 <__aeabi_fmul+0x50>
    6074:	2203      	movs	r2, #3
    6076:	e7c3      	b.n	6000 <__aeabi_fmul+0x50>
    6078:	2d00      	cmp	r5, #0
    607a:	d119      	bne.n	60b0 <__aeabi_fmul+0x100>
    607c:	2000      	movs	r0, #0
    607e:	2201      	movs	r2, #1
    6080:	e7be      	b.n	6000 <__aeabi_fmul+0x50>
    6082:	2401      	movs	r4, #1
    6084:	22ff      	movs	r2, #255	; 0xff
    6086:	400c      	ands	r4, r1
    6088:	2000      	movs	r0, #0
    608a:	e7db      	b.n	6044 <__aeabi_fmul+0x94>
    608c:	0038      	movs	r0, r7
    608e:	f000 fe07 	bl	6ca0 <__clzsi2>
    6092:	2676      	movs	r6, #118	; 0x76
    6094:	1f43      	subs	r3, r0, #5
    6096:	409f      	lsls	r7, r3
    6098:	2300      	movs	r3, #0
    609a:	4276      	negs	r6, r6
    609c:	1a36      	subs	r6, r6, r0
    609e:	4699      	mov	r9, r3
    60a0:	469a      	mov	sl, r3
    60a2:	e79d      	b.n	5fe0 <__aeabi_fmul+0x30>
    60a4:	230c      	movs	r3, #12
    60a6:	4699      	mov	r9, r3
    60a8:	3b09      	subs	r3, #9
    60aa:	26ff      	movs	r6, #255	; 0xff
    60ac:	469a      	mov	sl, r3
    60ae:	e797      	b.n	5fe0 <__aeabi_fmul+0x30>
    60b0:	0028      	movs	r0, r5
    60b2:	f000 fdf5 	bl	6ca0 <__clzsi2>
    60b6:	1f43      	subs	r3, r0, #5
    60b8:	409d      	lsls	r5, r3
    60ba:	2376      	movs	r3, #118	; 0x76
    60bc:	425b      	negs	r3, r3
    60be:	1a18      	subs	r0, r3, r0
    60c0:	2200      	movs	r2, #0
    60c2:	e79d      	b.n	6000 <__aeabi_fmul+0x50>
    60c4:	2080      	movs	r0, #128	; 0x80
    60c6:	2400      	movs	r4, #0
    60c8:	03c0      	lsls	r0, r0, #15
    60ca:	22ff      	movs	r2, #255	; 0xff
    60cc:	e7ba      	b.n	6044 <__aeabi_fmul+0x94>
    60ce:	003d      	movs	r5, r7
    60d0:	4652      	mov	r2, sl
    60d2:	e7ab      	b.n	602c <__aeabi_fmul+0x7c>
    60d4:	003d      	movs	r5, r7
    60d6:	0021      	movs	r1, r4
    60d8:	4652      	mov	r2, sl
    60da:	e7a7      	b.n	602c <__aeabi_fmul+0x7c>
    60dc:	0c3b      	lsrs	r3, r7, #16
    60de:	469c      	mov	ip, r3
    60e0:	042a      	lsls	r2, r5, #16
    60e2:	0c12      	lsrs	r2, r2, #16
    60e4:	0c2b      	lsrs	r3, r5, #16
    60e6:	0014      	movs	r4, r2
    60e8:	4660      	mov	r0, ip
    60ea:	4665      	mov	r5, ip
    60ec:	043f      	lsls	r7, r7, #16
    60ee:	0c3f      	lsrs	r7, r7, #16
    60f0:	437c      	muls	r4, r7
    60f2:	4342      	muls	r2, r0
    60f4:	435d      	muls	r5, r3
    60f6:	437b      	muls	r3, r7
    60f8:	0c27      	lsrs	r7, r4, #16
    60fa:	189b      	adds	r3, r3, r2
    60fc:	18ff      	adds	r7, r7, r3
    60fe:	42ba      	cmp	r2, r7
    6100:	d903      	bls.n	610a <__aeabi_fmul+0x15a>
    6102:	2380      	movs	r3, #128	; 0x80
    6104:	025b      	lsls	r3, r3, #9
    6106:	469c      	mov	ip, r3
    6108:	4465      	add	r5, ip
    610a:	0424      	lsls	r4, r4, #16
    610c:	043a      	lsls	r2, r7, #16
    610e:	0c24      	lsrs	r4, r4, #16
    6110:	1912      	adds	r2, r2, r4
    6112:	0193      	lsls	r3, r2, #6
    6114:	1e5c      	subs	r4, r3, #1
    6116:	41a3      	sbcs	r3, r4
    6118:	0c3f      	lsrs	r7, r7, #16
    611a:	0e92      	lsrs	r2, r2, #26
    611c:	197d      	adds	r5, r7, r5
    611e:	431a      	orrs	r2, r3
    6120:	01ad      	lsls	r5, r5, #6
    6122:	4315      	orrs	r5, r2
    6124:	012b      	lsls	r3, r5, #4
    6126:	d504      	bpl.n	6132 <__aeabi_fmul+0x182>
    6128:	2301      	movs	r3, #1
    612a:	465e      	mov	r6, fp
    612c:	086a      	lsrs	r2, r5, #1
    612e:	401d      	ands	r5, r3
    6130:	4315      	orrs	r5, r2
    6132:	0032      	movs	r2, r6
    6134:	327f      	adds	r2, #127	; 0x7f
    6136:	2a00      	cmp	r2, #0
    6138:	dd25      	ble.n	6186 <__aeabi_fmul+0x1d6>
    613a:	076b      	lsls	r3, r5, #29
    613c:	d004      	beq.n	6148 <__aeabi_fmul+0x198>
    613e:	230f      	movs	r3, #15
    6140:	402b      	ands	r3, r5
    6142:	2b04      	cmp	r3, #4
    6144:	d000      	beq.n	6148 <__aeabi_fmul+0x198>
    6146:	3504      	adds	r5, #4
    6148:	012b      	lsls	r3, r5, #4
    614a:	d503      	bpl.n	6154 <__aeabi_fmul+0x1a4>
    614c:	0032      	movs	r2, r6
    614e:	4b27      	ldr	r3, [pc, #156]	; (61ec <__aeabi_fmul+0x23c>)
    6150:	3280      	adds	r2, #128	; 0x80
    6152:	401d      	ands	r5, r3
    6154:	2afe      	cmp	r2, #254	; 0xfe
    6156:	dc94      	bgt.n	6082 <__aeabi_fmul+0xd2>
    6158:	2401      	movs	r4, #1
    615a:	01a8      	lsls	r0, r5, #6
    615c:	0a40      	lsrs	r0, r0, #9
    615e:	b2d2      	uxtb	r2, r2
    6160:	400c      	ands	r4, r1
    6162:	e76f      	b.n	6044 <__aeabi_fmul+0x94>
    6164:	2080      	movs	r0, #128	; 0x80
    6166:	03c0      	lsls	r0, r0, #15
    6168:	4207      	tst	r7, r0
    616a:	d007      	beq.n	617c <__aeabi_fmul+0x1cc>
    616c:	4205      	tst	r5, r0
    616e:	d105      	bne.n	617c <__aeabi_fmul+0x1cc>
    6170:	4328      	orrs	r0, r5
    6172:	0240      	lsls	r0, r0, #9
    6174:	0a40      	lsrs	r0, r0, #9
    6176:	4644      	mov	r4, r8
    6178:	22ff      	movs	r2, #255	; 0xff
    617a:	e763      	b.n	6044 <__aeabi_fmul+0x94>
    617c:	4338      	orrs	r0, r7
    617e:	0240      	lsls	r0, r0, #9
    6180:	0a40      	lsrs	r0, r0, #9
    6182:	22ff      	movs	r2, #255	; 0xff
    6184:	e75e      	b.n	6044 <__aeabi_fmul+0x94>
    6186:	2401      	movs	r4, #1
    6188:	1aa3      	subs	r3, r4, r2
    618a:	2b1b      	cmp	r3, #27
    618c:	dd05      	ble.n	619a <__aeabi_fmul+0x1ea>
    618e:	400c      	ands	r4, r1
    6190:	2200      	movs	r2, #0
    6192:	2000      	movs	r0, #0
    6194:	e756      	b.n	6044 <__aeabi_fmul+0x94>
    6196:	465e      	mov	r6, fp
    6198:	e7cb      	b.n	6132 <__aeabi_fmul+0x182>
    619a:	002a      	movs	r2, r5
    619c:	2020      	movs	r0, #32
    619e:	40da      	lsrs	r2, r3
    61a0:	1ac3      	subs	r3, r0, r3
    61a2:	409d      	lsls	r5, r3
    61a4:	002b      	movs	r3, r5
    61a6:	1e5d      	subs	r5, r3, #1
    61a8:	41ab      	sbcs	r3, r5
    61aa:	4313      	orrs	r3, r2
    61ac:	075a      	lsls	r2, r3, #29
    61ae:	d004      	beq.n	61ba <__aeabi_fmul+0x20a>
    61b0:	220f      	movs	r2, #15
    61b2:	401a      	ands	r2, r3
    61b4:	2a04      	cmp	r2, #4
    61b6:	d000      	beq.n	61ba <__aeabi_fmul+0x20a>
    61b8:	3304      	adds	r3, #4
    61ba:	015a      	lsls	r2, r3, #5
    61bc:	d504      	bpl.n	61c8 <__aeabi_fmul+0x218>
    61be:	2401      	movs	r4, #1
    61c0:	2201      	movs	r2, #1
    61c2:	400c      	ands	r4, r1
    61c4:	2000      	movs	r0, #0
    61c6:	e73d      	b.n	6044 <__aeabi_fmul+0x94>
    61c8:	2401      	movs	r4, #1
    61ca:	019b      	lsls	r3, r3, #6
    61cc:	0a58      	lsrs	r0, r3, #9
    61ce:	400c      	ands	r4, r1
    61d0:	2200      	movs	r2, #0
    61d2:	e737      	b.n	6044 <__aeabi_fmul+0x94>
    61d4:	2080      	movs	r0, #128	; 0x80
    61d6:	2401      	movs	r4, #1
    61d8:	03c0      	lsls	r0, r0, #15
    61da:	4328      	orrs	r0, r5
    61dc:	0240      	lsls	r0, r0, #9
    61de:	0a40      	lsrs	r0, r0, #9
    61e0:	400c      	ands	r4, r1
    61e2:	22ff      	movs	r2, #255	; 0xff
    61e4:	e72e      	b.n	6044 <__aeabi_fmul+0x94>
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	0000702c 	.word	0x0000702c
    61ec:	f7ffffff 	.word	0xf7ffffff

000061f0 <__aeabi_fsub>:
    61f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61f2:	464f      	mov	r7, r9
    61f4:	46d6      	mov	lr, sl
    61f6:	4646      	mov	r6, r8
    61f8:	0044      	lsls	r4, r0, #1
    61fa:	b5c0      	push	{r6, r7, lr}
    61fc:	0fc2      	lsrs	r2, r0, #31
    61fe:	0247      	lsls	r7, r0, #9
    6200:	0248      	lsls	r0, r1, #9
    6202:	0a40      	lsrs	r0, r0, #9
    6204:	4684      	mov	ip, r0
    6206:	4666      	mov	r6, ip
    6208:	0a7b      	lsrs	r3, r7, #9
    620a:	0048      	lsls	r0, r1, #1
    620c:	0fc9      	lsrs	r1, r1, #31
    620e:	469a      	mov	sl, r3
    6210:	0e24      	lsrs	r4, r4, #24
    6212:	0015      	movs	r5, r2
    6214:	00db      	lsls	r3, r3, #3
    6216:	0e00      	lsrs	r0, r0, #24
    6218:	4689      	mov	r9, r1
    621a:	00f6      	lsls	r6, r6, #3
    621c:	28ff      	cmp	r0, #255	; 0xff
    621e:	d100      	bne.n	6222 <__aeabi_fsub+0x32>
    6220:	e08f      	b.n	6342 <__aeabi_fsub+0x152>
    6222:	2101      	movs	r1, #1
    6224:	464f      	mov	r7, r9
    6226:	404f      	eors	r7, r1
    6228:	0039      	movs	r1, r7
    622a:	4291      	cmp	r1, r2
    622c:	d066      	beq.n	62fc <__aeabi_fsub+0x10c>
    622e:	1a22      	subs	r2, r4, r0
    6230:	2a00      	cmp	r2, #0
    6232:	dc00      	bgt.n	6236 <__aeabi_fsub+0x46>
    6234:	e09d      	b.n	6372 <__aeabi_fsub+0x182>
    6236:	2800      	cmp	r0, #0
    6238:	d13d      	bne.n	62b6 <__aeabi_fsub+0xc6>
    623a:	2e00      	cmp	r6, #0
    623c:	d100      	bne.n	6240 <__aeabi_fsub+0x50>
    623e:	e08b      	b.n	6358 <__aeabi_fsub+0x168>
    6240:	1e51      	subs	r1, r2, #1
    6242:	2900      	cmp	r1, #0
    6244:	d000      	beq.n	6248 <__aeabi_fsub+0x58>
    6246:	e0b5      	b.n	63b4 <__aeabi_fsub+0x1c4>
    6248:	2401      	movs	r4, #1
    624a:	1b9b      	subs	r3, r3, r6
    624c:	015a      	lsls	r2, r3, #5
    624e:	d544      	bpl.n	62da <__aeabi_fsub+0xea>
    6250:	019b      	lsls	r3, r3, #6
    6252:	099f      	lsrs	r7, r3, #6
    6254:	0038      	movs	r0, r7
    6256:	f000 fd23 	bl	6ca0 <__clzsi2>
    625a:	3805      	subs	r0, #5
    625c:	4087      	lsls	r7, r0
    625e:	4284      	cmp	r4, r0
    6260:	dd00      	ble.n	6264 <__aeabi_fsub+0x74>
    6262:	e096      	b.n	6392 <__aeabi_fsub+0x1a2>
    6264:	1b04      	subs	r4, r0, r4
    6266:	003a      	movs	r2, r7
    6268:	2020      	movs	r0, #32
    626a:	3401      	adds	r4, #1
    626c:	40e2      	lsrs	r2, r4
    626e:	1b04      	subs	r4, r0, r4
    6270:	40a7      	lsls	r7, r4
    6272:	003b      	movs	r3, r7
    6274:	1e5f      	subs	r7, r3, #1
    6276:	41bb      	sbcs	r3, r7
    6278:	2400      	movs	r4, #0
    627a:	4313      	orrs	r3, r2
    627c:	075a      	lsls	r2, r3, #29
    627e:	d004      	beq.n	628a <__aeabi_fsub+0x9a>
    6280:	220f      	movs	r2, #15
    6282:	401a      	ands	r2, r3
    6284:	2a04      	cmp	r2, #4
    6286:	d000      	beq.n	628a <__aeabi_fsub+0x9a>
    6288:	3304      	adds	r3, #4
    628a:	015a      	lsls	r2, r3, #5
    628c:	d527      	bpl.n	62de <__aeabi_fsub+0xee>
    628e:	3401      	adds	r4, #1
    6290:	2cff      	cmp	r4, #255	; 0xff
    6292:	d100      	bne.n	6296 <__aeabi_fsub+0xa6>
    6294:	e079      	b.n	638a <__aeabi_fsub+0x19a>
    6296:	2201      	movs	r2, #1
    6298:	019b      	lsls	r3, r3, #6
    629a:	0a5b      	lsrs	r3, r3, #9
    629c:	b2e4      	uxtb	r4, r4
    629e:	402a      	ands	r2, r5
    62a0:	025b      	lsls	r3, r3, #9
    62a2:	05e4      	lsls	r4, r4, #23
    62a4:	0a58      	lsrs	r0, r3, #9
    62a6:	07d2      	lsls	r2, r2, #31
    62a8:	4320      	orrs	r0, r4
    62aa:	4310      	orrs	r0, r2
    62ac:	bc1c      	pop	{r2, r3, r4}
    62ae:	4690      	mov	r8, r2
    62b0:	4699      	mov	r9, r3
    62b2:	46a2      	mov	sl, r4
    62b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62b6:	2cff      	cmp	r4, #255	; 0xff
    62b8:	d0e0      	beq.n	627c <__aeabi_fsub+0x8c>
    62ba:	2180      	movs	r1, #128	; 0x80
    62bc:	04c9      	lsls	r1, r1, #19
    62be:	430e      	orrs	r6, r1
    62c0:	2a1b      	cmp	r2, #27
    62c2:	dc7b      	bgt.n	63bc <__aeabi_fsub+0x1cc>
    62c4:	0031      	movs	r1, r6
    62c6:	2020      	movs	r0, #32
    62c8:	40d1      	lsrs	r1, r2
    62ca:	1a82      	subs	r2, r0, r2
    62cc:	4096      	lsls	r6, r2
    62ce:	1e72      	subs	r2, r6, #1
    62d0:	4196      	sbcs	r6, r2
    62d2:	430e      	orrs	r6, r1
    62d4:	1b9b      	subs	r3, r3, r6
    62d6:	015a      	lsls	r2, r3, #5
    62d8:	d4ba      	bmi.n	6250 <__aeabi_fsub+0x60>
    62da:	075a      	lsls	r2, r3, #29
    62dc:	d1d0      	bne.n	6280 <__aeabi_fsub+0x90>
    62de:	2201      	movs	r2, #1
    62e0:	08df      	lsrs	r7, r3, #3
    62e2:	402a      	ands	r2, r5
    62e4:	2cff      	cmp	r4, #255	; 0xff
    62e6:	d133      	bne.n	6350 <__aeabi_fsub+0x160>
    62e8:	2f00      	cmp	r7, #0
    62ea:	d100      	bne.n	62ee <__aeabi_fsub+0xfe>
    62ec:	e0a8      	b.n	6440 <__aeabi_fsub+0x250>
    62ee:	2380      	movs	r3, #128	; 0x80
    62f0:	03db      	lsls	r3, r3, #15
    62f2:	433b      	orrs	r3, r7
    62f4:	025b      	lsls	r3, r3, #9
    62f6:	0a5b      	lsrs	r3, r3, #9
    62f8:	24ff      	movs	r4, #255	; 0xff
    62fa:	e7d1      	b.n	62a0 <__aeabi_fsub+0xb0>
    62fc:	1a21      	subs	r1, r4, r0
    62fe:	2900      	cmp	r1, #0
    6300:	dd4c      	ble.n	639c <__aeabi_fsub+0x1ac>
    6302:	2800      	cmp	r0, #0
    6304:	d02a      	beq.n	635c <__aeabi_fsub+0x16c>
    6306:	2cff      	cmp	r4, #255	; 0xff
    6308:	d0b8      	beq.n	627c <__aeabi_fsub+0x8c>
    630a:	2080      	movs	r0, #128	; 0x80
    630c:	04c0      	lsls	r0, r0, #19
    630e:	4306      	orrs	r6, r0
    6310:	291b      	cmp	r1, #27
    6312:	dd00      	ble.n	6316 <__aeabi_fsub+0x126>
    6314:	e0af      	b.n	6476 <__aeabi_fsub+0x286>
    6316:	0030      	movs	r0, r6
    6318:	2720      	movs	r7, #32
    631a:	40c8      	lsrs	r0, r1
    631c:	1a79      	subs	r1, r7, r1
    631e:	408e      	lsls	r6, r1
    6320:	1e71      	subs	r1, r6, #1
    6322:	418e      	sbcs	r6, r1
    6324:	4306      	orrs	r6, r0
    6326:	199b      	adds	r3, r3, r6
    6328:	0159      	lsls	r1, r3, #5
    632a:	d5d6      	bpl.n	62da <__aeabi_fsub+0xea>
    632c:	3401      	adds	r4, #1
    632e:	2cff      	cmp	r4, #255	; 0xff
    6330:	d100      	bne.n	6334 <__aeabi_fsub+0x144>
    6332:	e085      	b.n	6440 <__aeabi_fsub+0x250>
    6334:	2201      	movs	r2, #1
    6336:	497a      	ldr	r1, [pc, #488]	; (6520 <__aeabi_fsub+0x330>)
    6338:	401a      	ands	r2, r3
    633a:	085b      	lsrs	r3, r3, #1
    633c:	400b      	ands	r3, r1
    633e:	4313      	orrs	r3, r2
    6340:	e79c      	b.n	627c <__aeabi_fsub+0x8c>
    6342:	2e00      	cmp	r6, #0
    6344:	d000      	beq.n	6348 <__aeabi_fsub+0x158>
    6346:	e770      	b.n	622a <__aeabi_fsub+0x3a>
    6348:	e76b      	b.n	6222 <__aeabi_fsub+0x32>
    634a:	1e3b      	subs	r3, r7, #0
    634c:	d1c5      	bne.n	62da <__aeabi_fsub+0xea>
    634e:	2200      	movs	r2, #0
    6350:	027b      	lsls	r3, r7, #9
    6352:	0a5b      	lsrs	r3, r3, #9
    6354:	b2e4      	uxtb	r4, r4
    6356:	e7a3      	b.n	62a0 <__aeabi_fsub+0xb0>
    6358:	0014      	movs	r4, r2
    635a:	e78f      	b.n	627c <__aeabi_fsub+0x8c>
    635c:	2e00      	cmp	r6, #0
    635e:	d04d      	beq.n	63fc <__aeabi_fsub+0x20c>
    6360:	1e48      	subs	r0, r1, #1
    6362:	2800      	cmp	r0, #0
    6364:	d157      	bne.n	6416 <__aeabi_fsub+0x226>
    6366:	199b      	adds	r3, r3, r6
    6368:	2401      	movs	r4, #1
    636a:	015a      	lsls	r2, r3, #5
    636c:	d5b5      	bpl.n	62da <__aeabi_fsub+0xea>
    636e:	2402      	movs	r4, #2
    6370:	e7e0      	b.n	6334 <__aeabi_fsub+0x144>
    6372:	2a00      	cmp	r2, #0
    6374:	d125      	bne.n	63c2 <__aeabi_fsub+0x1d2>
    6376:	1c62      	adds	r2, r4, #1
    6378:	b2d2      	uxtb	r2, r2
    637a:	2a01      	cmp	r2, #1
    637c:	dd72      	ble.n	6464 <__aeabi_fsub+0x274>
    637e:	1b9f      	subs	r7, r3, r6
    6380:	017a      	lsls	r2, r7, #5
    6382:	d535      	bpl.n	63f0 <__aeabi_fsub+0x200>
    6384:	1af7      	subs	r7, r6, r3
    6386:	000d      	movs	r5, r1
    6388:	e764      	b.n	6254 <__aeabi_fsub+0x64>
    638a:	2201      	movs	r2, #1
    638c:	2300      	movs	r3, #0
    638e:	402a      	ands	r2, r5
    6390:	e786      	b.n	62a0 <__aeabi_fsub+0xb0>
    6392:	003b      	movs	r3, r7
    6394:	4a63      	ldr	r2, [pc, #396]	; (6524 <__aeabi_fsub+0x334>)
    6396:	1a24      	subs	r4, r4, r0
    6398:	4013      	ands	r3, r2
    639a:	e76f      	b.n	627c <__aeabi_fsub+0x8c>
    639c:	2900      	cmp	r1, #0
    639e:	d16c      	bne.n	647a <__aeabi_fsub+0x28a>
    63a0:	1c61      	adds	r1, r4, #1
    63a2:	b2c8      	uxtb	r0, r1
    63a4:	2801      	cmp	r0, #1
    63a6:	dd4e      	ble.n	6446 <__aeabi_fsub+0x256>
    63a8:	29ff      	cmp	r1, #255	; 0xff
    63aa:	d049      	beq.n	6440 <__aeabi_fsub+0x250>
    63ac:	199b      	adds	r3, r3, r6
    63ae:	085b      	lsrs	r3, r3, #1
    63b0:	000c      	movs	r4, r1
    63b2:	e763      	b.n	627c <__aeabi_fsub+0x8c>
    63b4:	2aff      	cmp	r2, #255	; 0xff
    63b6:	d041      	beq.n	643c <__aeabi_fsub+0x24c>
    63b8:	000a      	movs	r2, r1
    63ba:	e781      	b.n	62c0 <__aeabi_fsub+0xd0>
    63bc:	2601      	movs	r6, #1
    63be:	1b9b      	subs	r3, r3, r6
    63c0:	e789      	b.n	62d6 <__aeabi_fsub+0xe6>
    63c2:	2c00      	cmp	r4, #0
    63c4:	d01c      	beq.n	6400 <__aeabi_fsub+0x210>
    63c6:	28ff      	cmp	r0, #255	; 0xff
    63c8:	d021      	beq.n	640e <__aeabi_fsub+0x21e>
    63ca:	2480      	movs	r4, #128	; 0x80
    63cc:	04e4      	lsls	r4, r4, #19
    63ce:	4252      	negs	r2, r2
    63d0:	4323      	orrs	r3, r4
    63d2:	2a1b      	cmp	r2, #27
    63d4:	dd00      	ble.n	63d8 <__aeabi_fsub+0x1e8>
    63d6:	e096      	b.n	6506 <__aeabi_fsub+0x316>
    63d8:	001c      	movs	r4, r3
    63da:	2520      	movs	r5, #32
    63dc:	40d4      	lsrs	r4, r2
    63de:	1aaa      	subs	r2, r5, r2
    63e0:	4093      	lsls	r3, r2
    63e2:	1e5a      	subs	r2, r3, #1
    63e4:	4193      	sbcs	r3, r2
    63e6:	4323      	orrs	r3, r4
    63e8:	1af3      	subs	r3, r6, r3
    63ea:	0004      	movs	r4, r0
    63ec:	000d      	movs	r5, r1
    63ee:	e72d      	b.n	624c <__aeabi_fsub+0x5c>
    63f0:	2f00      	cmp	r7, #0
    63f2:	d000      	beq.n	63f6 <__aeabi_fsub+0x206>
    63f4:	e72e      	b.n	6254 <__aeabi_fsub+0x64>
    63f6:	2200      	movs	r2, #0
    63f8:	2400      	movs	r4, #0
    63fa:	e7a9      	b.n	6350 <__aeabi_fsub+0x160>
    63fc:	000c      	movs	r4, r1
    63fe:	e73d      	b.n	627c <__aeabi_fsub+0x8c>
    6400:	2b00      	cmp	r3, #0
    6402:	d058      	beq.n	64b6 <__aeabi_fsub+0x2c6>
    6404:	43d2      	mvns	r2, r2
    6406:	2a00      	cmp	r2, #0
    6408:	d0ee      	beq.n	63e8 <__aeabi_fsub+0x1f8>
    640a:	28ff      	cmp	r0, #255	; 0xff
    640c:	d1e1      	bne.n	63d2 <__aeabi_fsub+0x1e2>
    640e:	0033      	movs	r3, r6
    6410:	24ff      	movs	r4, #255	; 0xff
    6412:	000d      	movs	r5, r1
    6414:	e732      	b.n	627c <__aeabi_fsub+0x8c>
    6416:	29ff      	cmp	r1, #255	; 0xff
    6418:	d010      	beq.n	643c <__aeabi_fsub+0x24c>
    641a:	0001      	movs	r1, r0
    641c:	e778      	b.n	6310 <__aeabi_fsub+0x120>
    641e:	2b00      	cmp	r3, #0
    6420:	d06e      	beq.n	6500 <__aeabi_fsub+0x310>
    6422:	24ff      	movs	r4, #255	; 0xff
    6424:	2e00      	cmp	r6, #0
    6426:	d100      	bne.n	642a <__aeabi_fsub+0x23a>
    6428:	e728      	b.n	627c <__aeabi_fsub+0x8c>
    642a:	2280      	movs	r2, #128	; 0x80
    642c:	4651      	mov	r1, sl
    642e:	03d2      	lsls	r2, r2, #15
    6430:	4211      	tst	r1, r2
    6432:	d003      	beq.n	643c <__aeabi_fsub+0x24c>
    6434:	4661      	mov	r1, ip
    6436:	4211      	tst	r1, r2
    6438:	d100      	bne.n	643c <__aeabi_fsub+0x24c>
    643a:	0033      	movs	r3, r6
    643c:	24ff      	movs	r4, #255	; 0xff
    643e:	e71d      	b.n	627c <__aeabi_fsub+0x8c>
    6440:	24ff      	movs	r4, #255	; 0xff
    6442:	2300      	movs	r3, #0
    6444:	e72c      	b.n	62a0 <__aeabi_fsub+0xb0>
    6446:	2c00      	cmp	r4, #0
    6448:	d1e9      	bne.n	641e <__aeabi_fsub+0x22e>
    644a:	2b00      	cmp	r3, #0
    644c:	d063      	beq.n	6516 <__aeabi_fsub+0x326>
    644e:	2e00      	cmp	r6, #0
    6450:	d100      	bne.n	6454 <__aeabi_fsub+0x264>
    6452:	e713      	b.n	627c <__aeabi_fsub+0x8c>
    6454:	199b      	adds	r3, r3, r6
    6456:	015a      	lsls	r2, r3, #5
    6458:	d400      	bmi.n	645c <__aeabi_fsub+0x26c>
    645a:	e73e      	b.n	62da <__aeabi_fsub+0xea>
    645c:	4a31      	ldr	r2, [pc, #196]	; (6524 <__aeabi_fsub+0x334>)
    645e:	000c      	movs	r4, r1
    6460:	4013      	ands	r3, r2
    6462:	e70b      	b.n	627c <__aeabi_fsub+0x8c>
    6464:	2c00      	cmp	r4, #0
    6466:	d11e      	bne.n	64a6 <__aeabi_fsub+0x2b6>
    6468:	2b00      	cmp	r3, #0
    646a:	d12f      	bne.n	64cc <__aeabi_fsub+0x2dc>
    646c:	2e00      	cmp	r6, #0
    646e:	d04f      	beq.n	6510 <__aeabi_fsub+0x320>
    6470:	0033      	movs	r3, r6
    6472:	000d      	movs	r5, r1
    6474:	e702      	b.n	627c <__aeabi_fsub+0x8c>
    6476:	2601      	movs	r6, #1
    6478:	e755      	b.n	6326 <__aeabi_fsub+0x136>
    647a:	2c00      	cmp	r4, #0
    647c:	d11f      	bne.n	64be <__aeabi_fsub+0x2ce>
    647e:	2b00      	cmp	r3, #0
    6480:	d043      	beq.n	650a <__aeabi_fsub+0x31a>
    6482:	43c9      	mvns	r1, r1
    6484:	2900      	cmp	r1, #0
    6486:	d00b      	beq.n	64a0 <__aeabi_fsub+0x2b0>
    6488:	28ff      	cmp	r0, #255	; 0xff
    648a:	d039      	beq.n	6500 <__aeabi_fsub+0x310>
    648c:	291b      	cmp	r1, #27
    648e:	dc44      	bgt.n	651a <__aeabi_fsub+0x32a>
    6490:	001c      	movs	r4, r3
    6492:	2720      	movs	r7, #32
    6494:	40cc      	lsrs	r4, r1
    6496:	1a79      	subs	r1, r7, r1
    6498:	408b      	lsls	r3, r1
    649a:	1e59      	subs	r1, r3, #1
    649c:	418b      	sbcs	r3, r1
    649e:	4323      	orrs	r3, r4
    64a0:	199b      	adds	r3, r3, r6
    64a2:	0004      	movs	r4, r0
    64a4:	e740      	b.n	6328 <__aeabi_fsub+0x138>
    64a6:	2b00      	cmp	r3, #0
    64a8:	d11a      	bne.n	64e0 <__aeabi_fsub+0x2f0>
    64aa:	2e00      	cmp	r6, #0
    64ac:	d124      	bne.n	64f8 <__aeabi_fsub+0x308>
    64ae:	2780      	movs	r7, #128	; 0x80
    64b0:	2200      	movs	r2, #0
    64b2:	03ff      	lsls	r7, r7, #15
    64b4:	e71b      	b.n	62ee <__aeabi_fsub+0xfe>
    64b6:	0033      	movs	r3, r6
    64b8:	0004      	movs	r4, r0
    64ba:	000d      	movs	r5, r1
    64bc:	e6de      	b.n	627c <__aeabi_fsub+0x8c>
    64be:	28ff      	cmp	r0, #255	; 0xff
    64c0:	d01e      	beq.n	6500 <__aeabi_fsub+0x310>
    64c2:	2480      	movs	r4, #128	; 0x80
    64c4:	04e4      	lsls	r4, r4, #19
    64c6:	4249      	negs	r1, r1
    64c8:	4323      	orrs	r3, r4
    64ca:	e7df      	b.n	648c <__aeabi_fsub+0x29c>
    64cc:	2e00      	cmp	r6, #0
    64ce:	d100      	bne.n	64d2 <__aeabi_fsub+0x2e2>
    64d0:	e6d4      	b.n	627c <__aeabi_fsub+0x8c>
    64d2:	1b9f      	subs	r7, r3, r6
    64d4:	017a      	lsls	r2, r7, #5
    64d6:	d400      	bmi.n	64da <__aeabi_fsub+0x2ea>
    64d8:	e737      	b.n	634a <__aeabi_fsub+0x15a>
    64da:	1af3      	subs	r3, r6, r3
    64dc:	000d      	movs	r5, r1
    64de:	e6cd      	b.n	627c <__aeabi_fsub+0x8c>
    64e0:	24ff      	movs	r4, #255	; 0xff
    64e2:	2e00      	cmp	r6, #0
    64e4:	d100      	bne.n	64e8 <__aeabi_fsub+0x2f8>
    64e6:	e6c9      	b.n	627c <__aeabi_fsub+0x8c>
    64e8:	2280      	movs	r2, #128	; 0x80
    64ea:	4650      	mov	r0, sl
    64ec:	03d2      	lsls	r2, r2, #15
    64ee:	4210      	tst	r0, r2
    64f0:	d0a4      	beq.n	643c <__aeabi_fsub+0x24c>
    64f2:	4660      	mov	r0, ip
    64f4:	4210      	tst	r0, r2
    64f6:	d1a1      	bne.n	643c <__aeabi_fsub+0x24c>
    64f8:	0033      	movs	r3, r6
    64fa:	000d      	movs	r5, r1
    64fc:	24ff      	movs	r4, #255	; 0xff
    64fe:	e6bd      	b.n	627c <__aeabi_fsub+0x8c>
    6500:	0033      	movs	r3, r6
    6502:	24ff      	movs	r4, #255	; 0xff
    6504:	e6ba      	b.n	627c <__aeabi_fsub+0x8c>
    6506:	2301      	movs	r3, #1
    6508:	e76e      	b.n	63e8 <__aeabi_fsub+0x1f8>
    650a:	0033      	movs	r3, r6
    650c:	0004      	movs	r4, r0
    650e:	e6b5      	b.n	627c <__aeabi_fsub+0x8c>
    6510:	2700      	movs	r7, #0
    6512:	2200      	movs	r2, #0
    6514:	e71c      	b.n	6350 <__aeabi_fsub+0x160>
    6516:	0033      	movs	r3, r6
    6518:	e6b0      	b.n	627c <__aeabi_fsub+0x8c>
    651a:	2301      	movs	r3, #1
    651c:	e7c0      	b.n	64a0 <__aeabi_fsub+0x2b0>
    651e:	46c0      	nop			; (mov r8, r8)
    6520:	7dffffff 	.word	0x7dffffff
    6524:	fbffffff 	.word	0xfbffffff

00006528 <__aeabi_f2iz>:
    6528:	0241      	lsls	r1, r0, #9
    652a:	0043      	lsls	r3, r0, #1
    652c:	0fc2      	lsrs	r2, r0, #31
    652e:	0a49      	lsrs	r1, r1, #9
    6530:	0e1b      	lsrs	r3, r3, #24
    6532:	2000      	movs	r0, #0
    6534:	2b7e      	cmp	r3, #126	; 0x7e
    6536:	dd0d      	ble.n	6554 <__aeabi_f2iz+0x2c>
    6538:	2b9d      	cmp	r3, #157	; 0x9d
    653a:	dc0c      	bgt.n	6556 <__aeabi_f2iz+0x2e>
    653c:	2080      	movs	r0, #128	; 0x80
    653e:	0400      	lsls	r0, r0, #16
    6540:	4301      	orrs	r1, r0
    6542:	2b95      	cmp	r3, #149	; 0x95
    6544:	dc0a      	bgt.n	655c <__aeabi_f2iz+0x34>
    6546:	2096      	movs	r0, #150	; 0x96
    6548:	1ac3      	subs	r3, r0, r3
    654a:	40d9      	lsrs	r1, r3
    654c:	4248      	negs	r0, r1
    654e:	2a00      	cmp	r2, #0
    6550:	d100      	bne.n	6554 <__aeabi_f2iz+0x2c>
    6552:	0008      	movs	r0, r1
    6554:	4770      	bx	lr
    6556:	4b03      	ldr	r3, [pc, #12]	; (6564 <__aeabi_f2iz+0x3c>)
    6558:	18d0      	adds	r0, r2, r3
    655a:	e7fb      	b.n	6554 <__aeabi_f2iz+0x2c>
    655c:	3b96      	subs	r3, #150	; 0x96
    655e:	4099      	lsls	r1, r3
    6560:	e7f4      	b.n	654c <__aeabi_f2iz+0x24>
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	7fffffff 	.word	0x7fffffff

00006568 <__aeabi_i2f>:
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	2800      	cmp	r0, #0
    656c:	d030      	beq.n	65d0 <__aeabi_i2f+0x68>
    656e:	17c3      	asrs	r3, r0, #31
    6570:	18c4      	adds	r4, r0, r3
    6572:	405c      	eors	r4, r3
    6574:	0fc5      	lsrs	r5, r0, #31
    6576:	0020      	movs	r0, r4
    6578:	f000 fb92 	bl	6ca0 <__clzsi2>
    657c:	239e      	movs	r3, #158	; 0x9e
    657e:	1a1b      	subs	r3, r3, r0
    6580:	2b96      	cmp	r3, #150	; 0x96
    6582:	dc0d      	bgt.n	65a0 <__aeabi_i2f+0x38>
    6584:	2296      	movs	r2, #150	; 0x96
    6586:	1ad2      	subs	r2, r2, r3
    6588:	4094      	lsls	r4, r2
    658a:	002a      	movs	r2, r5
    658c:	0264      	lsls	r4, r4, #9
    658e:	0a64      	lsrs	r4, r4, #9
    6590:	b2db      	uxtb	r3, r3
    6592:	0264      	lsls	r4, r4, #9
    6594:	05db      	lsls	r3, r3, #23
    6596:	0a60      	lsrs	r0, r4, #9
    6598:	07d2      	lsls	r2, r2, #31
    659a:	4318      	orrs	r0, r3
    659c:	4310      	orrs	r0, r2
    659e:	bd70      	pop	{r4, r5, r6, pc}
    65a0:	2b99      	cmp	r3, #153	; 0x99
    65a2:	dc19      	bgt.n	65d8 <__aeabi_i2f+0x70>
    65a4:	2299      	movs	r2, #153	; 0x99
    65a6:	1ad2      	subs	r2, r2, r3
    65a8:	2a00      	cmp	r2, #0
    65aa:	dd29      	ble.n	6600 <__aeabi_i2f+0x98>
    65ac:	4094      	lsls	r4, r2
    65ae:	0022      	movs	r2, r4
    65b0:	4c14      	ldr	r4, [pc, #80]	; (6604 <__aeabi_i2f+0x9c>)
    65b2:	4014      	ands	r4, r2
    65b4:	0751      	lsls	r1, r2, #29
    65b6:	d004      	beq.n	65c2 <__aeabi_i2f+0x5a>
    65b8:	210f      	movs	r1, #15
    65ba:	400a      	ands	r2, r1
    65bc:	2a04      	cmp	r2, #4
    65be:	d000      	beq.n	65c2 <__aeabi_i2f+0x5a>
    65c0:	3404      	adds	r4, #4
    65c2:	0162      	lsls	r2, r4, #5
    65c4:	d413      	bmi.n	65ee <__aeabi_i2f+0x86>
    65c6:	01a4      	lsls	r4, r4, #6
    65c8:	0a64      	lsrs	r4, r4, #9
    65ca:	b2db      	uxtb	r3, r3
    65cc:	002a      	movs	r2, r5
    65ce:	e7e0      	b.n	6592 <__aeabi_i2f+0x2a>
    65d0:	2200      	movs	r2, #0
    65d2:	2300      	movs	r3, #0
    65d4:	2400      	movs	r4, #0
    65d6:	e7dc      	b.n	6592 <__aeabi_i2f+0x2a>
    65d8:	2205      	movs	r2, #5
    65da:	0021      	movs	r1, r4
    65dc:	1a12      	subs	r2, r2, r0
    65de:	40d1      	lsrs	r1, r2
    65e0:	22b9      	movs	r2, #185	; 0xb9
    65e2:	1ad2      	subs	r2, r2, r3
    65e4:	4094      	lsls	r4, r2
    65e6:	1e62      	subs	r2, r4, #1
    65e8:	4194      	sbcs	r4, r2
    65ea:	430c      	orrs	r4, r1
    65ec:	e7da      	b.n	65a4 <__aeabi_i2f+0x3c>
    65ee:	4b05      	ldr	r3, [pc, #20]	; (6604 <__aeabi_i2f+0x9c>)
    65f0:	002a      	movs	r2, r5
    65f2:	401c      	ands	r4, r3
    65f4:	239f      	movs	r3, #159	; 0x9f
    65f6:	01a4      	lsls	r4, r4, #6
    65f8:	1a1b      	subs	r3, r3, r0
    65fa:	0a64      	lsrs	r4, r4, #9
    65fc:	b2db      	uxtb	r3, r3
    65fe:	e7c8      	b.n	6592 <__aeabi_i2f+0x2a>
    6600:	0022      	movs	r2, r4
    6602:	e7d5      	b.n	65b0 <__aeabi_i2f+0x48>
    6604:	fbffffff 	.word	0xfbffffff

00006608 <__aeabi_dmul>:
    6608:	b5f0      	push	{r4, r5, r6, r7, lr}
    660a:	4657      	mov	r7, sl
    660c:	4645      	mov	r5, r8
    660e:	46de      	mov	lr, fp
    6610:	464e      	mov	r6, r9
    6612:	b5e0      	push	{r5, r6, r7, lr}
    6614:	030c      	lsls	r4, r1, #12
    6616:	4698      	mov	r8, r3
    6618:	004e      	lsls	r6, r1, #1
    661a:	0b23      	lsrs	r3, r4, #12
    661c:	b087      	sub	sp, #28
    661e:	0007      	movs	r7, r0
    6620:	4692      	mov	sl, r2
    6622:	469b      	mov	fp, r3
    6624:	0d76      	lsrs	r6, r6, #21
    6626:	0fcd      	lsrs	r5, r1, #31
    6628:	2e00      	cmp	r6, #0
    662a:	d06b      	beq.n	6704 <__aeabi_dmul+0xfc>
    662c:	4b6d      	ldr	r3, [pc, #436]	; (67e4 <__aeabi_dmul+0x1dc>)
    662e:	429e      	cmp	r6, r3
    6630:	d035      	beq.n	669e <__aeabi_dmul+0x96>
    6632:	2480      	movs	r4, #128	; 0x80
    6634:	465b      	mov	r3, fp
    6636:	0f42      	lsrs	r2, r0, #29
    6638:	0424      	lsls	r4, r4, #16
    663a:	00db      	lsls	r3, r3, #3
    663c:	4314      	orrs	r4, r2
    663e:	431c      	orrs	r4, r3
    6640:	00c3      	lsls	r3, r0, #3
    6642:	4699      	mov	r9, r3
    6644:	4b68      	ldr	r3, [pc, #416]	; (67e8 <__aeabi_dmul+0x1e0>)
    6646:	46a3      	mov	fp, r4
    6648:	469c      	mov	ip, r3
    664a:	2300      	movs	r3, #0
    664c:	2700      	movs	r7, #0
    664e:	4466      	add	r6, ip
    6650:	9302      	str	r3, [sp, #8]
    6652:	4643      	mov	r3, r8
    6654:	031c      	lsls	r4, r3, #12
    6656:	005a      	lsls	r2, r3, #1
    6658:	0fdb      	lsrs	r3, r3, #31
    665a:	4650      	mov	r0, sl
    665c:	0b24      	lsrs	r4, r4, #12
    665e:	0d52      	lsrs	r2, r2, #21
    6660:	4698      	mov	r8, r3
    6662:	d100      	bne.n	6666 <__aeabi_dmul+0x5e>
    6664:	e076      	b.n	6754 <__aeabi_dmul+0x14c>
    6666:	4b5f      	ldr	r3, [pc, #380]	; (67e4 <__aeabi_dmul+0x1dc>)
    6668:	429a      	cmp	r2, r3
    666a:	d06d      	beq.n	6748 <__aeabi_dmul+0x140>
    666c:	2380      	movs	r3, #128	; 0x80
    666e:	0f41      	lsrs	r1, r0, #29
    6670:	041b      	lsls	r3, r3, #16
    6672:	430b      	orrs	r3, r1
    6674:	495c      	ldr	r1, [pc, #368]	; (67e8 <__aeabi_dmul+0x1e0>)
    6676:	00e4      	lsls	r4, r4, #3
    6678:	468c      	mov	ip, r1
    667a:	431c      	orrs	r4, r3
    667c:	00c3      	lsls	r3, r0, #3
    667e:	2000      	movs	r0, #0
    6680:	4462      	add	r2, ip
    6682:	4641      	mov	r1, r8
    6684:	18b6      	adds	r6, r6, r2
    6686:	4069      	eors	r1, r5
    6688:	1c72      	adds	r2, r6, #1
    668a:	9101      	str	r1, [sp, #4]
    668c:	4694      	mov	ip, r2
    668e:	4307      	orrs	r7, r0
    6690:	2f0f      	cmp	r7, #15
    6692:	d900      	bls.n	6696 <__aeabi_dmul+0x8e>
    6694:	e0b0      	b.n	67f8 <__aeabi_dmul+0x1f0>
    6696:	4a55      	ldr	r2, [pc, #340]	; (67ec <__aeabi_dmul+0x1e4>)
    6698:	00bf      	lsls	r7, r7, #2
    669a:	59d2      	ldr	r2, [r2, r7]
    669c:	4697      	mov	pc, r2
    669e:	465b      	mov	r3, fp
    66a0:	4303      	orrs	r3, r0
    66a2:	4699      	mov	r9, r3
    66a4:	d000      	beq.n	66a8 <__aeabi_dmul+0xa0>
    66a6:	e087      	b.n	67b8 <__aeabi_dmul+0x1b0>
    66a8:	2300      	movs	r3, #0
    66aa:	469b      	mov	fp, r3
    66ac:	3302      	adds	r3, #2
    66ae:	2708      	movs	r7, #8
    66b0:	9302      	str	r3, [sp, #8]
    66b2:	e7ce      	b.n	6652 <__aeabi_dmul+0x4a>
    66b4:	4642      	mov	r2, r8
    66b6:	9201      	str	r2, [sp, #4]
    66b8:	2802      	cmp	r0, #2
    66ba:	d067      	beq.n	678c <__aeabi_dmul+0x184>
    66bc:	2803      	cmp	r0, #3
    66be:	d100      	bne.n	66c2 <__aeabi_dmul+0xba>
    66c0:	e20e      	b.n	6ae0 <__aeabi_dmul+0x4d8>
    66c2:	2801      	cmp	r0, #1
    66c4:	d000      	beq.n	66c8 <__aeabi_dmul+0xc0>
    66c6:	e162      	b.n	698e <__aeabi_dmul+0x386>
    66c8:	2300      	movs	r3, #0
    66ca:	2400      	movs	r4, #0
    66cc:	2200      	movs	r2, #0
    66ce:	4699      	mov	r9, r3
    66d0:	9901      	ldr	r1, [sp, #4]
    66d2:	4001      	ands	r1, r0
    66d4:	b2cd      	uxtb	r5, r1
    66d6:	2100      	movs	r1, #0
    66d8:	0312      	lsls	r2, r2, #12
    66da:	0d0b      	lsrs	r3, r1, #20
    66dc:	0b12      	lsrs	r2, r2, #12
    66de:	051b      	lsls	r3, r3, #20
    66e0:	4313      	orrs	r3, r2
    66e2:	4a43      	ldr	r2, [pc, #268]	; (67f0 <__aeabi_dmul+0x1e8>)
    66e4:	0524      	lsls	r4, r4, #20
    66e6:	4013      	ands	r3, r2
    66e8:	431c      	orrs	r4, r3
    66ea:	0064      	lsls	r4, r4, #1
    66ec:	07ed      	lsls	r5, r5, #31
    66ee:	0864      	lsrs	r4, r4, #1
    66f0:	432c      	orrs	r4, r5
    66f2:	4648      	mov	r0, r9
    66f4:	0021      	movs	r1, r4
    66f6:	b007      	add	sp, #28
    66f8:	bc3c      	pop	{r2, r3, r4, r5}
    66fa:	4690      	mov	r8, r2
    66fc:	4699      	mov	r9, r3
    66fe:	46a2      	mov	sl, r4
    6700:	46ab      	mov	fp, r5
    6702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6704:	4303      	orrs	r3, r0
    6706:	4699      	mov	r9, r3
    6708:	d04f      	beq.n	67aa <__aeabi_dmul+0x1a2>
    670a:	465b      	mov	r3, fp
    670c:	2b00      	cmp	r3, #0
    670e:	d100      	bne.n	6712 <__aeabi_dmul+0x10a>
    6710:	e189      	b.n	6a26 <__aeabi_dmul+0x41e>
    6712:	4658      	mov	r0, fp
    6714:	f000 fac4 	bl	6ca0 <__clzsi2>
    6718:	0003      	movs	r3, r0
    671a:	3b0b      	subs	r3, #11
    671c:	2b1c      	cmp	r3, #28
    671e:	dd00      	ble.n	6722 <__aeabi_dmul+0x11a>
    6720:	e17a      	b.n	6a18 <__aeabi_dmul+0x410>
    6722:	221d      	movs	r2, #29
    6724:	1ad3      	subs	r3, r2, r3
    6726:	003a      	movs	r2, r7
    6728:	0001      	movs	r1, r0
    672a:	465c      	mov	r4, fp
    672c:	40da      	lsrs	r2, r3
    672e:	3908      	subs	r1, #8
    6730:	408c      	lsls	r4, r1
    6732:	0013      	movs	r3, r2
    6734:	408f      	lsls	r7, r1
    6736:	4323      	orrs	r3, r4
    6738:	469b      	mov	fp, r3
    673a:	46b9      	mov	r9, r7
    673c:	2300      	movs	r3, #0
    673e:	4e2d      	ldr	r6, [pc, #180]	; (67f4 <__aeabi_dmul+0x1ec>)
    6740:	2700      	movs	r7, #0
    6742:	1a36      	subs	r6, r6, r0
    6744:	9302      	str	r3, [sp, #8]
    6746:	e784      	b.n	6652 <__aeabi_dmul+0x4a>
    6748:	4653      	mov	r3, sl
    674a:	4323      	orrs	r3, r4
    674c:	d12a      	bne.n	67a4 <__aeabi_dmul+0x19c>
    674e:	2400      	movs	r4, #0
    6750:	2002      	movs	r0, #2
    6752:	e796      	b.n	6682 <__aeabi_dmul+0x7a>
    6754:	4653      	mov	r3, sl
    6756:	4323      	orrs	r3, r4
    6758:	d020      	beq.n	679c <__aeabi_dmul+0x194>
    675a:	2c00      	cmp	r4, #0
    675c:	d100      	bne.n	6760 <__aeabi_dmul+0x158>
    675e:	e157      	b.n	6a10 <__aeabi_dmul+0x408>
    6760:	0020      	movs	r0, r4
    6762:	f000 fa9d 	bl	6ca0 <__clzsi2>
    6766:	0003      	movs	r3, r0
    6768:	3b0b      	subs	r3, #11
    676a:	2b1c      	cmp	r3, #28
    676c:	dd00      	ble.n	6770 <__aeabi_dmul+0x168>
    676e:	e149      	b.n	6a04 <__aeabi_dmul+0x3fc>
    6770:	211d      	movs	r1, #29
    6772:	1acb      	subs	r3, r1, r3
    6774:	4651      	mov	r1, sl
    6776:	0002      	movs	r2, r0
    6778:	40d9      	lsrs	r1, r3
    677a:	4653      	mov	r3, sl
    677c:	3a08      	subs	r2, #8
    677e:	4094      	lsls	r4, r2
    6780:	4093      	lsls	r3, r2
    6782:	430c      	orrs	r4, r1
    6784:	4a1b      	ldr	r2, [pc, #108]	; (67f4 <__aeabi_dmul+0x1ec>)
    6786:	1a12      	subs	r2, r2, r0
    6788:	2000      	movs	r0, #0
    678a:	e77a      	b.n	6682 <__aeabi_dmul+0x7a>
    678c:	2501      	movs	r5, #1
    678e:	9b01      	ldr	r3, [sp, #4]
    6790:	4c14      	ldr	r4, [pc, #80]	; (67e4 <__aeabi_dmul+0x1dc>)
    6792:	401d      	ands	r5, r3
    6794:	2300      	movs	r3, #0
    6796:	2200      	movs	r2, #0
    6798:	4699      	mov	r9, r3
    679a:	e79c      	b.n	66d6 <__aeabi_dmul+0xce>
    679c:	2400      	movs	r4, #0
    679e:	2200      	movs	r2, #0
    67a0:	2001      	movs	r0, #1
    67a2:	e76e      	b.n	6682 <__aeabi_dmul+0x7a>
    67a4:	4653      	mov	r3, sl
    67a6:	2003      	movs	r0, #3
    67a8:	e76b      	b.n	6682 <__aeabi_dmul+0x7a>
    67aa:	2300      	movs	r3, #0
    67ac:	469b      	mov	fp, r3
    67ae:	3301      	adds	r3, #1
    67b0:	2704      	movs	r7, #4
    67b2:	2600      	movs	r6, #0
    67b4:	9302      	str	r3, [sp, #8]
    67b6:	e74c      	b.n	6652 <__aeabi_dmul+0x4a>
    67b8:	2303      	movs	r3, #3
    67ba:	4681      	mov	r9, r0
    67bc:	270c      	movs	r7, #12
    67be:	9302      	str	r3, [sp, #8]
    67c0:	e747      	b.n	6652 <__aeabi_dmul+0x4a>
    67c2:	2280      	movs	r2, #128	; 0x80
    67c4:	2300      	movs	r3, #0
    67c6:	2500      	movs	r5, #0
    67c8:	0312      	lsls	r2, r2, #12
    67ca:	4699      	mov	r9, r3
    67cc:	4c05      	ldr	r4, [pc, #20]	; (67e4 <__aeabi_dmul+0x1dc>)
    67ce:	e782      	b.n	66d6 <__aeabi_dmul+0xce>
    67d0:	465c      	mov	r4, fp
    67d2:	464b      	mov	r3, r9
    67d4:	9802      	ldr	r0, [sp, #8]
    67d6:	e76f      	b.n	66b8 <__aeabi_dmul+0xb0>
    67d8:	465c      	mov	r4, fp
    67da:	464b      	mov	r3, r9
    67dc:	9501      	str	r5, [sp, #4]
    67de:	9802      	ldr	r0, [sp, #8]
    67e0:	e76a      	b.n	66b8 <__aeabi_dmul+0xb0>
    67e2:	46c0      	nop			; (mov r8, r8)
    67e4:	000007ff 	.word	0x000007ff
    67e8:	fffffc01 	.word	0xfffffc01
    67ec:	0000706c 	.word	0x0000706c
    67f0:	800fffff 	.word	0x800fffff
    67f4:	fffffc0d 	.word	0xfffffc0d
    67f8:	464a      	mov	r2, r9
    67fa:	4649      	mov	r1, r9
    67fc:	0c17      	lsrs	r7, r2, #16
    67fe:	0c1a      	lsrs	r2, r3, #16
    6800:	041b      	lsls	r3, r3, #16
    6802:	0c1b      	lsrs	r3, r3, #16
    6804:	0408      	lsls	r0, r1, #16
    6806:	0019      	movs	r1, r3
    6808:	0c00      	lsrs	r0, r0, #16
    680a:	4341      	muls	r1, r0
    680c:	0015      	movs	r5, r2
    680e:	4688      	mov	r8, r1
    6810:	0019      	movs	r1, r3
    6812:	437d      	muls	r5, r7
    6814:	4379      	muls	r1, r7
    6816:	9503      	str	r5, [sp, #12]
    6818:	4689      	mov	r9, r1
    681a:	0029      	movs	r1, r5
    681c:	0015      	movs	r5, r2
    681e:	4345      	muls	r5, r0
    6820:	444d      	add	r5, r9
    6822:	9502      	str	r5, [sp, #8]
    6824:	4645      	mov	r5, r8
    6826:	0c2d      	lsrs	r5, r5, #16
    6828:	46aa      	mov	sl, r5
    682a:	9d02      	ldr	r5, [sp, #8]
    682c:	4455      	add	r5, sl
    682e:	45a9      	cmp	r9, r5
    6830:	d906      	bls.n	6840 <__aeabi_dmul+0x238>
    6832:	468a      	mov	sl, r1
    6834:	2180      	movs	r1, #128	; 0x80
    6836:	0249      	lsls	r1, r1, #9
    6838:	4689      	mov	r9, r1
    683a:	44ca      	add	sl, r9
    683c:	4651      	mov	r1, sl
    683e:	9103      	str	r1, [sp, #12]
    6840:	0c29      	lsrs	r1, r5, #16
    6842:	9104      	str	r1, [sp, #16]
    6844:	4641      	mov	r1, r8
    6846:	0409      	lsls	r1, r1, #16
    6848:	042d      	lsls	r5, r5, #16
    684a:	0c09      	lsrs	r1, r1, #16
    684c:	4688      	mov	r8, r1
    684e:	0029      	movs	r1, r5
    6850:	0c25      	lsrs	r5, r4, #16
    6852:	0424      	lsls	r4, r4, #16
    6854:	4441      	add	r1, r8
    6856:	0c24      	lsrs	r4, r4, #16
    6858:	9105      	str	r1, [sp, #20]
    685a:	0021      	movs	r1, r4
    685c:	4341      	muls	r1, r0
    685e:	4688      	mov	r8, r1
    6860:	0021      	movs	r1, r4
    6862:	4379      	muls	r1, r7
    6864:	468a      	mov	sl, r1
    6866:	4368      	muls	r0, r5
    6868:	4641      	mov	r1, r8
    686a:	4450      	add	r0, sl
    686c:	4681      	mov	r9, r0
    686e:	0c08      	lsrs	r0, r1, #16
    6870:	4448      	add	r0, r9
    6872:	436f      	muls	r7, r5
    6874:	4582      	cmp	sl, r0
    6876:	d903      	bls.n	6880 <__aeabi_dmul+0x278>
    6878:	2180      	movs	r1, #128	; 0x80
    687a:	0249      	lsls	r1, r1, #9
    687c:	4689      	mov	r9, r1
    687e:	444f      	add	r7, r9
    6880:	0c01      	lsrs	r1, r0, #16
    6882:	4689      	mov	r9, r1
    6884:	0039      	movs	r1, r7
    6886:	4449      	add	r1, r9
    6888:	9102      	str	r1, [sp, #8]
    688a:	4641      	mov	r1, r8
    688c:	040f      	lsls	r7, r1, #16
    688e:	9904      	ldr	r1, [sp, #16]
    6890:	0c3f      	lsrs	r7, r7, #16
    6892:	4688      	mov	r8, r1
    6894:	0400      	lsls	r0, r0, #16
    6896:	19c0      	adds	r0, r0, r7
    6898:	4480      	add	r8, r0
    689a:	4641      	mov	r1, r8
    689c:	9104      	str	r1, [sp, #16]
    689e:	4659      	mov	r1, fp
    68a0:	0c0f      	lsrs	r7, r1, #16
    68a2:	0409      	lsls	r1, r1, #16
    68a4:	0c09      	lsrs	r1, r1, #16
    68a6:	4688      	mov	r8, r1
    68a8:	4359      	muls	r1, r3
    68aa:	468a      	mov	sl, r1
    68ac:	0039      	movs	r1, r7
    68ae:	4351      	muls	r1, r2
    68b0:	4689      	mov	r9, r1
    68b2:	4641      	mov	r1, r8
    68b4:	434a      	muls	r2, r1
    68b6:	4651      	mov	r1, sl
    68b8:	0c09      	lsrs	r1, r1, #16
    68ba:	468b      	mov	fp, r1
    68bc:	437b      	muls	r3, r7
    68be:	18d2      	adds	r2, r2, r3
    68c0:	445a      	add	r2, fp
    68c2:	4293      	cmp	r3, r2
    68c4:	d903      	bls.n	68ce <__aeabi_dmul+0x2c6>
    68c6:	2380      	movs	r3, #128	; 0x80
    68c8:	025b      	lsls	r3, r3, #9
    68ca:	469b      	mov	fp, r3
    68cc:	44d9      	add	r9, fp
    68ce:	4651      	mov	r1, sl
    68d0:	0409      	lsls	r1, r1, #16
    68d2:	0c09      	lsrs	r1, r1, #16
    68d4:	468a      	mov	sl, r1
    68d6:	4641      	mov	r1, r8
    68d8:	4361      	muls	r1, r4
    68da:	437c      	muls	r4, r7
    68dc:	0c13      	lsrs	r3, r2, #16
    68de:	0412      	lsls	r2, r2, #16
    68e0:	444b      	add	r3, r9
    68e2:	4452      	add	r2, sl
    68e4:	46a1      	mov	r9, r4
    68e6:	468a      	mov	sl, r1
    68e8:	003c      	movs	r4, r7
    68ea:	4641      	mov	r1, r8
    68ec:	436c      	muls	r4, r5
    68ee:	434d      	muls	r5, r1
    68f0:	4651      	mov	r1, sl
    68f2:	444d      	add	r5, r9
    68f4:	0c0f      	lsrs	r7, r1, #16
    68f6:	197d      	adds	r5, r7, r5
    68f8:	45a9      	cmp	r9, r5
    68fa:	d903      	bls.n	6904 <__aeabi_dmul+0x2fc>
    68fc:	2180      	movs	r1, #128	; 0x80
    68fe:	0249      	lsls	r1, r1, #9
    6900:	4688      	mov	r8, r1
    6902:	4444      	add	r4, r8
    6904:	9f04      	ldr	r7, [sp, #16]
    6906:	9903      	ldr	r1, [sp, #12]
    6908:	46b8      	mov	r8, r7
    690a:	4441      	add	r1, r8
    690c:	468b      	mov	fp, r1
    690e:	4583      	cmp	fp, r0
    6910:	4180      	sbcs	r0, r0
    6912:	4241      	negs	r1, r0
    6914:	4688      	mov	r8, r1
    6916:	4651      	mov	r1, sl
    6918:	0408      	lsls	r0, r1, #16
    691a:	042f      	lsls	r7, r5, #16
    691c:	0c00      	lsrs	r0, r0, #16
    691e:	183f      	adds	r7, r7, r0
    6920:	4658      	mov	r0, fp
    6922:	9902      	ldr	r1, [sp, #8]
    6924:	1810      	adds	r0, r2, r0
    6926:	4689      	mov	r9, r1
    6928:	4290      	cmp	r0, r2
    692a:	4192      	sbcs	r2, r2
    692c:	444f      	add	r7, r9
    692e:	46ba      	mov	sl, r7
    6930:	4252      	negs	r2, r2
    6932:	4699      	mov	r9, r3
    6934:	4693      	mov	fp, r2
    6936:	44c2      	add	sl, r8
    6938:	44d1      	add	r9, sl
    693a:	44cb      	add	fp, r9
    693c:	428f      	cmp	r7, r1
    693e:	41bf      	sbcs	r7, r7
    6940:	45c2      	cmp	sl, r8
    6942:	4189      	sbcs	r1, r1
    6944:	4599      	cmp	r9, r3
    6946:	419b      	sbcs	r3, r3
    6948:	4593      	cmp	fp, r2
    694a:	4192      	sbcs	r2, r2
    694c:	427f      	negs	r7, r7
    694e:	4249      	negs	r1, r1
    6950:	0c2d      	lsrs	r5, r5, #16
    6952:	4252      	negs	r2, r2
    6954:	430f      	orrs	r7, r1
    6956:	425b      	negs	r3, r3
    6958:	4313      	orrs	r3, r2
    695a:	197f      	adds	r7, r7, r5
    695c:	18ff      	adds	r7, r7, r3
    695e:	465b      	mov	r3, fp
    6960:	193c      	adds	r4, r7, r4
    6962:	0ddb      	lsrs	r3, r3, #23
    6964:	9a05      	ldr	r2, [sp, #20]
    6966:	0264      	lsls	r4, r4, #9
    6968:	431c      	orrs	r4, r3
    696a:	0243      	lsls	r3, r0, #9
    696c:	4313      	orrs	r3, r2
    696e:	1e5d      	subs	r5, r3, #1
    6970:	41ab      	sbcs	r3, r5
    6972:	465a      	mov	r2, fp
    6974:	0dc0      	lsrs	r0, r0, #23
    6976:	4303      	orrs	r3, r0
    6978:	0252      	lsls	r2, r2, #9
    697a:	4313      	orrs	r3, r2
    697c:	01e2      	lsls	r2, r4, #7
    697e:	d556      	bpl.n	6a2e <__aeabi_dmul+0x426>
    6980:	2001      	movs	r0, #1
    6982:	085a      	lsrs	r2, r3, #1
    6984:	4003      	ands	r3, r0
    6986:	4313      	orrs	r3, r2
    6988:	07e2      	lsls	r2, r4, #31
    698a:	4313      	orrs	r3, r2
    698c:	0864      	lsrs	r4, r4, #1
    698e:	485a      	ldr	r0, [pc, #360]	; (6af8 <__aeabi_dmul+0x4f0>)
    6990:	4460      	add	r0, ip
    6992:	2800      	cmp	r0, #0
    6994:	dd4d      	ble.n	6a32 <__aeabi_dmul+0x42a>
    6996:	075a      	lsls	r2, r3, #29
    6998:	d009      	beq.n	69ae <__aeabi_dmul+0x3a6>
    699a:	220f      	movs	r2, #15
    699c:	401a      	ands	r2, r3
    699e:	2a04      	cmp	r2, #4
    69a0:	d005      	beq.n	69ae <__aeabi_dmul+0x3a6>
    69a2:	1d1a      	adds	r2, r3, #4
    69a4:	429a      	cmp	r2, r3
    69a6:	419b      	sbcs	r3, r3
    69a8:	425b      	negs	r3, r3
    69aa:	18e4      	adds	r4, r4, r3
    69ac:	0013      	movs	r3, r2
    69ae:	01e2      	lsls	r2, r4, #7
    69b0:	d504      	bpl.n	69bc <__aeabi_dmul+0x3b4>
    69b2:	2080      	movs	r0, #128	; 0x80
    69b4:	4a51      	ldr	r2, [pc, #324]	; (6afc <__aeabi_dmul+0x4f4>)
    69b6:	00c0      	lsls	r0, r0, #3
    69b8:	4014      	ands	r4, r2
    69ba:	4460      	add	r0, ip
    69bc:	4a50      	ldr	r2, [pc, #320]	; (6b00 <__aeabi_dmul+0x4f8>)
    69be:	4290      	cmp	r0, r2
    69c0:	dd00      	ble.n	69c4 <__aeabi_dmul+0x3bc>
    69c2:	e6e3      	b.n	678c <__aeabi_dmul+0x184>
    69c4:	2501      	movs	r5, #1
    69c6:	08db      	lsrs	r3, r3, #3
    69c8:	0762      	lsls	r2, r4, #29
    69ca:	431a      	orrs	r2, r3
    69cc:	0264      	lsls	r4, r4, #9
    69ce:	9b01      	ldr	r3, [sp, #4]
    69d0:	4691      	mov	r9, r2
    69d2:	0b22      	lsrs	r2, r4, #12
    69d4:	0544      	lsls	r4, r0, #21
    69d6:	0d64      	lsrs	r4, r4, #21
    69d8:	401d      	ands	r5, r3
    69da:	e67c      	b.n	66d6 <__aeabi_dmul+0xce>
    69dc:	2280      	movs	r2, #128	; 0x80
    69de:	4659      	mov	r1, fp
    69e0:	0312      	lsls	r2, r2, #12
    69e2:	4211      	tst	r1, r2
    69e4:	d008      	beq.n	69f8 <__aeabi_dmul+0x3f0>
    69e6:	4214      	tst	r4, r2
    69e8:	d106      	bne.n	69f8 <__aeabi_dmul+0x3f0>
    69ea:	4322      	orrs	r2, r4
    69ec:	0312      	lsls	r2, r2, #12
    69ee:	0b12      	lsrs	r2, r2, #12
    69f0:	4645      	mov	r5, r8
    69f2:	4699      	mov	r9, r3
    69f4:	4c43      	ldr	r4, [pc, #268]	; (6b04 <__aeabi_dmul+0x4fc>)
    69f6:	e66e      	b.n	66d6 <__aeabi_dmul+0xce>
    69f8:	465b      	mov	r3, fp
    69fa:	431a      	orrs	r2, r3
    69fc:	0312      	lsls	r2, r2, #12
    69fe:	0b12      	lsrs	r2, r2, #12
    6a00:	4c40      	ldr	r4, [pc, #256]	; (6b04 <__aeabi_dmul+0x4fc>)
    6a02:	e668      	b.n	66d6 <__aeabi_dmul+0xce>
    6a04:	0003      	movs	r3, r0
    6a06:	4654      	mov	r4, sl
    6a08:	3b28      	subs	r3, #40	; 0x28
    6a0a:	409c      	lsls	r4, r3
    6a0c:	2300      	movs	r3, #0
    6a0e:	e6b9      	b.n	6784 <__aeabi_dmul+0x17c>
    6a10:	f000 f946 	bl	6ca0 <__clzsi2>
    6a14:	3020      	adds	r0, #32
    6a16:	e6a6      	b.n	6766 <__aeabi_dmul+0x15e>
    6a18:	0003      	movs	r3, r0
    6a1a:	3b28      	subs	r3, #40	; 0x28
    6a1c:	409f      	lsls	r7, r3
    6a1e:	2300      	movs	r3, #0
    6a20:	46bb      	mov	fp, r7
    6a22:	4699      	mov	r9, r3
    6a24:	e68a      	b.n	673c <__aeabi_dmul+0x134>
    6a26:	f000 f93b 	bl	6ca0 <__clzsi2>
    6a2a:	3020      	adds	r0, #32
    6a2c:	e674      	b.n	6718 <__aeabi_dmul+0x110>
    6a2e:	46b4      	mov	ip, r6
    6a30:	e7ad      	b.n	698e <__aeabi_dmul+0x386>
    6a32:	2501      	movs	r5, #1
    6a34:	1a2a      	subs	r2, r5, r0
    6a36:	2a38      	cmp	r2, #56	; 0x38
    6a38:	dd06      	ble.n	6a48 <__aeabi_dmul+0x440>
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	2400      	movs	r4, #0
    6a3e:	401d      	ands	r5, r3
    6a40:	2300      	movs	r3, #0
    6a42:	2200      	movs	r2, #0
    6a44:	4699      	mov	r9, r3
    6a46:	e646      	b.n	66d6 <__aeabi_dmul+0xce>
    6a48:	2a1f      	cmp	r2, #31
    6a4a:	dc21      	bgt.n	6a90 <__aeabi_dmul+0x488>
    6a4c:	2520      	movs	r5, #32
    6a4e:	0020      	movs	r0, r4
    6a50:	1aad      	subs	r5, r5, r2
    6a52:	001e      	movs	r6, r3
    6a54:	40ab      	lsls	r3, r5
    6a56:	40a8      	lsls	r0, r5
    6a58:	40d6      	lsrs	r6, r2
    6a5a:	1e5d      	subs	r5, r3, #1
    6a5c:	41ab      	sbcs	r3, r5
    6a5e:	4330      	orrs	r0, r6
    6a60:	4318      	orrs	r0, r3
    6a62:	40d4      	lsrs	r4, r2
    6a64:	0743      	lsls	r3, r0, #29
    6a66:	d009      	beq.n	6a7c <__aeabi_dmul+0x474>
    6a68:	230f      	movs	r3, #15
    6a6a:	4003      	ands	r3, r0
    6a6c:	2b04      	cmp	r3, #4
    6a6e:	d005      	beq.n	6a7c <__aeabi_dmul+0x474>
    6a70:	0003      	movs	r3, r0
    6a72:	1d18      	adds	r0, r3, #4
    6a74:	4298      	cmp	r0, r3
    6a76:	419b      	sbcs	r3, r3
    6a78:	425b      	negs	r3, r3
    6a7a:	18e4      	adds	r4, r4, r3
    6a7c:	0223      	lsls	r3, r4, #8
    6a7e:	d521      	bpl.n	6ac4 <__aeabi_dmul+0x4bc>
    6a80:	2501      	movs	r5, #1
    6a82:	9b01      	ldr	r3, [sp, #4]
    6a84:	2401      	movs	r4, #1
    6a86:	401d      	ands	r5, r3
    6a88:	2300      	movs	r3, #0
    6a8a:	2200      	movs	r2, #0
    6a8c:	4699      	mov	r9, r3
    6a8e:	e622      	b.n	66d6 <__aeabi_dmul+0xce>
    6a90:	251f      	movs	r5, #31
    6a92:	0021      	movs	r1, r4
    6a94:	426d      	negs	r5, r5
    6a96:	1a28      	subs	r0, r5, r0
    6a98:	40c1      	lsrs	r1, r0
    6a9a:	0008      	movs	r0, r1
    6a9c:	2a20      	cmp	r2, #32
    6a9e:	d01d      	beq.n	6adc <__aeabi_dmul+0x4d4>
    6aa0:	355f      	adds	r5, #95	; 0x5f
    6aa2:	1aaa      	subs	r2, r5, r2
    6aa4:	4094      	lsls	r4, r2
    6aa6:	4323      	orrs	r3, r4
    6aa8:	1e5c      	subs	r4, r3, #1
    6aaa:	41a3      	sbcs	r3, r4
    6aac:	2507      	movs	r5, #7
    6aae:	4303      	orrs	r3, r0
    6ab0:	401d      	ands	r5, r3
    6ab2:	2200      	movs	r2, #0
    6ab4:	2d00      	cmp	r5, #0
    6ab6:	d009      	beq.n	6acc <__aeabi_dmul+0x4c4>
    6ab8:	220f      	movs	r2, #15
    6aba:	2400      	movs	r4, #0
    6abc:	401a      	ands	r2, r3
    6abe:	0018      	movs	r0, r3
    6ac0:	2a04      	cmp	r2, #4
    6ac2:	d1d6      	bne.n	6a72 <__aeabi_dmul+0x46a>
    6ac4:	0003      	movs	r3, r0
    6ac6:	0765      	lsls	r5, r4, #29
    6ac8:	0264      	lsls	r4, r4, #9
    6aca:	0b22      	lsrs	r2, r4, #12
    6acc:	08db      	lsrs	r3, r3, #3
    6ace:	432b      	orrs	r3, r5
    6ad0:	2501      	movs	r5, #1
    6ad2:	4699      	mov	r9, r3
    6ad4:	9b01      	ldr	r3, [sp, #4]
    6ad6:	2400      	movs	r4, #0
    6ad8:	401d      	ands	r5, r3
    6ada:	e5fc      	b.n	66d6 <__aeabi_dmul+0xce>
    6adc:	2400      	movs	r4, #0
    6ade:	e7e2      	b.n	6aa6 <__aeabi_dmul+0x49e>
    6ae0:	2280      	movs	r2, #128	; 0x80
    6ae2:	2501      	movs	r5, #1
    6ae4:	0312      	lsls	r2, r2, #12
    6ae6:	4322      	orrs	r2, r4
    6ae8:	9901      	ldr	r1, [sp, #4]
    6aea:	0312      	lsls	r2, r2, #12
    6aec:	0b12      	lsrs	r2, r2, #12
    6aee:	400d      	ands	r5, r1
    6af0:	4699      	mov	r9, r3
    6af2:	4c04      	ldr	r4, [pc, #16]	; (6b04 <__aeabi_dmul+0x4fc>)
    6af4:	e5ef      	b.n	66d6 <__aeabi_dmul+0xce>
    6af6:	46c0      	nop			; (mov r8, r8)
    6af8:	000003ff 	.word	0x000003ff
    6afc:	feffffff 	.word	0xfeffffff
    6b00:	000007fe 	.word	0x000007fe
    6b04:	000007ff 	.word	0x000007ff

00006b08 <__aeabi_i2d>:
    6b08:	b570      	push	{r4, r5, r6, lr}
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d030      	beq.n	6b70 <__aeabi_i2d+0x68>
    6b0e:	17c3      	asrs	r3, r0, #31
    6b10:	18c4      	adds	r4, r0, r3
    6b12:	405c      	eors	r4, r3
    6b14:	0fc5      	lsrs	r5, r0, #31
    6b16:	0020      	movs	r0, r4
    6b18:	f000 f8c2 	bl	6ca0 <__clzsi2>
    6b1c:	4b17      	ldr	r3, [pc, #92]	; (6b7c <__aeabi_i2d+0x74>)
    6b1e:	4a18      	ldr	r2, [pc, #96]	; (6b80 <__aeabi_i2d+0x78>)
    6b20:	1a1b      	subs	r3, r3, r0
    6b22:	1ad2      	subs	r2, r2, r3
    6b24:	2a1f      	cmp	r2, #31
    6b26:	dd18      	ble.n	6b5a <__aeabi_i2d+0x52>
    6b28:	4a16      	ldr	r2, [pc, #88]	; (6b84 <__aeabi_i2d+0x7c>)
    6b2a:	1ad2      	subs	r2, r2, r3
    6b2c:	4094      	lsls	r4, r2
    6b2e:	2200      	movs	r2, #0
    6b30:	0324      	lsls	r4, r4, #12
    6b32:	055b      	lsls	r3, r3, #21
    6b34:	0b24      	lsrs	r4, r4, #12
    6b36:	0d5b      	lsrs	r3, r3, #21
    6b38:	2100      	movs	r1, #0
    6b3a:	0010      	movs	r0, r2
    6b3c:	0324      	lsls	r4, r4, #12
    6b3e:	0d0a      	lsrs	r2, r1, #20
    6b40:	0b24      	lsrs	r4, r4, #12
    6b42:	0512      	lsls	r2, r2, #20
    6b44:	4322      	orrs	r2, r4
    6b46:	4c10      	ldr	r4, [pc, #64]	; (6b88 <__aeabi_i2d+0x80>)
    6b48:	051b      	lsls	r3, r3, #20
    6b4a:	4022      	ands	r2, r4
    6b4c:	4313      	orrs	r3, r2
    6b4e:	005b      	lsls	r3, r3, #1
    6b50:	07ed      	lsls	r5, r5, #31
    6b52:	085b      	lsrs	r3, r3, #1
    6b54:	432b      	orrs	r3, r5
    6b56:	0019      	movs	r1, r3
    6b58:	bd70      	pop	{r4, r5, r6, pc}
    6b5a:	0021      	movs	r1, r4
    6b5c:	4091      	lsls	r1, r2
    6b5e:	000a      	movs	r2, r1
    6b60:	210b      	movs	r1, #11
    6b62:	1a08      	subs	r0, r1, r0
    6b64:	40c4      	lsrs	r4, r0
    6b66:	055b      	lsls	r3, r3, #21
    6b68:	0324      	lsls	r4, r4, #12
    6b6a:	0b24      	lsrs	r4, r4, #12
    6b6c:	0d5b      	lsrs	r3, r3, #21
    6b6e:	e7e3      	b.n	6b38 <__aeabi_i2d+0x30>
    6b70:	2500      	movs	r5, #0
    6b72:	2300      	movs	r3, #0
    6b74:	2400      	movs	r4, #0
    6b76:	2200      	movs	r2, #0
    6b78:	e7de      	b.n	6b38 <__aeabi_i2d+0x30>
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	0000041e 	.word	0x0000041e
    6b80:	00000433 	.word	0x00000433
    6b84:	00000413 	.word	0x00000413
    6b88:	800fffff 	.word	0x800fffff

00006b8c <__aeabi_d2f>:
    6b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8e:	004c      	lsls	r4, r1, #1
    6b90:	0d64      	lsrs	r4, r4, #21
    6b92:	030b      	lsls	r3, r1, #12
    6b94:	1c62      	adds	r2, r4, #1
    6b96:	0f45      	lsrs	r5, r0, #29
    6b98:	0a5b      	lsrs	r3, r3, #9
    6b9a:	0552      	lsls	r2, r2, #21
    6b9c:	432b      	orrs	r3, r5
    6b9e:	0fc9      	lsrs	r1, r1, #31
    6ba0:	00c5      	lsls	r5, r0, #3
    6ba2:	0d52      	lsrs	r2, r2, #21
    6ba4:	2a01      	cmp	r2, #1
    6ba6:	dd28      	ble.n	6bfa <__aeabi_d2f+0x6e>
    6ba8:	4a3a      	ldr	r2, [pc, #232]	; (6c94 <__aeabi_d2f+0x108>)
    6baa:	18a6      	adds	r6, r4, r2
    6bac:	2efe      	cmp	r6, #254	; 0xfe
    6bae:	dc1b      	bgt.n	6be8 <__aeabi_d2f+0x5c>
    6bb0:	2e00      	cmp	r6, #0
    6bb2:	dd3e      	ble.n	6c32 <__aeabi_d2f+0xa6>
    6bb4:	0180      	lsls	r0, r0, #6
    6bb6:	0002      	movs	r2, r0
    6bb8:	1e50      	subs	r0, r2, #1
    6bba:	4182      	sbcs	r2, r0
    6bbc:	0f6d      	lsrs	r5, r5, #29
    6bbe:	432a      	orrs	r2, r5
    6bc0:	00db      	lsls	r3, r3, #3
    6bc2:	4313      	orrs	r3, r2
    6bc4:	075a      	lsls	r2, r3, #29
    6bc6:	d004      	beq.n	6bd2 <__aeabi_d2f+0x46>
    6bc8:	220f      	movs	r2, #15
    6bca:	401a      	ands	r2, r3
    6bcc:	2a04      	cmp	r2, #4
    6bce:	d000      	beq.n	6bd2 <__aeabi_d2f+0x46>
    6bd0:	3304      	adds	r3, #4
    6bd2:	2280      	movs	r2, #128	; 0x80
    6bd4:	04d2      	lsls	r2, r2, #19
    6bd6:	401a      	ands	r2, r3
    6bd8:	d05a      	beq.n	6c90 <__aeabi_d2f+0x104>
    6bda:	3601      	adds	r6, #1
    6bdc:	2eff      	cmp	r6, #255	; 0xff
    6bde:	d003      	beq.n	6be8 <__aeabi_d2f+0x5c>
    6be0:	019b      	lsls	r3, r3, #6
    6be2:	0a5b      	lsrs	r3, r3, #9
    6be4:	b2f4      	uxtb	r4, r6
    6be6:	e001      	b.n	6bec <__aeabi_d2f+0x60>
    6be8:	24ff      	movs	r4, #255	; 0xff
    6bea:	2300      	movs	r3, #0
    6bec:	0258      	lsls	r0, r3, #9
    6bee:	05e4      	lsls	r4, r4, #23
    6bf0:	0a40      	lsrs	r0, r0, #9
    6bf2:	07c9      	lsls	r1, r1, #31
    6bf4:	4320      	orrs	r0, r4
    6bf6:	4308      	orrs	r0, r1
    6bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bfa:	2c00      	cmp	r4, #0
    6bfc:	d007      	beq.n	6c0e <__aeabi_d2f+0x82>
    6bfe:	431d      	orrs	r5, r3
    6c00:	d0f2      	beq.n	6be8 <__aeabi_d2f+0x5c>
    6c02:	2080      	movs	r0, #128	; 0x80
    6c04:	00db      	lsls	r3, r3, #3
    6c06:	0480      	lsls	r0, r0, #18
    6c08:	4303      	orrs	r3, r0
    6c0a:	26ff      	movs	r6, #255	; 0xff
    6c0c:	e7da      	b.n	6bc4 <__aeabi_d2f+0x38>
    6c0e:	432b      	orrs	r3, r5
    6c10:	d003      	beq.n	6c1a <__aeabi_d2f+0x8e>
    6c12:	2305      	movs	r3, #5
    6c14:	08db      	lsrs	r3, r3, #3
    6c16:	2cff      	cmp	r4, #255	; 0xff
    6c18:	d003      	beq.n	6c22 <__aeabi_d2f+0x96>
    6c1a:	025b      	lsls	r3, r3, #9
    6c1c:	0a5b      	lsrs	r3, r3, #9
    6c1e:	b2e4      	uxtb	r4, r4
    6c20:	e7e4      	b.n	6bec <__aeabi_d2f+0x60>
    6c22:	2b00      	cmp	r3, #0
    6c24:	d032      	beq.n	6c8c <__aeabi_d2f+0x100>
    6c26:	2080      	movs	r0, #128	; 0x80
    6c28:	03c0      	lsls	r0, r0, #15
    6c2a:	4303      	orrs	r3, r0
    6c2c:	025b      	lsls	r3, r3, #9
    6c2e:	0a5b      	lsrs	r3, r3, #9
    6c30:	e7dc      	b.n	6bec <__aeabi_d2f+0x60>
    6c32:	0032      	movs	r2, r6
    6c34:	3217      	adds	r2, #23
    6c36:	db14      	blt.n	6c62 <__aeabi_d2f+0xd6>
    6c38:	2280      	movs	r2, #128	; 0x80
    6c3a:	271e      	movs	r7, #30
    6c3c:	0412      	lsls	r2, r2, #16
    6c3e:	4313      	orrs	r3, r2
    6c40:	1bbf      	subs	r7, r7, r6
    6c42:	2f1f      	cmp	r7, #31
    6c44:	dc0f      	bgt.n	6c66 <__aeabi_d2f+0xda>
    6c46:	4a14      	ldr	r2, [pc, #80]	; (6c98 <__aeabi_d2f+0x10c>)
    6c48:	4694      	mov	ip, r2
    6c4a:	4464      	add	r4, ip
    6c4c:	002a      	movs	r2, r5
    6c4e:	40a5      	lsls	r5, r4
    6c50:	002e      	movs	r6, r5
    6c52:	40a3      	lsls	r3, r4
    6c54:	1e75      	subs	r5, r6, #1
    6c56:	41ae      	sbcs	r6, r5
    6c58:	40fa      	lsrs	r2, r7
    6c5a:	4333      	orrs	r3, r6
    6c5c:	4313      	orrs	r3, r2
    6c5e:	2600      	movs	r6, #0
    6c60:	e7b0      	b.n	6bc4 <__aeabi_d2f+0x38>
    6c62:	2400      	movs	r4, #0
    6c64:	e7d5      	b.n	6c12 <__aeabi_d2f+0x86>
    6c66:	2202      	movs	r2, #2
    6c68:	4252      	negs	r2, r2
    6c6a:	1b96      	subs	r6, r2, r6
    6c6c:	001a      	movs	r2, r3
    6c6e:	40f2      	lsrs	r2, r6
    6c70:	2f20      	cmp	r7, #32
    6c72:	d009      	beq.n	6c88 <__aeabi_d2f+0xfc>
    6c74:	4809      	ldr	r0, [pc, #36]	; (6c9c <__aeabi_d2f+0x110>)
    6c76:	4684      	mov	ip, r0
    6c78:	4464      	add	r4, ip
    6c7a:	40a3      	lsls	r3, r4
    6c7c:	432b      	orrs	r3, r5
    6c7e:	1e5d      	subs	r5, r3, #1
    6c80:	41ab      	sbcs	r3, r5
    6c82:	2600      	movs	r6, #0
    6c84:	4313      	orrs	r3, r2
    6c86:	e79d      	b.n	6bc4 <__aeabi_d2f+0x38>
    6c88:	2300      	movs	r3, #0
    6c8a:	e7f7      	b.n	6c7c <__aeabi_d2f+0xf0>
    6c8c:	2300      	movs	r3, #0
    6c8e:	e7ad      	b.n	6bec <__aeabi_d2f+0x60>
    6c90:	0034      	movs	r4, r6
    6c92:	e7bf      	b.n	6c14 <__aeabi_d2f+0x88>
    6c94:	fffffc80 	.word	0xfffffc80
    6c98:	fffffc82 	.word	0xfffffc82
    6c9c:	fffffca2 	.word	0xfffffca2

00006ca0 <__clzsi2>:
    6ca0:	211c      	movs	r1, #28
    6ca2:	2301      	movs	r3, #1
    6ca4:	041b      	lsls	r3, r3, #16
    6ca6:	4298      	cmp	r0, r3
    6ca8:	d301      	bcc.n	6cae <__clzsi2+0xe>
    6caa:	0c00      	lsrs	r0, r0, #16
    6cac:	3910      	subs	r1, #16
    6cae:	0a1b      	lsrs	r3, r3, #8
    6cb0:	4298      	cmp	r0, r3
    6cb2:	d301      	bcc.n	6cb8 <__clzsi2+0x18>
    6cb4:	0a00      	lsrs	r0, r0, #8
    6cb6:	3908      	subs	r1, #8
    6cb8:	091b      	lsrs	r3, r3, #4
    6cba:	4298      	cmp	r0, r3
    6cbc:	d301      	bcc.n	6cc2 <__clzsi2+0x22>
    6cbe:	0900      	lsrs	r0, r0, #4
    6cc0:	3904      	subs	r1, #4
    6cc2:	a202      	add	r2, pc, #8	; (adr r2, 6ccc <__clzsi2+0x2c>)
    6cc4:	5c10      	ldrb	r0, [r2, r0]
    6cc6:	1840      	adds	r0, r0, r1
    6cc8:	4770      	bx	lr
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	02020304 	.word	0x02020304
    6cd0:	01010101 	.word	0x01010101
	...

00006cdc <__libc_init_array>:
    6cdc:	b570      	push	{r4, r5, r6, lr}
    6cde:	2600      	movs	r6, #0
    6ce0:	4d0c      	ldr	r5, [pc, #48]	; (6d14 <__libc_init_array+0x38>)
    6ce2:	4c0d      	ldr	r4, [pc, #52]	; (6d18 <__libc_init_array+0x3c>)
    6ce4:	1b64      	subs	r4, r4, r5
    6ce6:	10a4      	asrs	r4, r4, #2
    6ce8:	42a6      	cmp	r6, r4
    6cea:	d109      	bne.n	6d00 <__libc_init_array+0x24>
    6cec:	2600      	movs	r6, #0
    6cee:	f000 f9dd 	bl	70ac <_init>
    6cf2:	4d0a      	ldr	r5, [pc, #40]	; (6d1c <__libc_init_array+0x40>)
    6cf4:	4c0a      	ldr	r4, [pc, #40]	; (6d20 <__libc_init_array+0x44>)
    6cf6:	1b64      	subs	r4, r4, r5
    6cf8:	10a4      	asrs	r4, r4, #2
    6cfa:	42a6      	cmp	r6, r4
    6cfc:	d105      	bne.n	6d0a <__libc_init_array+0x2e>
    6cfe:	bd70      	pop	{r4, r5, r6, pc}
    6d00:	00b3      	lsls	r3, r6, #2
    6d02:	58eb      	ldr	r3, [r5, r3]
    6d04:	4798      	blx	r3
    6d06:	3601      	adds	r6, #1
    6d08:	e7ee      	b.n	6ce8 <__libc_init_array+0xc>
    6d0a:	00b3      	lsls	r3, r6, #2
    6d0c:	58eb      	ldr	r3, [r5, r3]
    6d0e:	4798      	blx	r3
    6d10:	3601      	adds	r6, #1
    6d12:	e7f2      	b.n	6cfa <__libc_init_array+0x1e>
    6d14:	000070b8 	.word	0x000070b8
    6d18:	000070b8 	.word	0x000070b8
    6d1c:	000070b8 	.word	0x000070b8
    6d20:	000070bc 	.word	0x000070bc

00006d24 <memset>:
    6d24:	0003      	movs	r3, r0
    6d26:	1882      	adds	r2, r0, r2
    6d28:	4293      	cmp	r3, r2
    6d2a:	d100      	bne.n	6d2e <memset+0xa>
    6d2c:	4770      	bx	lr
    6d2e:	7019      	strb	r1, [r3, #0]
    6d30:	3301      	adds	r3, #1
    6d32:	e7f9      	b.n	6d28 <memset+0x4>
    6d34:	682f2e2e 	.word	0x682f2e2e
    6d38:	702f6c70 	.word	0x702f6c70
    6d3c:	2f74726f 	.word	0x2f74726f
    6d40:	5f6c7068 	.word	0x5f6c7068
    6d44:	6f697067 	.word	0x6f697067
    6d48:	7361625f 	.word	0x7361625f
    6d4c:	00682e65 	.word	0x00682e65
    6d50:	682f2e2e 	.word	0x682f2e2e
    6d54:	692f6c61 	.word	0x692f6c61
    6d58:	756c636e 	.word	0x756c636e
    6d5c:	682f6564 	.word	0x682f6564
    6d60:	775f6c61 	.word	0x775f6c61
    6d64:	682e7464 	.word	0x682e7464
    6d68:	00000000 	.word	0x00000000
    6d6c:	00000fe4 	.word	0x00000fe4
    6d70:	00000fae 	.word	0x00000fae
    6d74:	00000fb4 	.word	0x00000fb4
    6d78:	00000fae 	.word	0x00000fae
    6d7c:	00000fba 	.word	0x00000fba
    6d80:	00000fae 	.word	0x00000fae
    6d84:	00000fba 	.word	0x00000fba
    6d88:	00000fae 	.word	0x00000fae
    6d8c:	00000fae 	.word	0x00000fae
    6d90:	00000fba 	.word	0x00000fba
    6d94:	00000fae 	.word	0x00000fae
    6d98:	00000fba 	.word	0x00000fba
    6d9c:	00000fae 	.word	0x00000fae
    6da0:	00000fe8 	.word	0x00000fe8
    6da4:	00000fd2 	.word	0x00000fd2
    6da8:	00000fd8 	.word	0x00000fd8
    6dac:	00000fd2 	.word	0x00000fd2
    6db0:	00000fde 	.word	0x00000fde
    6db4:	00000fd2 	.word	0x00000fd2
    6db8:	00000fde 	.word	0x00000fde
    6dbc:	00000fd2 	.word	0x00000fd2
    6dc0:	00000fd2 	.word	0x00000fd2
    6dc4:	00000fde 	.word	0x00000fde
    6dc8:	00000fd2 	.word	0x00000fd2
    6dcc:	00000fde 	.word	0x00000fde
    6dd0:	00000fd2 	.word	0x00000fd2
    6dd4:	0000135a 	.word	0x0000135a
    6dd8:	000012ce 	.word	0x000012ce
    6ddc:	000012de 	.word	0x000012de
    6de0:	000012f4 	.word	0x000012f4
    6de4:	00001308 	.word	0x00001308
    6de8:	0000132c 	.word	0x0000132c
    6dec:	00001478 	.word	0x00001478
    6df0:	000013d8 	.word	0x000013d8
    6df4:	0000140c 	.word	0x0000140c
    6df8:	00001436 	.word	0x00001436
    6dfc:	00001456 	.word	0x00001456
    6e00:	0000146c 	.word	0x0000146c
    6e04:	00001478 	.word	0x00001478
    6e08:	682f2e2e 	.word	0x682f2e2e
    6e0c:	732f6c61 	.word	0x732f6c61
    6e10:	682f6372 	.word	0x682f6372
    6e14:	635f6c61 	.word	0x635f6c61
    6e18:	6e656c61 	.word	0x6e656c61
    6e1c:	2e726164 	.word	0x2e726164
    6e20:	00000063 	.word	0x00000063
    6e24:	682f2e2e 	.word	0x682f2e2e
    6e28:	732f6c61 	.word	0x732f6c61
    6e2c:	682f6372 	.word	0x682f6372
    6e30:	695f6c61 	.word	0x695f6c61
    6e34:	6d5f6332 	.word	0x6d5f6332
    6e38:	6e79735f 	.word	0x6e79735f
    6e3c:	00632e63 	.word	0x00632e63
    6e40:	682f2e2e 	.word	0x682f2e2e
    6e44:	732f6c61 	.word	0x732f6c61
    6e48:	682f6372 	.word	0x682f6372
    6e4c:	695f6c61 	.word	0x695f6c61
    6e50:	735f6332 	.word	0x735f6332
    6e54:	7973615f 	.word	0x7973615f
    6e58:	632e636e 	.word	0x632e636e
    6e5c:	00000000 	.word	0x00000000
    6e60:	682f2e2e 	.word	0x682f2e2e
    6e64:	732f6c61 	.word	0x732f6c61
    6e68:	682f6372 	.word	0x682f6372
    6e6c:	695f6c61 	.word	0x695f6c61
    6e70:	00632e6f 	.word	0x00632e6f
    6e74:	682f2e2e 	.word	0x682f2e2e
    6e78:	732f6c61 	.word	0x732f6c61
    6e7c:	682f6372 	.word	0x682f6372
    6e80:	745f6c61 	.word	0x745f6c61
    6e84:	72656d69 	.word	0x72656d69
    6e88:	0000632e 	.word	0x0000632e
    6e8c:	682f2e2e 	.word	0x682f2e2e
    6e90:	732f6c61 	.word	0x732f6c61
    6e94:	682f6372 	.word	0x682f6372
    6e98:	755f6c61 	.word	0x755f6c61
    6e9c:	74726173 	.word	0x74726173
    6ea0:	7973615f 	.word	0x7973615f
    6ea4:	632e636e 	.word	0x632e636e
    6ea8:	00000000 	.word	0x00000000
    6eac:	682f2e2e 	.word	0x682f2e2e
    6eb0:	752f6c61 	.word	0x752f6c61
    6eb4:	736c6974 	.word	0x736c6974
    6eb8:	6372732f 	.word	0x6372732f
    6ebc:	6974752f 	.word	0x6974752f
    6ec0:	655f736c 	.word	0x655f736c
    6ec4:	746e6576 	.word	0x746e6576
    6ec8:	0000632e 	.word	0x0000632e
    6ecc:	682f2e2e 	.word	0x682f2e2e
    6ed0:	752f6c61 	.word	0x752f6c61
    6ed4:	736c6974 	.word	0x736c6974
    6ed8:	6372732f 	.word	0x6372732f
    6edc:	6974752f 	.word	0x6974752f
    6ee0:	6c5f736c 	.word	0x6c5f736c
    6ee4:	2e747369 	.word	0x2e747369
    6ee8:	00000063 	.word	0x00000063
    6eec:	682f2e2e 	.word	0x682f2e2e
    6ef0:	752f6c61 	.word	0x752f6c61
    6ef4:	736c6974 	.word	0x736c6974
    6ef8:	6372732f 	.word	0x6372732f
    6efc:	6974752f 	.word	0x6974752f
    6f00:	725f736c 	.word	0x725f736c
    6f04:	62676e69 	.word	0x62676e69
    6f08:	65666675 	.word	0x65666675
    6f0c:	00632e72 	.word	0x00632e72
    6f10:	682f2e2e 	.word	0x682f2e2e
    6f14:	632f6c70 	.word	0x632f6c70
    6f18:	2f65726f 	.word	0x2f65726f
    6f1c:	5f6c7068 	.word	0x5f6c7068
    6f20:	65726f63 	.word	0x65726f63
    6f24:	70306d5f 	.word	0x70306d5f
    6f28:	5f73756c 	.word	0x5f73756c
    6f2c:	65736162 	.word	0x65736162
    6f30:	0000632e 	.word	0x0000632e
    6f34:	000024e6 	.word	0x000024e6
    6f38:	000024c4 	.word	0x000024c4
    6f3c:	000024a2 	.word	0x000024a2
    6f40:	00002480 	.word	0x00002480
    6f44:	0000245e 	.word	0x0000245e
    6f48:	000025d2 	.word	0x000025d2
    6f4c:	000025b0 	.word	0x000025b0
    6f50:	0000259c 	.word	0x0000259c
    6f54:	0000257e 	.word	0x0000257e
    6f58:	00002566 	.word	0x00002566
    6f5c:	682f2e2e 	.word	0x682f2e2e
    6f60:	722f6c70 	.word	0x722f6c70
    6f64:	682f6374 	.word	0x682f6374
    6f68:	725f6c70 	.word	0x725f6c70
    6f6c:	632e6374 	.word	0x632e6374
    6f70:	00000000 	.word	0x00000000
    6f74:	682f2e2e 	.word	0x682f2e2e
    6f78:	732f6c70 	.word	0x732f6c70
    6f7c:	6f637265 	.word	0x6f637265
    6f80:	70682f6d 	.word	0x70682f6d
    6f84:	65735f6c 	.word	0x65735f6c
    6f88:	6d6f6372 	.word	0x6d6f6372
    6f8c:	0000632e 	.word	0x0000632e

00006f90 <sercomspi_regs>:
	...
    6fa4:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    6fb4:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    6fc4:	775f6c70 632e7464 00000000 000051fe     pl_wdt.c.....Q..
    6fd4:	00005204 0000520a 00005210 00005216     .R...R...R...R..
    6fe4:	0000521c 00005224 0000522c 00005234     .R..$R..,R..4R..
    6ff4:	0000523c 00005244 0000524c 732f2e2e     <R..DR..LR..../s
    7004:	7065656c 6e616d5f 72656761 656c732f     leep_manager/sle
    7014:	6d5f7065 67616e61 632e7265 00000000     ep_manager.c....

00007024 <mcp980x_interface>:
    7024:	000054d9 000055a5 000060dc 0000602c     .T...U...`..,`..
    7034:	0000602c 0000602a 000060ce 000060ce     ,`..*`...`...`..
    7044:	000060c4 0000602a 000060ce 000060c4     .`..*`...`...`..
    7054:	000060ce 0000602a 000060d4 000060d4     .`..*`...`...`..
    7064:	000060d4 00006164 000067f8 000066b8     .`..da...g...f..
    7074:	000066b8 000066b4 000067d0 000067d0     .f...f...g...g..
    7084:	000067c2 000066b4 000067d0 000067c2     .g...f...g...g..
    7094:	000067d0 000066b4 000067d8 000067d8     .g...f...g...g..
    70a4:	000067d8 000069dc                       .g...i..

000070ac <_init>:
    70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    70b2:	bc08      	pop	{r3}
    70b4:	469e      	mov	lr, r3
    70b6:	4770      	bx	lr

000070b8 <__init_array_start>:
    70b8:	000000dd 	.word	0x000000dd

000070bc <_fini>:
    70bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    70c2:	bc08      	pop	{r3}
    70c4:	469e      	mov	lr, r3
    70c6:	4770      	bx	lr

000070c8 <__fini_array_start>:
    70c8:	000000b5 	.word	0x000000b5
