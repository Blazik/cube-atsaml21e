
SatCube_SAML21E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004708  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000003c  20000000  00004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002003c  2**0
                  CONTENTS
  3 .bss          0000016c  2000003c  00004744  0002003c  2**2
                  ALLOC
  4 .stack        00002000  200001a8  000048b0  0002003c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001eb56  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e68  00000000  00000000  0003ec13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000072d4  00000000  00000000  00041a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001318  00000000  00000000  00048d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001178  00000000  00000000  0004a067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001cdc2  00000000  00000000  0004b1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014d5e  00000000  00000000  00067fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008c3bc  00000000  00000000  0007ccff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004584  00000000  00000000  001090bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 21 00 20 31 01 00 00 c5 01 00 00 c5 01 00 00     .!. 1...........
	...
      2c:	c5 01 00 00 00 00 00 00 00 00 00 00 c5 01 00 00     ................
      3c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 51 17 00 00     ............Q...
      4c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      5c:	c5 01 00 00 85 27 00 00 a1 27 00 00 c5 01 00 00     .....'...'......
      6c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      7c:	c5 01 00 00 c5 01 00 00 f1 28 00 00 c5 01 00 00     .........(......
	...
      94:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      a4:	c5 01 00 00 c5 01 00 00 c5 01 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000003c 	.word	0x2000003c
      d4:	00000000 	.word	0x00000000
      d8:	00004708 	.word	0x00004708

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000040 	.word	0x20000040
     108:	00004708 	.word	0x00004708
     10c:	00004708 	.word	0x00004708
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11a:	4798      	blx	r3
	sleep_manager_init();
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     11e:	4798      	blx	r3
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	000009f9 	.word	0x000009f9
     12c:	00002be1 	.word	0x00002be1

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b19      	ldr	r3, [pc, #100]	; (19c <Reset_Handler+0x6c>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x70>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <Reset_Handler+0x74>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b11      	ldr	r3, [pc, #68]	; (1a8 <Reset_Handler+0x78>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0e      	ldr	r3, [pc, #56]	; (1ac <Reset_Handler+0x7c>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0d      	ldr	r3, [pc, #52]	; (1b0 <Reset_Handler+0x80>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x84>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     186:	4a0c      	ldr	r2, [pc, #48]	; (1b8 <Reset_Handler+0x88>)
     188:	6853      	ldr	r3, [r2, #4]
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	430b      	orrs	r3, r1
     18e:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     190:	4b0a      	ldr	r3, [pc, #40]	; (1bc <Reset_Handler+0x8c>)
     192:	4798      	blx	r3

        /* Branch to main function */
        main();
     194:	4b0a      	ldr	r3, [pc, #40]	; (1c0 <Reset_Handler+0x90>)
     196:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     198:	e7fe      	b.n	198 <Reset_Handler+0x68>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	00004708 	.word	0x00004708
     1a0:	20000000 	.word	0x20000000
     1a4:	2000003c 	.word	0x2000003c
     1a8:	2000003c 	.word	0x2000003c
     1ac:	200001a8 	.word	0x200001a8
     1b0:	00000000 	.word	0x00000000
     1b4:	e000ed00 	.word	0xe000ed00
     1b8:	41004000 	.word	0x41004000
     1bc:	000044c1 	.word	0x000044c1
     1c0:	000029f5 	.word	0x000029f5

000001c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	af00      	add	r7, sp, #0
        while (1) {
     1c8:	e7fe      	b.n	1c8 <Dummy_Handler+0x4>

000001ca <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ca:	b580      	push	{r7, lr}
     1cc:	b084      	sub	sp, #16
     1ce:	af00      	add	r7, sp, #0
     1d0:	60f8      	str	r0, [r7, #12]
     1d2:	607a      	str	r2, [r7, #4]
     1d4:	230b      	movs	r3, #11
     1d6:	18fb      	adds	r3, r7, r3
     1d8:	1c0a      	adds	r2, r1, #0
     1da:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1dc:	230b      	movs	r3, #11
     1de:	18fb      	adds	r3, r7, r3
     1e0:	781a      	ldrb	r2, [r3, #0]
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	3220      	adds	r2, #32
     1e6:	0092      	lsls	r2, r2, #2
     1e8:	6879      	ldr	r1, [r7, #4]
     1ea:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1ec:	46c0      	nop			; (mov r8, r8)
     1ee:	46bd      	mov	sp, r7
     1f0:	b004      	add	sp, #16
     1f2:	bd80      	pop	{r7, pc}

000001f4 <hri_mclk_set_APBCMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM2_bit(const void *const hw)
{
     1f4:	b580      	push	{r7, lr}
     1f6:	b082      	sub	sp, #8
     1f8:	af00      	add	r7, sp, #0
     1fa:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	69db      	ldr	r3, [r3, #28]
     200:	2204      	movs	r2, #4
     202:	431a      	orrs	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}

00000210 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     210:	b580      	push	{r7, lr}
     212:	b084      	sub	sp, #16
     214:	af00      	add	r7, sp, #0
     216:	60f8      	str	r0, [r7, #12]
     218:	607a      	str	r2, [r7, #4]
     21a:	230b      	movs	r3, #11
     21c:	18fb      	adds	r3, r7, r3
     21e:	1c0a      	adds	r2, r1, #0
     220:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     222:	230b      	movs	r3, #11
     224:	18fb      	adds	r3, r7, r3
     226:	781b      	ldrb	r3, [r3, #0]
     228:	68fa      	ldr	r2, [r7, #12]
     22a:	01db      	lsls	r3, r3, #7
     22c:	18d3      	adds	r3, r2, r3
     22e:	3308      	adds	r3, #8
     230:	687a      	ldr	r2, [r7, #4]
     232:	601a      	str	r2, [r3, #0]
}
     234:	46c0      	nop			; (mov r8, r8)
     236:	46bd      	mov	sp, r7
     238:	b004      	add	sp, #16
     23a:	bd80      	pop	{r7, pc}

0000023c <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     23c:	b580      	push	{r7, lr}
     23e:	b084      	sub	sp, #16
     240:	af00      	add	r7, sp, #0
     242:	60f8      	str	r0, [r7, #12]
     244:	607a      	str	r2, [r7, #4]
     246:	230b      	movs	r3, #11
     248:	18fb      	adds	r3, r7, r3
     24a:	1c0a      	adds	r2, r1, #0
     24c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     24e:	230b      	movs	r3, #11
     250:	18fb      	adds	r3, r7, r3
     252:	781b      	ldrb	r3, [r3, #0]
     254:	68fa      	ldr	r2, [r7, #12]
     256:	01db      	lsls	r3, r3, #7
     258:	18d3      	adds	r3, r2, r3
     25a:	3304      	adds	r3, #4
     25c:	687a      	ldr	r2, [r7, #4]
     25e:	601a      	str	r2, [r3, #0]
}
     260:	46c0      	nop			; (mov r8, r8)
     262:	46bd      	mov	sp, r7
     264:	b004      	add	sp, #16
     266:	bd80      	pop	{r7, pc}

00000268 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     268:	b580      	push	{r7, lr}
     26a:	b084      	sub	sp, #16
     26c:	af00      	add	r7, sp, #0
     26e:	60f8      	str	r0, [r7, #12]
     270:	607a      	str	r2, [r7, #4]
     272:	230b      	movs	r3, #11
     274:	18fb      	adds	r3, r7, r3
     276:	1c0a      	adds	r2, r1, #0
     278:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	781b      	ldrb	r3, [r3, #0]
     280:	68fa      	ldr	r2, [r7, #12]
     282:	01db      	lsls	r3, r3, #7
     284:	18d3      	adds	r3, r2, r3
     286:	3318      	adds	r3, #24
     288:	687a      	ldr	r2, [r7, #4]
     28a:	601a      	str	r2, [r3, #0]
}
     28c:	46c0      	nop			; (mov r8, r8)
     28e:	46bd      	mov	sp, r7
     290:	b004      	add	sp, #16
     292:	bd80      	pop	{r7, pc}

00000294 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     294:	b580      	push	{r7, lr}
     296:	b084      	sub	sp, #16
     298:	af00      	add	r7, sp, #0
     29a:	60f8      	str	r0, [r7, #12]
     29c:	607a      	str	r2, [r7, #4]
     29e:	230b      	movs	r3, #11
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	1c0a      	adds	r2, r1, #0
     2a4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a6:	230b      	movs	r3, #11
     2a8:	18fb      	adds	r3, r7, r3
     2aa:	781b      	ldrb	r3, [r3, #0]
     2ac:	68fa      	ldr	r2, [r7, #12]
     2ae:	01db      	lsls	r3, r3, #7
     2b0:	18d3      	adds	r3, r2, r3
     2b2:	3314      	adds	r3, #20
     2b4:	687a      	ldr	r2, [r7, #4]
     2b6:	601a      	str	r2, [r3, #0]
}
     2b8:	46c0      	nop			; (mov r8, r8)
     2ba:	46bd      	mov	sp, r7
     2bc:	b004      	add	sp, #16
     2be:	bd80      	pop	{r7, pc}

000002c0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2c0:	b590      	push	{r4, r7, lr}
     2c2:	b085      	sub	sp, #20
     2c4:	af00      	add	r7, sp, #0
     2c6:	6078      	str	r0, [r7, #4]
     2c8:	000c      	movs	r4, r1
     2ca:	0010      	movs	r0, r2
     2cc:	0019      	movs	r1, r3
     2ce:	1cfb      	adds	r3, r7, #3
     2d0:	1c22      	adds	r2, r4, #0
     2d2:	701a      	strb	r2, [r3, #0]
     2d4:	1cbb      	adds	r3, r7, #2
     2d6:	1c02      	adds	r2, r0, #0
     2d8:	701a      	strb	r2, [r3, #0]
     2da:	1c7b      	adds	r3, r7, #1
     2dc:	1c0a      	adds	r2, r1, #0
     2de:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2e0:	1cfb      	adds	r3, r7, #3
     2e2:	7819      	ldrb	r1, [r3, #0]
     2e4:	1cbb      	adds	r3, r7, #2
     2e6:	781a      	ldrb	r2, [r3, #0]
     2e8:	230f      	movs	r3, #15
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	6878      	ldr	r0, [r7, #4]
     2ee:	2430      	movs	r4, #48	; 0x30
     2f0:	01c9      	lsls	r1, r1, #7
     2f2:	1841      	adds	r1, r0, r1
     2f4:	188a      	adds	r2, r1, r2
     2f6:	1912      	adds	r2, r2, r4
     2f8:	7812      	ldrb	r2, [r2, #0]
     2fa:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2fc:	230f      	movs	r3, #15
     2fe:	18fb      	adds	r3, r7, r3
     300:	220f      	movs	r2, #15
     302:	18ba      	adds	r2, r7, r2
     304:	7812      	ldrb	r2, [r2, #0]
     306:	210f      	movs	r1, #15
     308:	438a      	bics	r2, r1
     30a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     30c:	1c7b      	adds	r3, r7, #1
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	220f      	movs	r2, #15
     312:	4013      	ands	r3, r2
     314:	b2d9      	uxtb	r1, r3
     316:	230f      	movs	r3, #15
     318:	18fb      	adds	r3, r7, r3
     31a:	220f      	movs	r2, #15
     31c:	18ba      	adds	r2, r7, r2
     31e:	7812      	ldrb	r2, [r2, #0]
     320:	430a      	orrs	r2, r1
     322:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     324:	1cfb      	adds	r3, r7, #3
     326:	781a      	ldrb	r2, [r3, #0]
     328:	1cbb      	adds	r3, r7, #2
     32a:	781b      	ldrb	r3, [r3, #0]
     32c:	6879      	ldr	r1, [r7, #4]
     32e:	2030      	movs	r0, #48	; 0x30
     330:	01d2      	lsls	r2, r2, #7
     332:	188a      	adds	r2, r1, r2
     334:	18d3      	adds	r3, r2, r3
     336:	181b      	adds	r3, r3, r0
     338:	220f      	movs	r2, #15
     33a:	18ba      	adds	r2, r7, r2
     33c:	7812      	ldrb	r2, [r2, #0]
     33e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b005      	add	sp, #20
     346:	bd90      	pop	{r4, r7, pc}

00000348 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     348:	b590      	push	{r4, r7, lr}
     34a:	b085      	sub	sp, #20
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
     350:	000c      	movs	r4, r1
     352:	0010      	movs	r0, r2
     354:	0019      	movs	r1, r3
     356:	1cfb      	adds	r3, r7, #3
     358:	1c22      	adds	r2, r4, #0
     35a:	701a      	strb	r2, [r3, #0]
     35c:	1cbb      	adds	r3, r7, #2
     35e:	1c02      	adds	r2, r0, #0
     360:	701a      	strb	r2, [r3, #0]
     362:	1c7b      	adds	r3, r7, #1
     364:	1c0a      	adds	r2, r1, #0
     366:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     368:	1cfb      	adds	r3, r7, #3
     36a:	7819      	ldrb	r1, [r3, #0]
     36c:	1cbb      	adds	r3, r7, #2
     36e:	781a      	ldrb	r2, [r3, #0]
     370:	230f      	movs	r3, #15
     372:	18fb      	adds	r3, r7, r3
     374:	6878      	ldr	r0, [r7, #4]
     376:	2430      	movs	r4, #48	; 0x30
     378:	01c9      	lsls	r1, r1, #7
     37a:	1841      	adds	r1, r0, r1
     37c:	188a      	adds	r2, r1, r2
     37e:	1912      	adds	r2, r2, r4
     380:	7812      	ldrb	r2, [r2, #0]
     382:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     384:	230f      	movs	r3, #15
     386:	18fb      	adds	r3, r7, r3
     388:	220f      	movs	r2, #15
     38a:	18ba      	adds	r2, r7, r2
     38c:	7812      	ldrb	r2, [r2, #0]
     38e:	210f      	movs	r1, #15
     390:	400a      	ands	r2, r1
     392:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     394:	1c7b      	adds	r3, r7, #1
     396:	781b      	ldrb	r3, [r3, #0]
     398:	011b      	lsls	r3, r3, #4
     39a:	b2d9      	uxtb	r1, r3
     39c:	230f      	movs	r3, #15
     39e:	18fb      	adds	r3, r7, r3
     3a0:	220f      	movs	r2, #15
     3a2:	18ba      	adds	r2, r7, r2
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	430a      	orrs	r2, r1
     3a8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3aa:	1cfb      	adds	r3, r7, #3
     3ac:	781a      	ldrb	r2, [r3, #0]
     3ae:	1cbb      	adds	r3, r7, #2
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	6879      	ldr	r1, [r7, #4]
     3b4:	2030      	movs	r0, #48	; 0x30
     3b6:	01d2      	lsls	r2, r2, #7
     3b8:	188a      	adds	r2, r1, r2
     3ba:	18d3      	adds	r3, r2, r3
     3bc:	181b      	adds	r3, r3, r0
     3be:	220f      	movs	r2, #15
     3c0:	18ba      	adds	r2, r7, r2
     3c2:	7812      	ldrb	r2, [r2, #0]
     3c4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	46bd      	mov	sp, r7
     3ca:	b005      	add	sp, #20
     3cc:	bd90      	pop	{r4, r7, pc}

000003ce <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     3ce:	b590      	push	{r4, r7, lr}
     3d0:	b085      	sub	sp, #20
     3d2:	af00      	add	r7, sp, #0
     3d4:	6078      	str	r0, [r7, #4]
     3d6:	000c      	movs	r4, r1
     3d8:	0010      	movs	r0, r2
     3da:	0019      	movs	r1, r3
     3dc:	1cfb      	adds	r3, r7, #3
     3de:	1c22      	adds	r2, r4, #0
     3e0:	701a      	strb	r2, [r3, #0]
     3e2:	1cbb      	adds	r3, r7, #2
     3e4:	1c02      	adds	r2, r0, #0
     3e6:	701a      	strb	r2, [r3, #0]
     3e8:	1c7b      	adds	r3, r7, #1
     3ea:	1c0a      	adds	r2, r1, #0
     3ec:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ee:	1cfb      	adds	r3, r7, #3
     3f0:	7819      	ldrb	r1, [r3, #0]
     3f2:	1cbb      	adds	r3, r7, #2
     3f4:	781a      	ldrb	r2, [r3, #0]
     3f6:	230f      	movs	r3, #15
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	6878      	ldr	r0, [r7, #4]
     3fc:	2440      	movs	r4, #64	; 0x40
     3fe:	01c9      	lsls	r1, r1, #7
     400:	1841      	adds	r1, r0, r1
     402:	188a      	adds	r2, r1, r2
     404:	1912      	adds	r2, r2, r4
     406:	7812      	ldrb	r2, [r2, #0]
     408:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     40a:	230f      	movs	r3, #15
     40c:	18fb      	adds	r3, r7, r3
     40e:	220f      	movs	r2, #15
     410:	18ba      	adds	r2, r7, r2
     412:	7812      	ldrb	r2, [r2, #0]
     414:	2101      	movs	r1, #1
     416:	438a      	bics	r2, r1
     418:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     41a:	1c7b      	adds	r3, r7, #1
     41c:	7819      	ldrb	r1, [r3, #0]
     41e:	230f      	movs	r3, #15
     420:	18fb      	adds	r3, r7, r3
     422:	220f      	movs	r2, #15
     424:	18ba      	adds	r2, r7, r2
     426:	7812      	ldrb	r2, [r2, #0]
     428:	430a      	orrs	r2, r1
     42a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42c:	1cfb      	adds	r3, r7, #3
     42e:	781a      	ldrb	r2, [r3, #0]
     430:	1cbb      	adds	r3, r7, #2
     432:	781b      	ldrb	r3, [r3, #0]
     434:	6879      	ldr	r1, [r7, #4]
     436:	2040      	movs	r0, #64	; 0x40
     438:	01d2      	lsls	r2, r2, #7
     43a:	188a      	adds	r2, r1, r2
     43c:	18d3      	adds	r3, r2, r3
     43e:	181b      	adds	r3, r3, r0
     440:	220f      	movs	r2, #15
     442:	18ba      	adds	r2, r7, r2
     444:	7812      	ldrb	r2, [r2, #0]
     446:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     448:	46c0      	nop			; (mov r8, r8)
     44a:	46bd      	mov	sp, r7
     44c:	b005      	add	sp, #20
     44e:	bd90      	pop	{r4, r7, pc}

00000450 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     450:	b5b0      	push	{r4, r5, r7, lr}
     452:	b082      	sub	sp, #8
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
     458:	0008      	movs	r0, r1
     45a:	0011      	movs	r1, r2
     45c:	1cfb      	adds	r3, r7, #3
     45e:	1c02      	adds	r2, r0, #0
     460:	701a      	strb	r2, [r3, #0]
     462:	1cbb      	adds	r3, r7, #2
     464:	1c0a      	adds	r2, r1, #0
     466:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     468:	1cfb      	adds	r3, r7, #3
     46a:	781a      	ldrb	r2, [r3, #0]
     46c:	1cbb      	adds	r3, r7, #2
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	1cf9      	adds	r1, r7, #3
     472:	7808      	ldrb	r0, [r1, #0]
     474:	1cb9      	adds	r1, r7, #2
     476:	7809      	ldrb	r1, [r1, #0]
     478:	687c      	ldr	r4, [r7, #4]
     47a:	2540      	movs	r5, #64	; 0x40
     47c:	01c0      	lsls	r0, r0, #7
     47e:	1820      	adds	r0, r4, r0
     480:	1841      	adds	r1, r0, r1
     482:	1949      	adds	r1, r1, r5
     484:	7809      	ldrb	r1, [r1, #0]
     486:	b2c9      	uxtb	r1, r1
     488:	2004      	movs	r0, #4
     48a:	4301      	orrs	r1, r0
     48c:	b2cc      	uxtb	r4, r1
     48e:	6879      	ldr	r1, [r7, #4]
     490:	2040      	movs	r0, #64	; 0x40
     492:	01d2      	lsls	r2, r2, #7
     494:	188a      	adds	r2, r1, r2
     496:	18d3      	adds	r3, r2, r3
     498:	181b      	adds	r3, r3, r0
     49a:	1c22      	adds	r2, r4, #0
     49c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	46bd      	mov	sp, r7
     4a2:	b002      	add	sp, #8
     4a4:	bdb0      	pop	{r4, r5, r7, pc}

000004a6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4a6:	b5b0      	push	{r4, r5, r7, lr}
     4a8:	b082      	sub	sp, #8
     4aa:	af00      	add	r7, sp, #0
     4ac:	6078      	str	r0, [r7, #4]
     4ae:	0008      	movs	r0, r1
     4b0:	0011      	movs	r1, r2
     4b2:	1cfb      	adds	r3, r7, #3
     4b4:	1c02      	adds	r2, r0, #0
     4b6:	701a      	strb	r2, [r3, #0]
     4b8:	1cbb      	adds	r3, r7, #2
     4ba:	1c0a      	adds	r2, r1, #0
     4bc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4be:	1cfb      	adds	r3, r7, #3
     4c0:	781a      	ldrb	r2, [r3, #0]
     4c2:	1cbb      	adds	r3, r7, #2
     4c4:	781b      	ldrb	r3, [r3, #0]
     4c6:	1cf9      	adds	r1, r7, #3
     4c8:	7808      	ldrb	r0, [r1, #0]
     4ca:	1cb9      	adds	r1, r7, #2
     4cc:	7809      	ldrb	r1, [r1, #0]
     4ce:	687c      	ldr	r4, [r7, #4]
     4d0:	2540      	movs	r5, #64	; 0x40
     4d2:	01c0      	lsls	r0, r0, #7
     4d4:	1820      	adds	r0, r4, r0
     4d6:	1841      	adds	r1, r0, r1
     4d8:	1949      	adds	r1, r1, r5
     4da:	7809      	ldrb	r1, [r1, #0]
     4dc:	b2c9      	uxtb	r1, r1
     4de:	2004      	movs	r0, #4
     4e0:	4381      	bics	r1, r0
     4e2:	b2cc      	uxtb	r4, r1
     4e4:	6879      	ldr	r1, [r7, #4]
     4e6:	2040      	movs	r0, #64	; 0x40
     4e8:	01d2      	lsls	r2, r2, #7
     4ea:	188a      	adds	r2, r1, r2
     4ec:	18d3      	adds	r3, r2, r3
     4ee:	181b      	adds	r3, r3, r0
     4f0:	1c22      	adds	r2, r4, #0
     4f2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4f4:	46c0      	nop			; (mov r8, r8)
     4f6:	46bd      	mov	sp, r7
     4f8:	b002      	add	sp, #8
     4fa:	bdb0      	pop	{r4, r5, r7, pc}

000004fc <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b084      	sub	sp, #16
     500:	af00      	add	r7, sp, #0
     502:	60f8      	str	r0, [r7, #12]
     504:	607a      	str	r2, [r7, #4]
     506:	230b      	movs	r3, #11
     508:	18fb      	adds	r3, r7, r3
     50a:	1c0a      	adds	r2, r1, #0
     50c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     50e:	230b      	movs	r3, #11
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	68fa      	ldr	r2, [r7, #12]
     516:	01db      	lsls	r3, r3, #7
     518:	18d3      	adds	r3, r2, r3
     51a:	3328      	adds	r3, #40	; 0x28
     51c:	687a      	ldr	r2, [r7, #4]
     51e:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     520:	46c0      	nop			; (mov r8, r8)
     522:	46bd      	mov	sp, r7
     524:	b004      	add	sp, #16
     526:	bd80      	pop	{r7, pc}

00000528 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     528:	b580      	push	{r7, lr}
     52a:	b082      	sub	sp, #8
     52c:	af00      	add	r7, sp, #0
     52e:	6039      	str	r1, [r7, #0]
     530:	0011      	movs	r1, r2
     532:	1dfb      	adds	r3, r7, #7
     534:	1c02      	adds	r2, r0, #0
     536:	701a      	strb	r2, [r3, #0]
     538:	1dbb      	adds	r3, r7, #6
     53a:	1c0a      	adds	r2, r1, #0
     53c:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     53e:	1dbb      	adds	r3, r7, #6
     540:	781b      	ldrb	r3, [r3, #0]
     542:	2b01      	cmp	r3, #1
     544:	d023      	beq.n	58e <_gpio_set_direction+0x66>
     546:	2b02      	cmp	r3, #2
     548:	d03f      	beq.n	5ca <_gpio_set_direction+0xa2>
     54a:	2b00      	cmp	r3, #0
     54c:	d15d      	bne.n	60a <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     54e:	683a      	ldr	r2, [r7, #0]
     550:	1dfb      	adds	r3, r7, #7
     552:	7819      	ldrb	r1, [r3, #0]
     554:	23c0      	movs	r3, #192	; 0xc0
     556:	05db      	lsls	r3, r3, #23
     558:	0018      	movs	r0, r3
     55a:	4b31      	ldr	r3, [pc, #196]	; (620 <_gpio_set_direction+0xf8>)
     55c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     55e:	683b      	ldr	r3, [r7, #0]
     560:	041b      	lsls	r3, r3, #16
     562:	0c1b      	lsrs	r3, r3, #16
     564:	2280      	movs	r2, #128	; 0x80
     566:	05d2      	lsls	r2, r2, #23
     568:	431a      	orrs	r2, r3
     56a:	1dfb      	adds	r3, r7, #7
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	482d      	ldr	r0, [pc, #180]	; (624 <_gpio_set_direction+0xfc>)
     570:	0019      	movs	r1, r3
     572:	4b2d      	ldr	r3, [pc, #180]	; (628 <_gpio_set_direction+0x100>)
     574:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     576:	683b      	ldr	r3, [r7, #0]
     578:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     57a:	22c0      	movs	r2, #192	; 0xc0
     57c:	0612      	lsls	r2, r2, #24
     57e:	431a      	orrs	r2, r3
     580:	1dfb      	adds	r3, r7, #7
     582:	781b      	ldrb	r3, [r3, #0]
     584:	4827      	ldr	r0, [pc, #156]	; (624 <_gpio_set_direction+0xfc>)
     586:	0019      	movs	r1, r3
     588:	4b27      	ldr	r3, [pc, #156]	; (628 <_gpio_set_direction+0x100>)
     58a:	4798      	blx	r3
		break;
     58c:	e043      	b.n	616 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     58e:	683a      	ldr	r2, [r7, #0]
     590:	1dfb      	adds	r3, r7, #7
     592:	7819      	ldrb	r1, [r3, #0]
     594:	23c0      	movs	r3, #192	; 0xc0
     596:	05db      	lsls	r3, r3, #23
     598:	0018      	movs	r0, r3
     59a:	4b21      	ldr	r3, [pc, #132]	; (620 <_gpio_set_direction+0xf8>)
     59c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	041b      	lsls	r3, r3, #16
     5a2:	0c1b      	lsrs	r3, r3, #16
     5a4:	4a21      	ldr	r2, [pc, #132]	; (62c <_gpio_set_direction+0x104>)
     5a6:	431a      	orrs	r2, r3
     5a8:	1dfb      	adds	r3, r7, #7
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	481d      	ldr	r0, [pc, #116]	; (624 <_gpio_set_direction+0xfc>)
     5ae:	0019      	movs	r1, r3
     5b0:	4b1d      	ldr	r3, [pc, #116]	; (628 <_gpio_set_direction+0x100>)
     5b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     5b8:	4a1d      	ldr	r2, [pc, #116]	; (630 <_gpio_set_direction+0x108>)
     5ba:	431a      	orrs	r2, r3
     5bc:	1dfb      	adds	r3, r7, #7
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	4818      	ldr	r0, [pc, #96]	; (624 <_gpio_set_direction+0xfc>)
     5c2:	0019      	movs	r1, r3
     5c4:	4b18      	ldr	r3, [pc, #96]	; (628 <_gpio_set_direction+0x100>)
     5c6:	4798      	blx	r3
		break;
     5c8:	e025      	b.n	616 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     5ca:	683a      	ldr	r2, [r7, #0]
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	7819      	ldrb	r1, [r3, #0]
     5d0:	23c0      	movs	r3, #192	; 0xc0
     5d2:	05db      	lsls	r3, r3, #23
     5d4:	0018      	movs	r0, r3
     5d6:	4b17      	ldr	r3, [pc, #92]	; (634 <_gpio_set_direction+0x10c>)
     5d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5da:	683b      	ldr	r3, [r7, #0]
     5dc:	041b      	lsls	r3, r3, #16
     5de:	0c1b      	lsrs	r3, r3, #16
     5e0:	2280      	movs	r2, #128	; 0x80
     5e2:	05d2      	lsls	r2, r2, #23
     5e4:	431a      	orrs	r2, r3
     5e6:	1dfb      	adds	r3, r7, #7
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	480e      	ldr	r0, [pc, #56]	; (624 <_gpio_set_direction+0xfc>)
     5ec:	0019      	movs	r1, r3
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <_gpio_set_direction+0x100>)
     5f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5f2:	683b      	ldr	r3, [r7, #0]
     5f4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5f6:	22c0      	movs	r2, #192	; 0xc0
     5f8:	0612      	lsls	r2, r2, #24
     5fa:	431a      	orrs	r2, r3
     5fc:	1dfb      	adds	r3, r7, #7
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	4808      	ldr	r0, [pc, #32]	; (624 <_gpio_set_direction+0xfc>)
     602:	0019      	movs	r1, r3
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <_gpio_set_direction+0x100>)
     606:	4798      	blx	r3
		break;
     608:	e005      	b.n	616 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     60a:	4b0b      	ldr	r3, [pc, #44]	; (638 <_gpio_set_direction+0x110>)
     60c:	2246      	movs	r2, #70	; 0x46
     60e:	0019      	movs	r1, r3
     610:	2000      	movs	r0, #0
     612:	4b0a      	ldr	r3, [pc, #40]	; (63c <_gpio_set_direction+0x114>)
     614:	4798      	blx	r3
	}
}
     616:	46c0      	nop			; (mov r8, r8)
     618:	46bd      	mov	sp, r7
     61a:	b002      	add	sp, #8
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	0000023d 	.word	0x0000023d
     624:	40002800 	.word	0x40002800
     628:	000004fd 	.word	0x000004fd
     62c:	40020000 	.word	0x40020000
     630:	c0020000 	.word	0xc0020000
     634:	00000211 	.word	0x00000211
     638:	00004518 	.word	0x00004518
     63c:	00000e55 	.word	0x00000e55

00000640 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6039      	str	r1, [r7, #0]
     648:	0011      	movs	r1, r2
     64a:	1dfb      	adds	r3, r7, #7
     64c:	1c02      	adds	r2, r0, #0
     64e:	701a      	strb	r2, [r3, #0]
     650:	1dbb      	adds	r3, r7, #6
     652:	1c0a      	adds	r2, r1, #0
     654:	701a      	strb	r2, [r3, #0]
	if (level) {
     656:	1dbb      	adds	r3, r7, #6
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	d008      	beq.n	670 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     65e:	683a      	ldr	r2, [r7, #0]
     660:	1dfb      	adds	r3, r7, #7
     662:	7819      	ldrb	r1, [r3, #0]
     664:	23c0      	movs	r3, #192	; 0xc0
     666:	05db      	lsls	r3, r3, #23
     668:	0018      	movs	r0, r3
     66a:	4b07      	ldr	r3, [pc, #28]	; (688 <_gpio_set_level+0x48>)
     66c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     66e:	e007      	b.n	680 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     670:	683a      	ldr	r2, [r7, #0]
     672:	1dfb      	adds	r3, r7, #7
     674:	7819      	ldrb	r1, [r3, #0]
     676:	23c0      	movs	r3, #192	; 0xc0
     678:	05db      	lsls	r3, r3, #23
     67a:	0018      	movs	r0, r3
     67c:	4b03      	ldr	r3, [pc, #12]	; (68c <_gpio_set_level+0x4c>)
     67e:	4798      	blx	r3
}
     680:	46c0      	nop			; (mov r8, r8)
     682:	46bd      	mov	sp, r7
     684:	b002      	add	sp, #8
     686:	bd80      	pop	{r7, pc}
     688:	00000269 	.word	0x00000269
     68c:	00000295 	.word	0x00000295

00000690 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     690:	b590      	push	{r4, r7, lr}
     692:	b083      	sub	sp, #12
     694:	af00      	add	r7, sp, #0
     696:	0004      	movs	r4, r0
     698:	0008      	movs	r0, r1
     69a:	0011      	movs	r1, r2
     69c:	1dfb      	adds	r3, r7, #7
     69e:	1c22      	adds	r2, r4, #0
     6a0:	701a      	strb	r2, [r3, #0]
     6a2:	1dbb      	adds	r3, r7, #6
     6a4:	1c02      	adds	r2, r0, #0
     6a6:	701a      	strb	r2, [r3, #0]
     6a8:	1d7b      	adds	r3, r7, #5
     6aa:	1c0a      	adds	r2, r1, #0
     6ac:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6ae:	1d7b      	adds	r3, r7, #5
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	2b01      	cmp	r3, #1
     6b4:	d00c      	beq.n	6d0 <_gpio_set_pin_pull_mode+0x40>
     6b6:	2b02      	cmp	r3, #2
     6b8:	d029      	beq.n	70e <_gpio_set_pin_pull_mode+0x7e>
     6ba:	2b00      	cmp	r3, #0
     6bc:	d146      	bne.n	74c <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     6be:	1dbb      	adds	r3, r7, #6
     6c0:	781a      	ldrb	r2, [r3, #0]
     6c2:	1dfb      	adds	r3, r7, #7
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	4827      	ldr	r0, [pc, #156]	; (764 <_gpio_set_pin_pull_mode+0xd4>)
     6c8:	0019      	movs	r1, r3
     6ca:	4b27      	ldr	r3, [pc, #156]	; (768 <_gpio_set_pin_pull_mode+0xd8>)
     6cc:	4798      	blx	r3
		break;
     6ce:	e044      	b.n	75a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	2201      	movs	r2, #1
     6d6:	409a      	lsls	r2, r3
     6d8:	1dfb      	adds	r3, r7, #7
     6da:	7819      	ldrb	r1, [r3, #0]
     6dc:	23c0      	movs	r3, #192	; 0xc0
     6de:	05db      	lsls	r3, r3, #23
     6e0:	0018      	movs	r0, r3
     6e2:	4b22      	ldr	r3, [pc, #136]	; (76c <_gpio_set_pin_pull_mode+0xdc>)
     6e4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     6e6:	1dbb      	adds	r3, r7, #6
     6e8:	781a      	ldrb	r2, [r3, #0]
     6ea:	1dfb      	adds	r3, r7, #7
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	481d      	ldr	r0, [pc, #116]	; (764 <_gpio_set_pin_pull_mode+0xd4>)
     6f0:	0019      	movs	r1, r3
     6f2:	4b1f      	ldr	r3, [pc, #124]	; (770 <_gpio_set_pin_pull_mode+0xe0>)
     6f4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     6f6:	1dbb      	adds	r3, r7, #6
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	2201      	movs	r2, #1
     6fc:	409a      	lsls	r2, r3
     6fe:	1dfb      	adds	r3, r7, #7
     700:	7819      	ldrb	r1, [r3, #0]
     702:	23c0      	movs	r3, #192	; 0xc0
     704:	05db      	lsls	r3, r3, #23
     706:	0018      	movs	r0, r3
     708:	4b1a      	ldr	r3, [pc, #104]	; (774 <_gpio_set_pin_pull_mode+0xe4>)
     70a:	4798      	blx	r3
		break;
     70c:	e025      	b.n	75a <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     70e:	1dbb      	adds	r3, r7, #6
     710:	781b      	ldrb	r3, [r3, #0]
     712:	2201      	movs	r2, #1
     714:	409a      	lsls	r2, r3
     716:	1dfb      	adds	r3, r7, #7
     718:	7819      	ldrb	r1, [r3, #0]
     71a:	23c0      	movs	r3, #192	; 0xc0
     71c:	05db      	lsls	r3, r3, #23
     71e:	0018      	movs	r0, r3
     720:	4b12      	ldr	r3, [pc, #72]	; (76c <_gpio_set_pin_pull_mode+0xdc>)
     722:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     724:	1dbb      	adds	r3, r7, #6
     726:	781a      	ldrb	r2, [r3, #0]
     728:	1dfb      	adds	r3, r7, #7
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	480d      	ldr	r0, [pc, #52]	; (764 <_gpio_set_pin_pull_mode+0xd4>)
     72e:	0019      	movs	r1, r3
     730:	4b0f      	ldr	r3, [pc, #60]	; (770 <_gpio_set_pin_pull_mode+0xe0>)
     732:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     734:	1dbb      	adds	r3, r7, #6
     736:	781b      	ldrb	r3, [r3, #0]
     738:	2201      	movs	r2, #1
     73a:	409a      	lsls	r2, r3
     73c:	1dfb      	adds	r3, r7, #7
     73e:	7819      	ldrb	r1, [r3, #0]
     740:	23c0      	movs	r3, #192	; 0xc0
     742:	05db      	lsls	r3, r3, #23
     744:	0018      	movs	r0, r3
     746:	4b0c      	ldr	r3, [pc, #48]	; (778 <_gpio_set_pin_pull_mode+0xe8>)
     748:	4798      	blx	r3
		break;
     74a:	e006      	b.n	75a <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <_gpio_set_pin_pull_mode+0xec>)
     74e:	2289      	movs	r2, #137	; 0x89
     750:	0019      	movs	r1, r3
     752:	2000      	movs	r0, #0
     754:	4b0a      	ldr	r3, [pc, #40]	; (780 <_gpio_set_pin_pull_mode+0xf0>)
     756:	4798      	blx	r3
		break;
     758:	46c0      	nop			; (mov r8, r8)
	}
}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	46bd      	mov	sp, r7
     75e:	b003      	add	sp, #12
     760:	bd90      	pop	{r4, r7, pc}
     762:	46c0      	nop			; (mov r8, r8)
     764:	40002800 	.word	0x40002800
     768:	000004a7 	.word	0x000004a7
     76c:	0000023d 	.word	0x0000023d
     770:	00000451 	.word	0x00000451
     774:	00000269 	.word	0x00000269
     778:	00000295 	.word	0x00000295
     77c:	00004518 	.word	0x00004518
     780:	00000e55 	.word	0x00000e55

00000784 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     784:	b590      	push	{r4, r7, lr}
     786:	b085      	sub	sp, #20
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
     78c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     78e:	687b      	ldr	r3, [r7, #4]
     790:	095a      	lsrs	r2, r3, #5
     792:	230f      	movs	r3, #15
     794:	18fb      	adds	r3, r7, r3
     796:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     798:	687b      	ldr	r3, [r7, #4]
     79a:	b2da      	uxtb	r2, r3
     79c:	230e      	movs	r3, #14
     79e:	18fb      	adds	r3, r7, r3
     7a0:	211f      	movs	r1, #31
     7a2:	400a      	ands	r2, r1
     7a4:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     7a6:	683b      	ldr	r3, [r7, #0]
     7a8:	3301      	adds	r3, #1
     7aa:	d10a      	bne.n	7c2 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7ac:	230e      	movs	r3, #14
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	781a      	ldrb	r2, [r3, #0]
     7b2:	230f      	movs	r3, #15
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	7819      	ldrb	r1, [r3, #0]
     7b8:	481b      	ldr	r0, [pc, #108]	; (828 <_gpio_set_pin_function+0xa4>)
     7ba:	2300      	movs	r3, #0
     7bc:	4c1b      	ldr	r4, [pc, #108]	; (82c <_gpio_set_pin_function+0xa8>)
     7be:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     7c0:	e02e      	b.n	820 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     7c2:	230e      	movs	r3, #14
     7c4:	18fb      	adds	r3, r7, r3
     7c6:	781a      	ldrb	r2, [r3, #0]
     7c8:	230f      	movs	r3, #15
     7ca:	18fb      	adds	r3, r7, r3
     7cc:	7819      	ldrb	r1, [r3, #0]
     7ce:	4816      	ldr	r0, [pc, #88]	; (828 <_gpio_set_pin_function+0xa4>)
     7d0:	2301      	movs	r3, #1
     7d2:	4c16      	ldr	r4, [pc, #88]	; (82c <_gpio_set_pin_function+0xa8>)
     7d4:	47a0      	blx	r4
		if (pin & 1) {
     7d6:	230e      	movs	r3, #14
     7d8:	18fb      	adds	r3, r7, r3
     7da:	781b      	ldrb	r3, [r3, #0]
     7dc:	2201      	movs	r2, #1
     7de:	4013      	ands	r3, r2
     7e0:	d00f      	beq.n	802 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     7e2:	230e      	movs	r3, #14
     7e4:	18fb      	adds	r3, r7, r3
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	b2da      	uxtb	r2, r3
     7ec:	683b      	ldr	r3, [r7, #0]
     7ee:	b2d8      	uxtb	r0, r3
     7f0:	230f      	movs	r3, #15
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	7819      	ldrb	r1, [r3, #0]
     7f6:	4c0c      	ldr	r4, [pc, #48]	; (828 <_gpio_set_pin_function+0xa4>)
     7f8:	0003      	movs	r3, r0
     7fa:	0020      	movs	r0, r4
     7fc:	4c0c      	ldr	r4, [pc, #48]	; (830 <_gpio_set_pin_function+0xac>)
     7fe:	47a0      	blx	r4
}
     800:	e00e      	b.n	820 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     802:	230e      	movs	r3, #14
     804:	18fb      	adds	r3, r7, r3
     806:	781b      	ldrb	r3, [r3, #0]
     808:	085b      	lsrs	r3, r3, #1
     80a:	b2da      	uxtb	r2, r3
     80c:	683b      	ldr	r3, [r7, #0]
     80e:	b2d8      	uxtb	r0, r3
     810:	230f      	movs	r3, #15
     812:	18fb      	adds	r3, r7, r3
     814:	7819      	ldrb	r1, [r3, #0]
     816:	4c04      	ldr	r4, [pc, #16]	; (828 <_gpio_set_pin_function+0xa4>)
     818:	0003      	movs	r3, r0
     81a:	0020      	movs	r0, r4
     81c:	4c05      	ldr	r4, [pc, #20]	; (834 <_gpio_set_pin_function+0xb0>)
     81e:	47a0      	blx	r4
}
     820:	46c0      	nop			; (mov r8, r8)
     822:	46bd      	mov	sp, r7
     824:	b005      	add	sp, #20
     826:	bd90      	pop	{r4, r7, pc}
     828:	40002800 	.word	0x40002800
     82c:	000003cf 	.word	0x000003cf
     830:	00000349 	.word	0x00000349
     834:	000002c1 	.word	0x000002c1

00000838 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	0002      	movs	r2, r0
     840:	1dfb      	adds	r3, r7, #7
     842:	701a      	strb	r2, [r3, #0]
     844:	1dbb      	adds	r3, r7, #6
     846:	1c0a      	adds	r2, r1, #0
     848:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     84a:	1dfb      	adds	r3, r7, #7
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	095b      	lsrs	r3, r3, #5
     850:	b2d8      	uxtb	r0, r3
     852:	1dfb      	adds	r3, r7, #7
     854:	781b      	ldrb	r3, [r3, #0]
     856:	221f      	movs	r2, #31
     858:	4013      	ands	r3, r2
     85a:	b2d9      	uxtb	r1, r3
     85c:	1dbb      	adds	r3, r7, #6
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	001a      	movs	r2, r3
     862:	4b03      	ldr	r3, [pc, #12]	; (870 <gpio_set_pin_pull_mode+0x38>)
     864:	4798      	blx	r3
}
     866:	46c0      	nop			; (mov r8, r8)
     868:	46bd      	mov	sp, r7
     86a:	b002      	add	sp, #8
     86c:	bd80      	pop	{r7, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	00000691 	.word	0x00000691

00000874 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     87e:	683a      	ldr	r2, [r7, #0]
     880:	687b      	ldr	r3, [r7, #4]
     882:	0011      	movs	r1, r2
     884:	0018      	movs	r0, r3
     886:	4b03      	ldr	r3, [pc, #12]	; (894 <gpio_set_pin_function+0x20>)
     888:	4798      	blx	r3
}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	46bd      	mov	sp, r7
     88e:	b002      	add	sp, #8
     890:	bd80      	pop	{r7, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	00000785 	.word	0x00000785

00000898 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     898:	b580      	push	{r7, lr}
     89a:	b082      	sub	sp, #8
     89c:	af00      	add	r7, sp, #0
     89e:	0002      	movs	r2, r0
     8a0:	1dfb      	adds	r3, r7, #7
     8a2:	701a      	strb	r2, [r3, #0]
     8a4:	1dbb      	adds	r3, r7, #6
     8a6:	1c0a      	adds	r2, r1, #0
     8a8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8aa:	1dfb      	adds	r3, r7, #7
     8ac:	781b      	ldrb	r3, [r3, #0]
     8ae:	095b      	lsrs	r3, r3, #5
     8b0:	b2d8      	uxtb	r0, r3
     8b2:	1dfb      	adds	r3, r7, #7
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	221f      	movs	r2, #31
     8b8:	4013      	ands	r3, r2
     8ba:	2201      	movs	r2, #1
     8bc:	409a      	lsls	r2, r3
     8be:	0011      	movs	r1, r2
     8c0:	1dbb      	adds	r3, r7, #6
     8c2:	781b      	ldrb	r3, [r3, #0]
     8c4:	001a      	movs	r2, r3
     8c6:	4b03      	ldr	r3, [pc, #12]	; (8d4 <gpio_set_pin_direction+0x3c>)
     8c8:	4798      	blx	r3
}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	46bd      	mov	sp, r7
     8ce:	b002      	add	sp, #8
     8d0:	bd80      	pop	{r7, pc}
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	00000529 	.word	0x00000529

000008d8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	0002      	movs	r2, r0
     8e0:	1dfb      	adds	r3, r7, #7
     8e2:	701a      	strb	r2, [r3, #0]
     8e4:	1dbb      	adds	r3, r7, #6
     8e6:	1c0a      	adds	r2, r1, #0
     8e8:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     8ea:	1dfb      	adds	r3, r7, #7
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	095b      	lsrs	r3, r3, #5
     8f0:	b2d8      	uxtb	r0, r3
     8f2:	1dfb      	adds	r3, r7, #7
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	221f      	movs	r2, #31
     8f8:	4013      	ands	r3, r2
     8fa:	2201      	movs	r2, #1
     8fc:	409a      	lsls	r2, r3
     8fe:	0011      	movs	r1, r2
     900:	1dbb      	adds	r3, r7, #6
     902:	781b      	ldrb	r3, [r3, #0]
     904:	001a      	movs	r2, r3
     906:	4b03      	ldr	r3, [pc, #12]	; (914 <gpio_set_pin_level+0x3c>)
     908:	4798      	blx	r3
}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	46bd      	mov	sp, r7
     90e:	b002      	add	sp, #8
     910:	bd80      	pop	{r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	00000641 	.word	0x00000641

00000918 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     918:	b580      	push	{r7, lr}
     91a:	af00      	add	r7, sp, #0
	_init_chip();
     91c:	4b02      	ldr	r3, [pc, #8]	; (928 <init_mcu+0x10>)
     91e:	4798      	blx	r3
}
     920:	46c0      	nop			; (mov r8, r8)
     922:	46bd      	mov	sp, r7
     924:	bd80      	pop	{r7, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	00001271 	.word	0x00001271

0000092c <I2C_OUT_PORT_init>:
	i2c_s_async_init(&I2C_IN, SERCOM1, SERCOM1_i2c_s_buffer, SERCOM1_I2CS_BUFFER_SIZE);
	I2C_IN_PORT_init();
}

void I2C_OUT_PORT_init(void)
{
     92c:	b580      	push	{r7, lr}
     92e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     930:	2100      	movs	r1, #0
     932:	2008      	movs	r0, #8
     934:	4b09      	ldr	r3, [pc, #36]	; (95c <I2C_OUT_PORT_init+0x30>)
     936:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);
     938:	4b09      	ldr	r3, [pc, #36]	; (960 <I2C_OUT_PORT_init+0x34>)
     93a:	0019      	movs	r1, r3
     93c:	2008      	movs	r0, #8
     93e:	4b09      	ldr	r3, [pc, #36]	; (964 <I2C_OUT_PORT_init+0x38>)
     940:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     942:	2100      	movs	r1, #0
     944:	2009      	movs	r0, #9
     946:	4b05      	ldr	r3, [pc, #20]	; (95c <I2C_OUT_PORT_init+0x30>)
     948:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
     94a:	4b07      	ldr	r3, [pc, #28]	; (968 <I2C_OUT_PORT_init+0x3c>)
     94c:	0019      	movs	r1, r3
     94e:	2009      	movs	r0, #9
     950:	4b04      	ldr	r3, [pc, #16]	; (964 <I2C_OUT_PORT_init+0x38>)
     952:	4798      	blx	r3
}
     954:	46c0      	nop			; (mov r8, r8)
     956:	46bd      	mov	sp, r7
     958:	bd80      	pop	{r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00000839 	.word	0x00000839
     960:	00080003 	.word	0x00080003
     964:	00000875 	.word	0x00000875
     968:	00090003 	.word	0x00090003

0000096c <I2C_OUT_CLOCK_init>:

void I2C_OUT_CLOCK_init(void)
{
     96c:	b580      	push	{r7, lr}
     96e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     970:	4b09      	ldr	r3, [pc, #36]	; (998 <I2C_OUT_CLOCK_init+0x2c>)
     972:	2240      	movs	r2, #64	; 0x40
     974:	2114      	movs	r1, #20
     976:	0018      	movs	r0, r3
     978:	4b08      	ldr	r3, [pc, #32]	; (99c <I2C_OUT_CLOCK_init+0x30>)
     97a:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     97c:	4b06      	ldr	r3, [pc, #24]	; (998 <I2C_OUT_CLOCK_init+0x2c>)
     97e:	2243      	movs	r2, #67	; 0x43
     980:	2111      	movs	r1, #17
     982:	0018      	movs	r0, r3
     984:	4b05      	ldr	r3, [pc, #20]	; (99c <I2C_OUT_CLOCK_init+0x30>)
     986:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
     988:	4b05      	ldr	r3, [pc, #20]	; (9a0 <I2C_OUT_CLOCK_init+0x34>)
     98a:	0018      	movs	r0, r3
     98c:	4b05      	ldr	r3, [pc, #20]	; (9a4 <I2C_OUT_CLOCK_init+0x38>)
     98e:	4798      	blx	r3
}
     990:	46c0      	nop			; (mov r8, r8)
     992:	46bd      	mov	sp, r7
     994:	bd80      	pop	{r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	40001800 	.word	0x40001800
     99c:	000001cb 	.word	0x000001cb
     9a0:	40000400 	.word	0x40000400
     9a4:	000001f5 	.word	0x000001f5

000009a8 <I2C_OUT_init>:

void I2C_OUT_init(void)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	af00      	add	r7, sp, #0
	I2C_OUT_CLOCK_init();
     9ac:	4b06      	ldr	r3, [pc, #24]	; (9c8 <I2C_OUT_init+0x20>)
     9ae:	4798      	blx	r3
	i2c_m_sync_init(&I2C_OUT, SERCOM2);
     9b0:	4a06      	ldr	r2, [pc, #24]	; (9cc <I2C_OUT_init+0x24>)
     9b2:	4b07      	ldr	r3, [pc, #28]	; (9d0 <I2C_OUT_init+0x28>)
     9b4:	0011      	movs	r1, r2
     9b6:	0018      	movs	r0, r3
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <I2C_OUT_init+0x2c>)
     9ba:	4798      	blx	r3
	I2C_OUT_PORT_init();
     9bc:	4b06      	ldr	r3, [pc, #24]	; (9d8 <I2C_OUT_init+0x30>)
     9be:	4798      	blx	r3
}
     9c0:	46c0      	nop			; (mov r8, r8)
     9c2:	46bd      	mov	sp, r7
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000096d 	.word	0x0000096d
     9cc:	42000800 	.word	0x42000800
     9d0:	200000e8 	.word	0x200000e8
     9d4:	00000ced 	.word	0x00000ced
     9d8:	0000092d 	.word	0x0000092d

000009dc <delay_driver_init>:

void delay_driver_init(void)
{
     9dc:	b580      	push	{r7, lr}
     9de:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     9e0:	4b03      	ldr	r3, [pc, #12]	; (9f0 <delay_driver_init+0x14>)
     9e2:	0018      	movs	r0, r3
     9e4:	4b03      	ldr	r3, [pc, #12]	; (9f4 <delay_driver_init+0x18>)
     9e6:	4798      	blx	r3
}
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	46bd      	mov	sp, r7
     9ec:	bd80      	pop	{r7, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	e000e010 	.word	0xe000e010
     9f4:	00000bbd 	.word	0x00000bbd

000009f8 <system_init>:
	WDT_0_CLOCK_init();
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	af00      	add	r7, sp, #0
	init_mcu();
     9fc:	4b68      	ldr	r3, [pc, #416]	; (ba0 <system_init+0x1a8>)
     9fe:	4798      	blx	r3

	// GPIO on PA02

	gpio_set_pin_level(MCU_1_STATUS_1,
     a00:	2100      	movs	r1, #0
     a02:	2002      	movs	r0, #2
     a04:	4b67      	ldr	r3, [pc, #412]	; (ba4 <system_init+0x1ac>)
     a06:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_1, GPIO_DIRECTION_OUT);
     a08:	2102      	movs	r1, #2
     a0a:	2002      	movs	r0, #2
     a0c:	4b66      	ldr	r3, [pc, #408]	; (ba8 <system_init+0x1b0>)
     a0e:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     a10:	2301      	movs	r3, #1
     a12:	425b      	negs	r3, r3
     a14:	0019      	movs	r1, r3
     a16:	2002      	movs	r0, #2
     a18:	4b64      	ldr	r3, [pc, #400]	; (bac <system_init+0x1b4>)
     a1a:	4798      	blx	r3

	// GPIO on PA03

	gpio_set_pin_level(MCU_1_STATUS_2,
     a1c:	2100      	movs	r1, #0
     a1e:	2003      	movs	r0, #3
     a20:	4b60      	ldr	r3, [pc, #384]	; (ba4 <system_init+0x1ac>)
     a22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_2, GPIO_DIRECTION_OUT);
     a24:	2102      	movs	r1, #2
     a26:	2003      	movs	r0, #3
     a28:	4b5f      	ldr	r3, [pc, #380]	; (ba8 <system_init+0x1b0>)
     a2a:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     a2c:	2301      	movs	r3, #1
     a2e:	425b      	negs	r3, r3
     a30:	0019      	movs	r1, r3
     a32:	2003      	movs	r0, #3
     a34:	4b5d      	ldr	r3, [pc, #372]	; (bac <system_init+0x1b4>)
     a36:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(MCU_1_STATUS_3,
     a38:	2100      	movs	r1, #0
     a3a:	2006      	movs	r0, #6
     a3c:	4b59      	ldr	r3, [pc, #356]	; (ba4 <system_init+0x1ac>)
     a3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_3, GPIO_DIRECTION_OUT);
     a40:	2102      	movs	r1, #2
     a42:	2006      	movs	r0, #6
     a44:	4b58      	ldr	r3, [pc, #352]	; (ba8 <system_init+0x1b0>)
     a46:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     a48:	2301      	movs	r3, #1
     a4a:	425b      	negs	r3, r3
     a4c:	0019      	movs	r1, r3
     a4e:	2006      	movs	r0, #6
     a50:	4b56      	ldr	r3, [pc, #344]	; (bac <system_init+0x1b4>)
     a52:	4798      	blx	r3

	// GPIO on PA07

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_1, GPIO_DIRECTION_IN);
     a54:	2101      	movs	r1, #1
     a56:	2007      	movs	r0, #7
     a58:	4b53      	ldr	r3, [pc, #332]	; (ba8 <system_init+0x1b0>)
     a5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_1,
     a5c:	2100      	movs	r1, #0
     a5e:	2007      	movs	r0, #7
     a60:	4b53      	ldr	r3, [pc, #332]	; (bb0 <system_init+0x1b8>)
     a62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     a64:	2301      	movs	r3, #1
     a66:	425b      	negs	r3, r3
     a68:	0019      	movs	r1, r3
     a6a:	2007      	movs	r0, #7
     a6c:	4b4f      	ldr	r3, [pc, #316]	; (bac <system_init+0x1b4>)
     a6e:	4798      	blx	r3

	// GPIO on PA10

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_2, GPIO_DIRECTION_IN);
     a70:	2101      	movs	r1, #1
     a72:	200a      	movs	r0, #10
     a74:	4b4c      	ldr	r3, [pc, #304]	; (ba8 <system_init+0x1b0>)
     a76:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_2,
     a78:	2100      	movs	r1, #0
     a7a:	200a      	movs	r0, #10
     a7c:	4b4c      	ldr	r3, [pc, #304]	; (bb0 <system_init+0x1b8>)
     a7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     a80:	2301      	movs	r3, #1
     a82:	425b      	negs	r3, r3
     a84:	0019      	movs	r1, r3
     a86:	200a      	movs	r0, #10
     a88:	4b48      	ldr	r3, [pc, #288]	; (bac <system_init+0x1b4>)
     a8a:	4798      	blx	r3

	// GPIO on PA11

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_3, GPIO_DIRECTION_IN);
     a8c:	2101      	movs	r1, #1
     a8e:	200b      	movs	r0, #11
     a90:	4b45      	ldr	r3, [pc, #276]	; (ba8 <system_init+0x1b0>)
     a92:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_3,
     a94:	2100      	movs	r1, #0
     a96:	200b      	movs	r0, #11
     a98:	4b45      	ldr	r3, [pc, #276]	; (bb0 <system_init+0x1b8>)
     a9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     a9c:	2301      	movs	r3, #1
     a9e:	425b      	negs	r3, r3
     aa0:	0019      	movs	r1, r3
     aa2:	200b      	movs	r0, #11
     aa4:	4b41      	ldr	r3, [pc, #260]	; (bac <system_init+0x1b4>)
     aa6:	4798      	blx	r3

	// GPIO on PA14

	gpio_set_pin_level(POWER_BLOCK_2,
     aa8:	2100      	movs	r1, #0
     aaa:	200e      	movs	r0, #14
     aac:	4b3d      	ldr	r3, [pc, #244]	; (ba4 <system_init+0x1ac>)
     aae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_2, GPIO_DIRECTION_OUT);
     ab0:	2102      	movs	r1, #2
     ab2:	200e      	movs	r0, #14
     ab4:	4b3c      	ldr	r3, [pc, #240]	; (ba8 <system_init+0x1b0>)
     ab6:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_2, GPIO_PIN_FUNCTION_OFF);
     ab8:	2301      	movs	r3, #1
     aba:	425b      	negs	r3, r3
     abc:	0019      	movs	r1, r3
     abe:	200e      	movs	r0, #14
     ac0:	4b3a      	ldr	r3, [pc, #232]	; (bac <system_init+0x1b4>)
     ac2:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(POWER_BLOCK_1,
     ac4:	2100      	movs	r1, #0
     ac6:	200f      	movs	r0, #15
     ac8:	4b36      	ldr	r3, [pc, #216]	; (ba4 <system_init+0x1ac>)
     aca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_1, GPIO_DIRECTION_OUT);
     acc:	2102      	movs	r1, #2
     ace:	200f      	movs	r0, #15
     ad0:	4b35      	ldr	r3, [pc, #212]	; (ba8 <system_init+0x1b0>)
     ad2:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_1, GPIO_PIN_FUNCTION_OFF);
     ad4:	2301      	movs	r3, #1
     ad6:	425b      	negs	r3, r3
     ad8:	0019      	movs	r1, r3
     ada:	200f      	movs	r0, #15
     adc:	4b33      	ldr	r3, [pc, #204]	; (bac <system_init+0x1b4>)
     ade:	4798      	blx	r3

	// GPIO on PA18

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_1, GPIO_DIRECTION_IN);
     ae0:	2101      	movs	r1, #1
     ae2:	2012      	movs	r0, #18
     ae4:	4b30      	ldr	r3, [pc, #192]	; (ba8 <system_init+0x1b0>)
     ae6:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_1,
     ae8:	2100      	movs	r1, #0
     aea:	2012      	movs	r0, #18
     aec:	4b30      	ldr	r3, [pc, #192]	; (bb0 <system_init+0x1b8>)
     aee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     af0:	2301      	movs	r3, #1
     af2:	425b      	negs	r3, r3
     af4:	0019      	movs	r1, r3
     af6:	2012      	movs	r0, #18
     af8:	4b2c      	ldr	r3, [pc, #176]	; (bac <system_init+0x1b4>)
     afa:	4798      	blx	r3

	// GPIO on PA19

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_2, GPIO_DIRECTION_IN);
     afc:	2101      	movs	r1, #1
     afe:	2013      	movs	r0, #19
     b00:	4b29      	ldr	r3, [pc, #164]	; (ba8 <system_init+0x1b0>)
     b02:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_2,
     b04:	2100      	movs	r1, #0
     b06:	2013      	movs	r0, #19
     b08:	4b29      	ldr	r3, [pc, #164]	; (bb0 <system_init+0x1b8>)
     b0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     b0c:	2301      	movs	r3, #1
     b0e:	425b      	negs	r3, r3
     b10:	0019      	movs	r1, r3
     b12:	2013      	movs	r0, #19
     b14:	4b25      	ldr	r3, [pc, #148]	; (bac <system_init+0x1b4>)
     b16:	4798      	blx	r3

	// GPIO on PA22

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_3, GPIO_DIRECTION_IN);
     b18:	2101      	movs	r1, #1
     b1a:	2016      	movs	r0, #22
     b1c:	4b22      	ldr	r3, [pc, #136]	; (ba8 <system_init+0x1b0>)
     b1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_3,
     b20:	2100      	movs	r1, #0
     b22:	2016      	movs	r0, #22
     b24:	4b22      	ldr	r3, [pc, #136]	; (bb0 <system_init+0x1b8>)
     b26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     b28:	2301      	movs	r3, #1
     b2a:	425b      	negs	r3, r3
     b2c:	0019      	movs	r1, r3
     b2e:	2016      	movs	r0, #22
     b30:	4b1e      	ldr	r3, [pc, #120]	; (bac <system_init+0x1b4>)
     b32:	4798      	blx	r3

	// GPIO on PA23

	gpio_set_pin_level(MCU_2_EN,
     b34:	2100      	movs	r1, #0
     b36:	2017      	movs	r0, #23
     b38:	4b1a      	ldr	r3, [pc, #104]	; (ba4 <system_init+0x1ac>)
     b3a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_2_EN, GPIO_DIRECTION_OUT);
     b3c:	2102      	movs	r1, #2
     b3e:	2017      	movs	r0, #23
     b40:	4b19      	ldr	r3, [pc, #100]	; (ba8 <system_init+0x1b0>)
     b42:	4798      	blx	r3

	gpio_set_pin_function(MCU_2_EN, GPIO_PIN_FUNCTION_OFF);
     b44:	2301      	movs	r3, #1
     b46:	425b      	negs	r3, r3
     b48:	0019      	movs	r1, r3
     b4a:	2017      	movs	r0, #23
     b4c:	4b17      	ldr	r3, [pc, #92]	; (bac <system_init+0x1b4>)
     b4e:	4798      	blx	r3

	// GPIO on PA24

	gpio_set_pin_level(BLOCK_2_EN,
     b50:	2100      	movs	r1, #0
     b52:	2018      	movs	r0, #24
     b54:	4b13      	ldr	r3, [pc, #76]	; (ba4 <system_init+0x1ac>)
     b56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_2_EN, GPIO_DIRECTION_OUT);
     b58:	2102      	movs	r1, #2
     b5a:	2018      	movs	r0, #24
     b5c:	4b12      	ldr	r3, [pc, #72]	; (ba8 <system_init+0x1b0>)
     b5e:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_2_EN, GPIO_PIN_FUNCTION_OFF);
     b60:	2301      	movs	r3, #1
     b62:	425b      	negs	r3, r3
     b64:	0019      	movs	r1, r3
     b66:	2018      	movs	r0, #24
     b68:	4b10      	ldr	r3, [pc, #64]	; (bac <system_init+0x1b4>)
     b6a:	4798      	blx	r3

	// GPIO on PA25

	gpio_set_pin_level(BLOCK_1_EN,
     b6c:	2100      	movs	r1, #0
     b6e:	2019      	movs	r0, #25
     b70:	4b0c      	ldr	r3, [pc, #48]	; (ba4 <system_init+0x1ac>)
     b72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_1_EN, GPIO_DIRECTION_OUT);
     b74:	2102      	movs	r1, #2
     b76:	2019      	movs	r0, #25
     b78:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <system_init+0x1b0>)
     b7a:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_1_EN, GPIO_PIN_FUNCTION_OFF);
     b7c:	2301      	movs	r3, #1
     b7e:	425b      	negs	r3, r3
     b80:	0019      	movs	r1, r3
     b82:	2019      	movs	r0, #25
     b84:	4b09      	ldr	r3, [pc, #36]	; (bac <system_init+0x1b4>)
     b86:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(MCU_3_EN,
     b88:	2100      	movs	r1, #0
     b8a:	201b      	movs	r0, #27
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <system_init+0x1ac>)
     b8e:	4798      	blx	r3
// 	CALENDAR_0_init();
// 	USART_0_init();
// 
// 	I2C_IN_init();

	I2C_OUT_init();
     b90:	4b08      	ldr	r3, [pc, #32]	; (bb4 <system_init+0x1bc>)
     b92:	4798      	blx	r3

	delay_driver_init();
     b94:	4b08      	ldr	r3, [pc, #32]	; (bb8 <system_init+0x1c0>)
     b96:	4798      	blx	r3

// 	TIMER_0_init();
// 	WDT_0_init();
}
     b98:	46c0      	nop			; (mov r8, r8)
     b9a:	46bd      	mov	sp, r7
     b9c:	bd80      	pop	{r7, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00000919 	.word	0x00000919
     ba4:	000008d9 	.word	0x000008d9
     ba8:	00000899 	.word	0x00000899
     bac:	00000875 	.word	0x00000875
     bb0:	00000839 	.word	0x00000839
     bb4:	000009a9 	.word	0x000009a9
     bb8:	000009dd 	.word	0x000009dd

00000bbc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b082      	sub	sp, #8
     bc0:	af00      	add	r7, sp, #0
     bc2:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <delay_init+0x20>)
     bc6:	687a      	ldr	r2, [r7, #4]
     bc8:	601a      	str	r2, [r3, #0]
     bca:	4b04      	ldr	r3, [pc, #16]	; (bdc <delay_init+0x20>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	0018      	movs	r0, r3
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <delay_init+0x24>)
     bd2:	4798      	blx	r3
}
     bd4:	46c0      	nop			; (mov r8, r8)
     bd6:	46bd      	mov	sp, r7
     bd8:	b002      	add	sp, #8
     bda:	bd80      	pop	{r7, pc}
     bdc:	20000058 	.word	0x20000058
     be0:	000027e1 	.word	0x000027e1

00000be4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     be4:	b590      	push	{r4, r7, lr}
     be6:	b083      	sub	sp, #12
     be8:	af00      	add	r7, sp, #0
     bea:	0002      	movs	r2, r0
     bec:	1dbb      	adds	r3, r7, #6
     bee:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     bf0:	4b07      	ldr	r3, [pc, #28]	; (c10 <delay_ms+0x2c>)
     bf2:	681c      	ldr	r4, [r3, #0]
     bf4:	1dbb      	adds	r3, r7, #6
     bf6:	881b      	ldrh	r3, [r3, #0]
     bf8:	0018      	movs	r0, r3
     bfa:	4b06      	ldr	r3, [pc, #24]	; (c14 <delay_ms+0x30>)
     bfc:	4798      	blx	r3
     bfe:	0003      	movs	r3, r0
     c00:	0019      	movs	r1, r3
     c02:	0020      	movs	r0, r4
     c04:	4b04      	ldr	r3, [pc, #16]	; (c18 <delay_ms+0x34>)
     c06:	4798      	blx	r3
}
     c08:	46c0      	nop			; (mov r8, r8)
     c0a:	46bd      	mov	sp, r7
     c0c:	b003      	add	sp, #12
     c0e:	bd90      	pop	{r4, r7, pc}
     c10:	20000058 	.word	0x20000058
     c14:	00001221 	.word	0x00001221
     c18:	000027fd 	.word	0x000027fd

00000c1c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b08a      	sub	sp, #40	; 0x28
     c20:	af00      	add	r7, sp, #0
     c22:	60f8      	str	r0, [r7, #12]
     c24:	60b9      	str	r1, [r7, #8]
     c26:	1dbb      	adds	r3, r7, #6
     c28:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	3b14      	subs	r3, #20
     c2e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c32:	8b9a      	ldrh	r2, [r3, #28]
     c34:	2314      	movs	r3, #20
     c36:	18fb      	adds	r3, r7, r3
     c38:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     c3a:	1dbb      	adds	r3, r7, #6
     c3c:	881a      	ldrh	r2, [r3, #0]
     c3e:	2314      	movs	r3, #20
     c40:	18fb      	adds	r3, r7, r3
     c42:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     c44:	2314      	movs	r3, #20
     c46:	18fb      	adds	r3, r7, r3
     c48:	4a0c      	ldr	r2, [pc, #48]	; (c7c <i2c_m_sync_read+0x60>)
     c4a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     c4c:	2314      	movs	r3, #20
     c4e:	18fb      	adds	r3, r7, r3
     c50:	68ba      	ldr	r2, [r7, #8]
     c52:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c56:	2214      	movs	r2, #20
     c58:	18ba      	adds	r2, r7, r2
     c5a:	0011      	movs	r1, r2
     c5c:	0018      	movs	r0, r3
     c5e:	4b08      	ldr	r3, [pc, #32]	; (c80 <i2c_m_sync_read+0x64>)
     c60:	4798      	blx	r3
     c62:	0003      	movs	r3, r0
     c64:	623b      	str	r3, [r7, #32]

	if (ret) {
     c66:	6a3b      	ldr	r3, [r7, #32]
     c68:	2b00      	cmp	r3, #0
     c6a:	d001      	beq.n	c70 <i2c_m_sync_read+0x54>
		return ret;
     c6c:	6a3b      	ldr	r3, [r7, #32]
     c6e:	e001      	b.n	c74 <i2c_m_sync_read+0x58>
	}

	return n;
     c70:	1dbb      	adds	r3, r7, #6
     c72:	881b      	ldrh	r3, [r3, #0]
}
     c74:	0018      	movs	r0, r3
     c76:	46bd      	mov	sp, r7
     c78:	b00a      	add	sp, #40	; 0x28
     c7a:	bd80      	pop	{r7, pc}
     c7c:	ffff8001 	.word	0xffff8001
     c80:	00002371 	.word	0x00002371

00000c84 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     c84:	b580      	push	{r7, lr}
     c86:	b08a      	sub	sp, #40	; 0x28
     c88:	af00      	add	r7, sp, #0
     c8a:	60f8      	str	r0, [r7, #12]
     c8c:	60b9      	str	r1, [r7, #8]
     c8e:	1dbb      	adds	r3, r7, #6
     c90:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
     c92:	68fb      	ldr	r3, [r7, #12]
     c94:	3b14      	subs	r3, #20
     c96:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c9a:	8b9a      	ldrh	r2, [r3, #28]
     c9c:	2314      	movs	r3, #20
     c9e:	18fb      	adds	r3, r7, r3
     ca0:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     ca2:	1dbb      	adds	r3, r7, #6
     ca4:	881a      	ldrh	r2, [r3, #0]
     ca6:	2314      	movs	r3, #20
     ca8:	18fb      	adds	r3, r7, r3
     caa:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
     cac:	2314      	movs	r3, #20
     cae:	18fb      	adds	r3, r7, r3
     cb0:	4a0c      	ldr	r2, [pc, #48]	; (ce4 <i2c_m_sync_write+0x60>)
     cb2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     cb4:	2314      	movs	r3, #20
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	68ba      	ldr	r2, [r7, #8]
     cba:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cbe:	2214      	movs	r2, #20
     cc0:	18ba      	adds	r2, r7, r2
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b08      	ldr	r3, [pc, #32]	; (ce8 <i2c_m_sync_write+0x64>)
     cc8:	4798      	blx	r3
     cca:	0003      	movs	r3, r0
     ccc:	623b      	str	r3, [r7, #32]

	if (ret) {
     cce:	6a3b      	ldr	r3, [r7, #32]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d001      	beq.n	cd8 <i2c_m_sync_write+0x54>
		return ret;
     cd4:	6a3b      	ldr	r3, [r7, #32]
     cd6:	e001      	b.n	cdc <i2c_m_sync_write+0x58>
	}

	return n;
     cd8:	1dbb      	adds	r3, r7, #6
     cda:	881b      	ldrh	r3, [r3, #0]
}
     cdc:	0018      	movs	r0, r3
     cde:	46bd      	mov	sp, r7
     ce0:	b00a      	add	sp, #40	; 0x28
     ce2:	bd80      	pop	{r7, pc}
     ce4:	ffff8000 	.word	0xffff8000
     ce8:	00002371 	.word	0x00002371

00000cec <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     cec:	b580      	push	{r7, lr}
     cee:	b084      	sub	sp, #16
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	1e5a      	subs	r2, r3, #1
     cfa:	4193      	sbcs	r3, r2
     cfc:	b2db      	uxtb	r3, r3
     cfe:	490e      	ldr	r1, [pc, #56]	; (d38 <i2c_m_sync_init+0x4c>)
     d00:	225e      	movs	r2, #94	; 0x5e
     d02:	0018      	movs	r0, r3
     d04:	4b0d      	ldr	r3, [pc, #52]	; (d3c <i2c_m_sync_init+0x50>)
     d06:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	683a      	ldr	r2, [r7, #0]
     d0c:	0011      	movs	r1, r2
     d0e:	0018      	movs	r0, r3
     d10:	4b0b      	ldr	r3, [pc, #44]	; (d40 <i2c_m_sync_init+0x54>)
     d12:	4798      	blx	r3
     d14:	0003      	movs	r3, r0
     d16:	60fb      	str	r3, [r7, #12]
	if (init_status) {
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d001      	beq.n	d22 <i2c_m_sync_init+0x36>
		return init_status;
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	e006      	b.n	d30 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	4a07      	ldr	r2, [pc, #28]	; (d44 <i2c_m_sync_init+0x58>)
     d26:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	4a07      	ldr	r2, [pc, #28]	; (d48 <i2c_m_sync_init+0x5c>)
     d2c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
     d2e:	2300      	movs	r3, #0
}
     d30:	0018      	movs	r0, r3
     d32:	46bd      	mov	sp, r7
     d34:	b004      	add	sp, #16
     d36:	bd80      	pop	{r7, pc}
     d38:	00004550 	.word	0x00004550
     d3c:	00000e55 	.word	0x00000e55
     d40:	0000214d 	.word	0x0000214d
     d44:	00000c1d 	.word	0x00000c1d
     d48:	00000c85 	.word	0x00000c85

00000d4c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     d4c:	b580      	push	{r7, lr}
     d4e:	b082      	sub	sp, #8
     d50:	af00      	add	r7, sp, #0
     d52:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	0018      	movs	r0, r3
     d58:	4b03      	ldr	r3, [pc, #12]	; (d68 <i2c_m_sync_enable+0x1c>)
     d5a:	4798      	blx	r3
     d5c:	0003      	movs	r3, r0
}
     d5e:	0018      	movs	r0, r3
     d60:	46bd      	mov	sp, r7
     d62:	b002      	add	sp, #8
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00002195 	.word	0x00002195

00000d6c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	60f8      	str	r0, [r7, #12]
     d74:	607a      	str	r2, [r7, #4]
     d76:	230a      	movs	r3, #10
     d78:	18fb      	adds	r3, r7, r3
     d7a:	1c0a      	adds	r2, r1, #0
     d7c:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     d7e:	230a      	movs	r3, #10
     d80:	18fb      	adds	r3, r7, r3
     d82:	881b      	ldrh	r3, [r3, #0]
     d84:	059b      	lsls	r3, r3, #22
     d86:	0d9b      	lsrs	r3, r3, #22
     d88:	b21a      	sxth	r2, r3
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	b219      	sxth	r1, r3
     d8e:	2380      	movs	r3, #128	; 0x80
     d90:	00db      	lsls	r3, r3, #3
     d92:	400b      	ands	r3, r1
     d94:	b21b      	sxth	r3, r3
     d96:	4313      	orrs	r3, r2
     d98:	b21b      	sxth	r3, r3
     d9a:	b29a      	uxth	r2, r3
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	839a      	strh	r2, [r3, #28]
     da0:	68fb      	ldr	r3, [r7, #12]
     da2:	8b9b      	ldrh	r3, [r3, #28]
}
     da4:	0018      	movs	r0, r3
     da6:	46bd      	mov	sp, r7
     da8:	b004      	add	sp, #16
     daa:	bd80      	pop	{r7, pc}

00000dac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     dac:	b580      	push	{r7, lr}
     dae:	b084      	sub	sp, #16
     db0:	af00      	add	r7, sp, #0
     db2:	60f8      	str	r0, [r7, #12]
     db4:	60b9      	str	r1, [r7, #8]
     db6:	1dbb      	adds	r3, r7, #6
     db8:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	2b00      	cmp	r3, #0
     dbe:	d004      	beq.n	dca <io_write+0x1e>
     dc0:	68bb      	ldr	r3, [r7, #8]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d001      	beq.n	dca <io_write+0x1e>
     dc6:	2301      	movs	r3, #1
     dc8:	e000      	b.n	dcc <io_write+0x20>
     dca:	2300      	movs	r3, #0
     dcc:	1c1a      	adds	r2, r3, #0
     dce:	2301      	movs	r3, #1
     dd0:	4013      	ands	r3, r2
     dd2:	b2db      	uxtb	r3, r3
     dd4:	4908      	ldr	r1, [pc, #32]	; (df8 <io_write+0x4c>)
     dd6:	2234      	movs	r2, #52	; 0x34
     dd8:	0018      	movs	r0, r3
     dda:	4b08      	ldr	r3, [pc, #32]	; (dfc <io_write+0x50>)
     ddc:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	1dba      	adds	r2, r7, #6
     de4:	8812      	ldrh	r2, [r2, #0]
     de6:	68b9      	ldr	r1, [r7, #8]
     de8:	68f8      	ldr	r0, [r7, #12]
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
}
     dee:	0018      	movs	r0, r3
     df0:	46bd      	mov	sp, r7
     df2:	b004      	add	sp, #16
     df4:	bd80      	pop	{r7, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	0000456c 	.word	0x0000456c
     dfc:	00000e55 	.word	0x00000e55

00000e00 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     e00:	b580      	push	{r7, lr}
     e02:	b084      	sub	sp, #16
     e04:	af00      	add	r7, sp, #0
     e06:	60f8      	str	r0, [r7, #12]
     e08:	60b9      	str	r1, [r7, #8]
     e0a:	1dbb      	adds	r3, r7, #6
     e0c:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     e0e:	68fb      	ldr	r3, [r7, #12]
     e10:	2b00      	cmp	r3, #0
     e12:	d004      	beq.n	e1e <io_read+0x1e>
     e14:	68bb      	ldr	r3, [r7, #8]
     e16:	2b00      	cmp	r3, #0
     e18:	d001      	beq.n	e1e <io_read+0x1e>
     e1a:	2301      	movs	r3, #1
     e1c:	e000      	b.n	e20 <io_read+0x20>
     e1e:	2300      	movs	r3, #0
     e20:	1c1a      	adds	r2, r3, #0
     e22:	2301      	movs	r3, #1
     e24:	4013      	ands	r3, r2
     e26:	b2db      	uxtb	r3, r3
     e28:	4908      	ldr	r1, [pc, #32]	; (e4c <io_read+0x4c>)
     e2a:	223d      	movs	r2, #61	; 0x3d
     e2c:	0018      	movs	r0, r3
     e2e:	4b08      	ldr	r3, [pc, #32]	; (e50 <io_read+0x50>)
     e30:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	685b      	ldr	r3, [r3, #4]
     e36:	1dba      	adds	r2, r7, #6
     e38:	8812      	ldrh	r2, [r2, #0]
     e3a:	68b9      	ldr	r1, [r7, #8]
     e3c:	68f8      	ldr	r0, [r7, #12]
     e3e:	4798      	blx	r3
     e40:	0003      	movs	r3, r0
}
     e42:	0018      	movs	r0, r3
     e44:	46bd      	mov	sp, r7
     e46:	b004      	add	sp, #16
     e48:	bd80      	pop	{r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	0000456c 	.word	0x0000456c
     e50:	00000e55 	.word	0x00000e55

00000e54 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     e54:	b580      	push	{r7, lr}
     e56:	b084      	sub	sp, #16
     e58:	af00      	add	r7, sp, #0
     e5a:	60b9      	str	r1, [r7, #8]
     e5c:	607a      	str	r2, [r7, #4]
     e5e:	230f      	movs	r3, #15
     e60:	18fb      	adds	r3, r7, r3
     e62:	1c02      	adds	r2, r0, #0
     e64:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
     e66:	230f      	movs	r3, #15
     e68:	18fb      	adds	r3, r7, r3
     e6a:	781b      	ldrb	r3, [r3, #0]
     e6c:	2201      	movs	r2, #1
     e6e:	4053      	eors	r3, r2
     e70:	b2db      	uxtb	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	d000      	beq.n	e78 <assert+0x24>
		__asm("BKPT #0");
     e76:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     e78:	46c0      	nop			; (mov r8, r8)
     e7a:	46bd      	mov	sp, r7
     e7c:	b004      	add	sp, #16
     e7e:	bd80      	pop	{r7, pc}

00000e80 <event_subscribe>:

static struct list_descriptor events;
static uint8_t                subscribed[EVENT_MASK_SIZE];

int32_t event_subscribe(struct event *const event, const event_id_t id, event_cb_t cb)
{
     e80:	b580      	push	{r7, lr}
     e82:	b086      	sub	sp, #24
     e84:	af00      	add	r7, sp, #0
     e86:	60f8      	str	r0, [r7, #12]
     e88:	607a      	str	r2, [r7, #4]
     e8a:	230b      	movs	r3, #11
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	1c0a      	adds	r2, r1, #0
     e90:	701a      	strb	r2, [r3, #0]
	/* get byte and bit number of the given event in the event mask */
	const uint8_t position = id >> 3;
     e92:	2317      	movs	r3, #23
     e94:	18fb      	adds	r3, r7, r3
     e96:	220b      	movs	r2, #11
     e98:	18ba      	adds	r2, r7, r2
     e9a:	7812      	ldrb	r2, [r2, #0]
     e9c:	08d2      	lsrs	r2, r2, #3
     e9e:	701a      	strb	r2, [r3, #0]
	const uint8_t mask     = 1 << (id & 0x7);
     ea0:	230b      	movs	r3, #11
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	781b      	ldrb	r3, [r3, #0]
     ea6:	2207      	movs	r2, #7
     ea8:	4013      	ands	r3, r2
     eaa:	2201      	movs	r2, #1
     eac:	409a      	lsls	r2, r3
     eae:	2316      	movs	r3, #22
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	701a      	strb	r2, [r3, #0]

	ASSERT(event && cb && (id < EVENT_MAX_AMOUNT));
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d009      	beq.n	ece <event_subscribe+0x4e>
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	2b00      	cmp	r3, #0
     ebe:	d006      	beq.n	ece <event_subscribe+0x4e>
     ec0:	230b      	movs	r3, #11
     ec2:	18fb      	adds	r3, r7, r3
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	2b07      	cmp	r3, #7
     ec8:	d801      	bhi.n	ece <event_subscribe+0x4e>
     eca:	2301      	movs	r3, #1
     ecc:	e000      	b.n	ed0 <event_subscribe+0x50>
     ece:	2300      	movs	r3, #0
     ed0:	1c1a      	adds	r2, r3, #0
     ed2:	2301      	movs	r3, #1
     ed4:	4013      	ands	r3, r2
     ed6:	b2db      	uxtb	r3, r3
     ed8:	492b      	ldr	r1, [pc, #172]	; (f88 <event_subscribe+0x108>)
     eda:	2231      	movs	r2, #49	; 0x31
     edc:	0018      	movs	r0, r3
     ede:	4b2b      	ldr	r3, [pc, #172]	; (f8c <event_subscribe+0x10c>)
     ee0:	4798      	blx	r3

	if (event->mask[position] & mask) {
     ee2:	2317      	movs	r3, #23
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	68fa      	ldr	r2, [r7, #12]
     eea:	18d3      	adds	r3, r2, r3
     eec:	791b      	ldrb	r3, [r3, #4]
     eee:	2216      	movs	r2, #22
     ef0:	18ba      	adds	r2, r7, r2
     ef2:	7812      	ldrb	r2, [r2, #0]
     ef4:	4013      	ands	r3, r2
     ef6:	b2db      	uxtb	r3, r3
     ef8:	2b00      	cmp	r3, #0
     efa:	d002      	beq.n	f02 <event_subscribe+0x82>
		return ERR_NO_CHANGE; /* Already subscribed */
     efc:	2302      	movs	r3, #2
     efe:	425b      	negs	r3, r3
     f00:	e03e      	b.n	f80 <event_subscribe+0x100>
	}

	if (!is_list_element(&events, event)) {
     f02:	68fa      	ldr	r2, [r7, #12]
     f04:	4b22      	ldr	r3, [pc, #136]	; (f90 <event_subscribe+0x110>)
     f06:	0011      	movs	r1, r2
     f08:	0018      	movs	r0, r3
     f0a:	4b22      	ldr	r3, [pc, #136]	; (f94 <event_subscribe+0x114>)
     f0c:	4798      	blx	r3
     f0e:	0003      	movs	r3, r0
     f10:	001a      	movs	r2, r3
     f12:	2301      	movs	r3, #1
     f14:	4053      	eors	r3, r2
     f16:	b2db      	uxtb	r3, r3
     f18:	2b00      	cmp	r3, #0
     f1a:	d00c      	beq.n	f36 <event_subscribe+0xb6>
		memset(event->mask, 0, EVENT_MASK_SIZE);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	3304      	adds	r3, #4
     f20:	2201      	movs	r2, #1
     f22:	2100      	movs	r1, #0
     f24:	0018      	movs	r0, r3
     f26:	4b1c      	ldr	r3, [pc, #112]	; (f98 <event_subscribe+0x118>)
     f28:	4798      	blx	r3
		list_insert_as_head(&events, event);
     f2a:	68fa      	ldr	r2, [r7, #12]
     f2c:	4b18      	ldr	r3, [pc, #96]	; (f90 <event_subscribe+0x110>)
     f2e:	0011      	movs	r1, r2
     f30:	0018      	movs	r0, r3
     f32:	4b1a      	ldr	r3, [pc, #104]	; (f9c <event_subscribe+0x11c>)
     f34:	4798      	blx	r3
	}
	event->cb = cb;
     f36:	68fb      	ldr	r3, [r7, #12]
     f38:	687a      	ldr	r2, [r7, #4]
     f3a:	609a      	str	r2, [r3, #8]
	event->mask[position] |= mask;
     f3c:	2317      	movs	r3, #23
     f3e:	18fb      	adds	r3, r7, r3
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	2217      	movs	r2, #23
     f44:	18ba      	adds	r2, r7, r2
     f46:	7812      	ldrb	r2, [r2, #0]
     f48:	68f9      	ldr	r1, [r7, #12]
     f4a:	188a      	adds	r2, r1, r2
     f4c:	7911      	ldrb	r1, [r2, #4]
     f4e:	2216      	movs	r2, #22
     f50:	18ba      	adds	r2, r7, r2
     f52:	7812      	ldrb	r2, [r2, #0]
     f54:	430a      	orrs	r2, r1
     f56:	b2d1      	uxtb	r1, r2
     f58:	68fa      	ldr	r2, [r7, #12]
     f5a:	18d3      	adds	r3, r2, r3
     f5c:	1c0a      	adds	r2, r1, #0
     f5e:	711a      	strb	r2, [r3, #4]

	subscribed[position] |= mask;
     f60:	2317      	movs	r3, #23
     f62:	18fb      	adds	r3, r7, r3
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	2217      	movs	r2, #23
     f68:	18ba      	adds	r2, r7, r2
     f6a:	7812      	ldrb	r2, [r2, #0]
     f6c:	490c      	ldr	r1, [pc, #48]	; (fa0 <event_subscribe+0x120>)
     f6e:	5c89      	ldrb	r1, [r1, r2]
     f70:	2216      	movs	r2, #22
     f72:	18ba      	adds	r2, r7, r2
     f74:	7812      	ldrb	r2, [r2, #0]
     f76:	430a      	orrs	r2, r1
     f78:	b2d1      	uxtb	r1, r2
     f7a:	4a09      	ldr	r2, [pc, #36]	; (fa0 <event_subscribe+0x120>)
     f7c:	54d1      	strb	r1, [r2, r3]

	return ERR_NONE;
     f7e:	2300      	movs	r3, #0
}
     f80:	0018      	movs	r0, r3
     f82:	46bd      	mov	sp, r7
     f84:	b006      	add	sp, #24
     f86:	bd80      	pop	{r7, pc}
     f88:	00004580 	.word	0x00004580
     f8c:	00000e55 	.word	0x00000e55
     f90:	2000005c 	.word	0x2000005c
     f94:	00000fa5 	.word	0x00000fa5
     f98:	00004509 	.word	0x00004509
     f9c:	00000fd9 	.word	0x00000fd9
     fa0:	20000060 	.word	0x20000060

00000fa4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
     fa4:	b580      	push	{r7, lr}
     fa6:	b084      	sub	sp, #16
     fa8:	af00      	add	r7, sp, #0
     faa:	6078      	str	r0, [r7, #4]
     fac:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     fae:	687b      	ldr	r3, [r7, #4]
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	60fb      	str	r3, [r7, #12]
     fb4:	e008      	b.n	fc8 <is_list_element+0x24>
		if (it == element) {
     fb6:	68fa      	ldr	r2, [r7, #12]
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	429a      	cmp	r2, r3
     fbc:	d101      	bne.n	fc2 <is_list_element+0x1e>
			return true;
     fbe:	2301      	movs	r3, #1
     fc0:	e006      	b.n	fd0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	60fb      	str	r3, [r7, #12]
     fc8:	68fb      	ldr	r3, [r7, #12]
     fca:	2b00      	cmp	r3, #0
     fcc:	d1f3      	bne.n	fb6 <is_list_element+0x12>
		}
	}

	return false;
     fce:	2300      	movs	r3, #0
}
     fd0:	0018      	movs	r0, r3
     fd2:	46bd      	mov	sp, r7
     fd4:	b004      	add	sp, #16
     fd6:	bd80      	pop	{r7, pc}

00000fd8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     fd8:	b580      	push	{r7, lr}
     fda:	b082      	sub	sp, #8
     fdc:	af00      	add	r7, sp, #0
     fde:	6078      	str	r0, [r7, #4]
     fe0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
     fe2:	683a      	ldr	r2, [r7, #0]
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	0011      	movs	r1, r2
     fe8:	0018      	movs	r0, r3
     fea:	4b0e      	ldr	r3, [pc, #56]	; (1024 <list_insert_as_head+0x4c>)
     fec:	4798      	blx	r3
     fee:	0003      	movs	r3, r0
     ff0:	1e5a      	subs	r2, r3, #1
     ff2:	4193      	sbcs	r3, r2
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2201      	movs	r2, #1
     ff8:	4053      	eors	r3, r2
     ffa:	b2db      	uxtb	r3, r3
     ffc:	1c1a      	adds	r2, r3, #0
     ffe:	2301      	movs	r3, #1
    1000:	4013      	ands	r3, r2
    1002:	b2db      	uxtb	r3, r3
    1004:	4908      	ldr	r1, [pc, #32]	; (1028 <list_insert_as_head+0x50>)
    1006:	2239      	movs	r2, #57	; 0x39
    1008:	0018      	movs	r0, r3
    100a:	4b08      	ldr	r3, [pc, #32]	; (102c <list_insert_as_head+0x54>)
    100c:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    100e:	687b      	ldr	r3, [r7, #4]
    1010:	681a      	ldr	r2, [r3, #0]
    1012:	683b      	ldr	r3, [r7, #0]
    1014:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	683a      	ldr	r2, [r7, #0]
    101a:	601a      	str	r2, [r3, #0]
}
    101c:	46c0      	nop			; (mov r8, r8)
    101e:	46bd      	mov	sp, r7
    1020:	b002      	add	sp, #8
    1022:	bd80      	pop	{r7, pc}
    1024:	00000fa5 	.word	0x00000fa5
    1028:	000045a0 	.word	0x000045a0
    102c:	00000e55 	.word	0x00000e55

00001030 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    1030:	b590      	push	{r4, r7, lr}
    1032:	b083      	sub	sp, #12
    1034:	af00      	add	r7, sp, #0
    1036:	6039      	str	r1, [r7, #0]
    1038:	0011      	movs	r1, r2
    103a:	1dbb      	adds	r3, r7, #6
    103c:	1c02      	adds	r2, r0, #0
    103e:	801a      	strh	r2, [r3, #0]
    1040:	1d7b      	adds	r3, r7, #5
    1042:	1c0a      	adds	r2, r1, #0
    1044:	701a      	strb	r2, [r3, #0]
	switch (power) {
    1046:	1d7b      	adds	r3, r7, #5
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	3b04      	subs	r3, #4
    104c:	2b04      	cmp	r3, #4
    104e:	d859      	bhi.n	1104 <_get_cycles_for_us_internal+0xd4>
    1050:	009a      	lsls	r2, r3, #2
    1052:	4b34      	ldr	r3, [pc, #208]	; (1124 <_get_cycles_for_us_internal+0xf4>)
    1054:	18d3      	adds	r3, r2, r3
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    105a:	1dbb      	adds	r3, r7, #6
    105c:	881c      	ldrh	r4, [r3, #0]
    105e:	683a      	ldr	r2, [r7, #0]
    1060:	4b31      	ldr	r3, [pc, #196]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    1062:	4932      	ldr	r1, [pc, #200]	; (112c <_get_cycles_for_us_internal+0xfc>)
    1064:	0010      	movs	r0, r2
    1066:	4798      	blx	r3
    1068:	0003      	movs	r3, r0
    106a:	4363      	muls	r3, r4
    106c:	1e5a      	subs	r2, r3, #1
    106e:	4b2e      	ldr	r3, [pc, #184]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    1070:	210a      	movs	r1, #10
    1072:	0010      	movs	r0, r2
    1074:	4798      	blx	r3
    1076:	0003      	movs	r3, r0
    1078:	3301      	adds	r3, #1
    107a:	e04e      	b.n	111a <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    107c:	1dbb      	adds	r3, r7, #6
    107e:	881c      	ldrh	r4, [r3, #0]
    1080:	683a      	ldr	r2, [r7, #0]
    1082:	4b29      	ldr	r3, [pc, #164]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    1084:	492a      	ldr	r1, [pc, #168]	; (1130 <_get_cycles_for_us_internal+0x100>)
    1086:	0010      	movs	r0, r2
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	4363      	muls	r3, r4
    108e:	1e5a      	subs	r2, r3, #1
    1090:	4b25      	ldr	r3, [pc, #148]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    1092:	2164      	movs	r1, #100	; 0x64
    1094:	0010      	movs	r0, r2
    1096:	4798      	blx	r3
    1098:	0003      	movs	r3, r0
    109a:	3301      	adds	r3, #1
    109c:	e03d      	b.n	111a <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    109e:	1dbb      	adds	r3, r7, #6
    10a0:	881c      	ldrh	r4, [r3, #0]
    10a2:	6838      	ldr	r0, [r7, #0]
    10a4:	4b20      	ldr	r3, [pc, #128]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10a6:	22fa      	movs	r2, #250	; 0xfa
    10a8:	0091      	lsls	r1, r2, #2
    10aa:	4798      	blx	r3
    10ac:	0003      	movs	r3, r0
    10ae:	4363      	muls	r3, r4
    10b0:	1e58      	subs	r0, r3, #1
    10b2:	4b1d      	ldr	r3, [pc, #116]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10b4:	22fa      	movs	r2, #250	; 0xfa
    10b6:	0091      	lsls	r1, r2, #2
    10b8:	4798      	blx	r3
    10ba:	0003      	movs	r3, r0
    10bc:	3301      	adds	r3, #1
    10be:	e02c      	b.n	111a <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    10c0:	1dbb      	adds	r3, r7, #6
    10c2:	881c      	ldrh	r4, [r3, #0]
    10c4:	683a      	ldr	r2, [r7, #0]
    10c6:	4b18      	ldr	r3, [pc, #96]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10c8:	2164      	movs	r1, #100	; 0x64
    10ca:	0010      	movs	r0, r2
    10cc:	4798      	blx	r3
    10ce:	0003      	movs	r3, r0
    10d0:	4363      	muls	r3, r4
    10d2:	1e5a      	subs	r2, r3, #1
    10d4:	4b14      	ldr	r3, [pc, #80]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10d6:	4916      	ldr	r1, [pc, #88]	; (1130 <_get_cycles_for_us_internal+0x100>)
    10d8:	0010      	movs	r0, r2
    10da:	4798      	blx	r3
    10dc:	0003      	movs	r3, r0
    10de:	3301      	adds	r3, #1
    10e0:	e01b      	b.n	111a <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    10e2:	1dbb      	adds	r3, r7, #6
    10e4:	881c      	ldrh	r4, [r3, #0]
    10e6:	683a      	ldr	r2, [r7, #0]
    10e8:	4b0f      	ldr	r3, [pc, #60]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10ea:	210a      	movs	r1, #10
    10ec:	0010      	movs	r0, r2
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
    10f2:	4363      	muls	r3, r4
    10f4:	1e5a      	subs	r2, r3, #1
    10f6:	4b0c      	ldr	r3, [pc, #48]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    10f8:	490c      	ldr	r1, [pc, #48]	; (112c <_get_cycles_for_us_internal+0xfc>)
    10fa:	0010      	movs	r0, r2
    10fc:	4798      	blx	r3
    10fe:	0003      	movs	r3, r0
    1100:	3301      	adds	r3, #1
    1102:	e00a      	b.n	111a <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    1104:	1dbb      	adds	r3, r7, #6
    1106:	881b      	ldrh	r3, [r3, #0]
    1108:	683a      	ldr	r2, [r7, #0]
    110a:	4353      	muls	r3, r2
    110c:	1e5a      	subs	r2, r3, #1
    110e:	4b06      	ldr	r3, [pc, #24]	; (1128 <_get_cycles_for_us_internal+0xf8>)
    1110:	4908      	ldr	r1, [pc, #32]	; (1134 <_get_cycles_for_us_internal+0x104>)
    1112:	0010      	movs	r0, r2
    1114:	4798      	blx	r3
    1116:	0003      	movs	r3, r0
    1118:	3301      	adds	r3, #1
	}
}
    111a:	0018      	movs	r0, r3
    111c:	46bd      	mov	sp, r7
    111e:	b003      	add	sp, #12
    1120:	bd90      	pop	{r4, r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	000045e4 	.word	0x000045e4
    1128:	0000367d 	.word	0x0000367d
    112c:	000186a0 	.word	0x000186a0
    1130:	00002710 	.word	0x00002710
    1134:	000f4240 	.word	0x000f4240

00001138 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    1138:	b590      	push	{r4, r7, lr}
    113a:	b083      	sub	sp, #12
    113c:	af00      	add	r7, sp, #0
    113e:	6039      	str	r1, [r7, #0]
    1140:	0011      	movs	r1, r2
    1142:	1dbb      	adds	r3, r7, #6
    1144:	1c02      	adds	r2, r0, #0
    1146:	801a      	strh	r2, [r3, #0]
    1148:	1d7b      	adds	r3, r7, #5
    114a:	1c0a      	adds	r2, r1, #0
    114c:	701a      	strb	r2, [r3, #0]
	switch (power) {
    114e:	1d7b      	adds	r3, r7, #5
    1150:	781b      	ldrb	r3, [r3, #0]
    1152:	3b04      	subs	r3, #4
    1154:	2b04      	cmp	r3, #4
    1156:	d84b      	bhi.n	11f0 <_get_cycles_for_ms_internal+0xb8>
    1158:	009a      	lsls	r2, r3, #2
    115a:	4b2d      	ldr	r3, [pc, #180]	; (1210 <_get_cycles_for_ms_internal+0xd8>)
    115c:	18d3      	adds	r3, r2, r3
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    1162:	1dbb      	adds	r3, r7, #6
    1164:	881c      	ldrh	r4, [r3, #0]
    1166:	683a      	ldr	r2, [r7, #0]
    1168:	4b2a      	ldr	r3, [pc, #168]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    116a:	492b      	ldr	r1, [pc, #172]	; (1218 <_get_cycles_for_ms_internal+0xe0>)
    116c:	0010      	movs	r0, r2
    116e:	4798      	blx	r3
    1170:	0003      	movs	r3, r0
    1172:	4363      	muls	r3, r4
    1174:	2264      	movs	r2, #100	; 0x64
    1176:	4353      	muls	r3, r2
    1178:	e045      	b.n	1206 <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    117a:	1dbb      	adds	r3, r7, #6
    117c:	881c      	ldrh	r4, [r3, #0]
    117e:	683a      	ldr	r2, [r7, #0]
    1180:	4b24      	ldr	r3, [pc, #144]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    1182:	4926      	ldr	r1, [pc, #152]	; (121c <_get_cycles_for_ms_internal+0xe4>)
    1184:	0010      	movs	r0, r2
    1186:	4798      	blx	r3
    1188:	0003      	movs	r3, r0
    118a:	4363      	muls	r3, r4
    118c:	001a      	movs	r2, r3
    118e:	0013      	movs	r3, r2
    1190:	009b      	lsls	r3, r3, #2
    1192:	189b      	adds	r3, r3, r2
    1194:	005b      	lsls	r3, r3, #1
    1196:	e036      	b.n	1206 <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    1198:	1dbb      	adds	r3, r7, #6
    119a:	881c      	ldrh	r4, [r3, #0]
    119c:	6838      	ldr	r0, [r7, #0]
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11a0:	22fa      	movs	r2, #250	; 0xfa
    11a2:	0091      	lsls	r1, r2, #2
    11a4:	4798      	blx	r3
    11a6:	0003      	movs	r3, r0
    11a8:	4363      	muls	r3, r4
    11aa:	e02c      	b.n	1206 <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    11ac:	1dbb      	adds	r3, r7, #6
    11ae:	881c      	ldrh	r4, [r3, #0]
    11b0:	683a      	ldr	r2, [r7, #0]
    11b2:	4b18      	ldr	r3, [pc, #96]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11b4:	2164      	movs	r1, #100	; 0x64
    11b6:	0010      	movs	r0, r2
    11b8:	4798      	blx	r3
    11ba:	0003      	movs	r3, r0
    11bc:	4363      	muls	r3, r4
    11be:	1e5a      	subs	r2, r3, #1
    11c0:	4b14      	ldr	r3, [pc, #80]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11c2:	210a      	movs	r1, #10
    11c4:	0010      	movs	r0, r2
    11c6:	4798      	blx	r3
    11c8:	0003      	movs	r3, r0
    11ca:	3301      	adds	r3, #1
    11cc:	e01b      	b.n	1206 <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    11ce:	1dbb      	adds	r3, r7, #6
    11d0:	881c      	ldrh	r4, [r3, #0]
    11d2:	683a      	ldr	r2, [r7, #0]
    11d4:	4b0f      	ldr	r3, [pc, #60]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11d6:	210a      	movs	r1, #10
    11d8:	0010      	movs	r0, r2
    11da:	4798      	blx	r3
    11dc:	0003      	movs	r3, r0
    11de:	4363      	muls	r3, r4
    11e0:	1e5a      	subs	r2, r3, #1
    11e2:	4b0c      	ldr	r3, [pc, #48]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11e4:	2164      	movs	r1, #100	; 0x64
    11e6:	0010      	movs	r0, r2
    11e8:	4798      	blx	r3
    11ea:	0003      	movs	r3, r0
    11ec:	3301      	adds	r3, #1
    11ee:	e00a      	b.n	1206 <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    11f0:	1dbb      	adds	r3, r7, #6
    11f2:	881b      	ldrh	r3, [r3, #0]
    11f4:	683a      	ldr	r2, [r7, #0]
    11f6:	4353      	muls	r3, r2
    11f8:	1e58      	subs	r0, r3, #1
    11fa:	4b06      	ldr	r3, [pc, #24]	; (1214 <_get_cycles_for_ms_internal+0xdc>)
    11fc:	22fa      	movs	r2, #250	; 0xfa
    11fe:	0091      	lsls	r1, r2, #2
    1200:	4798      	blx	r3
    1202:	0003      	movs	r3, r0
    1204:	3301      	adds	r3, #1
	}
}
    1206:	0018      	movs	r0, r3
    1208:	46bd      	mov	sp, r7
    120a:	b003      	add	sp, #12
    120c:	bd90      	pop	{r4, r7, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	000045f8 	.word	0x000045f8
    1214:	0000367d 	.word	0x0000367d
    1218:	000186a0 	.word	0x000186a0
    121c:	00002710 	.word	0x00002710

00001220 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
    1226:	0002      	movs	r2, r0
    1228:	1dbb      	adds	r3, r7, #6
    122a:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    122c:	4905      	ldr	r1, [pc, #20]	; (1244 <_get_cycles_for_ms+0x24>)
    122e:	1dbb      	adds	r3, r7, #6
    1230:	881b      	ldrh	r3, [r3, #0]
    1232:	2207      	movs	r2, #7
    1234:	0018      	movs	r0, r3
    1236:	4b04      	ldr	r3, [pc, #16]	; (1248 <_get_cycles_for_ms+0x28>)
    1238:	4798      	blx	r3
    123a:	0003      	movs	r3, r0
}
    123c:	0018      	movs	r0, r3
    123e:	46bd      	mov	sp, r7
    1240:	b002      	add	sp, #8
    1242:	bd80      	pop	{r7, pc}
    1244:	003d0900 	.word	0x003d0900
    1248:	00001139 	.word	0x00001139

0000124c <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    124c:	b580      	push	{r7, lr}
    124e:	b082      	sub	sp, #8
    1250:	af00      	add	r7, sp, #0
    1252:	6078      	str	r0, [r7, #4]
    1254:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	685a      	ldr	r2, [r3, #4]
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	005b      	lsls	r3, r3, #1
    125e:	211e      	movs	r1, #30
    1260:	400b      	ands	r3, r1
    1262:	431a      	orrs	r2, r3
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1268:	46c0      	nop			; (mov r8, r8)
    126a:	46bd      	mov	sp, r7
    126c:	b002      	add	sp, #8
    126e:	bd80      	pop	{r7, pc}

00001270 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1274:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <_init_chip+0x30>)
    1276:	2100      	movs	r1, #0
    1278:	0018      	movs	r0, r3
    127a:	4b0a      	ldr	r3, [pc, #40]	; (12a4 <_init_chip+0x34>)
    127c:	4798      	blx	r3

	_set_performance_level(2);
    127e:	2002      	movs	r0, #2
    1280:	4b09      	ldr	r3, [pc, #36]	; (12a8 <_init_chip+0x38>)
    1282:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1284:	4b09      	ldr	r3, [pc, #36]	; (12ac <_init_chip+0x3c>)
    1286:	4798      	blx	r3
	_oscctrl_init_sources();
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <_init_chip+0x40>)
    128a:	4798      	blx	r3
	_mclk_init();
    128c:	4b09      	ldr	r3, [pc, #36]	; (12b4 <_init_chip+0x44>)
    128e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1290:	4b09      	ldr	r3, [pc, #36]	; (12b8 <_init_chip+0x48>)
    1292:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1294:	20ff      	movs	r0, #255	; 0xff
    1296:	4b09      	ldr	r3, [pc, #36]	; (12bc <_init_chip+0x4c>)
    1298:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	46bd      	mov	sp, r7
    129e:	bd80      	pop	{r7, pc}
    12a0:	41004000 	.word	0x41004000
    12a4:	0000124d 	.word	0x0000124d
    12a8:	0000166d 	.word	0x0000166d
    12ac:	00001441 	.word	0x00001441
    12b0:	00001541 	.word	0x00001541
    12b4:	000013ad 	.word	0x000013ad
    12b8:	0000158d 	.word	0x0000158d
    12bc:	00001321 	.word	0x00001321

000012c0 <hri_gclk_wait_for_sync>:
{
    12c0:	b580      	push	{r7, lr}
    12c2:	b082      	sub	sp, #8
    12c4:	af00      	add	r7, sp, #0
    12c6:	6078      	str	r0, [r7, #4]
    12c8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	685b      	ldr	r3, [r3, #4]
    12d0:	683a      	ldr	r2, [r7, #0]
    12d2:	4013      	ands	r3, r2
    12d4:	d1fa      	bne.n	12cc <hri_gclk_wait_for_sync+0xc>
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b002      	add	sp, #8
    12dc:	bd80      	pop	{r7, pc}
	...

000012e0 <hri_gclk_write_GENCTRL_reg>:
{
    12e0:	b580      	push	{r7, lr}
    12e2:	b084      	sub	sp, #16
    12e4:	af00      	add	r7, sp, #0
    12e6:	60f8      	str	r0, [r7, #12]
    12e8:	607a      	str	r2, [r7, #4]
    12ea:	230b      	movs	r3, #11
    12ec:	18fb      	adds	r3, r7, r3
    12ee:	1c0a      	adds	r2, r1, #0
    12f0:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    12f2:	230b      	movs	r3, #11
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	781a      	ldrb	r2, [r3, #0]
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	3208      	adds	r2, #8
    12fc:	0092      	lsls	r2, r2, #2
    12fe:	6879      	ldr	r1, [r7, #4]
    1300:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1302:	4a05      	ldr	r2, [pc, #20]	; (1318 <hri_gclk_write_GENCTRL_reg+0x38>)
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	0011      	movs	r1, r2
    1308:	0018      	movs	r0, r3
    130a:	4b04      	ldr	r3, [pc, #16]	; (131c <hri_gclk_write_GENCTRL_reg+0x3c>)
    130c:	4798      	blx	r3
}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	46bd      	mov	sp, r7
    1312:	b004      	add	sp, #16
    1314:	bd80      	pop	{r7, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	000007fd 	.word	0x000007fd
    131c:	000012c1 	.word	0x000012c1

00001320 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1320:	b580      	push	{r7, lr}
    1322:	b082      	sub	sp, #8
    1324:	af00      	add	r7, sp, #0
    1326:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	2201      	movs	r2, #1
    132c:	4013      	ands	r3, r2
    132e:	d005      	beq.n	133c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1330:	4a04      	ldr	r2, [pc, #16]	; (1344 <_gclk_init_generators_by_fref+0x24>)
    1332:	4b05      	ldr	r3, [pc, #20]	; (1348 <_gclk_init_generators_by_fref+0x28>)
    1334:	2100      	movs	r1, #0
    1336:	0018      	movs	r0, r3
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <_gclk_init_generators_by_fref+0x2c>)
    133a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    133c:	46c0      	nop			; (mov r8, r8)
    133e:	46bd      	mov	sp, r7
    1340:	b002      	add	sp, #8
    1342:	bd80      	pop	{r7, pc}
    1344:	00010106 	.word	0x00010106
    1348:	40001800 	.word	0x40001800
    134c:	000012e1 	.word	0x000012e1

00001350 <hri_mclk_write_CPUDIV_reg>:
{
    1350:	b580      	push	{r7, lr}
    1352:	b082      	sub	sp, #8
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    1358:	000a      	movs	r2, r1
    135a:	1cfb      	adds	r3, r7, #3
    135c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	1cfa      	adds	r2, r7, #3
    1362:	7812      	ldrb	r2, [r2, #0]
    1364:	711a      	strb	r2, [r3, #4]
}
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	46bd      	mov	sp, r7
    136a:	b002      	add	sp, #8
    136c:	bd80      	pop	{r7, pc}

0000136e <hri_mclk_write_LPDIV_reg>:
{
    136e:	b580      	push	{r7, lr}
    1370:	b082      	sub	sp, #8
    1372:	af00      	add	r7, sp, #0
    1374:	6078      	str	r0, [r7, #4]
    1376:	000a      	movs	r2, r1
    1378:	1cfb      	adds	r3, r7, #3
    137a:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->LPDIV.reg = data;
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	1cfa      	adds	r2, r7, #3
    1380:	7812      	ldrb	r2, [r2, #0]
    1382:	715a      	strb	r2, [r3, #5]
}
    1384:	46c0      	nop			; (mov r8, r8)
    1386:	46bd      	mov	sp, r7
    1388:	b002      	add	sp, #8
    138a:	bd80      	pop	{r7, pc}

0000138c <hri_mclk_write_BUPDIV_reg>:
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
    1394:	000a      	movs	r2, r1
    1396:	1cfb      	adds	r3, r7, #3
    1398:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->BUPDIV.reg = data;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	1cfa      	adds	r2, r7, #3
    139e:	7812      	ldrb	r2, [r2, #0]
    13a0:	719a      	strb	r2, [r3, #6]
}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	46bd      	mov	sp, r7
    13a6:	b002      	add	sp, #8
    13a8:	bd80      	pop	{r7, pc}
	...

000013ac <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b082      	sub	sp, #8
    13b0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    13b2:	4b0a      	ldr	r3, [pc, #40]	; (13dc <_mclk_init+0x30>)
    13b4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	2108      	movs	r1, #8
    13ba:	0018      	movs	r0, r3
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <_mclk_init+0x34>)
    13be:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	2104      	movs	r1, #4
    13c4:	0018      	movs	r0, r3
    13c6:	4b07      	ldr	r3, [pc, #28]	; (13e4 <_mclk_init+0x38>)
    13c8:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	2101      	movs	r1, #1
    13ce:	0018      	movs	r0, r3
    13d0:	4b05      	ldr	r3, [pc, #20]	; (13e8 <_mclk_init+0x3c>)
    13d2:	4798      	blx	r3
}
    13d4:	46c0      	nop			; (mov r8, r8)
    13d6:	46bd      	mov	sp, r7
    13d8:	b002      	add	sp, #8
    13da:	bd80      	pop	{r7, pc}
    13dc:	40000400 	.word	0x40000400
    13e0:	0000138d 	.word	0x0000138d
    13e4:	0000136f 	.word	0x0000136f
    13e8:	00001351 	.word	0x00001351

000013ec <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b082      	sub	sp, #8
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
    13f4:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	683a      	ldr	r2, [r7, #0]
    13fa:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    13fc:	46c0      	nop			; (mov r8, r8)
    13fe:	46bd      	mov	sp, r7
    1400:	b002      	add	sp, #8
    1402:	bd80      	pop	{r7, pc}

00001404 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    1404:	b580      	push	{r7, lr}
    1406:	b084      	sub	sp, #16
    1408:	af00      	add	r7, sp, #0
    140a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	69db      	ldr	r3, [r3, #28]
    1410:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	0a1b      	lsrs	r3, r3, #8
    1416:	221f      	movs	r2, #31
    1418:	4013      	ands	r3, r2
    141a:	60fb      	str	r3, [r7, #12]
	return tmp;
    141c:	68fb      	ldr	r3, [r7, #12]
}
    141e:	0018      	movs	r0, r3
    1420:	46bd      	mov	sp, r7
    1422:	b004      	add	sp, #16
    1424:	bd80      	pop	{r7, pc}

00001426 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    1426:	b580      	push	{r7, lr}
    1428:	b082      	sub	sp, #8
    142a:	af00      	add	r7, sp, #0
    142c:	6078      	str	r0, [r7, #4]
    142e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	683a      	ldr	r2, [r7, #0]
    1434:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	46bd      	mov	sp, r7
    143a:	b002      	add	sp, #8
    143c:	bd80      	pop	{r7, pc}
	...

00001440 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	b082      	sub	sp, #8
    1444:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1446:	4b10      	ldr	r3, [pc, #64]	; (1488 <_osc32kctrl_init_sources+0x48>)
    1448:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    144a:	1cbb      	adds	r3, r7, #2
    144c:	2200      	movs	r2, #0
    144e:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	0018      	movs	r0, r3
    1454:	4b0d      	ldr	r3, [pc, #52]	; (148c <_osc32kctrl_init_sources+0x4c>)
    1456:	4798      	blx	r3
    1458:	0002      	movs	r2, r0
    145a:	1cbb      	adds	r3, r7, #2
    145c:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    145e:	1cbb      	adds	r3, r7, #2
    1460:	881b      	ldrh	r3, [r3, #0]
    1462:	021b      	lsls	r3, r3, #8
    1464:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1466:	23f8      	movs	r3, #248	; 0xf8
    1468:	015b      	lsls	r3, r3, #5
    146a:	401a      	ands	r2, r3
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	0011      	movs	r1, r2
    1470:	0018      	movs	r0, r3
    1472:	4b07      	ldr	r3, [pc, #28]	; (1490 <_osc32kctrl_init_sources+0x50>)
    1474:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	2105      	movs	r1, #5
    147a:	0018      	movs	r0, r3
    147c:	4b05      	ldr	r3, [pc, #20]	; (1494 <_osc32kctrl_init_sources+0x54>)
    147e:	4798      	blx	r3
	(void)calib;
}
    1480:	46c0      	nop			; (mov r8, r8)
    1482:	46bd      	mov	sp, r7
    1484:	b002      	add	sp, #8
    1486:	bd80      	pop	{r7, pc}
    1488:	40001000 	.word	0x40001000
    148c:	00001405 	.word	0x00001405
    1490:	00001427 	.word	0x00001427
    1494:	000013ed 	.word	0x000013ed

00001498 <hri_oscctrl_wait_for_sync>:
typedef uint8_t  hri_oscctrl_dpllstatus_reg_t;
typedef uint8_t  hri_oscctrl_dpllsyncbusy_reg_t;
typedef uint8_t  hri_oscctrl_osc16mctrl_reg_t;

static inline void hri_oscctrl_wait_for_sync(const void *const hw, hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    1498:	b580      	push	{r7, lr}
    149a:	b082      	sub	sp, #8
    149c:	af00      	add	r7, sp, #0
    149e:	6078      	str	r0, [r7, #4]
    14a0:	000a      	movs	r2, r1
    14a2:	1cfb      	adds	r3, r7, #3
    14a4:	701a      	strb	r2, [r3, #0]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	2238      	movs	r2, #56	; 0x38
    14ac:	5c9b      	ldrb	r3, [r3, r2]
    14ae:	b2db      	uxtb	r3, r3
    14b0:	1cfa      	adds	r2, r7, #3
    14b2:	7812      	ldrb	r2, [r2, #0]
    14b4:	4013      	ands	r3, r2
    14b6:	b2db      	uxtb	r3, r3
    14b8:	2b00      	cmp	r3, #0
    14ba:	d1f5      	bne.n	14a8 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    14bc:	46c0      	nop			; (mov r8, r8)
    14be:	46bd      	mov	sp, r7
    14c0:	b002      	add	sp, #8
    14c2:	bd80      	pop	{r7, pc}

000014c4 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	68db      	ldr	r3, [r3, #12]
    14d0:	091b      	lsrs	r3, r3, #4
    14d2:	2201      	movs	r2, #1
    14d4:	4013      	ands	r3, r2
    14d6:	1e5a      	subs	r2, r3, #1
    14d8:	4193      	sbcs	r3, r2
    14da:	b2db      	uxtb	r3, r3
}
    14dc:	0018      	movs	r0, r3
    14de:	46bd      	mov	sp, r7
    14e0:	b002      	add	sp, #8
    14e2:	bd80      	pop	{r7, pc}

000014e4 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b082      	sub	sp, #8
    14e8:	af00      	add	r7, sp, #0
    14ea:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	7d1b      	ldrb	r3, [r3, #20]
    14f0:	b2db      	uxtb	r3, r3
    14f2:	2280      	movs	r2, #128	; 0x80
    14f4:	4252      	negs	r2, r2
    14f6:	4313      	orrs	r3, r2
    14f8:	b2da      	uxtb	r2, r3
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	210e      	movs	r1, #14
    1502:	0018      	movs	r0, r3
    1504:	4b02      	ldr	r3, [pc, #8]	; (1510 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit+0x2c>)
    1506:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1508:	46c0      	nop			; (mov r8, r8)
    150a:	46bd      	mov	sp, r7
    150c:	b002      	add	sp, #8
    150e:	bd80      	pop	{r7, pc}
    1510:	00001499 	.word	0x00001499

00001514 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    1514:	b580      	push	{r7, lr}
    1516:	b082      	sub	sp, #8
    1518:	af00      	add	r7, sp, #0
    151a:	6078      	str	r0, [r7, #4]
    151c:	000a      	movs	r2, r1
    151e:	1cfb      	adds	r3, r7, #3
    1520:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	1cfa      	adds	r2, r7, #3
    1526:	7812      	ldrb	r2, [r2, #0]
    1528:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	2102      	movs	r1, #2
    152e:	0018      	movs	r0, r3
    1530:	4b02      	ldr	r3, [pc, #8]	; (153c <hri_oscctrl_write_OSC16MCTRL_reg+0x28>)
    1532:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1534:	46c0      	nop			; (mov r8, r8)
    1536:	46bd      	mov	sp, r7
    1538:	b002      	add	sp, #8
    153a:	bd80      	pop	{r7, pc}
    153c:	00001499 	.word	0x00001499

00001540 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1546:	4b0d      	ldr	r3, [pc, #52]	; (157c <_oscctrl_init_sources+0x3c>)
    1548:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	2182      	movs	r1, #130	; 0x82
    154e:	0018      	movs	r0, r3
    1550:	4b0b      	ldr	r3, [pc, #44]	; (1580 <_oscctrl_init_sources+0x40>)
    1552:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1554:	46c0      	nop			; (mov r8, r8)
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	0018      	movs	r0, r3
    155a:	4b0a      	ldr	r3, [pc, #40]	; (1584 <_oscctrl_init_sources+0x44>)
    155c:	4798      	blx	r3
    155e:	0003      	movs	r3, r0
    1560:	001a      	movs	r2, r3
    1562:	2301      	movs	r3, #1
    1564:	4053      	eors	r3, r2
    1566:	b2db      	uxtb	r3, r3
    1568:	2b00      	cmp	r3, #0
    156a:	d1f4      	bne.n	1556 <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	0018      	movs	r0, r3
    1570:	4b05      	ldr	r3, [pc, #20]	; (1588 <_oscctrl_init_sources+0x48>)
    1572:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    1574:	46c0      	nop			; (mov r8, r8)
    1576:	46bd      	mov	sp, r7
    1578:	b002      	add	sp, #8
    157a:	bd80      	pop	{r7, pc}
    157c:	40000c00 	.word	0x40000c00
    1580:	00001515 	.word	0x00001515
    1584:	000014c5 	.word	0x000014c5
    1588:	000014e5 	.word	0x000014e5

0000158c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    158c:	b580      	push	{r7, lr}
    158e:	b082      	sub	sp, #8
    1590:	af00      	add	r7, sp, #0
	void *                     hw  = (void *)OSCCTRL;
    1592:	4b04      	ldr	r3, [pc, #16]	; (15a4 <_oscctrl_init_referenced_generators+0x18>)
    1594:	607b      	str	r3, [r7, #4]
	hri_oscctrl_dfllctrl_reg_t tmp = 0;
    1596:	1cbb      	adds	r3, r7, #2
    1598:	2200      	movs	r2, #0
    159a:	801a      	strh	r2, [r3, #0]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    159c:	46c0      	nop			; (mov r8, r8)
    159e:	46bd      	mov	sp, r7
    15a0:	b002      	add	sp, #8
    15a2:	bd80      	pop	{r7, pc}
    15a4:	40000c00 	.word	0x40000c00

000015a8 <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	799b      	ldrb	r3, [r3, #6]
    15b4:	b2db      	uxtb	r3, r3
}
    15b6:	0018      	movs	r0, r3
    15b8:	46bd      	mov	sp, r7
    15ba:	b002      	add	sp, #8
    15bc:	bd80      	pop	{r7, pc}

000015be <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    15be:	b580      	push	{r7, lr}
    15c0:	b082      	sub	sp, #8
    15c2:	af00      	add	r7, sp, #0
    15c4:	6078      	str	r0, [r7, #4]
    15c6:	000a      	movs	r2, r1
    15c8:	1cfb      	adds	r3, r7, #3
    15ca:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	1cfa      	adds	r2, r7, #3
    15d0:	7812      	ldrb	r2, [r2, #0]
    15d2:	719a      	strb	r2, [r3, #6]
}
    15d4:	46c0      	nop			; (mov r8, r8)
    15d6:	46bd      	mov	sp, r7
    15d8:	b002      	add	sp, #8
    15da:	bd80      	pop	{r7, pc}

000015dc <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    15dc:	b580      	push	{r7, lr}
    15de:	b084      	sub	sp, #16
    15e0:	af00      	add	r7, sp, #0
    15e2:	6078      	str	r0, [r7, #4]
    15e4:	000a      	movs	r2, r1
    15e6:	1cfb      	adds	r3, r7, #3
    15e8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    15ea:	230f      	movs	r3, #15
    15ec:	18fb      	adds	r3, r7, r3
    15ee:	687a      	ldr	r2, [r7, #4]
    15f0:	7892      	ldrb	r2, [r2, #2]
    15f2:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    15f4:	230f      	movs	r3, #15
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	1cfa      	adds	r2, r7, #3
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	7812      	ldrb	r2, [r2, #0]
    15fe:	4013      	ands	r3, r2
    1600:	b2da      	uxtb	r2, r3
    1602:	230f      	movs	r3, #15
    1604:	18fb      	adds	r3, r7, r3
    1606:	2103      	movs	r1, #3
    1608:	400a      	ands	r2, r1
    160a:	701a      	strb	r2, [r3, #0]
	return tmp;
    160c:	230f      	movs	r3, #15
    160e:	18fb      	adds	r3, r7, r3
    1610:	781b      	ldrb	r3, [r3, #0]
}
    1612:	0018      	movs	r0, r3
    1614:	46bd      	mov	sp, r7
    1616:	b004      	add	sp, #16
    1618:	bd80      	pop	{r7, pc}

0000161a <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    161a:	b580      	push	{r7, lr}
    161c:	b084      	sub	sp, #16
    161e:	af00      	add	r7, sp, #0
    1620:	6078      	str	r0, [r7, #4]
    1622:	000a      	movs	r2, r1
    1624:	1cfb      	adds	r3, r7, #3
    1626:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1628:	230f      	movs	r3, #15
    162a:	18fb      	adds	r3, r7, r3
    162c:	687a      	ldr	r2, [r7, #4]
    162e:	7892      	ldrb	r2, [r2, #2]
    1630:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1632:	230f      	movs	r3, #15
    1634:	18fb      	adds	r3, r7, r3
    1636:	220f      	movs	r2, #15
    1638:	18ba      	adds	r2, r7, r2
    163a:	7812      	ldrb	r2, [r2, #0]
    163c:	2103      	movs	r1, #3
    163e:	438a      	bics	r2, r1
    1640:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    1642:	1cfb      	adds	r3, r7, #3
    1644:	781b      	ldrb	r3, [r3, #0]
    1646:	2203      	movs	r2, #3
    1648:	4013      	ands	r3, r2
    164a:	b2d9      	uxtb	r1, r3
    164c:	230f      	movs	r3, #15
    164e:	18fb      	adds	r3, r7, r3
    1650:	220f      	movs	r2, #15
    1652:	18ba      	adds	r2, r7, r2
    1654:	7812      	ldrb	r2, [r2, #0]
    1656:	430a      	orrs	r2, r1
    1658:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	220f      	movs	r2, #15
    165e:	18ba      	adds	r2, r7, r2
    1660:	7812      	ldrb	r2, [r2, #0]
    1662:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    1664:	46c0      	nop			; (mov r8, r8)
    1666:	46bd      	mov	sp, r7
    1668:	b004      	add	sp, #16
    166a:	bd80      	pop	{r7, pc}

0000166c <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	0002      	movs	r2, r0
    1674:	1dfb      	adds	r3, r7, #7
    1676:	701a      	strb	r2, [r3, #0]
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1678:	2380      	movs	r3, #128	; 0x80
    167a:	05db      	lsls	r3, r3, #23
    167c:	2103      	movs	r1, #3
    167e:	0018      	movs	r0, r3
    1680:	4b10      	ldr	r3, [pc, #64]	; (16c4 <_set_performance_level+0x58>)
    1682:	4798      	blx	r3
    1684:	0003      	movs	r3, r0
    1686:	001a      	movs	r2, r3
    1688:	1dfb      	adds	r3, r7, #7
    168a:	781b      	ldrb	r3, [r3, #0]
    168c:	4293      	cmp	r3, r2
    168e:	d015      	beq.n	16bc <_set_performance_level+0x50>
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    1690:	2380      	movs	r3, #128	; 0x80
    1692:	05db      	lsls	r3, r3, #23
    1694:	21ff      	movs	r1, #255	; 0xff
    1696:	0018      	movs	r0, r3
    1698:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <_set_performance_level+0x5c>)
    169a:	4798      	blx	r3
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    169c:	1dfb      	adds	r3, r7, #7
    169e:	781a      	ldrb	r2, [r3, #0]
    16a0:	2380      	movs	r3, #128	; 0x80
    16a2:	05db      	lsls	r3, r3, #23
    16a4:	0011      	movs	r1, r2
    16a6:	0018      	movs	r0, r3
    16a8:	4b08      	ldr	r3, [pc, #32]	; (16cc <_set_performance_level+0x60>)
    16aa:	4798      	blx	r3
		while (!hri_pm_read_INTFLAG_reg(PM))
    16ac:	46c0      	nop			; (mov r8, r8)
    16ae:	2380      	movs	r3, #128	; 0x80
    16b0:	05db      	lsls	r3, r3, #23
    16b2:	0018      	movs	r0, r3
    16b4:	4b06      	ldr	r3, [pc, #24]	; (16d0 <_set_performance_level+0x64>)
    16b6:	4798      	blx	r3
    16b8:	1e03      	subs	r3, r0, #0
    16ba:	d0f8      	beq.n	16ae <_set_performance_level+0x42>
			;
	}
}
    16bc:	46c0      	nop			; (mov r8, r8)
    16be:	46bd      	mov	sp, r7
    16c0:	b002      	add	sp, #8
    16c2:	bd80      	pop	{r7, pc}
    16c4:	000015dd 	.word	0x000015dd
    16c8:	000015bf 	.word	0x000015bf
    16cc:	0000161b 	.word	0x0000161b
    16d0:	000015a9 	.word	0x000015a9

000016d4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b082      	sub	sp, #8
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	2280      	movs	r2, #128	; 0x80
    16e0:	0052      	lsls	r2, r2, #1
    16e2:	819a      	strh	r2, [r3, #12]
}
    16e4:	46c0      	nop			; (mov r8, r8)
    16e6:	46bd      	mov	sp, r7
    16e8:	b002      	add	sp, #8
    16ea:	bd80      	pop	{r7, pc}

000016ec <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    16ec:	b580      	push	{r7, lr}
    16ee:	b082      	sub	sp, #8
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	899b      	ldrh	r3, [r3, #12]
    16f8:	b29b      	uxth	r3, r3
}
    16fa:	0018      	movs	r0, r3
    16fc:	46bd      	mov	sp, r7
    16fe:	b002      	add	sp, #8
    1700:	bd80      	pop	{r7, pc}
	...

00001704 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    1704:	b590      	push	{r4, r7, lr}
    1706:	b085      	sub	sp, #20
    1708:	af00      	add	r7, sp, #0
    170a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	220e      	movs	r2, #14
    1712:	18bc      	adds	r4, r7, r2
    1714:	0018      	movs	r0, r3
    1716:	4b0c      	ldr	r3, [pc, #48]	; (1748 <_rtc_interrupt_handler+0x44>)
    1718:	4798      	blx	r3
    171a:	0003      	movs	r3, r0
    171c:	8023      	strh	r3, [r4, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    171e:	230e      	movs	r3, #14
    1720:	18fb      	adds	r3, r7, r3
    1722:	881a      	ldrh	r2, [r3, #0]
    1724:	2380      	movs	r3, #128	; 0x80
    1726:	005b      	lsls	r3, r3, #1
    1728:	4013      	ands	r3, r2
    172a:	d009      	beq.n	1740 <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	685b      	ldr	r3, [r3, #4]
    1730:	687a      	ldr	r2, [r7, #4]
    1732:	0010      	movs	r0, r2
    1734:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	681b      	ldr	r3, [r3, #0]
    173a:	0018      	movs	r0, r3
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <_rtc_interrupt_handler+0x48>)
    173e:	4798      	blx	r3
	}
}
    1740:	46c0      	nop			; (mov r8, r8)
    1742:	46bd      	mov	sp, r7
    1744:	b005      	add	sp, #20
    1746:	bd90      	pop	{r4, r7, pc}
    1748:	000016ed 	.word	0x000016ed
    174c:	000016d5 	.word	0x000016d5

00001750 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1750:	b580      	push	{r7, lr}
    1752:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    1754:	4b03      	ldr	r3, [pc, #12]	; (1764 <RTC_Handler+0x14>)
    1756:	681b      	ldr	r3, [r3, #0]
    1758:	0018      	movs	r0, r3
    175a:	4b03      	ldr	r3, [pc, #12]	; (1768 <RTC_Handler+0x18>)
    175c:	4798      	blx	r3
}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	46bd      	mov	sp, r7
    1762:	bd80      	pop	{r7, pc}
    1764:	20000064 	.word	0x20000064
    1768:	00001705 	.word	0x00001705

0000176c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    176c:	b580      	push	{r7, lr}
    176e:	b082      	sub	sp, #8
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
    1774:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	69db      	ldr	r3, [r3, #28]
    177c:	683a      	ldr	r2, [r7, #0]
    177e:	4013      	ands	r3, r2
    1780:	d1fa      	bne.n	1778 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	46bd      	mov	sp, r7
    1786:	b002      	add	sp, #8
    1788:	bd80      	pop	{r7, pc}

0000178a <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    178a:	b580      	push	{r7, lr}
    178c:	b082      	sub	sp, #8
    178e:	af00      	add	r7, sp, #0
    1790:	6078      	str	r0, [r7, #4]
    1792:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	69db      	ldr	r3, [r3, #28]
    1798:	683a      	ldr	r2, [r7, #0]
    179a:	4013      	ands	r3, r2
    179c:	1e5a      	subs	r2, r3, #1
    179e:	4193      	sbcs	r3, r2
    17a0:	b2db      	uxtb	r3, r3
}
    17a2:	0018      	movs	r0, r3
    17a4:	46bd      	mov	sp, r7
    17a6:	b002      	add	sp, #8
    17a8:	bd80      	pop	{r7, pc}

000017aa <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    17aa:	b580      	push	{r7, lr}
    17ac:	b082      	sub	sp, #8
    17ae:	af00      	add	r7, sp, #0
    17b0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2201      	movs	r2, #1
    17b6:	761a      	strb	r2, [r3, #24]
}
    17b8:	46c0      	nop			; (mov r8, r8)
    17ba:	46bd      	mov	sp, r7
    17bc:	b002      	add	sp, #8
    17be:	bd80      	pop	{r7, pc}

000017c0 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	2202      	movs	r2, #2
    17cc:	761a      	strb	r2, [r3, #24]
}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	46bd      	mov	sp, r7
    17d2:	b002      	add	sp, #8
    17d4:	bd80      	pop	{r7, pc}

000017d6 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    17d6:	b580      	push	{r7, lr}
    17d8:	b082      	sub	sp, #8
    17da:	af00      	add	r7, sp, #0
    17dc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	7e1b      	ldrb	r3, [r3, #24]
    17e2:	b2db      	uxtb	r3, r3
}
    17e4:	0018      	movs	r0, r3
    17e6:	46bd      	mov	sp, r7
    17e8:	b002      	add	sp, #8
    17ea:	bd80      	pop	{r7, pc}

000017ec <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	7e1b      	ldrb	r3, [r3, #24]
    17f8:	b2db      	uxtb	r3, r3
    17fa:	001a      	movs	r2, r3
    17fc:	2301      	movs	r3, #1
    17fe:	4013      	ands	r3, r2
    1800:	1e5a      	subs	r2, r3, #1
    1802:	4193      	sbcs	r3, r2
    1804:	b2db      	uxtb	r3, r3
}
    1806:	0018      	movs	r0, r3
    1808:	46bd      	mov	sp, r7
    180a:	b002      	add	sp, #8
    180c:	bd80      	pop	{r7, pc}

0000180e <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    180e:	b580      	push	{r7, lr}
    1810:	b082      	sub	sp, #8
    1812:	af00      	add	r7, sp, #0
    1814:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	7e1b      	ldrb	r3, [r3, #24]
    181a:	b2db      	uxtb	r3, r3
    181c:	085b      	lsrs	r3, r3, #1
    181e:	2201      	movs	r2, #1
    1820:	4013      	ands	r3, r2
    1822:	1e5a      	subs	r2, r3, #1
    1824:	4193      	sbcs	r3, r2
    1826:	b2db      	uxtb	r3, r3
}
    1828:	0018      	movs	r0, r3
    182a:	46bd      	mov	sp, r7
    182c:	b002      	add	sp, #8
    182e:	bd80      	pop	{r7, pc}

00001830 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1830:	b580      	push	{r7, lr}
    1832:	b082      	sub	sp, #8
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	7e1b      	ldrb	r3, [r3, #24]
    183c:	b2db      	uxtb	r3, r3
    183e:	089b      	lsrs	r3, r3, #2
    1840:	2201      	movs	r2, #1
    1842:	4013      	ands	r3, r2
    1844:	1e5a      	subs	r2, r3, #1
    1846:	4193      	sbcs	r3, r2
    1848:	b2db      	uxtb	r3, r3
}
    184a:	0018      	movs	r0, r3
    184c:	46bd      	mov	sp, r7
    184e:	b002      	add	sp, #8
    1850:	bd80      	pop	{r7, pc}

00001852 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    1852:	b580      	push	{r7, lr}
    1854:	b082      	sub	sp, #8
    1856:	af00      	add	r7, sp, #0
    1858:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	7e1b      	ldrb	r3, [r3, #24]
    185e:	b2db      	uxtb	r3, r3
    1860:	09db      	lsrs	r3, r3, #7
    1862:	2201      	movs	r2, #1
    1864:	4013      	ands	r3, r2
    1866:	1e5a      	subs	r2, r3, #1
    1868:	4193      	sbcs	r3, r2
    186a:	b2db      	uxtb	r3, r3
}
    186c:	0018      	movs	r0, r3
    186e:	46bd      	mov	sp, r7
    1870:	b002      	add	sp, #8
    1872:	bd80      	pop	{r7, pc}

00001874 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    1874:	b580      	push	{r7, lr}
    1876:	b082      	sub	sp, #8
    1878:	af00      	add	r7, sp, #0
    187a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	2280      	movs	r2, #128	; 0x80
    1880:	761a      	strb	r2, [r3, #24]
}
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	46bd      	mov	sp, r7
    1886:	b002      	add	sp, #8
    1888:	bd80      	pop	{r7, pc}

0000188a <hri_sercomusart_get_INTEN_DRE_bit>:
{
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    188a:	b580      	push	{r7, lr}
    188c:	b082      	sub	sp, #8
    188e:	af00      	add	r7, sp, #0
    1890:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	7d9b      	ldrb	r3, [r3, #22]
    1896:	b2db      	uxtb	r3, r3
    1898:	001a      	movs	r2, r3
    189a:	2301      	movs	r3, #1
    189c:	4013      	ands	r3, r2
    189e:	1e5a      	subs	r2, r3, #1
    18a0:	4193      	sbcs	r3, r2
    18a2:	b2db      	uxtb	r3, r3
}
    18a4:	0018      	movs	r0, r3
    18a6:	46bd      	mov	sp, r7
    18a8:	b002      	add	sp, #8
    18aa:	bd80      	pop	{r7, pc}

000018ac <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	2201      	movs	r2, #1
    18b8:	751a      	strb	r2, [r3, #20]
}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	46bd      	mov	sp, r7
    18be:	b002      	add	sp, #8
    18c0:	bd80      	pop	{r7, pc}

000018c2 <hri_sercomusart_get_INTEN_TXC_bit>:
{
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    18c2:	b580      	push	{r7, lr}
    18c4:	b082      	sub	sp, #8
    18c6:	af00      	add	r7, sp, #0
    18c8:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	7d9b      	ldrb	r3, [r3, #22]
    18ce:	b2db      	uxtb	r3, r3
    18d0:	085b      	lsrs	r3, r3, #1
    18d2:	2201      	movs	r2, #1
    18d4:	4013      	ands	r3, r2
    18d6:	1e5a      	subs	r2, r3, #1
    18d8:	4193      	sbcs	r3, r2
    18da:	b2db      	uxtb	r3, r3
}
    18dc:	0018      	movs	r0, r3
    18de:	46bd      	mov	sp, r7
    18e0:	b002      	add	sp, #8
    18e2:	bd80      	pop	{r7, pc}

000018e4 <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b082      	sub	sp, #8
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2202      	movs	r2, #2
    18f0:	751a      	strb	r2, [r3, #20]
}
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	46bd      	mov	sp, r7
    18f6:	b002      	add	sp, #8
    18f8:	bd80      	pop	{r7, pc}
	...

000018fc <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	2202      	movs	r2, #2
    190a:	431a      	orrs	r2, r3
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	2103      	movs	r1, #3
    1914:	0018      	movs	r0, r3
    1916:	4b03      	ldr	r3, [pc, #12]	; (1924 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x28>)
    1918:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	46bd      	mov	sp, r7
    191e:	b002      	add	sp, #8
    1920:	bd80      	pop	{r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	0000176d 	.word	0x0000176d

00001928 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1928:	b580      	push	{r7, lr}
    192a:	b082      	sub	sp, #8
    192c:	af00      	add	r7, sp, #0
    192e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	2202      	movs	r2, #2
    1936:	4393      	bics	r3, r2
    1938:	001a      	movs	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	2103      	movs	r1, #3
    1942:	0018      	movs	r0, r3
    1944:	4b02      	ldr	r3, [pc, #8]	; (1950 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    1946:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1948:	46c0      	nop			; (mov r8, r8)
    194a:	46bd      	mov	sp, r7
    194c:	b002      	add	sp, #8
    194e:	bd80      	pop	{r7, pc}
    1950:	0000176d 	.word	0x0000176d

00001954 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    1954:	b580      	push	{r7, lr}
    1956:	b084      	sub	sp, #16
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1962:	68fb      	ldr	r3, [r7, #12]
    1964:	0edb      	lsrs	r3, r3, #27
    1966:	2201      	movs	r2, #1
    1968:	4013      	ands	r3, r2
    196a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	1e5a      	subs	r2, r3, #1
    1970:	4193      	sbcs	r3, r2
    1972:	b2db      	uxtb	r3, r3
}
    1974:	0018      	movs	r0, r3
    1976:	46bd      	mov	sp, r7
    1978:	b004      	add	sp, #16
    197a:	bd80      	pop	{r7, pc}

0000197c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    197c:	b580      	push	{r7, lr}
    197e:	b084      	sub	sp, #16
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
    1984:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	2103      	movs	r1, #3
    198a:	0018      	movs	r0, r3
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    198e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	683a      	ldr	r2, [r7, #0]
    199a:	4013      	ands	r3, r2
    199c:	60fb      	str	r3, [r7, #12]
	return tmp;
    199e:	68fb      	ldr	r3, [r7, #12]
}
    19a0:	0018      	movs	r0, r3
    19a2:	46bd      	mov	sp, r7
    19a4:	b004      	add	sp, #16
    19a6:	bd80      	pop	{r7, pc}
    19a8:	0000176d 	.word	0x0000176d

000019ac <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    19b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	683a      	ldr	r2, [r7, #0]
    19ba:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2103      	movs	r1, #3
    19c0:	0018      	movs	r0, r3
    19c2:	4b03      	ldr	r3, [pc, #12]	; (19d0 <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    19c4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	46bd      	mov	sp, r7
    19ca:	b002      	add	sp, #8
    19cc:	bd80      	pop	{r7, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	0000176d 	.word	0x0000176d

000019d4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    19d4:	b580      	push	{r7, lr}
    19d6:	b082      	sub	sp, #8
    19d8:	af00      	add	r7, sp, #0
    19da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	685b      	ldr	r3, [r3, #4]
    19e0:	2280      	movs	r2, #128	; 0x80
    19e2:	0052      	lsls	r2, r2, #1
    19e4:	431a      	orrs	r2, r3
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	2104      	movs	r1, #4
    19ee:	0018      	movs	r0, r3
    19f0:	4b02      	ldr	r3, [pc, #8]	; (19fc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    19f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19f4:	46c0      	nop			; (mov r8, r8)
    19f6:	46bd      	mov	sp, r7
    19f8:	b002      	add	sp, #8
    19fa:	bd80      	pop	{r7, pc}
    19fc:	0000176d 	.word	0x0000176d

00001a00 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	b082      	sub	sp, #8
    1a04:	af00      	add	r7, sp, #0
    1a06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	685b      	ldr	r3, [r3, #4]
    1a0c:	4a06      	ldr	r2, [pc, #24]	; (1a28 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    1a0e:	401a      	ands	r2, r3
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	2104      	movs	r1, #4
    1a18:	0018      	movs	r0, r3
    1a1a:	4b04      	ldr	r3, [pc, #16]	; (1a2c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    1a1c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	46bd      	mov	sp, r7
    1a22:	b002      	add	sp, #8
    1a24:	bd80      	pop	{r7, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	fffffeff 	.word	0xfffffeff
    1a2c:	0000176d 	.word	0x0000176d

00001a30 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b082      	sub	sp, #8
    1a34:	af00      	add	r7, sp, #0
    1a36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	685b      	ldr	r3, [r3, #4]
    1a3c:	2280      	movs	r2, #128	; 0x80
    1a3e:	02d2      	lsls	r2, r2, #11
    1a40:	431a      	orrs	r2, r3
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	2104      	movs	r1, #4
    1a4a:	0018      	movs	r0, r3
    1a4c:	4b02      	ldr	r3, [pc, #8]	; (1a58 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    1a4e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a50:	46c0      	nop			; (mov r8, r8)
    1a52:	46bd      	mov	sp, r7
    1a54:	b002      	add	sp, #8
    1a56:	bd80      	pop	{r7, pc}
    1a58:	0000176d 	.word	0x0000176d

00001a5c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b082      	sub	sp, #8
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	4a06      	ldr	r2, [pc, #24]	; (1a84 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    1a6a:	401a      	ands	r2, r3
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1a70:	687b      	ldr	r3, [r7, #4]
    1a72:	2104      	movs	r1, #4
    1a74:	0018      	movs	r0, r3
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    1a78:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	46bd      	mov	sp, r7
    1a7e:	b002      	add	sp, #8
    1a80:	bd80      	pop	{r7, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	fffbffff 	.word	0xfffbffff
    1a88:	0000176d 	.word	0x0000176d

00001a8c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	685a      	ldr	r2, [r3, #4]
    1a9a:	683b      	ldr	r3, [r7, #0]
    1a9c:	0419      	lsls	r1, r3, #16
    1a9e:	23c0      	movs	r3, #192	; 0xc0
    1aa0:	029b      	lsls	r3, r3, #10
    1aa2:	400b      	ands	r3, r1
    1aa4:	431a      	orrs	r2, r3
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	2104      	movs	r1, #4
    1aae:	0018      	movs	r0, r3
    1ab0:	4b02      	ldr	r3, [pc, #8]	; (1abc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    1ab2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	46bd      	mov	sp, r7
    1ab8:	b002      	add	sp, #8
    1aba:	bd80      	pop	{r7, pc}
    1abc:	0000176d 	.word	0x0000176d

00001ac0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
    1ac8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	683a      	ldr	r2, [r7, #0]
    1ace:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	2104      	movs	r1, #4
    1ad4:	0018      	movs	r0, r3
    1ad6:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    1ad8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	46bd      	mov	sp, r7
    1ade:	b002      	add	sp, #8
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	0000176d 	.word	0x0000176d

00001ae8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b082      	sub	sp, #8
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
    1af0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	683a      	ldr	r2, [r7, #0]
    1af6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1af8:	46c0      	nop			; (mov r8, r8)
    1afa:	46bd      	mov	sp, r7
    1afc:	b002      	add	sp, #8
    1afe:	bd80      	pop	{r7, pc}

00001b00 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    1b00:	b580      	push	{r7, lr}
    1b02:	b084      	sub	sp, #16
    1b04:	af00      	add	r7, sp, #0
    1b06:	6078      	str	r0, [r7, #4]
    1b08:	000a      	movs	r2, r1
    1b0a:	1cfb      	adds	r3, r7, #3
    1b0c:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b12:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1b14:	68fb      	ldr	r3, [r7, #12]
    1b16:	4a0b      	ldr	r2, [pc, #44]	; (1b44 <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    1b18:	4013      	ands	r3, r2
    1b1a:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1b1c:	1cfb      	adds	r3, r7, #3
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	039b      	lsls	r3, r3, #14
    1b22:	001a      	movs	r2, r3
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	4313      	orrs	r3, r2
    1b28:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	68fa      	ldr	r2, [r7, #12]
    1b2e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2104      	movs	r1, #4
    1b34:	0018      	movs	r0, r3
    1b36:	4b04      	ldr	r3, [pc, #16]	; (1b48 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    1b38:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	46bd      	mov	sp, r7
    1b3e:	b004      	add	sp, #16
    1b40:	bd80      	pop	{r7, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	ffffbfff 	.word	0xffffbfff
    1b48:	0000176d 	.word	0x0000176d

00001b4c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
    1b54:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	683a      	ldr	r2, [r7, #0]
    1b5a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	2104      	movs	r1, #4
    1b60:	0018      	movs	r0, r3
    1b62:	4b03      	ldr	r3, [pc, #12]	; (1b70 <hri_sercomi2cm_write_ADDR_reg+0x24>)
    1b64:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	46bd      	mov	sp, r7
    1b6a:	b002      	add	sp, #8
    1b6c:	bd80      	pop	{r7, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	0000176d 	.word	0x0000176d

00001b74 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	2104      	movs	r1, #4
    1b80:	0018      	movs	r0, r3
    1b82:	4b04      	ldr	r3, [pc, #16]	; (1b94 <hri_sercomi2cm_read_ADDR_reg+0x20>)
    1b84:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1b8a:	0018      	movs	r0, r3
    1b8c:	46bd      	mov	sp, r7
    1b8e:	b002      	add	sp, #8
    1b90:	bd80      	pop	{r7, pc}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	0000176d 	.word	0x0000176d

00001b98 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
    1ba0:	000a      	movs	r2, r1
    1ba2:	1cfb      	adds	r3, r7, #3
    1ba4:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	1cfa      	adds	r2, r7, #3
    1baa:	2128      	movs	r1, #40	; 0x28
    1bac:	7812      	ldrb	r2, [r2, #0]
    1bae:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	2104      	movs	r1, #4
    1bb4:	0018      	movs	r0, r3
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    1bb8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	46bd      	mov	sp, r7
    1bbe:	b002      	add	sp, #8
    1bc0:	bd80      	pop	{r7, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	0000176d 	.word	0x0000176d

00001bc8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	2104      	movs	r1, #4
    1bd4:	0018      	movs	r0, r3
    1bd6:	4b05      	ldr	r3, [pc, #20]	; (1bec <hri_sercomi2cm_read_DATA_reg+0x24>)
    1bd8:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1bda:	687b      	ldr	r3, [r7, #4]
    1bdc:	2228      	movs	r2, #40	; 0x28
    1bde:	5c9b      	ldrb	r3, [r3, r2]
    1be0:	b2db      	uxtb	r3, r3
}
    1be2:	0018      	movs	r0, r3
    1be4:	46bd      	mov	sp, r7
    1be6:	b002      	add	sp, #8
    1be8:	bd80      	pop	{r7, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	0000176d 	.word	0x0000176d

00001bf0 <hri_sercomi2cs_read_DATA_reg>:
	((Sercom *)hw)->I2CS.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b082      	sub	sp, #8
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	2228      	movs	r2, #40	; 0x28
    1bfc:	5c9b      	ldrb	r3, [r3, r2]
    1bfe:	b2db      	uxtb	r3, r3
}
    1c00:	0018      	movs	r0, r3
    1c02:	46bd      	mov	sp, r7
    1c04:	b002      	add	sp, #8
    1c06:	bd80      	pop	{r7, pc}

00001c08 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1c14:	b29b      	uxth	r3, r3
}
    1c16:	0018      	movs	r0, r3
    1c18:	46bd      	mov	sp, r7
    1c1a:	b002      	add	sp, #8
    1c1c:	bd80      	pop	{r7, pc}

00001c1e <hri_sercomi2cs_get_STATUS_DIR_bit>:
	((Sercom *)hw)->I2CS.STATUS.reg = SERCOM_I2CS_STATUS_RXNACK;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cs_get_STATUS_DIR_bit(const void *const hw)
{
    1c1e:	b580      	push	{r7, lr}
    1c20:	b082      	sub	sp, #8
    1c22:	af00      	add	r7, sp, #0
    1c24:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) >> SERCOM_I2CS_STATUS_DIR_Pos;
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	8b5b      	ldrh	r3, [r3, #26]
    1c2a:	b29b      	uxth	r3, r3
    1c2c:	08db      	lsrs	r3, r3, #3
    1c2e:	2201      	movs	r2, #1
    1c30:	4013      	ands	r3, r2
    1c32:	1e5a      	subs	r2, r3, #1
    1c34:	4193      	sbcs	r3, r2
    1c36:	b2db      	uxtb	r3, r3
}
    1c38:	0018      	movs	r0, r3
    1c3a:	46bd      	mov	sp, r7
    1c3c:	b002      	add	sp, #8
    1c3e:	bd80      	pop	{r7, pc}

00001c40 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    1c40:	b580      	push	{r7, lr}
    1c42:	b082      	sub	sp, #8
    1c44:	af00      	add	r7, sp, #0
    1c46:	6078      	str	r0, [r7, #4]
    1c48:	000a      	movs	r2, r1
    1c4a:	1cbb      	adds	r3, r7, #2
    1c4c:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	1cba      	adds	r2, r7, #2
    1c52:	8812      	ldrh	r2, [r2, #0]
    1c54:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	46bd      	mov	sp, r7
    1c5a:	b002      	add	sp, #8
    1c5c:	bd80      	pop	{r7, pc}

00001c5e <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    1c5e:	b580      	push	{r7, lr}
    1c60:	b082      	sub	sp, #8
    1c62:	af00      	add	r7, sp, #0
    1c64:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	8b5b      	ldrh	r3, [r3, #26]
    1c6a:	b29b      	uxth	r3, r3
}
    1c6c:	0018      	movs	r0, r3
    1c6e:	46bd      	mov	sp, r7
    1c70:	b002      	add	sp, #8
    1c72:	bd80      	pop	{r7, pc}

00001c74 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	2104      	movs	r1, #4
    1c80:	0018      	movs	r0, r3
    1c82:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x2c>)
    1c84:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	8b5b      	ldrh	r3, [r3, #26]
    1c8a:	b29b      	uxth	r3, r3
    1c8c:	091b      	lsrs	r3, r3, #4
    1c8e:	b29b      	uxth	r3, r3
    1c90:	2203      	movs	r2, #3
    1c92:	4013      	ands	r3, r2
    1c94:	b29b      	uxth	r3, r3
}
    1c96:	0018      	movs	r0, r3
    1c98:	46bd      	mov	sp, r7
    1c9a:	b002      	add	sp, #8
    1c9c:	bd80      	pop	{r7, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	0000176d 	.word	0x0000176d

00001ca4 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	b082      	sub	sp, #8
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	2104      	movs	r1, #4
    1cb0:	0018      	movs	r0, r3
    1cb2:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    1cb4:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	8b5b      	ldrh	r3, [r3, #26]
    1cba:	b29b      	uxth	r3, r3
}
    1cbc:	0018      	movs	r0, r3
    1cbe:	46bd      	mov	sp, r7
    1cc0:	b002      	add	sp, #8
    1cc2:	bd80      	pop	{r7, pc}
    1cc4:	0000176d 	.word	0x0000176d

00001cc8 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b082      	sub	sp, #8
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	000a      	movs	r2, r1
    1cd2:	1cbb      	adds	r3, r7, #2
    1cd4:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	1cba      	adds	r2, r7, #2
    1cda:	8812      	ldrh	r2, [r2, #0]
    1cdc:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	2104      	movs	r1, #4
    1ce2:	0018      	movs	r0, r3
    1ce4:	4b02      	ldr	r3, [pc, #8]	; (1cf0 <hri_sercomi2cm_clear_STATUS_reg+0x28>)
    1ce6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1ce8:	46c0      	nop			; (mov r8, r8)
    1cea:	46bd      	mov	sp, r7
    1cec:	b002      	add	sp, #8
    1cee:	bd80      	pop	{r7, pc}
    1cf0:	0000176d 	.word	0x0000176d

00001cf4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b082      	sub	sp, #8
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	4a08      	ldr	r2, [pc, #32]	; (1d20 <_sercom_get_hardware_index+0x2c>)
    1d00:	4293      	cmp	r3, r2
    1d02:	d101      	bne.n	1d08 <_sercom_get_hardware_index+0x14>
		return 5;
    1d04:	2305      	movs	r3, #5
    1d06:	e006      	b.n	1d16 <_sercom_get_hardware_index+0x22>
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	22be      	movs	r2, #190	; 0xbe
    1d0c:	0612      	lsls	r2, r2, #24
    1d0e:	4694      	mov	ip, r2
    1d10:	4463      	add	r3, ip
    1d12:	0a9b      	lsrs	r3, r3, #10
    1d14:	b2db      	uxtb	r3, r3
}
    1d16:	0018      	movs	r0, r3
    1d18:	46bd      	mov	sp, r7
    1d1a:	b002      	add	sp, #8
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	43000400 	.word	0x43000400

00001d24 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1d24:	b590      	push	{r4, r7, lr}
    1d26:	b085      	sub	sp, #20
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	699b      	ldr	r3, [r3, #24]
    1d30:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1d32:	68fb      	ldr	r3, [r7, #12]
    1d34:	0018      	movs	r0, r3
    1d36:	4b35      	ldr	r3, [pc, #212]	; (1e0c <_sercom_usart_interrupt_handler+0xe8>)
    1d38:	4798      	blx	r3
    1d3a:	1e03      	subs	r3, r0, #0
    1d3c:	d00f      	beq.n	1d5e <_sercom_usart_interrupt_handler+0x3a>
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	0018      	movs	r0, r3
    1d42:	4b33      	ldr	r3, [pc, #204]	; (1e10 <_sercom_usart_interrupt_handler+0xec>)
    1d44:	4798      	blx	r3
    1d46:	1e03      	subs	r3, r0, #0
    1d48:	d009      	beq.n	1d5e <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    1d4a:	68fb      	ldr	r3, [r7, #12]
    1d4c:	0018      	movs	r0, r3
    1d4e:	4b31      	ldr	r3, [pc, #196]	; (1e14 <_sercom_usart_interrupt_handler+0xf0>)
    1d50:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	681b      	ldr	r3, [r3, #0]
    1d56:	687a      	ldr	r2, [r7, #4]
    1d58:	0010      	movs	r0, r2
    1d5a:	4798      	blx	r3
    1d5c:	e053      	b.n	1e06 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	0018      	movs	r0, r3
    1d62:	4b2d      	ldr	r3, [pc, #180]	; (1e18 <_sercom_usart_interrupt_handler+0xf4>)
    1d64:	4798      	blx	r3
    1d66:	1e03      	subs	r3, r0, #0
    1d68:	d00f      	beq.n	1d8a <_sercom_usart_interrupt_handler+0x66>
    1d6a:	68fb      	ldr	r3, [r7, #12]
    1d6c:	0018      	movs	r0, r3
    1d6e:	4b2b      	ldr	r3, [pc, #172]	; (1e1c <_sercom_usart_interrupt_handler+0xf8>)
    1d70:	4798      	blx	r3
    1d72:	1e03      	subs	r3, r0, #0
    1d74:	d009      	beq.n	1d8a <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    1d76:	68fb      	ldr	r3, [r7, #12]
    1d78:	0018      	movs	r0, r3
    1d7a:	4b29      	ldr	r3, [pc, #164]	; (1e20 <_sercom_usart_interrupt_handler+0xfc>)
    1d7c:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	689b      	ldr	r3, [r3, #8]
    1d82:	687a      	ldr	r2, [r7, #4]
    1d84:	0010      	movs	r0, r2
    1d86:	4798      	blx	r3
    1d88:	e03d      	b.n	1e06 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b25      	ldr	r3, [pc, #148]	; (1e24 <_sercom_usart_interrupt_handler+0x100>)
    1d90:	4798      	blx	r3
    1d92:	1e03      	subs	r3, r0, #0
    1d94:	d01b      	beq.n	1dce <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	0018      	movs	r0, r3
    1d9a:	4b23      	ldr	r3, [pc, #140]	; (1e28 <_sercom_usart_interrupt_handler+0x104>)
    1d9c:	4798      	blx	r3
    1d9e:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    1da0:	001a      	movs	r2, r3
    1da2:	2337      	movs	r3, #55	; 0x37
    1da4:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    1da6:	d005      	beq.n	1db4 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	213f      	movs	r1, #63	; 0x3f
    1dac:	0018      	movs	r0, r3
    1dae:	4b1f      	ldr	r3, [pc, #124]	; (1e2c <_sercom_usart_interrupt_handler+0x108>)
    1db0:	4798      	blx	r3
			return;
    1db2:	e028      	b.n	1e06 <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	685c      	ldr	r4, [r3, #4]
    1db8:	68fb      	ldr	r3, [r7, #12]
    1dba:	0018      	movs	r0, r3
    1dbc:	4b1c      	ldr	r3, [pc, #112]	; (1e30 <_sercom_usart_interrupt_handler+0x10c>)
    1dbe:	4798      	blx	r3
    1dc0:	0003      	movs	r3, r0
    1dc2:	b2da      	uxtb	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	0011      	movs	r1, r2
    1dc8:	0018      	movs	r0, r3
    1dca:	47a0      	blx	r4
    1dcc:	e01b      	b.n	1e06 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1dce:	68fb      	ldr	r3, [r7, #12]
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b18      	ldr	r3, [pc, #96]	; (1e34 <_sercom_usart_interrupt_handler+0x110>)
    1dd4:	4798      	blx	r3
    1dd6:	1e03      	subs	r3, r0, #0
    1dd8:	d015      	beq.n	1e06 <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	0018      	movs	r0, r3
    1dde:	4b16      	ldr	r3, [pc, #88]	; (1e38 <_sercom_usart_interrupt_handler+0x114>)
    1de0:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	68db      	ldr	r3, [r3, #12]
    1de6:	687a      	ldr	r2, [r7, #4]
    1de8:	0010      	movs	r0, r2
    1dea:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	0018      	movs	r0, r3
    1df0:	4b0d      	ldr	r3, [pc, #52]	; (1e28 <_sercom_usart_interrupt_handler+0x104>)
    1df2:	4798      	blx	r3
    1df4:	0003      	movs	r3, r0
    1df6:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    1df8:	68bb      	ldr	r3, [r7, #8]
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	68fb      	ldr	r3, [r7, #12]
    1dfe:	0011      	movs	r1, r2
    1e00:	0018      	movs	r0, r3
    1e02:	4b0a      	ldr	r3, [pc, #40]	; (1e2c <_sercom_usart_interrupt_handler+0x108>)
    1e04:	4798      	blx	r3
	}
}
    1e06:	46bd      	mov	sp, r7
    1e08:	b005      	add	sp, #20
    1e0a:	bd90      	pop	{r4, r7, pc}
    1e0c:	000017ed 	.word	0x000017ed
    1e10:	0000188b 	.word	0x0000188b
    1e14:	000018ad 	.word	0x000018ad
    1e18:	0000180f 	.word	0x0000180f
    1e1c:	000018c3 	.word	0x000018c3
    1e20:	000018e5 	.word	0x000018e5
    1e24:	00001831 	.word	0x00001831
    1e28:	00001c5f 	.word	0x00001c5f
    1e2c:	00001c41 	.word	0x00001c41
    1e30:	00001c09 	.word	0x00001c09
    1e34:	00001853 	.word	0x00001853
    1e38:	00001875 	.word	0x00001875

00001e3c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1e3c:	b590      	push	{r4, r7, lr}
    1e3e:	b085      	sub	sp, #20
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e44:	230e      	movs	r3, #14
    1e46:	18fc      	adds	r4, r7, r3
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	0018      	movs	r0, r3
    1e4c:	4b19      	ldr	r3, [pc, #100]	; (1eb4 <_get_i2cm_index+0x78>)
    1e4e:	4798      	blx	r3
    1e50:	0003      	movs	r3, r0
    1e52:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1e54:	230f      	movs	r3, #15
    1e56:	18fb      	adds	r3, r7, r3
    1e58:	2200      	movs	r2, #0
    1e5a:	701a      	strb	r2, [r3, #0]
    1e5c:	e019      	b.n	1e92 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    1e5e:	230f      	movs	r3, #15
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	781a      	ldrb	r2, [r3, #0]
    1e64:	4914      	ldr	r1, [pc, #80]	; (1eb8 <_get_i2cm_index+0x7c>)
    1e66:	0013      	movs	r3, r2
    1e68:	005b      	lsls	r3, r3, #1
    1e6a:	189b      	adds	r3, r3, r2
    1e6c:	00db      	lsls	r3, r3, #3
    1e6e:	5c5b      	ldrb	r3, [r3, r1]
    1e70:	220e      	movs	r2, #14
    1e72:	18ba      	adds	r2, r7, r2
    1e74:	7812      	ldrb	r2, [r2, #0]
    1e76:	429a      	cmp	r2, r3
    1e78:	d104      	bne.n	1e84 <_get_i2cm_index+0x48>
			return i;
    1e7a:	230f      	movs	r3, #15
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	781b      	ldrb	r3, [r3, #0]
    1e80:	b25b      	sxtb	r3, r3
    1e82:	e013      	b.n	1eac <_get_i2cm_index+0x70>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1e84:	230f      	movs	r3, #15
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	781a      	ldrb	r2, [r3, #0]
    1e8a:	230f      	movs	r3, #15
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	3201      	adds	r2, #1
    1e90:	701a      	strb	r2, [r3, #0]
    1e92:	230f      	movs	r3, #15
    1e94:	18fb      	adds	r3, r7, r3
    1e96:	781b      	ldrb	r3, [r3, #0]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d0e0      	beq.n	1e5e <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    1e9c:	4a07      	ldr	r2, [pc, #28]	; (1ebc <_get_i2cm_index+0x80>)
    1e9e:	4b08      	ldr	r3, [pc, #32]	; (1ec0 <_get_i2cm_index+0x84>)
    1ea0:	0019      	movs	r1, r3
    1ea2:	2000      	movs	r0, #0
    1ea4:	4b07      	ldr	r3, [pc, #28]	; (1ec4 <_get_i2cm_index+0x88>)
    1ea6:	4798      	blx	r3
	return -1;
    1ea8:	2301      	movs	r3, #1
    1eaa:	425b      	negs	r3, r3
}
    1eac:	0018      	movs	r0, r3
    1eae:	46bd      	mov	sp, r7
    1eb0:	b005      	add	sp, #20
    1eb2:	bd90      	pop	{r4, r7, pc}
    1eb4:	00001cf5 	.word	0x00001cf5
    1eb8:	20000014 	.word	0x20000014
    1ebc:	000003c9 	.word	0x000003c9
    1ec0:	0000460c 	.word	0x0000460c
    1ec4:	00000e55 	.word	0x00000e55

00001ec8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
    1ece:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	2103      	movs	r1, #3
    1ed4:	0018      	movs	r0, r3
    1ed6:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <_sercom_i2c_send_stop+0x1c>)
    1ed8:	4798      	blx	r3
}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	46bd      	mov	sp, r7
    1ede:	b002      	add	sp, #8
    1ee0:	bd80      	pop	{r7, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	00001a8d 	.word	0x00001a8d

00001ee8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    1ee8:	b590      	push	{r4, r7, lr}
    1eea:	b087      	sub	sp, #28
    1eec:	af00      	add	r7, sp, #0
    1eee:	60f8      	str	r0, [r7, #12]
    1ef0:	60b9      	str	r1, [r7, #8]
    1ef2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	0018      	movs	r0, r3
    1ef8:	4b87      	ldr	r3, [pc, #540]	; (2118 <STACK_SIZE+0x118>)
    1efa:	4798      	blx	r3
    1efc:	0003      	movs	r3, r0
    1efe:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    1f00:	2312      	movs	r3, #18
    1f02:	18fc      	adds	r4, r7, r3
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	0018      	movs	r0, r3
    1f08:	4b84      	ldr	r3, [pc, #528]	; (211c <STACK_SIZE+0x11c>)
    1f0a:	4798      	blx	r3
    1f0c:	0003      	movs	r3, r0
    1f0e:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    1f10:	68bb      	ldr	r3, [r7, #8]
    1f12:	2201      	movs	r2, #1
    1f14:	4013      	ands	r3, r2
    1f16:	d100      	bne.n	1f1a <_sercom_i2c_sync_analyse_flags+0x32>
    1f18:	e0a3      	b.n	2062 <STACK_SIZE+0x62>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1f1a:	2312      	movs	r3, #18
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	881b      	ldrh	r3, [r3, #0]
    1f20:	2202      	movs	r2, #2
    1f22:	4013      	ands	r3, r2
    1f24:	d020      	beq.n	1f68 <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    1f26:	68fb      	ldr	r3, [r7, #12]
    1f28:	0018      	movs	r0, r3
    1f2a:	4b7d      	ldr	r3, [pc, #500]	; (2120 <STACK_SIZE+0x120>)
    1f2c:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	885b      	ldrh	r3, [r3, #2]
    1f32:	b29b      	uxth	r3, r3
    1f34:	2280      	movs	r2, #128	; 0x80
    1f36:	0152      	lsls	r2, r2, #5
    1f38:	4313      	orrs	r3, r2
    1f3a:	b29a      	uxth	r2, r3
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    1f40:	687b      	ldr	r3, [r7, #4]
    1f42:	885b      	ldrh	r3, [r3, #2]
    1f44:	b29b      	uxth	r3, r3
    1f46:	4a77      	ldr	r2, [pc, #476]	; (2124 <STACK_SIZE+0x124>)
    1f48:	4013      	ands	r3, r2
    1f4a:	b29a      	uxth	r2, r3
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1f50:	2312      	movs	r3, #18
    1f52:	18fb      	adds	r3, r7, r3
    1f54:	881b      	ldrh	r3, [r3, #0]
    1f56:	2201      	movs	r2, #1
    1f58:	4013      	ands	r3, r2
    1f5a:	d002      	beq.n	1f62 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    1f5c:	2305      	movs	r3, #5
    1f5e:	425b      	negs	r3, r3
    1f60:	e0d6      	b.n	2110 <STACK_SIZE+0x110>
			}

			return I2C_ERR_BAD_ADDRESS;
    1f62:	2304      	movs	r3, #4
    1f64:	425b      	negs	r3, r3
    1f66:	e0d3      	b.n	2110 <STACK_SIZE+0x110>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1f68:	2312      	movs	r3, #18
    1f6a:	18fb      	adds	r3, r7, r3
    1f6c:	881b      	ldrh	r3, [r3, #0]
    1f6e:	2204      	movs	r2, #4
    1f70:	4013      	ands	r3, r2
    1f72:	d021      	beq.n	1fb8 <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	685b      	ldr	r3, [r3, #4]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	dd08      	ble.n	1f8e <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	885b      	ldrh	r3, [r3, #2]
    1f80:	b29b      	uxth	r3, r3
    1f82:	2280      	movs	r2, #128	; 0x80
    1f84:	0152      	lsls	r2, r2, #5
    1f86:	4313      	orrs	r3, r2
    1f88:	b29a      	uxth	r2, r3
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	885b      	ldrh	r3, [r3, #2]
    1f92:	b29b      	uxth	r3, r3
    1f94:	b21b      	sxth	r3, r3
    1f96:	2b00      	cmp	r3, #0
    1f98:	da03      	bge.n	1fa2 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    1f9a:	68fb      	ldr	r3, [r7, #12]
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b62      	ldr	r3, [pc, #392]	; (2128 <STACK_SIZE+0x128>)
    1fa0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	885b      	ldrh	r3, [r3, #2]
    1fa6:	b29b      	uxth	r3, r3
    1fa8:	4a5e      	ldr	r2, [pc, #376]	; (2124 <STACK_SIZE+0x124>)
    1faa:	4013      	ands	r3, r2
    1fac:	b29a      	uxth	r2, r3
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    1fb2:	2302      	movs	r3, #2
    1fb4:	425b      	negs	r3, r3
    1fb6:	e0ab      	b.n	2110 <STACK_SIZE+0x110>
			}

			if (msg->flags & I2C_M_TEN) {
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	885b      	ldrh	r3, [r3, #2]
    1fbc:	b29b      	uxth	r3, r3
    1fbe:	001a      	movs	r2, r3
    1fc0:	2380      	movs	r3, #128	; 0x80
    1fc2:	00db      	lsls	r3, r3, #3
    1fc4:	4013      	ands	r3, r2
    1fc6:	d021      	beq.n	200c <STACK_SIZE+0xc>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	881b      	ldrh	r3, [r3, #0]
    1fcc:	121b      	asrs	r3, r3, #8
    1fce:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1fd0:	001a      	movs	r2, r3
    1fd2:	2306      	movs	r3, #6
    1fd4:	401a      	ands	r2, r3
    1fd6:	0014      	movs	r4, r2
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	0018      	movs	r0, r3
    1fdc:	4b53      	ldr	r3, [pc, #332]	; (212c <STACK_SIZE+0x12c>)
    1fde:	4798      	blx	r3
    1fe0:	0002      	movs	r2, r0
    1fe2:	2380      	movs	r3, #128	; 0x80
    1fe4:	01db      	lsls	r3, r3, #7
    1fe6:	4013      	ands	r3, r2
    1fe8:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    1fea:	22f1      	movs	r2, #241	; 0xf1
    1fec:	431a      	orrs	r2, r3
    1fee:	68fb      	ldr	r3, [r7, #12]
    1ff0:	0011      	movs	r1, r2
    1ff2:	0018      	movs	r0, r3
    1ff4:	4b4e      	ldr	r3, [pc, #312]	; (2130 <STACK_SIZE+0x130>)
    1ff6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	885b      	ldrh	r3, [r3, #2]
    1ffc:	b29b      	uxth	r3, r3
    1ffe:	4a4d      	ldr	r2, [pc, #308]	; (2134 <STACK_SIZE+0x134>)
    2000:	4013      	ands	r3, r2
    2002:	b29a      	uxth	r2, r3
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    2008:	2300      	movs	r3, #0
    200a:	e081      	b.n	2110 <STACK_SIZE+0x110>
			}

			if (msg->len == 0) {
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	685b      	ldr	r3, [r3, #4]
    2010:	2b00      	cmp	r3, #0
    2012:	d112      	bne.n	203a <STACK_SIZE+0x3a>
				if (msg->flags & I2C_M_STOP) {
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	885b      	ldrh	r3, [r3, #2]
    2018:	b29b      	uxth	r3, r3
    201a:	b21b      	sxth	r3, r3
    201c:	2b00      	cmp	r3, #0
    201e:	da03      	bge.n	2028 <STACK_SIZE+0x28>
					_sercom_i2c_send_stop(hw);
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	0018      	movs	r0, r3
    2024:	4b40      	ldr	r3, [pc, #256]	; (2128 <STACK_SIZE+0x128>)
    2026:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	885b      	ldrh	r3, [r3, #2]
    202c:	b29b      	uxth	r3, r3
    202e:	4a3d      	ldr	r2, [pc, #244]	; (2124 <STACK_SIZE+0x124>)
    2030:	4013      	ands	r3, r2
    2032:	b29a      	uxth	r2, r3
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	805a      	strh	r2, [r3, #2]
    2038:	e011      	b.n	205e <STACK_SIZE+0x5e>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	689b      	ldr	r3, [r3, #8]
    203e:	781a      	ldrb	r2, [r3, #0]
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	0011      	movs	r1, r2
    2044:	0018      	movs	r0, r3
    2046:	4b3c      	ldr	r3, [pc, #240]	; (2138 <STACK_SIZE+0x138>)
    2048:	4798      	blx	r3
				msg->buffer++;
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	689b      	ldr	r3, [r3, #8]
    204e:	1c5a      	adds	r2, r3, #1
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	609a      	str	r2, [r3, #8]
				msg->len--;
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	685b      	ldr	r3, [r3, #4]
    2058:	1e5a      	subs	r2, r3, #1
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    205e:	2300      	movs	r3, #0
    2060:	e056      	b.n	2110 <STACK_SIZE+0x110>
		}
	} else if (flags & SB_FLAG) {
    2062:	68bb      	ldr	r3, [r7, #8]
    2064:	2202      	movs	r2, #2
    2066:	4013      	ands	r3, r2
    2068:	d051      	beq.n	210e <STACK_SIZE+0x10e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	685b      	ldr	r3, [r3, #4]
    206e:	2b00      	cmp	r3, #0
    2070:	d046      	beq.n	2100 <STACK_SIZE+0x100>
    2072:	2312      	movs	r3, #18
    2074:	18fb      	adds	r3, r7, r3
    2076:	881b      	ldrh	r3, [r3, #0]
    2078:	2204      	movs	r2, #4
    207a:	4013      	ands	r3, r2
    207c:	d140      	bne.n	2100 <STACK_SIZE+0x100>
			msg->len--;
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	685b      	ldr	r3, [r3, #4]
    2082:	1e5a      	subs	r2, r3, #1
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	685b      	ldr	r3, [r3, #4]
    208c:	2b00      	cmp	r3, #0
    208e:	d102      	bne.n	2096 <STACK_SIZE+0x96>
    2090:	697b      	ldr	r3, [r7, #20]
    2092:	2b00      	cmp	r3, #0
    2094:	d006      	beq.n	20a4 <STACK_SIZE+0xa4>
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	2b01      	cmp	r3, #1
    209c:	d106      	bne.n	20ac <STACK_SIZE+0xac>
    209e:	697b      	ldr	r3, [r7, #20]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d003      	beq.n	20ac <STACK_SIZE+0xac>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	0018      	movs	r0, r3
    20a8:	4b24      	ldr	r3, [pc, #144]	; (213c <STACK_SIZE+0x13c>)
    20aa:	4798      	blx	r3
			}

			if (msg->len == 0) {
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	685b      	ldr	r3, [r3, #4]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d115      	bne.n	20e0 <STACK_SIZE+0xe0>
				if (msg->flags & I2C_M_STOP) {
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	885b      	ldrh	r3, [r3, #2]
    20b8:	b29b      	uxth	r3, r3
    20ba:	b21b      	sxth	r3, r3
    20bc:	2b00      	cmp	r3, #0
    20be:	da07      	bge.n	20d0 <STACK_SIZE+0xd0>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	0018      	movs	r0, r3
    20c4:	4b1e      	ldr	r3, [pc, #120]	; (2140 <STACK_SIZE+0x140>)
    20c6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    20c8:	68fb      	ldr	r3, [r7, #12]
    20ca:	0018      	movs	r0, r3
    20cc:	4b16      	ldr	r3, [pc, #88]	; (2128 <STACK_SIZE+0x128>)
    20ce:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	885b      	ldrh	r3, [r3, #2]
    20d4:	b29b      	uxth	r3, r3
    20d6:	4a13      	ldr	r2, [pc, #76]	; (2124 <STACK_SIZE+0x124>)
    20d8:	4013      	ands	r3, r2
    20da:	b29a      	uxth	r2, r3
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	689c      	ldr	r4, [r3, #8]
    20e4:	1c62      	adds	r2, r4, #1
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	609a      	str	r2, [r3, #8]
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	0018      	movs	r0, r3
    20ee:	4b15      	ldr	r3, [pc, #84]	; (2144 <STACK_SIZE+0x144>)
    20f0:	4798      	blx	r3
    20f2:	0003      	movs	r3, r0
    20f4:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    20f6:	68fb      	ldr	r3, [r7, #12]
    20f8:	0018      	movs	r0, r3
    20fa:	4b13      	ldr	r3, [pc, #76]	; (2148 <STACK_SIZE+0x148>)
    20fc:	4798      	blx	r3
    20fe:	e006      	b.n	210e <STACK_SIZE+0x10e>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	0018      	movs	r0, r3
    2104:	4b10      	ldr	r3, [pc, #64]	; (2148 <STACK_SIZE+0x148>)
    2106:	4798      	blx	r3
			return I2C_NACK;
    2108:	2302      	movs	r3, #2
    210a:	425b      	negs	r3, r3
    210c:	e000      	b.n	2110 <STACK_SIZE+0x110>
	}

	return I2C_OK;
    210e:	2300      	movs	r3, #0
}
    2110:	0018      	movs	r0, r3
    2112:	46bd      	mov	sp, r7
    2114:	b007      	add	sp, #28
    2116:	bd90      	pop	{r4, r7, pc}
    2118:	00001955 	.word	0x00001955
    211c:	00001ca5 	.word	0x00001ca5
    2120:	000017ab 	.word	0x000017ab
    2124:	fffffeff 	.word	0xfffffeff
    2128:	00001ec9 	.word	0x00001ec9
    212c:	00001b75 	.word	0x00001b75
    2130:	00001b4d 	.word	0x00001b4d
    2134:	fffffbff 	.word	0xfffffbff
    2138:	00001b99 	.word	0x00001b99
    213c:	00001a31 	.word	0x00001a31
    2140:	00001a01 	.word	0x00001a01
    2144:	00001bc9 	.word	0x00001bc9
    2148:	000017c1 	.word	0x000017c1

0000214c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    214c:	b580      	push	{r7, lr}
    214e:	b082      	sub	sp, #8
    2150:	af00      	add	r7, sp, #0
    2152:	6078      	str	r0, [r7, #4]
    2154:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	1e5a      	subs	r2, r3, #1
    215a:	4193      	sbcs	r3, r2
    215c:	b2d8      	uxtb	r0, r3
    215e:	23a7      	movs	r3, #167	; 0xa7
    2160:	00da      	lsls	r2, r3, #3
    2162:	4b09      	ldr	r3, [pc, #36]	; (2188 <_i2c_m_sync_init+0x3c>)
    2164:	0019      	movs	r1, r3
    2166:	4b09      	ldr	r3, [pc, #36]	; (218c <_i2c_m_sync_init+0x40>)
    2168:	4798      	blx	r3

	i2c_dev->hw = hw;
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	683a      	ldr	r2, [r7, #0]
    2174:	0011      	movs	r1, r2
    2176:	0018      	movs	r0, r3
    2178:	4b05      	ldr	r3, [pc, #20]	; (2190 <_i2c_m_sync_init+0x44>)
    217a:	4798      	blx	r3
    217c:	0003      	movs	r3, r0
}
    217e:	0018      	movs	r0, r3
    2180:	46bd      	mov	sp, r7
    2182:	b002      	add	sp, #8
    2184:	bd80      	pop	{r7, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	0000460c 	.word	0x0000460c
    218c:	00000e55 	.word	0x00000e55
    2190:	0000253d 	.word	0x0000253d

00002194 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    2194:	b580      	push	{r7, lr}
    2196:	b082      	sub	sp, #8
    2198:	af00      	add	r7, sp, #0
    219a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	1e5a      	subs	r2, r3, #1
    21a0:	4193      	sbcs	r3, r2
    21a2:	b2db      	uxtb	r3, r3
    21a4:	4a07      	ldr	r2, [pc, #28]	; (21c4 <_i2c_m_sync_enable+0x30>)
    21a6:	4908      	ldr	r1, [pc, #32]	; (21c8 <_i2c_m_sync_enable+0x34>)
    21a8:	0018      	movs	r0, r3
    21aa:	4b08      	ldr	r3, [pc, #32]	; (21cc <_i2c_m_sync_enable+0x38>)
    21ac:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	691b      	ldr	r3, [r3, #16]
    21b2:	0018      	movs	r0, r3
    21b4:	4b06      	ldr	r3, [pc, #24]	; (21d0 <_i2c_m_sync_enable+0x3c>)
    21b6:	4798      	blx	r3
    21b8:	0003      	movs	r3, r0
}
    21ba:	0018      	movs	r0, r3
    21bc:	46bd      	mov	sp, r7
    21be:	b002      	add	sp, #8
    21c0:	bd80      	pop	{r7, pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	00000555 	.word	0x00000555
    21c8:	0000460c 	.word	0x0000460c
    21cc:	00000e55 	.word	0x00000e55
    21d0:	000024ad 	.word	0x000024ad

000021d4 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    21d4:	b580      	push	{r7, lr}
    21d6:	b084      	sub	sp, #16
    21d8:	af00      	add	r7, sp, #0
    21da:	6078      	str	r0, [r7, #4]
    21dc:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    21de:	4b12      	ldr	r3, [pc, #72]	; (2228 <_sercom_i2c_sync_wait_bus+0x54>)
    21e0:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	691b      	ldr	r3, [r3, #16]
    21e6:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    21e8:	68bb      	ldr	r3, [r7, #8]
    21ea:	0018      	movs	r0, r3
    21ec:	4b0f      	ldr	r3, [pc, #60]	; (222c <_sercom_i2c_sync_wait_bus+0x58>)
    21ee:	4798      	blx	r3
    21f0:	0003      	movs	r3, r0
    21f2:	001a      	movs	r2, r3
    21f4:	683b      	ldr	r3, [r7, #0]
    21f6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    21f8:	68fb      	ldr	r3, [r7, #12]
    21fa:	1e5a      	subs	r2, r3, #1
    21fc:	60fa      	str	r2, [r7, #12]
    21fe:	2b00      	cmp	r3, #0
    2200:	d102      	bne.n	2208 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    2202:	2305      	movs	r3, #5
    2204:	425b      	negs	r3, r3
    2206:	e00a      	b.n	221e <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2208:	683b      	ldr	r3, [r7, #0]
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	2201      	movs	r2, #1
    220e:	4013      	ands	r3, r2
    2210:	d104      	bne.n	221c <_sercom_i2c_sync_wait_bus+0x48>
    2212:	683b      	ldr	r3, [r7, #0]
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	2202      	movs	r2, #2
    2218:	4013      	ands	r3, r2
    221a:	d0e5      	beq.n	21e8 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    221c:	2300      	movs	r3, #0
}
    221e:	0018      	movs	r0, r3
    2220:	46bd      	mov	sp, r7
    2222:	b004      	add	sp, #16
    2224:	bd80      	pop	{r7, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	0000ffff 	.word	0x0000ffff
    222c:	000017d7 	.word	0x000017d7

00002230 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    2230:	b590      	push	{r4, r7, lr}
    2232:	b087      	sub	sp, #28
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	691b      	ldr	r3, [r3, #16]
    223c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    2242:	697b      	ldr	r3, [r7, #20]
    2244:	0018      	movs	r0, r3
    2246:	4b3f      	ldr	r3, [pc, #252]	; (2344 <_sercom_i2c_sync_send_address+0x114>)
    2248:	4798      	blx	r3
    224a:	0003      	movs	r3, r0
    224c:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	1e5a      	subs	r2, r3, #1
    2252:	4193      	sbcs	r3, r2
    2254:	b2db      	uxtb	r3, r3
    2256:	4a3c      	ldr	r2, [pc, #240]	; (2348 <_sercom_i2c_sync_send_address+0x118>)
    2258:	493c      	ldr	r1, [pc, #240]	; (234c <_sercom_i2c_sync_send_address+0x11c>)
    225a:	0018      	movs	r0, r3
    225c:	4b3c      	ldr	r3, [pc, #240]	; (2350 <_sercom_i2c_sync_send_address+0x120>)
    225e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    2260:	693b      	ldr	r3, [r7, #16]
    2262:	685b      	ldr	r3, [r3, #4]
    2264:	2b01      	cmp	r3, #1
    2266:	d107      	bne.n	2278 <_sercom_i2c_sync_send_address+0x48>
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	2b00      	cmp	r3, #0
    226c:	d004      	beq.n	2278 <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    226e:	697b      	ldr	r3, [r7, #20]
    2270:	0018      	movs	r0, r3
    2272:	4b38      	ldr	r3, [pc, #224]	; (2354 <_sercom_i2c_sync_send_address+0x124>)
    2274:	4798      	blx	r3
    2276:	e003      	b.n	2280 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    2278:	697b      	ldr	r3, [r7, #20]
    227a:	0018      	movs	r0, r3
    227c:	4b36      	ldr	r3, [pc, #216]	; (2358 <_sercom_i2c_sync_send_address+0x128>)
    227e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    2280:	693b      	ldr	r3, [r7, #16]
    2282:	881b      	ldrh	r3, [r3, #0]
    2284:	001a      	movs	r2, r3
    2286:	2380      	movs	r3, #128	; 0x80
    2288:	00db      	lsls	r3, r3, #3
    228a:	4013      	ands	r3, r2
    228c:	d028      	beq.n	22e0 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    228e:	693b      	ldr	r3, [r7, #16]
    2290:	885b      	ldrh	r3, [r3, #2]
    2292:	b29b      	uxth	r3, r3
    2294:	001a      	movs	r2, r3
    2296:	2301      	movs	r3, #1
    2298:	4013      	ands	r3, r2
    229a:	d008      	beq.n	22ae <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    229c:	693b      	ldr	r3, [r7, #16]
    229e:	885b      	ldrh	r3, [r3, #2]
    22a0:	b29b      	uxth	r3, r3
    22a2:	2280      	movs	r2, #128	; 0x80
    22a4:	00d2      	lsls	r2, r2, #3
    22a6:	4313      	orrs	r3, r2
    22a8:	b29a      	uxth	r2, r3
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    22ae:	693b      	ldr	r3, [r7, #16]
    22b0:	881b      	ldrh	r3, [r3, #0]
    22b2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    22b4:	001a      	movs	r2, r3
    22b6:	4b29      	ldr	r3, [pc, #164]	; (235c <_sercom_i2c_sync_send_address+0x12c>)
    22b8:	401a      	ands	r2, r3
    22ba:	0014      	movs	r4, r2
    22bc:	697b      	ldr	r3, [r7, #20]
    22be:	0018      	movs	r0, r3
    22c0:	4b27      	ldr	r3, [pc, #156]	; (2360 <_sercom_i2c_sync_send_address+0x130>)
    22c2:	4798      	blx	r3
    22c4:	0002      	movs	r2, r0
    22c6:	2380      	movs	r3, #128	; 0x80
    22c8:	01db      	lsls	r3, r3, #7
    22ca:	4013      	ands	r3, r2
    22cc:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	0212      	lsls	r2, r2, #8
    22d2:	431a      	orrs	r2, r3
    22d4:	697b      	ldr	r3, [r7, #20]
    22d6:	0011      	movs	r1, r2
    22d8:	0018      	movs	r0, r3
    22da:	4b22      	ldr	r3, [pc, #136]	; (2364 <_sercom_i2c_sync_send_address+0x134>)
    22dc:	4798      	blx	r3
    22de:	e01e      	b.n	231e <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    22e0:	693b      	ldr	r3, [r7, #16]
    22e2:	881b      	ldrh	r3, [r3, #0]
    22e4:	005b      	lsls	r3, r3, #1
    22e6:	22ff      	movs	r2, #255	; 0xff
    22e8:	4013      	ands	r3, r2
    22ea:	693a      	ldr	r2, [r7, #16]
    22ec:	8852      	ldrh	r2, [r2, #2]
    22ee:	b292      	uxth	r2, r2
    22f0:	0011      	movs	r1, r2
    22f2:	2201      	movs	r2, #1
    22f4:	400a      	ands	r2, r1
    22f6:	1e51      	subs	r1, r2, #1
    22f8:	418a      	sbcs	r2, r1
    22fa:	b2d2      	uxtb	r2, r2
    22fc:	4313      	orrs	r3, r2
    22fe:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2300:	697b      	ldr	r3, [r7, #20]
    2302:	0018      	movs	r0, r3
    2304:	4b16      	ldr	r3, [pc, #88]	; (2360 <_sercom_i2c_sync_send_address+0x130>)
    2306:	4798      	blx	r3
    2308:	0002      	movs	r2, r0
    230a:	2380      	movs	r3, #128	; 0x80
    230c:	01db      	lsls	r3, r3, #7
    230e:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    2310:	0022      	movs	r2, r4
    2312:	431a      	orrs	r2, r3
    2314:	697b      	ldr	r3, [r7, #20]
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b12      	ldr	r3, [pc, #72]	; (2364 <_sercom_i2c_sync_send_address+0x134>)
    231c:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    231e:	2308      	movs	r3, #8
    2320:	18fa      	adds	r2, r7, r3
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	0011      	movs	r1, r2
    2326:	0018      	movs	r0, r3
    2328:	4b0f      	ldr	r3, [pc, #60]	; (2368 <_sercom_i2c_sync_send_address+0x138>)
    232a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    232c:	68b9      	ldr	r1, [r7, #8]
    232e:	693a      	ldr	r2, [r7, #16]
    2330:	697b      	ldr	r3, [r7, #20]
    2332:	0018      	movs	r0, r3
    2334:	4b0d      	ldr	r3, [pc, #52]	; (236c <_sercom_i2c_sync_send_address+0x13c>)
    2336:	4798      	blx	r3
    2338:	0003      	movs	r3, r0
}
    233a:	0018      	movs	r0, r3
    233c:	46bd      	mov	sp, r7
    233e:	b007      	add	sp, #28
    2340:	bd90      	pop	{r4, r7, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00001955 	.word	0x00001955
    2348:	000005c5 	.word	0x000005c5
    234c:	0000460c 	.word	0x0000460c
    2350:	00000e55 	.word	0x00000e55
    2354:	00001a31 	.word	0x00001a31
    2358:	00001a5d 	.word	0x00001a5d
    235c:	000007fe 	.word	0x000007fe
    2360:	00001b75 	.word	0x00001b75
    2364:	00001b4d 	.word	0x00001b4d
    2368:	000021d5 	.word	0x000021d5
    236c:	00001ee9 	.word	0x00001ee9

00002370 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    2370:	b590      	push	{r4, r7, lr}
    2372:	b087      	sub	sp, #28
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
    2378:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	691b      	ldr	r3, [r3, #16]
    237e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	1e5a      	subs	r2, r3, #1
    2384:	4193      	sbcs	r3, r2
    2386:	b2d8      	uxtb	r0, r3
    2388:	23be      	movs	r3, #190	; 0xbe
    238a:	00da      	lsls	r2, r3, #3
    238c:	4b3d      	ldr	r3, [pc, #244]	; (2484 <_i2c_m_sync_transfer+0x114>)
    238e:	0019      	movs	r1, r3
    2390:	4b3d      	ldr	r3, [pc, #244]	; (2488 <_i2c_m_sync_transfer+0x118>)
    2392:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	691b      	ldr	r3, [r3, #16]
    2398:	1e5a      	subs	r2, r3, #1
    239a:	4193      	sbcs	r3, r2
    239c:	b2db      	uxtb	r3, r3
    239e:	4a3b      	ldr	r2, [pc, #236]	; (248c <_i2c_m_sync_transfer+0x11c>)
    23a0:	4938      	ldr	r1, [pc, #224]	; (2484 <_i2c_m_sync_transfer+0x114>)
    23a2:	0018      	movs	r0, r3
    23a4:	4b38      	ldr	r3, [pc, #224]	; (2488 <_i2c_m_sync_transfer+0x118>)
    23a6:	4798      	blx	r3
	ASSERT(msg);
    23a8:	683b      	ldr	r3, [r7, #0]
    23aa:	1e5a      	subs	r2, r3, #1
    23ac:	4193      	sbcs	r3, r2
    23ae:	b2db      	uxtb	r3, r3
    23b0:	4a37      	ldr	r2, [pc, #220]	; (2490 <_i2c_m_sync_transfer+0x120>)
    23b2:	4934      	ldr	r1, [pc, #208]	; (2484 <_i2c_m_sync_transfer+0x114>)
    23b4:	0018      	movs	r0, r3
    23b6:	4b34      	ldr	r3, [pc, #208]	; (2488 <_i2c_m_sync_transfer+0x118>)
    23b8:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	885b      	ldrh	r3, [r3, #2]
    23be:	b29b      	uxth	r3, r3
    23c0:	001a      	movs	r2, r3
    23c2:	2380      	movs	r3, #128	; 0x80
    23c4:	005b      	lsls	r3, r3, #1
    23c6:	4013      	ands	r3, r2
    23c8:	d002      	beq.n	23d0 <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    23ca:	2306      	movs	r3, #6
    23cc:	425b      	negs	r3, r3
    23ce:	e054      	b.n	247a <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    23d0:	683b      	ldr	r3, [r7, #0]
    23d2:	885b      	ldrh	r3, [r3, #2]
    23d4:	b29b      	uxth	r3, r3
    23d6:	2280      	movs	r2, #128	; 0x80
    23d8:	0052      	lsls	r2, r2, #1
    23da:	4313      	orrs	r3, r2
    23dc:	b29a      	uxth	r2, r3
    23de:	683b      	ldr	r3, [r7, #0]
    23e0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    23e2:	687b      	ldr	r3, [r7, #4]
    23e4:	683a      	ldr	r2, [r7, #0]
    23e6:	ca13      	ldmia	r2!, {r0, r1, r4}
    23e8:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    23ea:	693b      	ldr	r3, [r7, #16]
    23ec:	0018      	movs	r0, r3
    23ee:	4b29      	ldr	r3, [pc, #164]	; (2494 <_i2c_m_sync_transfer+0x124>)
    23f0:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	0018      	movs	r0, r3
    23f6:	4b28      	ldr	r3, [pc, #160]	; (2498 <_i2c_m_sync_transfer+0x128>)
    23f8:	4798      	blx	r3
    23fa:	0003      	movs	r3, r0
    23fc:	617b      	str	r3, [r7, #20]

	if (ret) {
    23fe:	697b      	ldr	r3, [r7, #20]
    2400:	2b00      	cmp	r3, #0
    2402:	d031      	beq.n	2468 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	885b      	ldrh	r3, [r3, #2]
    2408:	b29b      	uxth	r3, r3
    240a:	4a24      	ldr	r2, [pc, #144]	; (249c <_i2c_m_sync_transfer+0x12c>)
    240c:	4013      	ands	r3, r2
    240e:	b29a      	uxth	r2, r3
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	805a      	strh	r2, [r3, #2]

		return ret;
    2414:	697b      	ldr	r3, [r7, #20]
    2416:	e030      	b.n	247a <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    2418:	230c      	movs	r3, #12
    241a:	18fa      	adds	r2, r7, r3
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	0011      	movs	r1, r2
    2420:	0018      	movs	r0, r3
    2422:	4b1f      	ldr	r3, [pc, #124]	; (24a0 <_i2c_m_sync_transfer+0x130>)
    2424:	4798      	blx	r3
    2426:	0003      	movs	r3, r0
    2428:	617b      	str	r3, [r7, #20]

		if (ret) {
    242a:	697b      	ldr	r3, [r7, #20]
    242c:	2b00      	cmp	r3, #0
    242e:	d013      	beq.n	2458 <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    2430:	683b      	ldr	r3, [r7, #0]
    2432:	885b      	ldrh	r3, [r3, #2]
    2434:	b29b      	uxth	r3, r3
    2436:	b21b      	sxth	r3, r3
    2438:	2b00      	cmp	r3, #0
    243a:	da03      	bge.n	2444 <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    243c:	693b      	ldr	r3, [r7, #16]
    243e:	0018      	movs	r0, r3
    2440:	4b18      	ldr	r3, [pc, #96]	; (24a4 <_i2c_m_sync_transfer+0x134>)
    2442:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	885b      	ldrh	r3, [r3, #2]
    2448:	b29b      	uxth	r3, r3
    244a:	4a14      	ldr	r2, [pc, #80]	; (249c <_i2c_m_sync_transfer+0x12c>)
    244c:	4013      	ands	r3, r2
    244e:	b29a      	uxth	r2, r3
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	805a      	strh	r2, [r3, #2]

			return ret;
    2454:	697b      	ldr	r3, [r7, #20]
    2456:	e010      	b.n	247a <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    2458:	68f9      	ldr	r1, [r7, #12]
    245a:	687a      	ldr	r2, [r7, #4]
    245c:	693b      	ldr	r3, [r7, #16]
    245e:	0018      	movs	r0, r3
    2460:	4b11      	ldr	r3, [pc, #68]	; (24a8 <_i2c_m_sync_transfer+0x138>)
    2462:	4798      	blx	r3
    2464:	0003      	movs	r3, r0
    2466:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	885b      	ldrh	r3, [r3, #2]
    246c:	b29b      	uxth	r3, r3
    246e:	001a      	movs	r2, r3
    2470:	2380      	movs	r3, #128	; 0x80
    2472:	005b      	lsls	r3, r3, #1
    2474:	4013      	ands	r3, r2
    2476:	d1cf      	bne.n	2418 <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    2478:	697b      	ldr	r3, [r7, #20]
}
    247a:	0018      	movs	r0, r3
    247c:	46bd      	mov	sp, r7
    247e:	b007      	add	sp, #28
    2480:	bd90      	pop	{r4, r7, pc}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	0000460c 	.word	0x0000460c
    2488:	00000e55 	.word	0x00000e55
    248c:	000005f1 	.word	0x000005f1
    2490:	000005f2 	.word	0x000005f2
    2494:	000019d5 	.word	0x000019d5
    2498:	00002231 	.word	0x00002231
    249c:	fffffeff 	.word	0xfffffeff
    24a0:	000021d5 	.word	0x000021d5
    24a4:	00001ec9 	.word	0x00001ec9
    24a8:	00001ee9 	.word	0x00001ee9

000024ac <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    24ac:	b580      	push	{r7, lr}
    24ae:	b084      	sub	sp, #16
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    24b4:	4b1a      	ldr	r3, [pc, #104]	; (2520 <_i2c_m_enable_implementation+0x74>)
    24b6:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    24b8:	2304      	movs	r3, #4
    24ba:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	1e5a      	subs	r2, r3, #1
    24c0:	4193      	sbcs	r3, r2
    24c2:	b2db      	uxtb	r3, r3
    24c4:	4a17      	ldr	r2, [pc, #92]	; (2524 <_i2c_m_enable_implementation+0x78>)
    24c6:	4918      	ldr	r1, [pc, #96]	; (2528 <_i2c_m_enable_implementation+0x7c>)
    24c8:	0018      	movs	r0, r3
    24ca:	4b18      	ldr	r3, [pc, #96]	; (252c <_i2c_m_enable_implementation+0x80>)
    24cc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	0018      	movs	r0, r3
    24d2:	4b17      	ldr	r3, [pc, #92]	; (2530 <_i2c_m_enable_implementation+0x84>)
    24d4:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    24d6:	e016      	b.n	2506 <_i2c_m_enable_implementation+0x5a>
		timeout--;
    24d8:	68fb      	ldr	r3, [r7, #12]
    24da:	3b01      	subs	r3, #1
    24dc:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    24de:	68fb      	ldr	r3, [r7, #12]
    24e0:	2b00      	cmp	r3, #0
    24e2:	dc10      	bgt.n	2506 <_i2c_m_enable_implementation+0x5a>
			if (--timeout_attempt)
    24e4:	68bb      	ldr	r3, [r7, #8]
    24e6:	3b01      	subs	r3, #1
    24e8:	60bb      	str	r3, [r7, #8]
    24ea:	68bb      	ldr	r3, [r7, #8]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d007      	beq.n	2500 <_i2c_m_enable_implementation+0x54>
				timeout = 65535;
    24f0:	4b0b      	ldr	r3, [pc, #44]	; (2520 <_i2c_m_enable_implementation+0x74>)
    24f2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	2110      	movs	r1, #16
    24f8:	0018      	movs	r0, r3
    24fa:	4b0e      	ldr	r3, [pc, #56]	; (2534 <_i2c_m_enable_implementation+0x88>)
    24fc:	4798      	blx	r3
    24fe:	e002      	b.n	2506 <_i2c_m_enable_implementation+0x5a>
				return I2C_ERR_BUSY;
    2500:	2306      	movs	r3, #6
    2502:	425b      	negs	r3, r3
    2504:	e007      	b.n	2516 <_i2c_m_enable_implementation+0x6a>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	0018      	movs	r0, r3
    250a:	4b0b      	ldr	r3, [pc, #44]	; (2538 <_i2c_m_enable_implementation+0x8c>)
    250c:	4798      	blx	r3
    250e:	0003      	movs	r3, r0
    2510:	2b01      	cmp	r3, #1
    2512:	d1e1      	bne.n	24d8 <_i2c_m_enable_implementation+0x2c>
		}
	}
	return ERR_NONE;
    2514:	2300      	movs	r3, #0
}
    2516:	0018      	movs	r0, r3
    2518:	46bd      	mov	sp, r7
    251a:	b004      	add	sp, #16
    251c:	bd80      	pop	{r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	0000ffff 	.word	0x0000ffff
    2524:	00000625 	.word	0x00000625
    2528:	0000460c 	.word	0x0000460c
    252c:	00000e55 	.word	0x00000e55
    2530:	000018fd 	.word	0x000018fd
    2534:	00001cc9 	.word	0x00001cc9
    2538:	00001c75 	.word	0x00001c75

0000253c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    253c:	b580      	push	{r7, lr}
    253e:	b084      	sub	sp, #16
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
    2544:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    2546:	683b      	ldr	r3, [r7, #0]
    2548:	0018      	movs	r0, r3
    254a:	4b4f      	ldr	r3, [pc, #316]	; (2688 <_i2c_m_sync_init_impl+0x14c>)
    254c:	4798      	blx	r3
    254e:	0003      	movs	r3, r0
    2550:	001a      	movs	r2, r3
    2552:	230f      	movs	r3, #15
    2554:	18fb      	adds	r3, r7, r3
    2556:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    2558:	683b      	ldr	r3, [r7, #0]
    255a:	2101      	movs	r1, #1
    255c:	0018      	movs	r0, r3
    255e:	4b4b      	ldr	r3, [pc, #300]	; (268c <_i2c_m_sync_init_impl+0x150>)
    2560:	4798      	blx	r3
    2562:	0003      	movs	r3, r0
    2564:	001a      	movs	r2, r3
    2566:	2301      	movs	r3, #1
    2568:	4053      	eors	r3, r2
    256a:	b2db      	uxtb	r3, r3
    256c:	2b00      	cmp	r3, #0
    256e:	d025      	beq.n	25bc <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2570:	230f      	movs	r3, #15
    2572:	18fb      	adds	r3, r7, r3
    2574:	781a      	ldrb	r2, [r3, #0]
    2576:	4946      	ldr	r1, [pc, #280]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    2578:	0013      	movs	r3, r2
    257a:	005b      	lsls	r3, r3, #1
    257c:	189b      	adds	r3, r3, r2
    257e:	00db      	lsls	r3, r3, #3
    2580:	18cb      	adds	r3, r1, r3
    2582:	3304      	adds	r3, #4
    2584:	681b      	ldr	r3, [r3, #0]
    2586:	221c      	movs	r2, #28
    2588:	4013      	ands	r3, r2
    258a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    258c:	683b      	ldr	r3, [r7, #0]
    258e:	2102      	movs	r1, #2
    2590:	0018      	movs	r0, r3
    2592:	4b40      	ldr	r3, [pc, #256]	; (2694 <_i2c_m_sync_init_impl+0x158>)
    2594:	4798      	blx	r3
    2596:	1e03      	subs	r3, r0, #0
    2598:	d008      	beq.n	25ac <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    259a:	683b      	ldr	r3, [r7, #0]
    259c:	0018      	movs	r0, r3
    259e:	4b3e      	ldr	r3, [pc, #248]	; (2698 <_i2c_m_sync_init_impl+0x15c>)
    25a0:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    25a2:	683b      	ldr	r3, [r7, #0]
    25a4:	2102      	movs	r1, #2
    25a6:	0018      	movs	r0, r3
    25a8:	4b3c      	ldr	r3, [pc, #240]	; (269c <_i2c_m_sync_init_impl+0x160>)
    25aa:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    25ac:	68bb      	ldr	r3, [r7, #8]
    25ae:	2201      	movs	r2, #1
    25b0:	431a      	orrs	r2, r3
    25b2:	683b      	ldr	r3, [r7, #0]
    25b4:	0011      	movs	r1, r2
    25b6:	0018      	movs	r0, r3
    25b8:	4b39      	ldr	r3, [pc, #228]	; (26a0 <_i2c_m_sync_init_impl+0x164>)
    25ba:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    25bc:	683b      	ldr	r3, [r7, #0]
    25be:	2101      	movs	r1, #1
    25c0:	0018      	movs	r0, r3
    25c2:	4b36      	ldr	r3, [pc, #216]	; (269c <_i2c_m_sync_init_impl+0x160>)
    25c4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    25c6:	230f      	movs	r3, #15
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	781a      	ldrb	r2, [r3, #0]
    25cc:	4930      	ldr	r1, [pc, #192]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    25ce:	0013      	movs	r3, r2
    25d0:	005b      	lsls	r3, r3, #1
    25d2:	189b      	adds	r3, r3, r2
    25d4:	00db      	lsls	r3, r3, #3
    25d6:	18cb      	adds	r3, r1, r3
    25d8:	3304      	adds	r3, #4
    25da:	681a      	ldr	r2, [r3, #0]
    25dc:	683b      	ldr	r3, [r7, #0]
    25de:	0011      	movs	r1, r2
    25e0:	0018      	movs	r0, r3
    25e2:	4b2f      	ldr	r3, [pc, #188]	; (26a0 <_i2c_m_sync_init_impl+0x164>)
    25e4:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    25e6:	230f      	movs	r3, #15
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	781a      	ldrb	r2, [r3, #0]
    25ec:	4928      	ldr	r1, [pc, #160]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    25ee:	0013      	movs	r3, r2
    25f0:	005b      	lsls	r3, r3, #1
    25f2:	189b      	adds	r3, r3, r2
    25f4:	00db      	lsls	r3, r3, #3
    25f6:	18cb      	adds	r3, r1, r3
    25f8:	3308      	adds	r3, #8
    25fa:	681a      	ldr	r2, [r3, #0]
    25fc:	683b      	ldr	r3, [r7, #0]
    25fe:	0011      	movs	r1, r2
    2600:	0018      	movs	r0, r3
    2602:	4b28      	ldr	r3, [pc, #160]	; (26a4 <_i2c_m_sync_init_impl+0x168>)
    2604:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2606:	230f      	movs	r3, #15
    2608:	18fb      	adds	r3, r7, r3
    260a:	781a      	ldrb	r2, [r3, #0]
    260c:	4920      	ldr	r1, [pc, #128]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    260e:	0013      	movs	r3, r2
    2610:	005b      	lsls	r3, r3, #1
    2612:	189b      	adds	r3, r3, r2
    2614:	00db      	lsls	r3, r3, #3
    2616:	18cb      	adds	r3, r1, r3
    2618:	330c      	adds	r3, #12
    261a:	681a      	ldr	r2, [r3, #0]
    261c:	683b      	ldr	r3, [r7, #0]
    261e:	0011      	movs	r1, r2
    2620:	0018      	movs	r0, r3
    2622:	4b21      	ldr	r3, [pc, #132]	; (26a8 <_i2c_m_sync_init_impl+0x16c>)
    2624:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2626:	230f      	movs	r3, #15
    2628:	18fb      	adds	r3, r7, r3
    262a:	781a      	ldrb	r2, [r3, #0]
    262c:	4918      	ldr	r1, [pc, #96]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    262e:	0013      	movs	r3, r2
    2630:	005b      	lsls	r3, r3, #1
    2632:	189b      	adds	r3, r3, r2
    2634:	00db      	lsls	r3, r3, #3
    2636:	18cb      	adds	r3, r1, r3
    2638:	3304      	adds	r3, #4
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	0e1b      	lsrs	r3, r3, #24
    263e:	b29b      	uxth	r3, r3
    2640:	2203      	movs	r2, #3
    2642:	4013      	ands	r3, r2
    2644:	b29a      	uxth	r2, r3
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	899b      	ldrh	r3, [r3, #12]
    264e:	2201      	movs	r2, #1
    2650:	429a      	cmp	r2, r3
    2652:	419b      	sbcs	r3, r3
    2654:	425b      	negs	r3, r3
    2656:	b2da      	uxtb	r2, r3
    2658:	683b      	ldr	r3, [r7, #0]
    265a:	0011      	movs	r1, r2
    265c:	0018      	movs	r0, r3
    265e:	4b13      	ldr	r3, [pc, #76]	; (26ac <_i2c_m_sync_init_impl+0x170>)
    2660:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    2662:	230f      	movs	r3, #15
    2664:	18fb      	adds	r3, r7, r3
    2666:	781a      	ldrb	r2, [r3, #0]
    2668:	4909      	ldr	r1, [pc, #36]	; (2690 <_i2c_m_sync_init_impl+0x154>)
    266a:	0013      	movs	r3, r2
    266c:	005b      	lsls	r3, r3, #1
    266e:	189b      	adds	r3, r3, r2
    2670:	00db      	lsls	r3, r3, #3
    2672:	18cb      	adds	r3, r1, r3
    2674:	3312      	adds	r3, #18
    2676:	881a      	ldrh	r2, [r3, #0]
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    267c:	2300      	movs	r3, #0
}
    267e:	0018      	movs	r0, r3
    2680:	46bd      	mov	sp, r7
    2682:	b004      	add	sp, #16
    2684:	bd80      	pop	{r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	00001e3d 	.word	0x00001e3d
    268c:	0000178b 	.word	0x0000178b
    2690:	20000014 	.word	0x20000014
    2694:	0000197d 	.word	0x0000197d
    2698:	00001929 	.word	0x00001929
    269c:	0000176d 	.word	0x0000176d
    26a0:	000019ad 	.word	0x000019ad
    26a4:	00001ac1 	.word	0x00001ac1
    26a8:	00001ae9 	.word	0x00001ae9
    26ac:	00001b01 	.word	0x00001b01

000026b0 <_sercom_i2c_s_irq_handler>:
 * \internal Sercom i2c slave interrupt handler
 *
 * \param[in] p The pointer to i2c slave device
 */
static void _sercom_i2c_s_irq_handler(struct _i2c_s_async_device *device)
{
    26b0:	b590      	push	{r4, r7, lr}
    26b2:	b085      	sub	sp, #20
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
	void *   hw    = device->hw;
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	681b      	ldr	r3, [r3, #0]
    26bc:	60fb      	str	r3, [r7, #12]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    26be:	68fb      	ldr	r3, [r7, #12]
    26c0:	0018      	movs	r0, r3
    26c2:	4b28      	ldr	r3, [pc, #160]	; (2764 <_sercom_i2c_s_irq_handler+0xb4>)
    26c4:	4798      	blx	r3
    26c6:	0003      	movs	r3, r0
    26c8:	60bb      	str	r3, [r7, #8]

	if (flags & SERCOM_I2CS_INTFLAG_ERROR) {
    26ca:	68bb      	ldr	r3, [r7, #8]
    26cc:	2280      	movs	r2, #128	; 0x80
    26ce:	4013      	ands	r3, r2
    26d0:	d00f      	beq.n	26f2 <_sercom_i2c_s_irq_handler+0x42>
		ASSERT(device->cb.error);
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	685b      	ldr	r3, [r3, #4]
    26d6:	1e5a      	subs	r2, r3, #1
    26d8:	4193      	sbcs	r3, r2
    26da:	b2db      	uxtb	r3, r3
    26dc:	4a22      	ldr	r2, [pc, #136]	; (2768 <_sercom_i2c_s_irq_handler+0xb8>)
    26de:	4923      	ldr	r1, [pc, #140]	; (276c <_sercom_i2c_s_irq_handler+0xbc>)
    26e0:	0018      	movs	r0, r3
    26e2:	4b23      	ldr	r3, [pc, #140]	; (2770 <_sercom_i2c_s_irq_handler+0xc0>)
    26e4:	4798      	blx	r3
		device->cb.error(device);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	685b      	ldr	r3, [r3, #4]
    26ea:	687a      	ldr	r2, [r7, #4]
    26ec:	0010      	movs	r0, r2
    26ee:	4798      	blx	r3
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
#endif
	}
}
    26f0:	e034      	b.n	275c <_sercom_i2c_s_irq_handler+0xac>
	} else if (flags & SERCOM_I2CS_INTFLAG_DRDY) {
    26f2:	68bb      	ldr	r3, [r7, #8]
    26f4:	2204      	movs	r2, #4
    26f6:	4013      	ands	r3, r2
    26f8:	d030      	beq.n	275c <_sercom_i2c_s_irq_handler+0xac>
		if (!hri_sercomi2cs_get_STATUS_DIR_bit(hw)) {
    26fa:	68fb      	ldr	r3, [r7, #12]
    26fc:	0018      	movs	r0, r3
    26fe:	4b1d      	ldr	r3, [pc, #116]	; (2774 <_sercom_i2c_s_irq_handler+0xc4>)
    2700:	4798      	blx	r3
    2702:	0003      	movs	r3, r0
    2704:	001a      	movs	r2, r3
    2706:	2301      	movs	r3, #1
    2708:	4053      	eors	r3, r2
    270a:	b2db      	uxtb	r3, r3
    270c:	2b00      	cmp	r3, #0
    270e:	d016      	beq.n	273e <_sercom_i2c_s_irq_handler+0x8e>
			ASSERT(device->cb.rx_done);
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	68db      	ldr	r3, [r3, #12]
    2714:	1e5a      	subs	r2, r3, #1
    2716:	4193      	sbcs	r3, r2
    2718:	b2db      	uxtb	r3, r3
    271a:	4a17      	ldr	r2, [pc, #92]	; (2778 <_sercom_i2c_s_irq_handler+0xc8>)
    271c:	4913      	ldr	r1, [pc, #76]	; (276c <_sercom_i2c_s_irq_handler+0xbc>)
    271e:	0018      	movs	r0, r3
    2720:	4b13      	ldr	r3, [pc, #76]	; (2770 <_sercom_i2c_s_irq_handler+0xc0>)
    2722:	4798      	blx	r3
			device->cb.rx_done(device, hri_sercomi2cs_read_DATA_reg(hw));
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	68dc      	ldr	r4, [r3, #12]
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	0018      	movs	r0, r3
    272c:	4b13      	ldr	r3, [pc, #76]	; (277c <_sercom_i2c_s_irq_handler+0xcc>)
    272e:	4798      	blx	r3
    2730:	0003      	movs	r3, r0
    2732:	001a      	movs	r2, r3
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	0011      	movs	r1, r2
    2738:	0018      	movs	r0, r3
    273a:	47a0      	blx	r4
}
    273c:	e00e      	b.n	275c <_sercom_i2c_s_irq_handler+0xac>
			ASSERT(device->cb.tx);
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	689b      	ldr	r3, [r3, #8]
    2742:	1e5a      	subs	r2, r3, #1
    2744:	4193      	sbcs	r3, r2
    2746:	b2db      	uxtb	r3, r3
    2748:	4a0d      	ldr	r2, [pc, #52]	; (2780 <_sercom_i2c_s_irq_handler+0xd0>)
    274a:	4908      	ldr	r1, [pc, #32]	; (276c <_sercom_i2c_s_irq_handler+0xbc>)
    274c:	0018      	movs	r0, r3
    274e:	4b08      	ldr	r3, [pc, #32]	; (2770 <_sercom_i2c_s_irq_handler+0xc0>)
    2750:	4798      	blx	r3
			device->cb.tx(device);
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	689b      	ldr	r3, [r3, #8]
    2756:	687a      	ldr	r2, [r7, #4]
    2758:	0010      	movs	r0, r2
    275a:	4798      	blx	r3
}
    275c:	46c0      	nop			; (mov r8, r8)
    275e:	46bd      	mov	sp, r7
    2760:	b005      	add	sp, #20
    2762:	bd90      	pop	{r4, r7, pc}
    2764:	000017d7 	.word	0x000017d7
    2768:	000007a7 	.word	0x000007a7
    276c:	0000460c 	.word	0x0000460c
    2770:	00000e55 	.word	0x00000e55
    2774:	00001c1f 	.word	0x00001c1f
    2778:	000007ab 	.word	0x000007ab
    277c:	00001bf1 	.word	0x00001bf1
    2780:	000007ae 	.word	0x000007ae

00002784 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    2784:	b580      	push	{r7, lr}
    2786:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    2788:	4b03      	ldr	r3, [pc, #12]	; (2798 <SERCOM0_Handler+0x14>)
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	0018      	movs	r0, r3
    278e:	4b03      	ldr	r3, [pc, #12]	; (279c <SERCOM0_Handler+0x18>)
    2790:	4798      	blx	r3
}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	46bd      	mov	sp, r7
    2796:	bd80      	pop	{r7, pc}
    2798:	20000068 	.word	0x20000068
    279c:	00001d25 	.word	0x00001d25

000027a0 <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom1_dev);
    27a4:	4b03      	ldr	r3, [pc, #12]	; (27b4 <SERCOM1_Handler+0x14>)
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	0018      	movs	r0, r3
    27aa:	4b03      	ldr	r3, [pc, #12]	; (27b8 <SERCOM1_Handler+0x18>)
    27ac:	4798      	blx	r3
}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	46bd      	mov	sp, r7
    27b2:	bd80      	pop	{r7, pc}
    27b4:	2000006c 	.word	0x2000006c
    27b8:	000026b1 	.word	0x000026b1

000027bc <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b082      	sub	sp, #8
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <_system_time_init+0x1c>)
    27c6:	4a05      	ldr	r2, [pc, #20]	; (27dc <_system_time_init+0x20>)
    27c8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    27ca:	4b03      	ldr	r3, [pc, #12]	; (27d8 <_system_time_init+0x1c>)
    27cc:	2205      	movs	r2, #5
    27ce:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    27d0:	46c0      	nop			; (mov r8, r8)
    27d2:	46bd      	mov	sp, r7
    27d4:	b002      	add	sp, #8
    27d6:	bd80      	pop	{r7, pc}
    27d8:	e000e010 	.word	0xe000e010
    27dc:	00ffffff 	.word	0x00ffffff

000027e0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b082      	sub	sp, #8
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	0018      	movs	r0, r3
    27ec:	4b02      	ldr	r3, [pc, #8]	; (27f8 <_delay_init+0x18>)
    27ee:	4798      	blx	r3
}
    27f0:	46c0      	nop			; (mov r8, r8)
    27f2:	46bd      	mov	sp, r7
    27f4:	b002      	add	sp, #8
    27f6:	bd80      	pop	{r7, pc}
    27f8:	000027bd 	.word	0x000027bd

000027fc <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    27fc:	b580      	push	{r7, lr}
    27fe:	b084      	sub	sp, #16
    2800:	af00      	add	r7, sp, #0
    2802:	6078      	str	r0, [r7, #4]
    2804:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2806:	683b      	ldr	r3, [r7, #0]
    2808:	0e1a      	lsrs	r2, r3, #24
    280a:	230f      	movs	r3, #15
    280c:	18fb      	adds	r3, r7, r3
    280e:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    2810:	683b      	ldr	r3, [r7, #0]
    2812:	60bb      	str	r3, [r7, #8]

	while (n--) {
    2814:	e011      	b.n	283a <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    2816:	4b16      	ldr	r3, [pc, #88]	; (2870 <_delay_cycles+0x74>)
    2818:	4a16      	ldr	r2, [pc, #88]	; (2874 <_delay_cycles+0x78>)
    281a:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    281c:	4b14      	ldr	r3, [pc, #80]	; (2870 <_delay_cycles+0x74>)
    281e:	4a15      	ldr	r2, [pc, #84]	; (2874 <_delay_cycles+0x78>)
    2820:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	4b12      	ldr	r3, [pc, #72]	; (2870 <_delay_cycles+0x74>)
    2826:	681a      	ldr	r2, [r3, #0]
    2828:	2380      	movs	r3, #128	; 0x80
    282a:	025b      	lsls	r3, r3, #9
    282c:	4013      	ands	r3, r2
    282e:	d0f9      	beq.n	2824 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	4a11      	ldr	r2, [pc, #68]	; (2878 <_delay_cycles+0x7c>)
    2834:	4694      	mov	ip, r2
    2836:	4463      	add	r3, ip
    2838:	60bb      	str	r3, [r7, #8]
	while (n--) {
    283a:	230f      	movs	r3, #15
    283c:	18fb      	adds	r3, r7, r3
    283e:	781b      	ldrb	r3, [r3, #0]
    2840:	220f      	movs	r2, #15
    2842:	18ba      	adds	r2, r7, r2
    2844:	1e59      	subs	r1, r3, #1
    2846:	7011      	strb	r1, [r2, #0]
    2848:	2b00      	cmp	r3, #0
    284a:	d1e4      	bne.n	2816 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    284c:	4b08      	ldr	r3, [pc, #32]	; (2870 <_delay_cycles+0x74>)
    284e:	68ba      	ldr	r2, [r7, #8]
    2850:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    2852:	4b07      	ldr	r3, [pc, #28]	; (2870 <_delay_cycles+0x74>)
    2854:	68ba      	ldr	r2, [r7, #8]
    2856:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2858:	46c0      	nop			; (mov r8, r8)
    285a:	4b05      	ldr	r3, [pc, #20]	; (2870 <_delay_cycles+0x74>)
    285c:	681a      	ldr	r2, [r3, #0]
    285e:	2380      	movs	r3, #128	; 0x80
    2860:	025b      	lsls	r3, r3, #9
    2862:	4013      	ands	r3, r2
    2864:	d0f9      	beq.n	285a <_delay_cycles+0x5e>
		;
}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	46bd      	mov	sp, r7
    286a:	b004      	add	sp, #16
    286c:	bd80      	pop	{r7, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	e000e010 	.word	0xe000e010
    2874:	00ffffff 	.word	0x00ffffff
    2878:	ff000001 	.word	0xff000001

0000287c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
    2882:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	7a9b      	ldrb	r3, [r3, #10]
    2888:	b2db      	uxtb	r3, r3
    288a:	001a      	movs	r2, r3
    288c:	2301      	movs	r3, #1
    288e:	4013      	ands	r3, r2
    2890:	1e5a      	subs	r2, r3, #1
    2892:	4193      	sbcs	r3, r2
    2894:	b2db      	uxtb	r3, r3
}
    2896:	0018      	movs	r0, r3
    2898:	46bd      	mov	sp, r7
    289a:	b002      	add	sp, #8
    289c:	bd80      	pop	{r7, pc}

0000289e <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    289e:	b580      	push	{r7, lr}
    28a0:	b082      	sub	sp, #8
    28a2:	af00      	add	r7, sp, #0
    28a4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	2201      	movs	r2, #1
    28aa:	729a      	strb	r2, [r3, #10]
}
    28ac:	46c0      	nop			; (mov r8, r8)
    28ae:	46bd      	mov	sp, r7
    28b0:	b002      	add	sp, #8
    28b2:	bd80      	pop	{r7, pc}

000028b4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0018      	movs	r0, r3
    28c6:	4b08      	ldr	r3, [pc, #32]	; (28e8 <tc_interrupt_handler+0x34>)
    28c8:	4798      	blx	r3
    28ca:	1e03      	subs	r3, r0, #0
    28cc:	d008      	beq.n	28e0 <tc_interrupt_handler+0x2c>
		hri_tc_clear_interrupt_OVF_bit(hw);
    28ce:	68fb      	ldr	r3, [r7, #12]
    28d0:	0018      	movs	r0, r3
    28d2:	4b06      	ldr	r3, [pc, #24]	; (28ec <tc_interrupt_handler+0x38>)
    28d4:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	687a      	ldr	r2, [r7, #4]
    28dc:	0010      	movs	r0, r2
    28de:	4798      	blx	r3
	}
}
    28e0:	46c0      	nop			; (mov r8, r8)
    28e2:	46bd      	mov	sp, r7
    28e4:	b004      	add	sp, #16
    28e6:	bd80      	pop	{r7, pc}
    28e8:	0000287d 	.word	0x0000287d
    28ec:	0000289f 	.word	0x0000289f

000028f0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    28f0:	b580      	push	{r7, lr}
    28f2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    28f4:	4b03      	ldr	r3, [pc, #12]	; (2904 <TC0_Handler+0x14>)
    28f6:	681b      	ldr	r3, [r3, #0]
    28f8:	0018      	movs	r0, r3
    28fa:	4b03      	ldr	r3, [pc, #12]	; (2908 <TC0_Handler+0x18>)
    28fc:	4798      	blx	r3
}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}
    2904:	20000070 	.word	0x20000070
    2908:	000028b5 	.word	0x000028b5

0000290c <hri_port_set_OUT_reg>:
{
    290c:	b580      	push	{r7, lr}
    290e:	b084      	sub	sp, #16
    2910:	af00      	add	r7, sp, #0
    2912:	60f8      	str	r0, [r7, #12]
    2914:	607a      	str	r2, [r7, #4]
    2916:	230b      	movs	r3, #11
    2918:	18fb      	adds	r3, r7, r3
    291a:	1c0a      	adds	r2, r1, #0
    291c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    291e:	230b      	movs	r3, #11
    2920:	18fb      	adds	r3, r7, r3
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	68fa      	ldr	r2, [r7, #12]
    2926:	01db      	lsls	r3, r3, #7
    2928:	18d3      	adds	r3, r2, r3
    292a:	3318      	adds	r3, #24
    292c:	687a      	ldr	r2, [r7, #4]
    292e:	601a      	str	r2, [r3, #0]
}
    2930:	46c0      	nop			; (mov r8, r8)
    2932:	46bd      	mov	sp, r7
    2934:	b004      	add	sp, #16
    2936:	bd80      	pop	{r7, pc}

00002938 <hri_port_clear_OUT_reg>:
{
    2938:	b580      	push	{r7, lr}
    293a:	b084      	sub	sp, #16
    293c:	af00      	add	r7, sp, #0
    293e:	60f8      	str	r0, [r7, #12]
    2940:	607a      	str	r2, [r7, #4]
    2942:	230b      	movs	r3, #11
    2944:	18fb      	adds	r3, r7, r3
    2946:	1c0a      	adds	r2, r1, #0
    2948:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    294a:	230b      	movs	r3, #11
    294c:	18fb      	adds	r3, r7, r3
    294e:	781b      	ldrb	r3, [r3, #0]
    2950:	68fa      	ldr	r2, [r7, #12]
    2952:	01db      	lsls	r3, r3, #7
    2954:	18d3      	adds	r3, r2, r3
    2956:	3314      	adds	r3, #20
    2958:	687a      	ldr	r2, [r7, #4]
    295a:	601a      	str	r2, [r3, #0]
}
    295c:	46c0      	nop			; (mov r8, r8)
    295e:	46bd      	mov	sp, r7
    2960:	b004      	add	sp, #16
    2962:	bd80      	pop	{r7, pc}

00002964 <_gpio_set_level>:
{
    2964:	b580      	push	{r7, lr}
    2966:	b082      	sub	sp, #8
    2968:	af00      	add	r7, sp, #0
    296a:	6039      	str	r1, [r7, #0]
    296c:	0011      	movs	r1, r2
    296e:	1dfb      	adds	r3, r7, #7
    2970:	1c02      	adds	r2, r0, #0
    2972:	701a      	strb	r2, [r3, #0]
    2974:	1dbb      	adds	r3, r7, #6
    2976:	1c0a      	adds	r2, r1, #0
    2978:	701a      	strb	r2, [r3, #0]
	if (level) {
    297a:	1dbb      	adds	r3, r7, #6
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d008      	beq.n	2994 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    2982:	683a      	ldr	r2, [r7, #0]
    2984:	1dfb      	adds	r3, r7, #7
    2986:	7819      	ldrb	r1, [r3, #0]
    2988:	23c0      	movs	r3, #192	; 0xc0
    298a:	05db      	lsls	r3, r3, #23
    298c:	0018      	movs	r0, r3
    298e:	4b07      	ldr	r3, [pc, #28]	; (29ac <_gpio_set_level+0x48>)
    2990:	4798      	blx	r3
}
    2992:	e007      	b.n	29a4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    2994:	683a      	ldr	r2, [r7, #0]
    2996:	1dfb      	adds	r3, r7, #7
    2998:	7819      	ldrb	r1, [r3, #0]
    299a:	23c0      	movs	r3, #192	; 0xc0
    299c:	05db      	lsls	r3, r3, #23
    299e:	0018      	movs	r0, r3
    29a0:	4b03      	ldr	r3, [pc, #12]	; (29b0 <_gpio_set_level+0x4c>)
    29a2:	4798      	blx	r3
}
    29a4:	46c0      	nop			; (mov r8, r8)
    29a6:	46bd      	mov	sp, r7
    29a8:	b002      	add	sp, #8
    29aa:	bd80      	pop	{r7, pc}
    29ac:	0000290d 	.word	0x0000290d
    29b0:	00002939 	.word	0x00002939

000029b4 <gpio_set_pin_level>:
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
    29ba:	0002      	movs	r2, r0
    29bc:	1dfb      	adds	r3, r7, #7
    29be:	701a      	strb	r2, [r3, #0]
    29c0:	1dbb      	adds	r3, r7, #6
    29c2:	1c0a      	adds	r2, r1, #0
    29c4:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    29c6:	1dfb      	adds	r3, r7, #7
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	095b      	lsrs	r3, r3, #5
    29cc:	b2d8      	uxtb	r0, r3
    29ce:	1dfb      	adds	r3, r7, #7
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	221f      	movs	r2, #31
    29d4:	4013      	ands	r3, r2
    29d6:	2201      	movs	r2, #1
    29d8:	409a      	lsls	r2, r3
    29da:	0011      	movs	r1, r2
    29dc:	1dbb      	adds	r3, r7, #6
    29de:	781b      	ldrb	r3, [r3, #0]
    29e0:	001a      	movs	r2, r3
    29e2:	4b03      	ldr	r3, [pc, #12]	; (29f0 <gpio_set_pin_level+0x3c>)
    29e4:	4798      	blx	r3
}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	46bd      	mov	sp, r7
    29ea:	b002      	add	sp, #8
    29ec:	bd80      	pop	{r7, pc}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	00002965 	.word	0x00002965

000029f4 <main>:
	BLOCK_1_ERROR,
	BLOCK_2_ERROR,
};

int main(void)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	af00      	add	r7, sp, #0
	
	atmel_start_init();
    29f8:	4b06      	ldr	r3, [pc, #24]	; (2a14 <main+0x20>)
    29fa:	4798      	blx	r3
	
 		gpio_set_pin_level(POWER_BLOCK_1, true);
    29fc:	2101      	movs	r1, #1
    29fe:	200f      	movs	r0, #15
    2a00:	4b05      	ldr	r3, [pc, #20]	; (2a18 <main+0x24>)
    2a02:	4798      	blx	r3
 		gpio_set_pin_level(BLOCK_1_EN, true);
    2a04:	2101      	movs	r1, #1
    2a06:	2019      	movs	r0, #25
    2a08:	4b03      	ldr	r3, [pc, #12]	; (2a18 <main+0x24>)
    2a0a:	4798      	blx	r3
		 
 	temperature_sensors_init();
    2a0c:	4b03      	ldr	r3, [pc, #12]	; (2a1c <main+0x28>)
    2a0e:	4798      	blx	r3
// 		
// 		
// 		gpio_set_pin_level(MCU_1_STATUS_1, true);
// 		gpio_set_pin_level(BLOCK_2_EN, true);

	while (1) {
    2a10:	e7fe      	b.n	2a10 <main+0x1c>
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	00000115 	.word	0x00000115
    2a18:	000029b5 	.word	0x000029b5
    2a1c:	0000363d 	.word	0x0000363d

00002a20 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    2a26:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	681b      	ldr	r3, [r3, #0]
}
    2a2c:	0018      	movs	r0, r3
    2a2e:	46bd      	mov	sp, r7
    2a30:	b002      	add	sp, #8
    2a32:	bd80      	pop	{r7, pc}

00002a34 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2a34:	b580      	push	{r7, lr}
    2a36:	b082      	sub	sp, #8
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d002      	beq.n	2a48 <list_get_next_element+0x14>
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	e000      	b.n	2a4a <list_get_next_element+0x16>
    2a48:	2300      	movs	r3, #0
}
    2a4a:	0018      	movs	r0, r3
    2a4c:	46bd      	mov	sp, r7
    2a4e:	b002      	add	sp, #8
    2a50:	bd80      	pop	{r7, pc}
	...

00002a54 <sleepmgr_init>:

/**
 * \brief Initialize sleep manager
 */
void sleepmgr_init(void)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	af00      	add	r7, sp, #0
	event_subscribe(&sleepmgr_event, EVENT_PREPARE_TO_SLEEP_ID, sleepmgr_event_callback);
    2a58:	4a0a      	ldr	r2, [pc, #40]	; (2a84 <sleepmgr_init+0x30>)
    2a5a:	4b0b      	ldr	r3, [pc, #44]	; (2a88 <sleepmgr_init+0x34>)
    2a5c:	2101      	movs	r1, #1
    2a5e:	0018      	movs	r0, r3
    2a60:	4b0a      	ldr	r3, [pc, #40]	; (2a8c <sleepmgr_init+0x38>)
    2a62:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_IS_READY_TO_SLEEP_ID, sleepmgr_event_callback);
    2a64:	4a07      	ldr	r2, [pc, #28]	; (2a84 <sleepmgr_init+0x30>)
    2a66:	4b08      	ldr	r3, [pc, #32]	; (2a88 <sleepmgr_init+0x34>)
    2a68:	2100      	movs	r1, #0
    2a6a:	0018      	movs	r0, r3
    2a6c:	4b07      	ldr	r3, [pc, #28]	; (2a8c <sleepmgr_init+0x38>)
    2a6e:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_WOKEN_UP_ID, sleepmgr_event_callback);
    2a70:	4a04      	ldr	r2, [pc, #16]	; (2a84 <sleepmgr_init+0x30>)
    2a72:	4b05      	ldr	r3, [pc, #20]	; (2a88 <sleepmgr_init+0x34>)
    2a74:	2102      	movs	r1, #2
    2a76:	0018      	movs	r0, r3
    2a78:	4b04      	ldr	r3, [pc, #16]	; (2a8c <sleepmgr_init+0x38>)
    2a7a:	4798      	blx	r3
}
    2a7c:	46c0      	nop			; (mov r8, r8)
    2a7e:	46bd      	mov	sp, r7
    2a80:	bd80      	pop	{r7, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	00002ad1 	.word	0x00002ad1
    2a88:	20000074 	.word	0x20000074
    2a8c:	00000e81 	.word	0x00000e81

00002a90 <sleepmgr_register_ready_to_sleep_callback>:

/**
 * \brief Register sleep callback
 */
void sleepmgr_register_ready_to_sleep_callback(struct sleepmgr_ready_to_sleep_cb *const cb)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b082      	sub	sp, #8
    2a94:	af00      	add	r7, sp, #0
    2a96:	6078      	str	r0, [r7, #4]
	ASSERT(cb);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	1e5a      	subs	r2, r3, #1
    2a9c:	4193      	sbcs	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	4907      	ldr	r1, [pc, #28]	; (2ac0 <sleepmgr_register_ready_to_sleep_callback+0x30>)
    2aa2:	2240      	movs	r2, #64	; 0x40
    2aa4:	0018      	movs	r0, r3
    2aa6:	4b07      	ldr	r3, [pc, #28]	; (2ac4 <sleepmgr_register_ready_to_sleep_callback+0x34>)
    2aa8:	4798      	blx	r3

	list_insert_as_head(&ready_to_sleep_cbs, cb);
    2aaa:	687a      	ldr	r2, [r7, #4]
    2aac:	4b06      	ldr	r3, [pc, #24]	; (2ac8 <sleepmgr_register_ready_to_sleep_callback+0x38>)
    2aae:	0011      	movs	r1, r2
    2ab0:	0018      	movs	r0, r3
    2ab2:	4b06      	ldr	r3, [pc, #24]	; (2acc <sleepmgr_register_ready_to_sleep_callback+0x3c>)
    2ab4:	4798      	blx	r3
}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	46bd      	mov	sp, r7
    2aba:	b002      	add	sp, #8
    2abc:	bd80      	pop	{r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	0000463c 	.word	0x0000463c
    2ac4:	00000e55 	.word	0x00000e55
    2ac8:	20000080 	.word	0x20000080
    2acc:	00000fd9 	.word	0x00000fd9

00002ad0 <sleepmgr_event_callback>:
 *
 * \param[in] id The event ID to process
 * \param[in] data Not used
 */
static void sleepmgr_event_callback(event_id_t id, event_data_t data)
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b088      	sub	sp, #32
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	0002      	movs	r2, r0
    2ad8:	6039      	str	r1, [r7, #0]
    2ada:	1dfb      	adds	r3, r7, #7
    2adc:	701a      	strb	r2, [r3, #0]
	if (EVENT_IS_READY_TO_SLEEP_ID == id) {
    2ade:	1dfb      	adds	r3, r7, #7
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d12d      	bne.n	2b42 <sleepmgr_event_callback+0x72>
		struct sleepmgr_ready_to_sleep_cb *cur;
		struct sleepmgr_ready_to_sleep *   ret_val = (struct sleepmgr_ready_to_sleep *)data;
    2ae6:	683b      	ldr	r3, [r7, #0]
    2ae8:	613b      	str	r3, [r7, #16]
		struct sleepmgr_ready_to_sleep     ready;

		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    2aea:	4b32      	ldr	r3, [pc, #200]	; (2bb4 <sleepmgr_event_callback+0xe4>)
    2aec:	0018      	movs	r0, r3
    2aee:	4b32      	ldr	r3, [pc, #200]	; (2bb8 <sleepmgr_event_callback+0xe8>)
    2af0:	4798      	blx	r3
    2af2:	0003      	movs	r3, r0
    2af4:	61fb      	str	r3, [r7, #28]
    2af6:	e020      	b.n	2b3a <sleepmgr_event_callback+0x6a>
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
			ready.mode  = ret_val->mode;
    2af8:	693b      	ldr	r3, [r7, #16]
    2afa:	785a      	ldrb	r2, [r3, #1]
    2afc:	230c      	movs	r3, #12
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	705a      	strb	r2, [r3, #1]
			ready.ready = true;
    2b02:	230c      	movs	r3, #12
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	2201      	movs	r2, #1
    2b08:	701a      	strb	r2, [r3, #0]
			cur->cb(&ready);
    2b0a:	69fb      	ldr	r3, [r7, #28]
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	220c      	movs	r2, #12
    2b10:	18ba      	adds	r2, r7, r2
    2b12:	0010      	movs	r0, r2
    2b14:	4798      	blx	r3
			ret_val->ready &= ready.ready;
    2b16:	693b      	ldr	r3, [r7, #16]
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	001a      	movs	r2, r3
    2b1c:	230c      	movs	r3, #12
    2b1e:	18fb      	adds	r3, r7, r3
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	4013      	ands	r3, r2
    2b24:	1e5a      	subs	r2, r3, #1
    2b26:	4193      	sbcs	r3, r2
    2b28:	b2da      	uxtb	r2, r3
    2b2a:	693b      	ldr	r3, [r7, #16]
    2b2c:	701a      	strb	r2, [r3, #0]
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
    2b2e:	69fb      	ldr	r3, [r7, #28]
    2b30:	0018      	movs	r0, r3
    2b32:	4b22      	ldr	r3, [pc, #136]	; (2bbc <sleepmgr_event_callback+0xec>)
    2b34:	4798      	blx	r3
    2b36:	0003      	movs	r3, r0
    2b38:	61fb      	str	r3, [r7, #28]
		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    2b3a:	69fb      	ldr	r3, [r7, #28]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d1db      	bne.n	2af8 <sleepmgr_event_callback+0x28>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
			cur->cb(data);
		}
	}
}
    2b40:	e034      	b.n	2bac <sleepmgr_event_callback+0xdc>
	} else if (EVENT_WOKEN_UP_ID == id) {
    2b42:	1dfb      	adds	r3, r7, #7
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	2b02      	cmp	r3, #2
    2b48:	d116      	bne.n	2b78 <sleepmgr_event_callback+0xa8>
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    2b4a:	4b1d      	ldr	r3, [pc, #116]	; (2bc0 <sleepmgr_event_callback+0xf0>)
    2b4c:	0018      	movs	r0, r3
    2b4e:	4b1a      	ldr	r3, [pc, #104]	; (2bb8 <sleepmgr_event_callback+0xe8>)
    2b50:	4798      	blx	r3
    2b52:	0003      	movs	r3, r0
    2b54:	61bb      	str	r3, [r7, #24]
    2b56:	e00b      	b.n	2b70 <sleepmgr_event_callback+0xa0>
			cur->cb((const enum sleepmgr_wakeup_source)data);
    2b58:	69bb      	ldr	r3, [r7, #24]
    2b5a:	685b      	ldr	r3, [r3, #4]
    2b5c:	683a      	ldr	r2, [r7, #0]
    2b5e:	b2d2      	uxtb	r2, r2
    2b60:	0010      	movs	r0, r2
    2b62:	4798      	blx	r3
		     cur = (struct sleepmgr_wake_up_cb *)list_get_next_element(cur)) {
    2b64:	69bb      	ldr	r3, [r7, #24]
    2b66:	0018      	movs	r0, r3
    2b68:	4b14      	ldr	r3, [pc, #80]	; (2bbc <sleepmgr_event_callback+0xec>)
    2b6a:	4798      	blx	r3
    2b6c:	0003      	movs	r3, r0
    2b6e:	61bb      	str	r3, [r7, #24]
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    2b70:	69bb      	ldr	r3, [r7, #24]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d1f0      	bne.n	2b58 <sleepmgr_event_callback+0x88>
}
    2b76:	e019      	b.n	2bac <sleepmgr_event_callback+0xdc>
	} else if (EVENT_PREPARE_TO_SLEEP_ID == id) {
    2b78:	1dfb      	adds	r3, r7, #7
    2b7a:	781b      	ldrb	r3, [r3, #0]
    2b7c:	2b01      	cmp	r3, #1
    2b7e:	d115      	bne.n	2bac <sleepmgr_event_callback+0xdc>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    2b80:	4b10      	ldr	r3, [pc, #64]	; (2bc4 <sleepmgr_event_callback+0xf4>)
    2b82:	0018      	movs	r0, r3
    2b84:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <sleepmgr_event_callback+0xe8>)
    2b86:	4798      	blx	r3
    2b88:	0003      	movs	r3, r0
    2b8a:	617b      	str	r3, [r7, #20]
    2b8c:	e00b      	b.n	2ba6 <sleepmgr_event_callback+0xd6>
			cur->cb(data);
    2b8e:	697b      	ldr	r3, [r7, #20]
    2b90:	685b      	ldr	r3, [r3, #4]
    2b92:	683a      	ldr	r2, [r7, #0]
    2b94:	b2d2      	uxtb	r2, r2
    2b96:	0010      	movs	r0, r2
    2b98:	4798      	blx	r3
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
    2b9a:	697b      	ldr	r3, [r7, #20]
    2b9c:	0018      	movs	r0, r3
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <sleepmgr_event_callback+0xec>)
    2ba0:	4798      	blx	r3
    2ba2:	0003      	movs	r3, r0
    2ba4:	617b      	str	r3, [r7, #20]
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    2ba6:	697b      	ldr	r3, [r7, #20]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d1f0      	bne.n	2b8e <sleepmgr_event_callback+0xbe>
}
    2bac:	46c0      	nop			; (mov r8, r8)
    2bae:	46bd      	mov	sp, r7
    2bb0:	b008      	add	sp, #32
    2bb2:	bd80      	pop	{r7, pc}
    2bb4:	20000080 	.word	0x20000080
    2bb8:	00002a21 	.word	0x00002a21
    2bbc:	00002a35 	.word	0x00002a35
    2bc0:	20000088 	.word	0x20000088
    2bc4:	20000084 	.word	0x20000084

00002bc8 <sleep_cb>:
#include "sleep_manager_main.h"

static struct sleepmgr_ready_to_sleep_cb sleepmgr_cb;

static void sleep_cb(struct sleepmgr_ready_to_sleep *const ready)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b082      	sub	sp, #8
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	ready->ready = false;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2200      	movs	r2, #0
    2bd4:	701a      	strb	r2, [r3, #0]
}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	46bd      	mov	sp, r7
    2bda:	b002      	add	sp, #8
    2bdc:	bd80      	pop	{r7, pc}
	...

00002be0 <sleep_manager_init>:

void sleep_manager_init(void)
{
    2be0:	b580      	push	{r7, lr}
    2be2:	af00      	add	r7, sp, #0
	sleepmgr_init();
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <sleep_manager_init+0x1c>)
    2be6:	4798      	blx	r3

	sleepmgr_cb.cb = sleep_cb;
    2be8:	4b05      	ldr	r3, [pc, #20]	; (2c00 <sleep_manager_init+0x20>)
    2bea:	4a06      	ldr	r2, [pc, #24]	; (2c04 <sleep_manager_init+0x24>)
    2bec:	605a      	str	r2, [r3, #4]
	sleepmgr_register_ready_to_sleep_callback(&sleepmgr_cb);
    2bee:	4b04      	ldr	r3, [pc, #16]	; (2c00 <sleep_manager_init+0x20>)
    2bf0:	0018      	movs	r0, r3
    2bf2:	4b05      	ldr	r3, [pc, #20]	; (2c08 <sleep_manager_init+0x28>)
    2bf4:	4798      	blx	r3
}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	00002a55 	.word	0x00002a55
    2c00:	2000008c 	.word	0x2000008c
    2c04:	00002bc9 	.word	0x00002bc9
    2c08:	00002a91 	.word	0x00002a91

00002c0c <mcp980X_construct>:


static const struct temperature_sensor_interface mcp980x_interface = {mcp980x_read, mcp980x_config};

struct temperature_sensor *mcp980X_construct(struct temperature_sensor *const me, void *const io, const uint8_t resolution)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b086      	sub	sp, #24
    2c10:	af00      	add	r7, sp, #0
    2c12:	60f8      	str	r0, [r7, #12]
    2c14:	60b9      	str	r1, [r7, #8]
    2c16:	1dfb      	adds	r3, r7, #7
    2c18:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr;
	struct mcp980x *     mcp98 = (struct mcp980x *)me;
    2c1a:	68fb      	ldr	r3, [r7, #12]
    2c1c:	617b      	str	r3, [r7, #20]

	temperature_sensor_construct(me, io, &mcp980x_interface);
    2c1e:	4a0a      	ldr	r2, [pc, #40]	; (2c48 <mcp980X_construct+0x3c>)
    2c20:	68b9      	ldr	r1, [r7, #8]
    2c22:	68fb      	ldr	r3, [r7, #12]
    2c24:	0018      	movs	r0, r3
    2c26:	4b09      	ldr	r3, [pc, #36]	; (2c4c <mcp980X_construct+0x40>)
    2c28:	4798      	blx	r3
	descr            = (struct i2c_m_sync_desc *)(me->io);
    2c2a:	68fb      	ldr	r3, [r7, #12]
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	613b      	str	r3, [r7, #16]
	
	i2c_m_sync_set_slaveaddr(descr, CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    2c30:	2380      	movs	r3, #128	; 0x80
    2c32:	011a      	lsls	r2, r3, #4
    2c34:	693b      	ldr	r3, [r7, #16]
    2c36:	2118      	movs	r1, #24
    2c38:	0018      	movs	r0, r3
    2c3a:	4b05      	ldr	r3, [pc, #20]	; (2c50 <mcp980X_construct+0x44>)
    2c3c:	4798      	blx	r3

	return me;
    2c3e:	68fb      	ldr	r3, [r7, #12]
}
    2c40:	0018      	movs	r0, r3
    2c42:	46bd      	mov	sp, r7
    2c44:	b006      	add	sp, #24
    2c46:	bd80      	pop	{r7, pc}
    2c48:	00004660 	.word	0x00004660
    2c4c:	000035b9 	.word	0x000035b9
    2c50:	00000d6d 	.word	0x00000d6d

00002c54 <mcp980x_read>:

/**
 * \brief Read temperature from the given sensor
 */
float mcp980x_read(const struct temperature_sensor *const me)
{
    2c54:	b590      	push	{r4, r7, lr}
    2c56:	b089      	sub	sp, #36	; 0x24
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2]; 
	buffer[0]=MCP980X_TEMP_REG;
    2c5c:	230c      	movs	r3, #12
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	2205      	movs	r2, #5
    2c62:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	681b      	ldr	r3, [r3, #0]
    2c68:	61bb      	str	r3, [r7, #24]
	  
	int x = 0;
    2c6a:	2300      	movs	r3, #0
    2c6c:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(descr,CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    2c6e:	2380      	movs	r3, #128	; 0x80
    2c70:	011a      	lsls	r2, r3, #4
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	2118      	movs	r1, #24
    2c76:	0018      	movs	r0, r3
    2c78:	4b20      	ldr	r3, [pc, #128]	; (2cfc <mcp980x_read+0xa8>)
    2c7a:	4798      	blx	r3
	
	x = io_write(&descr->io, buffer, 1);
    2c7c:	69bb      	ldr	r3, [r7, #24]
    2c7e:	3314      	adds	r3, #20
    2c80:	220c      	movs	r2, #12
    2c82:	18b9      	adds	r1, r7, r2
    2c84:	2201      	movs	r2, #1
    2c86:	0018      	movs	r0, r3
    2c88:	4b1d      	ldr	r3, [pc, #116]	; (2d00 <mcp980x_read+0xac>)
    2c8a:	4798      	blx	r3
    2c8c:	0003      	movs	r3, r0
    2c8e:	617b      	str	r3, [r7, #20]
	x = io_read(&descr->io, buffer, 2);
    2c90:	69bb      	ldr	r3, [r7, #24]
    2c92:	3314      	adds	r3, #20
    2c94:	220c      	movs	r2, #12
    2c96:	18b9      	adds	r1, r7, r2
    2c98:	2202      	movs	r2, #2
    2c9a:	0018      	movs	r0, r3
    2c9c:	4b19      	ldr	r3, [pc, #100]	; (2d04 <mcp980x_read+0xb0>)
    2c9e:	4798      	blx	r3
    2ca0:	0003      	movs	r3, r0
    2ca2:	617b      	str	r3, [r7, #20]
	
	int temp = ((buffer[0] & 0x1F) * 256 + buffer[1]);
    2ca4:	230c      	movs	r3, #12
    2ca6:	18fb      	adds	r3, r7, r3
    2ca8:	781b      	ldrb	r3, [r3, #0]
    2caa:	001a      	movs	r2, r3
    2cac:	231f      	movs	r3, #31
    2cae:	4013      	ands	r3, r2
    2cb0:	021b      	lsls	r3, r3, #8
    2cb2:	220c      	movs	r2, #12
    2cb4:	18ba      	adds	r2, r7, r2
    2cb6:	7852      	ldrb	r2, [r2, #1]
    2cb8:	189b      	adds	r3, r3, r2
    2cba:	61fb      	str	r3, [r7, #28]
	if(temp > 4095)
    2cbc:	69fb      	ldr	r3, [r7, #28]
    2cbe:	4a12      	ldr	r2, [pc, #72]	; (2d08 <mcp980x_read+0xb4>)
    2cc0:	4293      	cmp	r3, r2
    2cc2:	dd04      	ble.n	2cce <mcp980x_read+0x7a>
	{
		temp -= 8192;
    2cc4:	69fb      	ldr	r3, [r7, #28]
    2cc6:	4a11      	ldr	r2, [pc, #68]	; (2d0c <mcp980x_read+0xb8>)
    2cc8:	4694      	mov	ip, r2
    2cca:	4463      	add	r3, ip
    2ccc:	61fb      	str	r3, [r7, #28]
	}
	float cTemp = temp * 0.0625;
    2cce:	4b10      	ldr	r3, [pc, #64]	; (2d10 <mcp980x_read+0xbc>)
    2cd0:	69f8      	ldr	r0, [r7, #28]
    2cd2:	4798      	blx	r3
    2cd4:	4c0f      	ldr	r4, [pc, #60]	; (2d14 <mcp980x_read+0xc0>)
    2cd6:	2200      	movs	r2, #0
    2cd8:	4b0f      	ldr	r3, [pc, #60]	; (2d18 <mcp980x_read+0xc4>)
    2cda:	47a0      	blx	r4
    2cdc:	0003      	movs	r3, r0
    2cde:	000c      	movs	r4, r1
    2ce0:	0019      	movs	r1, r3
    2ce2:	0022      	movs	r2, r4
    2ce4:	4b0d      	ldr	r3, [pc, #52]	; (2d1c <mcp980x_read+0xc8>)
    2ce6:	0008      	movs	r0, r1
    2ce8:	0011      	movs	r1, r2
    2cea:	4798      	blx	r3
    2cec:	1c03      	adds	r3, r0, #0
    2cee:	613b      	str	r3, [r7, #16]
	
	return cTemp; 
    2cf0:	693b      	ldr	r3, [r7, #16]
}
    2cf2:	1c18      	adds	r0, r3, #0
    2cf4:	46bd      	mov	sp, r7
    2cf6:	b009      	add	sp, #36	; 0x24
    2cf8:	bd90      	pop	{r4, r7, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00000d6d 	.word	0x00000d6d
    2d00:	00000dad 	.word	0x00000dad
    2d04:	00000e01 	.word	0x00000e01
    2d08:	00000fff 	.word	0x00000fff
    2d0c:	ffffe000 	.word	0xffffe000
    2d10:	000042ed 	.word	0x000042ed
    2d14:	00003ded 	.word	0x00003ded
    2d18:	3fb00000 	.word	0x3fb00000
    2d1c:	00004371 	.word	0x00004371

00002d20 <mcp980x_config>:

/**
 *  \brief setup sensor by tempereture sensor settings !!!DONT WORK  !!!! RETURN BAD VALUES !!!!!!
 */
int16_t mcp980x_config(const struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{ 
    2d20:	b580      	push	{r7, lr}
    2d22:	b082      	sub	sp, #8
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
    2d28:	6039      	str	r1, [r7, #0]
	if(_mcp980x_set_setup(me,temp_set)==MCP980X_ERROR){
    2d2a:	683a      	ldr	r2, [r7, #0]
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	0011      	movs	r1, r2
    2d30:	0018      	movs	r0, r3
    2d32:	4b1e      	ldr	r3, [pc, #120]	; (2dac <mcp980x_config+0x8c>)
    2d34:	4798      	blx	r3
    2d36:	0003      	movs	r3, r0
    2d38:	3301      	adds	r3, #1
    2d3a:	d102      	bne.n	2d42 <mcp980x_config+0x22>
		return MCP980X_ERROR;
    2d3c:	2301      	movs	r3, #1
    2d3e:	425b      	negs	r3, r3
    2d40:	e030      	b.n	2da4 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_tupper(me,temp_set)==MCP980X_ERROR){
    2d42:	683a      	ldr	r2, [r7, #0]
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	0011      	movs	r1, r2
    2d48:	0018      	movs	r0, r3
    2d4a:	4b19      	ldr	r3, [pc, #100]	; (2db0 <mcp980x_config+0x90>)
    2d4c:	4798      	blx	r3
    2d4e:	0003      	movs	r3, r0
    2d50:	3301      	adds	r3, #1
    2d52:	d102      	bne.n	2d5a <mcp980x_config+0x3a>
		return MCP980X_ERROR;
    2d54:	2301      	movs	r3, #1
    2d56:	425b      	negs	r3, r3
    2d58:	e024      	b.n	2da4 <mcp980x_config+0x84>
	}
	
	if(_mcp980x_set_lower(me,temp_set)==MCP980X_ERROR) {
    2d5a:	683a      	ldr	r2, [r7, #0]
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	0011      	movs	r1, r2
    2d60:	0018      	movs	r0, r3
    2d62:	4b14      	ldr	r3, [pc, #80]	; (2db4 <mcp980x_config+0x94>)
    2d64:	4798      	blx	r3
    2d66:	0003      	movs	r3, r0
    2d68:	3301      	adds	r3, #1
    2d6a:	d102      	bne.n	2d72 <mcp980x_config+0x52>
		return MCP980X_ERROR; 
    2d6c:	2301      	movs	r3, #1
    2d6e:	425b      	negs	r3, r3
    2d70:	e018      	b.n	2da4 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_critical(me,temp_set)==MCP980X_ERROR){
    2d72:	683a      	ldr	r2, [r7, #0]
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	0011      	movs	r1, r2
    2d78:	0018      	movs	r0, r3
    2d7a:	4b0f      	ldr	r3, [pc, #60]	; (2db8 <mcp980x_config+0x98>)
    2d7c:	4798      	blx	r3
    2d7e:	0003      	movs	r3, r0
    2d80:	3301      	adds	r3, #1
    2d82:	d102      	bne.n	2d8a <mcp980x_config+0x6a>
		return MCP980X_ERROR; 
    2d84:	2301      	movs	r3, #1
    2d86:	425b      	negs	r3, r3
    2d88:	e00c      	b.n	2da4 <mcp980x_config+0x84>
	} 
	if(_mcp980x_set_resolution(me,temp_set)==MCP980X_ERROR){
    2d8a:	683a      	ldr	r2, [r7, #0]
    2d8c:	687b      	ldr	r3, [r7, #4]
    2d8e:	0011      	movs	r1, r2
    2d90:	0018      	movs	r0, r3
    2d92:	4b0a      	ldr	r3, [pc, #40]	; (2dbc <mcp980x_config+0x9c>)
    2d94:	4798      	blx	r3
    2d96:	0003      	movs	r3, r0
    2d98:	3301      	adds	r3, #1
    2d9a:	d102      	bne.n	2da2 <mcp980x_config+0x82>
		return MCP980X_ERROR; 
    2d9c:	2301      	movs	r3, #1
    2d9e:	425b      	negs	r3, r3
    2da0:	e000      	b.n	2da4 <mcp980x_config+0x84>
	} 	
return MCP980X_ERROR_NONE; 
    2da2:	2300      	movs	r3, #0
}
    2da4:	0018      	movs	r0, r3
    2da6:	46bd      	mov	sp, r7
    2da8:	b002      	add	sp, #8
    2daa:	bd80      	pop	{r7, pc}
    2dac:	00002dc1 	.word	0x00002dc1
    2db0:	00002f85 	.word	0x00002f85
    2db4:	00003161 	.word	0x00003161
    2db8:	0000333d 	.word	0x0000333d
    2dbc:	00003519 	.word	0x00003519

00002dc0 <_mcp980x_set_setup>:

int16_t _mcp980x_set_setup(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b086      	sub	sp, #24
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(&descr->io, 0x18, I2C_M_SEVEN); 
    2dd0:	697b      	ldr	r3, [r7, #20]
    2dd2:	3314      	adds	r3, #20
    2dd4:	0018      	movs	r0, r3
    2dd6:	2380      	movs	r3, #128	; 0x80
    2dd8:	011b      	lsls	r3, r3, #4
    2dda:	001a      	movs	r2, r3
    2ddc:	2118      	movs	r1, #24
    2dde:	4b64      	ldr	r3, [pc, #400]	; (2f70 <_mcp980x_set_setup+0x1b0>)
    2de0:	4798      	blx	r3
	
	uint8_t buffer_setup[3];
	uint8_t buffer_read[2];
	
	memset(buffer_read,0,sizeof(buffer_read));
    2de2:	230c      	movs	r3, #12
    2de4:	18fb      	adds	r3, r7, r3
    2de6:	2202      	movs	r2, #2
    2de8:	2100      	movs	r1, #0
    2dea:	0018      	movs	r0, r3
    2dec:	4b61      	ldr	r3, [pc, #388]	; (2f74 <_mcp980x_set_setup+0x1b4>)
    2dee:	4798      	blx	r3
	 
	buffer_setup[0]=MCP980X_SETUP_REG; 
    2df0:	2310      	movs	r3, #16
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	2201      	movs	r2, #1
    2df6:	701a      	strb	r2, [r3, #0]
	
	buffer_setup[1] = temp_set->mcp980x->mcp980x_hysteresis << 1; 
    2df8:	683b      	ldr	r3, [r7, #0]
    2dfa:	681b      	ldr	r3, [r3, #0]
    2dfc:	7b5b      	ldrb	r3, [r3, #13]
    2dfe:	18db      	adds	r3, r3, r3
    2e00:	b2da      	uxtb	r2, r3
    2e02:	2310      	movs	r3, #16
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	705a      	strb	r2, [r3, #1]
	
	if (temp_set->mcp980x->shutdown)
    2e08:	683b      	ldr	r3, [r7, #0]
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	7bdb      	ldrb	r3, [r3, #15]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d007      	beq.n	2e22 <_mcp980x_set_setup+0x62>
	{
		buffer_setup[1] +=1;
    2e12:	2310      	movs	r3, #16
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	785b      	ldrb	r3, [r3, #1]
    2e18:	3301      	adds	r3, #1
    2e1a:	b2da      	uxtb	r2, r3
    2e1c:	2310      	movs	r3, #16
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	705a      	strb	r2, [r3, #1]
	}
	if (temp_set->mcp980x->ctr_loc)
    2e22:	683b      	ldr	r3, [r7, #0]
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	7c1b      	ldrb	r3, [r3, #16]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d009      	beq.n	2e40 <_mcp980x_set_setup+0x80>
	{
		buffer_setup[2]|=0b10000000; 
    2e2c:	2310      	movs	r3, #16
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	789b      	ldrb	r3, [r3, #2]
    2e32:	2280      	movs	r2, #128	; 0x80
    2e34:	4252      	negs	r2, r2
    2e36:	4313      	orrs	r3, r2
    2e38:	b2da      	uxtb	r2, r3
    2e3a:	2310      	movs	r3, #16
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->win_loc)
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	7c5b      	ldrb	r3, [r3, #17]
    2e46:	2b00      	cmp	r3, #0
    2e48:	d008      	beq.n	2e5c <_mcp980x_set_setup+0x9c>
	{
		buffer_setup[2]|=0b01000000; 		
    2e4a:	2310      	movs	r3, #16
    2e4c:	18fb      	adds	r3, r7, r3
    2e4e:	789b      	ldrb	r3, [r3, #2]
    2e50:	2240      	movs	r2, #64	; 0x40
    2e52:	4313      	orrs	r3, r2
    2e54:	b2da      	uxtb	r2, r3
    2e56:	2310      	movs	r3, #16
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->int_crl)
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	7c9b      	ldrb	r3, [r3, #18]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d008      	beq.n	2e78 <_mcp980x_set_setup+0xb8>
	{
		buffer_setup[2]|=0b00100000; 	
    2e66:	2310      	movs	r3, #16
    2e68:	18fb      	adds	r3, r7, r3
    2e6a:	789b      	ldrb	r3, [r3, #2]
    2e6c:	2220      	movs	r2, #32
    2e6e:	4313      	orrs	r3, r2
    2e70:	b2da      	uxtb	r2, r3
    2e72:	2310      	movs	r3, #16
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_stat)
    2e78:	683b      	ldr	r3, [r7, #0]
    2e7a:	681b      	ldr	r3, [r3, #0]
    2e7c:	7cdb      	ldrb	r3, [r3, #19]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d008      	beq.n	2e94 <_mcp980x_set_setup+0xd4>
	{
		buffer_setup[2]|=0b00010000; 	
    2e82:	2310      	movs	r3, #16
    2e84:	18fb      	adds	r3, r7, r3
    2e86:	789b      	ldrb	r3, [r3, #2]
    2e88:	2210      	movs	r2, #16
    2e8a:	4313      	orrs	r3, r2
    2e8c:	b2da      	uxtb	r2, r3
    2e8e:	2310      	movs	r3, #16
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_cnt)
    2e94:	683b      	ldr	r3, [r7, #0]
    2e96:	681b      	ldr	r3, [r3, #0]
    2e98:	7ddb      	ldrb	r3, [r3, #23]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d008      	beq.n	2eb0 <_mcp980x_set_setup+0xf0>
	{
		buffer_setup[2]|=0b00001000; 	
    2e9e:	2310      	movs	r3, #16
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	789b      	ldrb	r3, [r3, #2]
    2ea4:	2208      	movs	r2, #8
    2ea6:	4313      	orrs	r3, r2
    2ea8:	b2da      	uxtb	r2, r3
    2eaa:	2310      	movs	r3, #16
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_sel)
    2eb0:	683b      	ldr	r3, [r7, #0]
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	7d1b      	ldrb	r3, [r3, #20]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d008      	beq.n	2ecc <_mcp980x_set_setup+0x10c>
	{
		buffer_setup[2]|=0b00000100; 	
    2eba:	2310      	movs	r3, #16
    2ebc:	18fb      	adds	r3, r7, r3
    2ebe:	789b      	ldrb	r3, [r3, #2]
    2ec0:	2204      	movs	r2, #4
    2ec2:	4313      	orrs	r3, r2
    2ec4:	b2da      	uxtb	r2, r3
    2ec6:	2310      	movs	r3, #16
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_pol)
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	681b      	ldr	r3, [r3, #0]
    2ed0:	7d5b      	ldrb	r3, [r3, #21]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d008      	beq.n	2ee8 <_mcp980x_set_setup+0x128>
	{
		buffer_setup[2]|=0b00000010; 	
    2ed6:	2310      	movs	r3, #16
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	789b      	ldrb	r3, [r3, #2]
    2edc:	2202      	movs	r2, #2
    2ede:	4313      	orrs	r3, r2
    2ee0:	b2da      	uxtb	r2, r3
    2ee2:	2310      	movs	r3, #16
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_mod)
    2ee8:	683b      	ldr	r3, [r7, #0]
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	7d9b      	ldrb	r3, [r3, #22]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d008      	beq.n	2f04 <_mcp980x_set_setup+0x144>
	{
		buffer_setup[2]|=0b00000001; 	
    2ef2:	2310      	movs	r3, #16
    2ef4:	18fb      	adds	r3, r7, r3
    2ef6:	789b      	ldrb	r3, [r3, #2]
    2ef8:	2201      	movs	r2, #1
    2efa:	4313      	orrs	r3, r2
    2efc:	b2da      	uxtb	r2, r3
    2efe:	2310      	movs	r3, #16
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_setup, 3);
    2f04:	697b      	ldr	r3, [r7, #20]
    2f06:	3314      	adds	r3, #20
    2f08:	2210      	movs	r2, #16
    2f0a:	18b9      	adds	r1, r7, r2
    2f0c:	2203      	movs	r2, #3
    2f0e:	0018      	movs	r0, r3
    2f10:	4b19      	ldr	r3, [pc, #100]	; (2f78 <_mcp980x_set_setup+0x1b8>)
    2f12:	4798      	blx	r3
	delay_ms(1000); 
    2f14:	23fa      	movs	r3, #250	; 0xfa
    2f16:	009b      	lsls	r3, r3, #2
    2f18:	0018      	movs	r0, r3
    2f1a:	4b18      	ldr	r3, [pc, #96]	; (2f7c <_mcp980x_set_setup+0x1bc>)
    2f1c:	4798      	blx	r3
	io_write(&descr->io, buffer_setup, 1);
    2f1e:	697b      	ldr	r3, [r7, #20]
    2f20:	3314      	adds	r3, #20
    2f22:	2210      	movs	r2, #16
    2f24:	18b9      	adds	r1, r7, r2
    2f26:	2201      	movs	r2, #1
    2f28:	0018      	movs	r0, r3
    2f2a:	4b13      	ldr	r3, [pc, #76]	; (2f78 <_mcp980x_set_setup+0x1b8>)
    2f2c:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    2f2e:	697b      	ldr	r3, [r7, #20]
    2f30:	3314      	adds	r3, #20
    2f32:	220c      	movs	r2, #12
    2f34:	18b9      	adds	r1, r7, r2
    2f36:	2202      	movs	r2, #2
    2f38:	0018      	movs	r0, r3
    2f3a:	4b11      	ldr	r3, [pc, #68]	; (2f80 <_mcp980x_set_setup+0x1c0>)
    2f3c:	4798      	blx	r3
	
	if (buffer_setup[1]!=buffer_read[0] || buffer_setup[2]!=buffer_read[1])
    2f3e:	2310      	movs	r3, #16
    2f40:	18fb      	adds	r3, r7, r3
    2f42:	785a      	ldrb	r2, [r3, #1]
    2f44:	230c      	movs	r3, #12
    2f46:	18fb      	adds	r3, r7, r3
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	429a      	cmp	r2, r3
    2f4c:	d107      	bne.n	2f5e <_mcp980x_set_setup+0x19e>
    2f4e:	2310      	movs	r3, #16
    2f50:	18fb      	adds	r3, r7, r3
    2f52:	789a      	ldrb	r2, [r3, #2]
    2f54:	230c      	movs	r3, #12
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	785b      	ldrb	r3, [r3, #1]
    2f5a:	429a      	cmp	r2, r3
    2f5c:	d002      	beq.n	2f64 <_mcp980x_set_setup+0x1a4>
	{
		return MCP980X_ERROR;
    2f5e:	2301      	movs	r3, #1
    2f60:	425b      	negs	r3, r3
    2f62:	e000      	b.n	2f66 <_mcp980x_set_setup+0x1a6>
	}
	return MCP980X_ERROR_NONE; 
    2f64:	2300      	movs	r3, #0
}
    2f66:	0018      	movs	r0, r3
    2f68:	46bd      	mov	sp, r7
    2f6a:	b006      	add	sp, #24
    2f6c:	bd80      	pop	{r7, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00000d6d 	.word	0x00000d6d
    2f74:	00004509 	.word	0x00004509
    2f78:	00000dad 	.word	0x00000dad
    2f7c:	00000be5 	.word	0x00000be5
    2f80:	00000e01 	.word	0x00000e01

00002f84 <_mcp980x_set_tupper>:

int16_t _mcp980x_set_tupper(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    2f84:	b590      	push	{r4, r7, lr}
    2f86:	b089      	sub	sp, #36	; 0x24
    2f88:	af00      	add	r7, sp, #0
    2f8a:	6078      	str	r0, [r7, #4]
    2f8c:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	681b      	ldr	r3, [r3, #0]
    2f92:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_upper [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_upper,0,sizeof(buffer_temp_upper));
    2f94:	230c      	movs	r3, #12
    2f96:	18fb      	adds	r3, r7, r3
    2f98:	2203      	movs	r2, #3
    2f9a:	2100      	movs	r1, #0
    2f9c:	0018      	movs	r0, r3
    2f9e:	4b68      	ldr	r3, [pc, #416]	; (3140 <_mcp980x_set_tupper+0x1bc>)
    2fa0:	4798      	blx	r3
	
	buffer_temp_upper[0]=MCP980X_ALERT_TUPPER_REG; 
    2fa2:	230c      	movs	r3, #12
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	2202      	movs	r2, #2
    2fa8:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->tupper;
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	681a      	ldr	r2, [r3, #0]
    2fb0:	231e      	movs	r3, #30
    2fb2:	18fc      	adds	r4, r7, r3
    2fb4:	4b63      	ldr	r3, [pc, #396]	; (3144 <_mcp980x_set_tupper+0x1c0>)
    2fb6:	1c10      	adds	r0, r2, #0
    2fb8:	4798      	blx	r3
    2fba:	0003      	movs	r3, r0
    2fbc:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->tupper;
    2fbe:	683b      	ldr	r3, [r7, #0]
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    2fc6:	231e      	movs	r3, #30
    2fc8:	18fb      	adds	r3, r7, r3
    2fca:	2200      	movs	r2, #0
    2fcc:	5e9b      	ldrsh	r3, [r3, r2]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	da17      	bge.n	3002 <_mcp980x_set_tupper+0x7e>
	{
		buffer_temp_upper[1]|=0b0010000;
    2fd2:	230c      	movs	r3, #12
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	785b      	ldrb	r3, [r3, #1]
    2fd8:	2210      	movs	r2, #16
    2fda:	4313      	orrs	r3, r2
    2fdc:	b2da      	uxtb	r2, r3
    2fde:	230c      	movs	r3, #12
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    2fe4:	231e      	movs	r3, #30
    2fe6:	18fb      	adds	r3, r7, r3
    2fe8:	881b      	ldrh	r3, [r3, #0]
    2fea:	425b      	negs	r3, r3
    2fec:	b29a      	uxth	r2, r3
    2fee:	231e      	movs	r3, #30
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    2ff4:	683b      	ldr	r3, [r7, #0]
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	2280      	movs	r2, #128	; 0x80
    2ffc:	0612      	lsls	r2, r2, #24
    2ffe:	4053      	eors	r3, r2
    3000:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_upper[1] = temp_int >> 4;     //move to fit in register   
    3002:	231e      	movs	r3, #30
    3004:	18fb      	adds	r3, r7, r3
    3006:	2200      	movs	r2, #0
    3008:	5e9b      	ldrsh	r3, [r3, r2]
    300a:	111b      	asrs	r3, r3, #4
    300c:	b21b      	sxth	r3, r3
    300e:	b2da      	uxtb	r2, r3
    3010:	230c      	movs	r3, #12
    3012:	18fb      	adds	r3, r7, r3
    3014:	705a      	strb	r2, [r3, #1]
	buffer_temp_upper[2] = temp_int << 4;       //move to fit in register   
    3016:	231e      	movs	r3, #30
    3018:	18fb      	adds	r3, r7, r3
    301a:	881b      	ldrh	r3, [r3, #0]
    301c:	b2db      	uxtb	r3, r3
    301e:	011b      	lsls	r3, r3, #4
    3020:	b2da      	uxtb	r2, r3
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    3028:	4b46      	ldr	r3, [pc, #280]	; (3144 <_mcp980x_set_tupper+0x1c0>)
    302a:	69b8      	ldr	r0, [r7, #24]
    302c:	4798      	blx	r3
    302e:	0002      	movs	r2, r0
    3030:	4b45      	ldr	r3, [pc, #276]	; (3148 <_mcp980x_set_tupper+0x1c4>)
    3032:	0010      	movs	r0, r2
    3034:	4798      	blx	r3
    3036:	1c02      	adds	r2, r0, #0
    3038:	4b44      	ldr	r3, [pc, #272]	; (314c <_mcp980x_set_tupper+0x1c8>)
    303a:	1c11      	adds	r1, r2, #0
    303c:	69b8      	ldr	r0, [r7, #24]
    303e:	4798      	blx	r3
    3040:	1c03      	adds	r3, r0, #0
    3042:	1c1a      	adds	r2, r3, #0
    3044:	4b42      	ldr	r3, [pc, #264]	; (3150 <_mcp980x_set_tupper+0x1cc>)
    3046:	4943      	ldr	r1, [pc, #268]	; (3154 <_mcp980x_set_tupper+0x1d0>)
    3048:	1c10      	adds	r0, r2, #0
    304a:	4798      	blx	r3
    304c:	1c03      	adds	r3, r0, #0
    304e:	1c1a      	adds	r2, r3, #0
    3050:	231e      	movs	r3, #30
    3052:	18fc      	adds	r4, r7, r3
    3054:	4b3b      	ldr	r3, [pc, #236]	; (3144 <_mcp980x_set_tupper+0x1c0>)
    3056:	1c10      	adds	r0, r2, #0
    3058:	4798      	blx	r3
    305a:	0003      	movs	r3, r0
    305c:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    305e:	231e      	movs	r3, #30
    3060:	18fb      	adds	r3, r7, r3
    3062:	2200      	movs	r2, #0
    3064:	5e9b      	ldrsh	r3, [r3, r2]
    3066:	2b56      	cmp	r3, #86	; 0x56
    3068:	dc0f      	bgt.n	308a <_mcp980x_set_tupper+0x106>
    306a:	231e      	movs	r3, #30
    306c:	18fb      	adds	r3, r7, r3
    306e:	2200      	movs	r2, #0
    3070:	5e9b      	ldrsh	r3, [r3, r2]
    3072:	2b3e      	cmp	r3, #62	; 0x3e
    3074:	dd09      	ble.n	308a <_mcp980x_set_tupper+0x106>
	{
		buffer_temp_upper[2]|=0b00001100;
    3076:	230c      	movs	r3, #12
    3078:	18fb      	adds	r3, r7, r3
    307a:	789b      	ldrb	r3, [r3, #2]
    307c:	220c      	movs	r2, #12
    307e:	4313      	orrs	r3, r2
    3080:	b2da      	uxtb	r2, r3
    3082:	230c      	movs	r3, #12
    3084:	18fb      	adds	r3, r7, r3
    3086:	709a      	strb	r2, [r3, #2]
    3088:	e02a      	b.n	30e0 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    308a:	231e      	movs	r3, #30
    308c:	18fb      	adds	r3, r7, r3
    308e:	2200      	movs	r2, #0
    3090:	5e9b      	ldrsh	r3, [r3, r2]
    3092:	2b3d      	cmp	r3, #61	; 0x3d
    3094:	dc0f      	bgt.n	30b6 <_mcp980x_set_tupper+0x132>
    3096:	231e      	movs	r3, #30
    3098:	18fb      	adds	r3, r7, r3
    309a:	2200      	movs	r2, #0
    309c:	5e9b      	ldrsh	r3, [r3, r2]
    309e:	2b30      	cmp	r3, #48	; 0x30
    30a0:	dd09      	ble.n	30b6 <_mcp980x_set_tupper+0x132>
	{
		buffer_temp_upper[2]|=0b00001000;
    30a2:	230c      	movs	r3, #12
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	789b      	ldrb	r3, [r3, #2]
    30a8:	2208      	movs	r2, #8
    30aa:	4313      	orrs	r3, r2
    30ac:	b2da      	uxtb	r2, r3
    30ae:	230c      	movs	r3, #12
    30b0:	18fb      	adds	r3, r7, r3
    30b2:	709a      	strb	r2, [r3, #2]
    30b4:	e014      	b.n	30e0 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    30b6:	231e      	movs	r3, #30
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	2200      	movs	r2, #0
    30bc:	5e9b      	ldrsh	r3, [r3, r2]
    30be:	2b2f      	cmp	r3, #47	; 0x2f
    30c0:	dc0e      	bgt.n	30e0 <_mcp980x_set_tupper+0x15c>
    30c2:	231e      	movs	r3, #30
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	2200      	movs	r2, #0
    30c8:	5e9b      	ldrsh	r3, [r3, r2]
    30ca:	2b0d      	cmp	r3, #13
    30cc:	dd08      	ble.n	30e0 <_mcp980x_set_tupper+0x15c>
	{
		buffer_temp_upper[2]|=0b00000100;
    30ce:	230c      	movs	r3, #12
    30d0:	18fb      	adds	r3, r7, r3
    30d2:	789b      	ldrb	r3, [r3, #2]
    30d4:	2204      	movs	r2, #4
    30d6:	4313      	orrs	r3, r2
    30d8:	b2da      	uxtb	r2, r3
    30da:	230c      	movs	r3, #12
    30dc:	18fb      	adds	r3, r7, r3
    30de:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_upper, 3);
    30e0:	697b      	ldr	r3, [r7, #20]
    30e2:	3314      	adds	r3, #20
    30e4:	220c      	movs	r2, #12
    30e6:	18b9      	adds	r1, r7, r2
    30e8:	2203      	movs	r2, #3
    30ea:	0018      	movs	r0, r3
    30ec:	4b1a      	ldr	r3, [pc, #104]	; (3158 <_mcp980x_set_tupper+0x1d4>)
    30ee:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_upper, 1);
    30f0:	697b      	ldr	r3, [r7, #20]
    30f2:	3314      	adds	r3, #20
    30f4:	220c      	movs	r2, #12
    30f6:	18b9      	adds	r1, r7, r2
    30f8:	2201      	movs	r2, #1
    30fa:	0018      	movs	r0, r3
    30fc:	4b16      	ldr	r3, [pc, #88]	; (3158 <_mcp980x_set_tupper+0x1d4>)
    30fe:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    3100:	697b      	ldr	r3, [r7, #20]
    3102:	3314      	adds	r3, #20
    3104:	2210      	movs	r2, #16
    3106:	18b9      	adds	r1, r7, r2
    3108:	2202      	movs	r2, #2
    310a:	0018      	movs	r0, r3
    310c:	4b13      	ldr	r3, [pc, #76]	; (315c <_mcp980x_set_tupper+0x1d8>)
    310e:	4798      	blx	r3
	if (buffer_temp_upper[1]!=buffer_read[0] || buffer_temp_upper[2]!=buffer_read[1])
    3110:	230c      	movs	r3, #12
    3112:	18fb      	adds	r3, r7, r3
    3114:	785a      	ldrb	r2, [r3, #1]
    3116:	2310      	movs	r3, #16
    3118:	18fb      	adds	r3, r7, r3
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	429a      	cmp	r2, r3
    311e:	d107      	bne.n	3130 <_mcp980x_set_tupper+0x1ac>
    3120:	230c      	movs	r3, #12
    3122:	18fb      	adds	r3, r7, r3
    3124:	789a      	ldrb	r2, [r3, #2]
    3126:	2310      	movs	r3, #16
    3128:	18fb      	adds	r3, r7, r3
    312a:	785b      	ldrb	r3, [r3, #1]
    312c:	429a      	cmp	r2, r3
    312e:	d002      	beq.n	3136 <_mcp980x_set_tupper+0x1b2>
	{
		return MCP980X_ERROR;
    3130:	2301      	movs	r3, #1
    3132:	425b      	negs	r3, r3
    3134:	e000      	b.n	3138 <_mcp980x_set_tupper+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    3136:	2300      	movs	r3, #0
}
    3138:	0018      	movs	r0, r3
    313a:	46bd      	mov	sp, r7
    313c:	b009      	add	sp, #36	; 0x24
    313e:	bd90      	pop	{r4, r7, pc}
    3140:	00004509 	.word	0x00004509
    3144:	00003d0d 	.word	0x00003d0d
    3148:	00003d4d 	.word	0x00003d4d
    314c:	000039d5 	.word	0x000039d5
    3150:	00003795 	.word	0x00003795
    3154:	42c80000 	.word	0x42c80000
    3158:	00000dad 	.word	0x00000dad
    315c:	00000e01 	.word	0x00000e01

00003160 <_mcp980x_set_lower>:

int16_t _mcp980x_set_lower(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    3160:	b590      	push	{r4, r7, lr}
    3162:	b089      	sub	sp, #36	; 0x24
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_lower [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_lower,0,sizeof(buffer_temp_lower));
    3170:	230c      	movs	r3, #12
    3172:	18fb      	adds	r3, r7, r3
    3174:	2203      	movs	r2, #3
    3176:	2100      	movs	r1, #0
    3178:	0018      	movs	r0, r3
    317a:	4b68      	ldr	r3, [pc, #416]	; (331c <_mcp980x_set_lower+0x1bc>)
    317c:	4798      	blx	r3
	
	buffer_temp_lower[0]=MCP980X_ALERT_TLOWER_REG; 
    317e:	230c      	movs	r3, #12
    3180:	18fb      	adds	r3, r7, r3
    3182:	2203      	movs	r2, #3
    3184:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->lower;
    3186:	683b      	ldr	r3, [r7, #0]
    3188:	681b      	ldr	r3, [r3, #0]
    318a:	685a      	ldr	r2, [r3, #4]
    318c:	231e      	movs	r3, #30
    318e:	18fc      	adds	r4, r7, r3
    3190:	4b63      	ldr	r3, [pc, #396]	; (3320 <_mcp980x_set_lower+0x1c0>)
    3192:	1c10      	adds	r0, r2, #0
    3194:	4798      	blx	r3
    3196:	0003      	movs	r3, r0
    3198:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->lower;
    319a:	683b      	ldr	r3, [r7, #0]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	685b      	ldr	r3, [r3, #4]
    31a0:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    31a2:	231e      	movs	r3, #30
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	2200      	movs	r2, #0
    31a8:	5e9b      	ldrsh	r3, [r3, r2]
    31aa:	2b00      	cmp	r3, #0
    31ac:	da17      	bge.n	31de <_mcp980x_set_lower+0x7e>
	{
		buffer_temp_lower[1]|=0b0010000;
    31ae:	230c      	movs	r3, #12
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	785b      	ldrb	r3, [r3, #1]
    31b4:	2210      	movs	r2, #16
    31b6:	4313      	orrs	r3, r2
    31b8:	b2da      	uxtb	r2, r3
    31ba:	230c      	movs	r3, #12
    31bc:	18fb      	adds	r3, r7, r3
    31be:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    31c0:	231e      	movs	r3, #30
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	881b      	ldrh	r3, [r3, #0]
    31c6:	425b      	negs	r3, r3
    31c8:	b29a      	uxth	r2, r3
    31ca:	231e      	movs	r3, #30
    31cc:	18fb      	adds	r3, r7, r3
    31ce:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    31d0:	683b      	ldr	r3, [r7, #0]
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	681b      	ldr	r3, [r3, #0]
    31d6:	2280      	movs	r2, #128	; 0x80
    31d8:	0612      	lsls	r2, r2, #24
    31da:	4053      	eors	r3, r2
    31dc:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_lower[1] = temp_int >> 4;     //move to fit in register   
    31de:	231e      	movs	r3, #30
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	2200      	movs	r2, #0
    31e4:	5e9b      	ldrsh	r3, [r3, r2]
    31e6:	111b      	asrs	r3, r3, #4
    31e8:	b21b      	sxth	r3, r3
    31ea:	b2da      	uxtb	r2, r3
    31ec:	230c      	movs	r3, #12
    31ee:	18fb      	adds	r3, r7, r3
    31f0:	705a      	strb	r2, [r3, #1]
	buffer_temp_lower[2] = temp_int << 4;       //move to fit in register   
    31f2:	231e      	movs	r3, #30
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	881b      	ldrh	r3, [r3, #0]
    31f8:	b2db      	uxtb	r3, r3
    31fa:	011b      	lsls	r3, r3, #4
    31fc:	b2da      	uxtb	r2, r3
    31fe:	230c      	movs	r3, #12
    3200:	18fb      	adds	r3, r7, r3
    3202:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    3204:	4b46      	ldr	r3, [pc, #280]	; (3320 <_mcp980x_set_lower+0x1c0>)
    3206:	69b8      	ldr	r0, [r7, #24]
    3208:	4798      	blx	r3
    320a:	0002      	movs	r2, r0
    320c:	4b45      	ldr	r3, [pc, #276]	; (3324 <_mcp980x_set_lower+0x1c4>)
    320e:	0010      	movs	r0, r2
    3210:	4798      	blx	r3
    3212:	1c02      	adds	r2, r0, #0
    3214:	4b44      	ldr	r3, [pc, #272]	; (3328 <_mcp980x_set_lower+0x1c8>)
    3216:	1c11      	adds	r1, r2, #0
    3218:	69b8      	ldr	r0, [r7, #24]
    321a:	4798      	blx	r3
    321c:	1c03      	adds	r3, r0, #0
    321e:	1c1a      	adds	r2, r3, #0
    3220:	4b42      	ldr	r3, [pc, #264]	; (332c <_mcp980x_set_lower+0x1cc>)
    3222:	4943      	ldr	r1, [pc, #268]	; (3330 <_mcp980x_set_lower+0x1d0>)
    3224:	1c10      	adds	r0, r2, #0
    3226:	4798      	blx	r3
    3228:	1c03      	adds	r3, r0, #0
    322a:	1c1a      	adds	r2, r3, #0
    322c:	231e      	movs	r3, #30
    322e:	18fc      	adds	r4, r7, r3
    3230:	4b3b      	ldr	r3, [pc, #236]	; (3320 <_mcp980x_set_lower+0x1c0>)
    3232:	1c10      	adds	r0, r2, #0
    3234:	4798      	blx	r3
    3236:	0003      	movs	r3, r0
    3238:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    323a:	231e      	movs	r3, #30
    323c:	18fb      	adds	r3, r7, r3
    323e:	2200      	movs	r2, #0
    3240:	5e9b      	ldrsh	r3, [r3, r2]
    3242:	2b56      	cmp	r3, #86	; 0x56
    3244:	dc0f      	bgt.n	3266 <_mcp980x_set_lower+0x106>
    3246:	231e      	movs	r3, #30
    3248:	18fb      	adds	r3, r7, r3
    324a:	2200      	movs	r2, #0
    324c:	5e9b      	ldrsh	r3, [r3, r2]
    324e:	2b3e      	cmp	r3, #62	; 0x3e
    3250:	dd09      	ble.n	3266 <_mcp980x_set_lower+0x106>
	{
		buffer_temp_lower[2]|=0b00001100;
    3252:	230c      	movs	r3, #12
    3254:	18fb      	adds	r3, r7, r3
    3256:	789b      	ldrb	r3, [r3, #2]
    3258:	220c      	movs	r2, #12
    325a:	4313      	orrs	r3, r2
    325c:	b2da      	uxtb	r2, r3
    325e:	230c      	movs	r3, #12
    3260:	18fb      	adds	r3, r7, r3
    3262:	709a      	strb	r2, [r3, #2]
    3264:	e02a      	b.n	32bc <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    3266:	231e      	movs	r3, #30
    3268:	18fb      	adds	r3, r7, r3
    326a:	2200      	movs	r2, #0
    326c:	5e9b      	ldrsh	r3, [r3, r2]
    326e:	2b3d      	cmp	r3, #61	; 0x3d
    3270:	dc0f      	bgt.n	3292 <_mcp980x_set_lower+0x132>
    3272:	231e      	movs	r3, #30
    3274:	18fb      	adds	r3, r7, r3
    3276:	2200      	movs	r2, #0
    3278:	5e9b      	ldrsh	r3, [r3, r2]
    327a:	2b30      	cmp	r3, #48	; 0x30
    327c:	dd09      	ble.n	3292 <_mcp980x_set_lower+0x132>
	{
		buffer_temp_lower[2]|=0b00001000;
    327e:	230c      	movs	r3, #12
    3280:	18fb      	adds	r3, r7, r3
    3282:	789b      	ldrb	r3, [r3, #2]
    3284:	2208      	movs	r2, #8
    3286:	4313      	orrs	r3, r2
    3288:	b2da      	uxtb	r2, r3
    328a:	230c      	movs	r3, #12
    328c:	18fb      	adds	r3, r7, r3
    328e:	709a      	strb	r2, [r3, #2]
    3290:	e014      	b.n	32bc <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    3292:	231e      	movs	r3, #30
    3294:	18fb      	adds	r3, r7, r3
    3296:	2200      	movs	r2, #0
    3298:	5e9b      	ldrsh	r3, [r3, r2]
    329a:	2b2f      	cmp	r3, #47	; 0x2f
    329c:	dc0e      	bgt.n	32bc <_mcp980x_set_lower+0x15c>
    329e:	231e      	movs	r3, #30
    32a0:	18fb      	adds	r3, r7, r3
    32a2:	2200      	movs	r2, #0
    32a4:	5e9b      	ldrsh	r3, [r3, r2]
    32a6:	2b0d      	cmp	r3, #13
    32a8:	dd08      	ble.n	32bc <_mcp980x_set_lower+0x15c>
	{
		buffer_temp_lower[2]|=0b00000100;
    32aa:	230c      	movs	r3, #12
    32ac:	18fb      	adds	r3, r7, r3
    32ae:	789b      	ldrb	r3, [r3, #2]
    32b0:	2204      	movs	r2, #4
    32b2:	4313      	orrs	r3, r2
    32b4:	b2da      	uxtb	r2, r3
    32b6:	230c      	movs	r3, #12
    32b8:	18fb      	adds	r3, r7, r3
    32ba:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_lower, 3);
    32bc:	697b      	ldr	r3, [r7, #20]
    32be:	3314      	adds	r3, #20
    32c0:	220c      	movs	r2, #12
    32c2:	18b9      	adds	r1, r7, r2
    32c4:	2203      	movs	r2, #3
    32c6:	0018      	movs	r0, r3
    32c8:	4b1a      	ldr	r3, [pc, #104]	; (3334 <_mcp980x_set_lower+0x1d4>)
    32ca:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_lower, 1);
    32cc:	697b      	ldr	r3, [r7, #20]
    32ce:	3314      	adds	r3, #20
    32d0:	220c      	movs	r2, #12
    32d2:	18b9      	adds	r1, r7, r2
    32d4:	2201      	movs	r2, #1
    32d6:	0018      	movs	r0, r3
    32d8:	4b16      	ldr	r3, [pc, #88]	; (3334 <_mcp980x_set_lower+0x1d4>)
    32da:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    32dc:	697b      	ldr	r3, [r7, #20]
    32de:	3314      	adds	r3, #20
    32e0:	2210      	movs	r2, #16
    32e2:	18b9      	adds	r1, r7, r2
    32e4:	2202      	movs	r2, #2
    32e6:	0018      	movs	r0, r3
    32e8:	4b13      	ldr	r3, [pc, #76]	; (3338 <_mcp980x_set_lower+0x1d8>)
    32ea:	4798      	blx	r3
	if (buffer_temp_lower[1]!=buffer_read[0] || buffer_temp_lower[2]!=buffer_read[1])
    32ec:	230c      	movs	r3, #12
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	785a      	ldrb	r2, [r3, #1]
    32f2:	2310      	movs	r3, #16
    32f4:	18fb      	adds	r3, r7, r3
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	429a      	cmp	r2, r3
    32fa:	d107      	bne.n	330c <_mcp980x_set_lower+0x1ac>
    32fc:	230c      	movs	r3, #12
    32fe:	18fb      	adds	r3, r7, r3
    3300:	789a      	ldrb	r2, [r3, #2]
    3302:	2310      	movs	r3, #16
    3304:	18fb      	adds	r3, r7, r3
    3306:	785b      	ldrb	r3, [r3, #1]
    3308:	429a      	cmp	r2, r3
    330a:	d002      	beq.n	3312 <_mcp980x_set_lower+0x1b2>
	{
		return MCP980X_ERROR;
    330c:	2301      	movs	r3, #1
    330e:	425b      	negs	r3, r3
    3310:	e000      	b.n	3314 <_mcp980x_set_lower+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    3312:	2300      	movs	r3, #0
}
    3314:	0018      	movs	r0, r3
    3316:	46bd      	mov	sp, r7
    3318:	b009      	add	sp, #36	; 0x24
    331a:	bd90      	pop	{r4, r7, pc}
    331c:	00004509 	.word	0x00004509
    3320:	00003d0d 	.word	0x00003d0d
    3324:	00003d4d 	.word	0x00003d4d
    3328:	000039d5 	.word	0x000039d5
    332c:	00003795 	.word	0x00003795
    3330:	42c80000 	.word	0x42c80000
    3334:	00000dad 	.word	0x00000dad
    3338:	00000e01 	.word	0x00000e01

0000333c <_mcp980x_set_critical>:

int16_t _mcp980x_set_critical(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    333c:	b590      	push	{r4, r7, lr}
    333e:	b089      	sub	sp, #36	; 0x24
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
    3344:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_critical [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_critical,0,sizeof(buffer_temp_critical));
    334c:	230c      	movs	r3, #12
    334e:	18fb      	adds	r3, r7, r3
    3350:	2203      	movs	r2, #3
    3352:	2100      	movs	r1, #0
    3354:	0018      	movs	r0, r3
    3356:	4b68      	ldr	r3, [pc, #416]	; (34f8 <_mcp980x_set_critical+0x1bc>)
    3358:	4798      	blx	r3
	
	buffer_temp_critical[0]=MCP980X_ALERT_TLOWER_REG; 
    335a:	230c      	movs	r3, #12
    335c:	18fb      	adds	r3, r7, r3
    335e:	2203      	movs	r2, #3
    3360:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->critical;
    3362:	683b      	ldr	r3, [r7, #0]
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	689a      	ldr	r2, [r3, #8]
    3368:	231e      	movs	r3, #30
    336a:	18fc      	adds	r4, r7, r3
    336c:	4b63      	ldr	r3, [pc, #396]	; (34fc <_mcp980x_set_critical+0x1c0>)
    336e:	1c10      	adds	r0, r2, #0
    3370:	4798      	blx	r3
    3372:	0003      	movs	r3, r0
    3374:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->critical;
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	689b      	ldr	r3, [r3, #8]
    337c:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    337e:	231e      	movs	r3, #30
    3380:	18fb      	adds	r3, r7, r3
    3382:	2200      	movs	r2, #0
    3384:	5e9b      	ldrsh	r3, [r3, r2]
    3386:	2b00      	cmp	r3, #0
    3388:	da17      	bge.n	33ba <_mcp980x_set_critical+0x7e>
	{
		buffer_temp_critical[1]|=0b0010000;
    338a:	230c      	movs	r3, #12
    338c:	18fb      	adds	r3, r7, r3
    338e:	785b      	ldrb	r3, [r3, #1]
    3390:	2210      	movs	r2, #16
    3392:	4313      	orrs	r3, r2
    3394:	b2da      	uxtb	r2, r3
    3396:	230c      	movs	r3, #12
    3398:	18fb      	adds	r3, r7, r3
    339a:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    339c:	231e      	movs	r3, #30
    339e:	18fb      	adds	r3, r7, r3
    33a0:	881b      	ldrh	r3, [r3, #0]
    33a2:	425b      	negs	r3, r3
    33a4:	b29a      	uxth	r2, r3
    33a6:	231e      	movs	r3, #30
    33a8:	18fb      	adds	r3, r7, r3
    33aa:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    33ac:	683b      	ldr	r3, [r7, #0]
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	2280      	movs	r2, #128	; 0x80
    33b4:	0612      	lsls	r2, r2, #24
    33b6:	4053      	eors	r3, r2
    33b8:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_critical[1] = temp_int >> 4;     //move to fit in register   
    33ba:	231e      	movs	r3, #30
    33bc:	18fb      	adds	r3, r7, r3
    33be:	2200      	movs	r2, #0
    33c0:	5e9b      	ldrsh	r3, [r3, r2]
    33c2:	111b      	asrs	r3, r3, #4
    33c4:	b21b      	sxth	r3, r3
    33c6:	b2da      	uxtb	r2, r3
    33c8:	230c      	movs	r3, #12
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	705a      	strb	r2, [r3, #1]
	buffer_temp_critical[2] = temp_int << 4;       //move to fit in register   
    33ce:	231e      	movs	r3, #30
    33d0:	18fb      	adds	r3, r7, r3
    33d2:	881b      	ldrh	r3, [r3, #0]
    33d4:	b2db      	uxtb	r3, r3
    33d6:	011b      	lsls	r3, r3, #4
    33d8:	b2da      	uxtb	r2, r3
    33da:	230c      	movs	r3, #12
    33dc:	18fb      	adds	r3, r7, r3
    33de:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    33e0:	4b46      	ldr	r3, [pc, #280]	; (34fc <_mcp980x_set_critical+0x1c0>)
    33e2:	69b8      	ldr	r0, [r7, #24]
    33e4:	4798      	blx	r3
    33e6:	0002      	movs	r2, r0
    33e8:	4b45      	ldr	r3, [pc, #276]	; (3500 <_mcp980x_set_critical+0x1c4>)
    33ea:	0010      	movs	r0, r2
    33ec:	4798      	blx	r3
    33ee:	1c02      	adds	r2, r0, #0
    33f0:	4b44      	ldr	r3, [pc, #272]	; (3504 <_mcp980x_set_critical+0x1c8>)
    33f2:	1c11      	adds	r1, r2, #0
    33f4:	69b8      	ldr	r0, [r7, #24]
    33f6:	4798      	blx	r3
    33f8:	1c03      	adds	r3, r0, #0
    33fa:	1c1a      	adds	r2, r3, #0
    33fc:	4b42      	ldr	r3, [pc, #264]	; (3508 <_mcp980x_set_critical+0x1cc>)
    33fe:	4943      	ldr	r1, [pc, #268]	; (350c <_mcp980x_set_critical+0x1d0>)
    3400:	1c10      	adds	r0, r2, #0
    3402:	4798      	blx	r3
    3404:	1c03      	adds	r3, r0, #0
    3406:	1c1a      	adds	r2, r3, #0
    3408:	231e      	movs	r3, #30
    340a:	18fc      	adds	r4, r7, r3
    340c:	4b3b      	ldr	r3, [pc, #236]	; (34fc <_mcp980x_set_critical+0x1c0>)
    340e:	1c10      	adds	r0, r2, #0
    3410:	4798      	blx	r3
    3412:	0003      	movs	r3, r0
    3414:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    3416:	231e      	movs	r3, #30
    3418:	18fb      	adds	r3, r7, r3
    341a:	2200      	movs	r2, #0
    341c:	5e9b      	ldrsh	r3, [r3, r2]
    341e:	2b56      	cmp	r3, #86	; 0x56
    3420:	dc0f      	bgt.n	3442 <_mcp980x_set_critical+0x106>
    3422:	231e      	movs	r3, #30
    3424:	18fb      	adds	r3, r7, r3
    3426:	2200      	movs	r2, #0
    3428:	5e9b      	ldrsh	r3, [r3, r2]
    342a:	2b3e      	cmp	r3, #62	; 0x3e
    342c:	dd09      	ble.n	3442 <_mcp980x_set_critical+0x106>
	{
		buffer_temp_critical[2]|=0b00001100;
    342e:	230c      	movs	r3, #12
    3430:	18fb      	adds	r3, r7, r3
    3432:	789b      	ldrb	r3, [r3, #2]
    3434:	220c      	movs	r2, #12
    3436:	4313      	orrs	r3, r2
    3438:	b2da      	uxtb	r2, r3
    343a:	230c      	movs	r3, #12
    343c:	18fb      	adds	r3, r7, r3
    343e:	709a      	strb	r2, [r3, #2]
    3440:	e02a      	b.n	3498 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    3442:	231e      	movs	r3, #30
    3444:	18fb      	adds	r3, r7, r3
    3446:	2200      	movs	r2, #0
    3448:	5e9b      	ldrsh	r3, [r3, r2]
    344a:	2b3d      	cmp	r3, #61	; 0x3d
    344c:	dc0f      	bgt.n	346e <_mcp980x_set_critical+0x132>
    344e:	231e      	movs	r3, #30
    3450:	18fb      	adds	r3, r7, r3
    3452:	2200      	movs	r2, #0
    3454:	5e9b      	ldrsh	r3, [r3, r2]
    3456:	2b30      	cmp	r3, #48	; 0x30
    3458:	dd09      	ble.n	346e <_mcp980x_set_critical+0x132>
	{
		buffer_temp_critical[2]|=0b00001000;
    345a:	230c      	movs	r3, #12
    345c:	18fb      	adds	r3, r7, r3
    345e:	789b      	ldrb	r3, [r3, #2]
    3460:	2208      	movs	r2, #8
    3462:	4313      	orrs	r3, r2
    3464:	b2da      	uxtb	r2, r3
    3466:	230c      	movs	r3, #12
    3468:	18fb      	adds	r3, r7, r3
    346a:	709a      	strb	r2, [r3, #2]
    346c:	e014      	b.n	3498 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    346e:	231e      	movs	r3, #30
    3470:	18fb      	adds	r3, r7, r3
    3472:	2200      	movs	r2, #0
    3474:	5e9b      	ldrsh	r3, [r3, r2]
    3476:	2b2f      	cmp	r3, #47	; 0x2f
    3478:	dc0e      	bgt.n	3498 <_mcp980x_set_critical+0x15c>
    347a:	231e      	movs	r3, #30
    347c:	18fb      	adds	r3, r7, r3
    347e:	2200      	movs	r2, #0
    3480:	5e9b      	ldrsh	r3, [r3, r2]
    3482:	2b0d      	cmp	r3, #13
    3484:	dd08      	ble.n	3498 <_mcp980x_set_critical+0x15c>
	{
		buffer_temp_critical[2]|=0b00000100;
    3486:	230c      	movs	r3, #12
    3488:	18fb      	adds	r3, r7, r3
    348a:	789b      	ldrb	r3, [r3, #2]
    348c:	2204      	movs	r2, #4
    348e:	4313      	orrs	r3, r2
    3490:	b2da      	uxtb	r2, r3
    3492:	230c      	movs	r3, #12
    3494:	18fb      	adds	r3, r7, r3
    3496:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_critical, 3);
    3498:	697b      	ldr	r3, [r7, #20]
    349a:	3314      	adds	r3, #20
    349c:	220c      	movs	r2, #12
    349e:	18b9      	adds	r1, r7, r2
    34a0:	2203      	movs	r2, #3
    34a2:	0018      	movs	r0, r3
    34a4:	4b1a      	ldr	r3, [pc, #104]	; (3510 <_mcp980x_set_critical+0x1d4>)
    34a6:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_critical, 1);
    34a8:	697b      	ldr	r3, [r7, #20]
    34aa:	3314      	adds	r3, #20
    34ac:	220c      	movs	r2, #12
    34ae:	18b9      	adds	r1, r7, r2
    34b0:	2201      	movs	r2, #1
    34b2:	0018      	movs	r0, r3
    34b4:	4b16      	ldr	r3, [pc, #88]	; (3510 <_mcp980x_set_critical+0x1d4>)
    34b6:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    34b8:	697b      	ldr	r3, [r7, #20]
    34ba:	3314      	adds	r3, #20
    34bc:	2210      	movs	r2, #16
    34be:	18b9      	adds	r1, r7, r2
    34c0:	2202      	movs	r2, #2
    34c2:	0018      	movs	r0, r3
    34c4:	4b13      	ldr	r3, [pc, #76]	; (3514 <_mcp980x_set_critical+0x1d8>)
    34c6:	4798      	blx	r3
	if (buffer_temp_critical[1]!=buffer_read[0] || buffer_temp_critical[2]!=buffer_read[1])
    34c8:	230c      	movs	r3, #12
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	785a      	ldrb	r2, [r3, #1]
    34ce:	2310      	movs	r3, #16
    34d0:	18fb      	adds	r3, r7, r3
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	429a      	cmp	r2, r3
    34d6:	d107      	bne.n	34e8 <_mcp980x_set_critical+0x1ac>
    34d8:	230c      	movs	r3, #12
    34da:	18fb      	adds	r3, r7, r3
    34dc:	789a      	ldrb	r2, [r3, #2]
    34de:	2310      	movs	r3, #16
    34e0:	18fb      	adds	r3, r7, r3
    34e2:	785b      	ldrb	r3, [r3, #1]
    34e4:	429a      	cmp	r2, r3
    34e6:	d002      	beq.n	34ee <_mcp980x_set_critical+0x1b2>
	{
		return MCP980X_ERROR;
    34e8:	2301      	movs	r3, #1
    34ea:	425b      	negs	r3, r3
    34ec:	e000      	b.n	34f0 <_mcp980x_set_critical+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    34ee:	2300      	movs	r3, #0
}
    34f0:	0018      	movs	r0, r3
    34f2:	46bd      	mov	sp, r7
    34f4:	b009      	add	sp, #36	; 0x24
    34f6:	bd90      	pop	{r4, r7, pc}
    34f8:	00004509 	.word	0x00004509
    34fc:	00003d0d 	.word	0x00003d0d
    3500:	00003d4d 	.word	0x00003d4d
    3504:	000039d5 	.word	0x000039d5
    3508:	00003795 	.word	0x00003795
    350c:	42c80000 	.word	0x42c80000
    3510:	00000dad 	.word	0x00000dad
    3514:	00000e01 	.word	0x00000e01

00003518 <_mcp980x_set_resolution>:

int16_t _mcp980x_set_resolution(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set){
    3518:	b580      	push	{r7, lr}
    351a:	b086      	sub	sp, #24
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
    3520:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	617b      	str	r3, [r7, #20]
	
	uint8_t buffer_read[2]; 
	uint8_t buffer_resolution[3]; 
	

	memset(buffer_resolution,0,sizeof(buffer_resolution));
    3528:	230c      	movs	r3, #12
    352a:	18fb      	adds	r3, r7, r3
    352c:	2203      	movs	r2, #3
    352e:	2100      	movs	r1, #0
    3530:	0018      	movs	r0, r3
    3532:	4b1e      	ldr	r3, [pc, #120]	; (35ac <_mcp980x_set_resolution+0x94>)
    3534:	4798      	blx	r3

	buffer_resolution[0] = MCP980X_RESOLUTION_REG; 
    3536:	230c      	movs	r3, #12
    3538:	18fb      	adds	r3, r7, r3
    353a:	2208      	movs	r2, #8
    353c:	701a      	strb	r2, [r3, #0]
	buffer_resolution[2] = temp_set->mcp980x->mcp980x_resolution;
    353e:	683b      	ldr	r3, [r7, #0]
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	7b9a      	ldrb	r2, [r3, #14]
    3544:	230c      	movs	r3, #12
    3546:	18fb      	adds	r3, r7, r3
    3548:	709a      	strb	r2, [r3, #2]
	 
	io_write(&descr->io, buffer_resolution, 3);
    354a:	697b      	ldr	r3, [r7, #20]
    354c:	3314      	adds	r3, #20
    354e:	220c      	movs	r2, #12
    3550:	18b9      	adds	r1, r7, r2
    3552:	2203      	movs	r2, #3
    3554:	0018      	movs	r0, r3
    3556:	4b16      	ldr	r3, [pc, #88]	; (35b0 <_mcp980x_set_resolution+0x98>)
    3558:	4798      	blx	r3
	
	io_write(&descr->io, buffer_resolution, 1);
    355a:	697b      	ldr	r3, [r7, #20]
    355c:	3314      	adds	r3, #20
    355e:	220c      	movs	r2, #12
    3560:	18b9      	adds	r1, r7, r2
    3562:	2201      	movs	r2, #1
    3564:	0018      	movs	r0, r3
    3566:	4b12      	ldr	r3, [pc, #72]	; (35b0 <_mcp980x_set_resolution+0x98>)
    3568:	4798      	blx	r3
	io_read(&descr->io, buffer_resolution, 2);
    356a:	697b      	ldr	r3, [r7, #20]
    356c:	3314      	adds	r3, #20
    356e:	220c      	movs	r2, #12
    3570:	18b9      	adds	r1, r7, r2
    3572:	2202      	movs	r2, #2
    3574:	0018      	movs	r0, r3
    3576:	4b0f      	ldr	r3, [pc, #60]	; (35b4 <_mcp980x_set_resolution+0x9c>)
    3578:	4798      	blx	r3
	if (buffer_resolution[1]!=buffer_read[0] || buffer_resolution[2]!=buffer_read[1])
    357a:	230c      	movs	r3, #12
    357c:	18fb      	adds	r3, r7, r3
    357e:	785a      	ldrb	r2, [r3, #1]
    3580:	2310      	movs	r3, #16
    3582:	18fb      	adds	r3, r7, r3
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	429a      	cmp	r2, r3
    3588:	d107      	bne.n	359a <_mcp980x_set_resolution+0x82>
    358a:	230c      	movs	r3, #12
    358c:	18fb      	adds	r3, r7, r3
    358e:	789a      	ldrb	r2, [r3, #2]
    3590:	2310      	movs	r3, #16
    3592:	18fb      	adds	r3, r7, r3
    3594:	785b      	ldrb	r3, [r3, #1]
    3596:	429a      	cmp	r2, r3
    3598:	d002      	beq.n	35a0 <_mcp980x_set_resolution+0x88>
	{
		return MCP980X_ERROR;
    359a:	2301      	movs	r3, #1
    359c:	425b      	negs	r3, r3
    359e:	e000      	b.n	35a2 <_mcp980x_set_resolution+0x8a>
	}
	return MCP980X_ERROR_NONE; 
    35a0:	2300      	movs	r3, #0
    35a2:	0018      	movs	r0, r3
    35a4:	46bd      	mov	sp, r7
    35a6:	b006      	add	sp, #24
    35a8:	bd80      	pop	{r7, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	00004509 	.word	0x00004509
    35b0:	00000dad 	.word	0x00000dad
    35b4:	00000e01 	.word	0x00000e01

000035b8 <temperature_sensor_construct>:
/**
 * \brief Construct abstract temperature sensor
 */
struct temperature_sensor *temperature_sensor_construct(struct temperature_sensor *const me, void *const io,
                                                        const struct temperature_sensor_interface *const interface)
{
    35b8:	b580      	push	{r7, lr}
    35ba:	b084      	sub	sp, #16
    35bc:	af00      	add	r7, sp, #0
    35be:	60f8      	str	r0, [r7, #12]
    35c0:	60b9      	str	r1, [r7, #8]
    35c2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    35c4:	68fb      	ldr	r3, [r7, #12]
    35c6:	68ba      	ldr	r2, [r7, #8]
    35c8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    35ca:	68fb      	ldr	r3, [r7, #12]
    35cc:	687a      	ldr	r2, [r7, #4]
    35ce:	605a      	str	r2, [r3, #4]

	return me;
    35d0:	68fb      	ldr	r3, [r7, #12]
}
    35d2:	0018      	movs	r0, r3
    35d4:	46bd      	mov	sp, r7
    35d6:	b004      	add	sp, #16
    35d8:	bd80      	pop	{r7, pc}

000035da <temperature_sensor_read>:

/**
 * \brief Read temperature from the given sensor
 */
float temperature_sensor_read(const struct temperature_sensor *const me)
{
    35da:	b580      	push	{r7, lr}
    35dc:	b082      	sub	sp, #8
    35de:	af00      	add	r7, sp, #0
    35e0:	6078      	str	r0, [r7, #4]
	return me->interface->read(me);
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	685b      	ldr	r3, [r3, #4]
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	687a      	ldr	r2, [r7, #4]
    35ea:	0010      	movs	r0, r2
    35ec:	4798      	blx	r3
    35ee:	1c03      	adds	r3, r0, #0
}
    35f0:	1c18      	adds	r0, r3, #0
    35f2:	46bd      	mov	sp, r7
    35f4:	b002      	add	sp, #8
    35f6:	bd80      	pop	{r7, pc}

000035f8 <read>:
	
	
	return address_counter;
}

void read() {
    35f8:	b580      	push	{r7, lr}
    35fa:	4f0c      	ldr	r7, [pc, #48]	; (362c <read+0x34>)
    35fc:	44bd      	add	sp, r7
    35fe:	af00      	add	r7, sp, #0

	
 	int buf[128];
// 	i2c_m_scan(&I2C_OUT, &buf);
 
 	float x = temperature_sensor_read(TEMPERATURE_mcp980x);
    3600:	4b0b      	ldr	r3, [pc, #44]	; (3630 <read+0x38>)
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	0018      	movs	r0, r3
    3606:	4b0b      	ldr	r3, [pc, #44]	; (3634 <read+0x3c>)
    3608:	4798      	blx	r3
    360a:	1c03      	adds	r3, r0, #0
    360c:	2281      	movs	r2, #129	; 0x81
    360e:	0092      	lsls	r2, r2, #2
    3610:	18ba      	adds	r2, r7, r2
    3612:	6013      	str	r3, [r2, #0]
 	delay_ms(1000);
    3614:	23fa      	movs	r3, #250	; 0xfa
    3616:	009b      	lsls	r3, r3, #2
    3618:	0018      	movs	r0, r3
    361a:	4b07      	ldr	r3, [pc, #28]	; (3638 <read+0x40>)
    361c:	4798      	blx	r3
}
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	46bd      	mov	sp, r7
    3622:	2382      	movs	r3, #130	; 0x82
    3624:	009b      	lsls	r3, r3, #2
    3626:	449d      	add	sp, r3
    3628:	bd80      	pop	{r7, pc}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	fffffdf8 	.word	0xfffffdf8
    3630:	200001a4 	.word	0x200001a4
    3634:	000035db 	.word	0x000035db
    3638:	00000be5 	.word	0x00000be5

0000363c <temperature_sensors_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void temperature_sensors_init(void)
{
    363c:	b580      	push	{r7, lr}
    363e:	af00      	add	r7, sp, #0
 	i2c_m_sync_enable(&I2C_OUT);
    3640:	4b08      	ldr	r3, [pc, #32]	; (3664 <temperature_sensors_init+0x28>)
    3642:	0018      	movs	r0, r3
    3644:	4b08      	ldr	r3, [pc, #32]	; (3668 <temperature_sensors_init+0x2c>)
    3646:	4798      	blx	r3
 	TEMPERATURE_mcp980x = mcp980X_construct(&TEMPERATURE_SENSOR_descr_mcp.parent, &I2C_OUT, CONF_MCP980X_SENSOR_RESOLUTION);
    3648:	4906      	ldr	r1, [pc, #24]	; (3664 <temperature_sensors_init+0x28>)
    364a:	4b08      	ldr	r3, [pc, #32]	; (366c <temperature_sensors_init+0x30>)
    364c:	2202      	movs	r2, #2
    364e:	0018      	movs	r0, r3
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <temperature_sensors_init+0x34>)
    3652:	4798      	blx	r3
    3654:	0002      	movs	r2, r0
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <temperature_sensors_init+0x38>)
    3658:	601a      	str	r2, [r3, #0]
	read();
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <temperature_sensors_init+0x3c>)
    365c:	4798      	blx	r3
    365e:	46c0      	nop			; (mov r8, r8)
    3660:	46bd      	mov	sp, r7
    3662:	bd80      	pop	{r7, pc}
    3664:	200000e8 	.word	0x200000e8
    3668:	00000d4d 	.word	0x00000d4d
    366c:	20000094 	.word	0x20000094
    3670:	00002c0d 	.word	0x00002c0d
    3674:	200001a4 	.word	0x200001a4
    3678:	000035f9 	.word	0x000035f9

0000367c <__udivsi3>:
    367c:	2200      	movs	r2, #0
    367e:	0843      	lsrs	r3, r0, #1
    3680:	428b      	cmp	r3, r1
    3682:	d374      	bcc.n	376e <__udivsi3+0xf2>
    3684:	0903      	lsrs	r3, r0, #4
    3686:	428b      	cmp	r3, r1
    3688:	d35f      	bcc.n	374a <__udivsi3+0xce>
    368a:	0a03      	lsrs	r3, r0, #8
    368c:	428b      	cmp	r3, r1
    368e:	d344      	bcc.n	371a <__udivsi3+0x9e>
    3690:	0b03      	lsrs	r3, r0, #12
    3692:	428b      	cmp	r3, r1
    3694:	d328      	bcc.n	36e8 <__udivsi3+0x6c>
    3696:	0c03      	lsrs	r3, r0, #16
    3698:	428b      	cmp	r3, r1
    369a:	d30d      	bcc.n	36b8 <__udivsi3+0x3c>
    369c:	22ff      	movs	r2, #255	; 0xff
    369e:	0209      	lsls	r1, r1, #8
    36a0:	ba12      	rev	r2, r2
    36a2:	0c03      	lsrs	r3, r0, #16
    36a4:	428b      	cmp	r3, r1
    36a6:	d302      	bcc.n	36ae <__udivsi3+0x32>
    36a8:	1212      	asrs	r2, r2, #8
    36aa:	0209      	lsls	r1, r1, #8
    36ac:	d065      	beq.n	377a <__udivsi3+0xfe>
    36ae:	0b03      	lsrs	r3, r0, #12
    36b0:	428b      	cmp	r3, r1
    36b2:	d319      	bcc.n	36e8 <__udivsi3+0x6c>
    36b4:	e000      	b.n	36b8 <__udivsi3+0x3c>
    36b6:	0a09      	lsrs	r1, r1, #8
    36b8:	0bc3      	lsrs	r3, r0, #15
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__udivsi3+0x46>
    36be:	03cb      	lsls	r3, r1, #15
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0b83      	lsrs	r3, r0, #14
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__udivsi3+0x52>
    36ca:	038b      	lsls	r3, r1, #14
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	0b43      	lsrs	r3, r0, #13
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__udivsi3+0x5e>
    36d6:	034b      	lsls	r3, r1, #13
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	0b03      	lsrs	r3, r0, #12
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__udivsi3+0x6a>
    36e2:	030b      	lsls	r3, r1, #12
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	0ac3      	lsrs	r3, r0, #11
    36ea:	428b      	cmp	r3, r1
    36ec:	d301      	bcc.n	36f2 <__udivsi3+0x76>
    36ee:	02cb      	lsls	r3, r1, #11
    36f0:	1ac0      	subs	r0, r0, r3
    36f2:	4152      	adcs	r2, r2
    36f4:	0a83      	lsrs	r3, r0, #10
    36f6:	428b      	cmp	r3, r1
    36f8:	d301      	bcc.n	36fe <__udivsi3+0x82>
    36fa:	028b      	lsls	r3, r1, #10
    36fc:	1ac0      	subs	r0, r0, r3
    36fe:	4152      	adcs	r2, r2
    3700:	0a43      	lsrs	r3, r0, #9
    3702:	428b      	cmp	r3, r1
    3704:	d301      	bcc.n	370a <__udivsi3+0x8e>
    3706:	024b      	lsls	r3, r1, #9
    3708:	1ac0      	subs	r0, r0, r3
    370a:	4152      	adcs	r2, r2
    370c:	0a03      	lsrs	r3, r0, #8
    370e:	428b      	cmp	r3, r1
    3710:	d301      	bcc.n	3716 <__udivsi3+0x9a>
    3712:	020b      	lsls	r3, r1, #8
    3714:	1ac0      	subs	r0, r0, r3
    3716:	4152      	adcs	r2, r2
    3718:	d2cd      	bcs.n	36b6 <__udivsi3+0x3a>
    371a:	09c3      	lsrs	r3, r0, #7
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__udivsi3+0xa8>
    3720:	01cb      	lsls	r3, r1, #7
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	0983      	lsrs	r3, r0, #6
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__udivsi3+0xb4>
    372c:	018b      	lsls	r3, r1, #6
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0943      	lsrs	r3, r0, #5
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__udivsi3+0xc0>
    3738:	014b      	lsls	r3, r1, #5
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	0903      	lsrs	r3, r0, #4
    3740:	428b      	cmp	r3, r1
    3742:	d301      	bcc.n	3748 <__udivsi3+0xcc>
    3744:	010b      	lsls	r3, r1, #4
    3746:	1ac0      	subs	r0, r0, r3
    3748:	4152      	adcs	r2, r2
    374a:	08c3      	lsrs	r3, r0, #3
    374c:	428b      	cmp	r3, r1
    374e:	d301      	bcc.n	3754 <__udivsi3+0xd8>
    3750:	00cb      	lsls	r3, r1, #3
    3752:	1ac0      	subs	r0, r0, r3
    3754:	4152      	adcs	r2, r2
    3756:	0883      	lsrs	r3, r0, #2
    3758:	428b      	cmp	r3, r1
    375a:	d301      	bcc.n	3760 <__udivsi3+0xe4>
    375c:	008b      	lsls	r3, r1, #2
    375e:	1ac0      	subs	r0, r0, r3
    3760:	4152      	adcs	r2, r2
    3762:	0843      	lsrs	r3, r0, #1
    3764:	428b      	cmp	r3, r1
    3766:	d301      	bcc.n	376c <__udivsi3+0xf0>
    3768:	004b      	lsls	r3, r1, #1
    376a:	1ac0      	subs	r0, r0, r3
    376c:	4152      	adcs	r2, r2
    376e:	1a41      	subs	r1, r0, r1
    3770:	d200      	bcs.n	3774 <__udivsi3+0xf8>
    3772:	4601      	mov	r1, r0
    3774:	4152      	adcs	r2, r2
    3776:	4610      	mov	r0, r2
    3778:	4770      	bx	lr
    377a:	e7ff      	b.n	377c <__udivsi3+0x100>
    377c:	b501      	push	{r0, lr}
    377e:	2000      	movs	r0, #0
    3780:	f000 f806 	bl	3790 <__aeabi_idiv0>
    3784:	bd02      	pop	{r1, pc}
    3786:	46c0      	nop			; (mov r8, r8)

00003788 <__aeabi_uidivmod>:
    3788:	2900      	cmp	r1, #0
    378a:	d0f7      	beq.n	377c <__udivsi3+0x100>
    378c:	e776      	b.n	367c <__udivsi3>
    378e:	4770      	bx	lr

00003790 <__aeabi_idiv0>:
    3790:	4770      	bx	lr
    3792:	46c0      	nop			; (mov r8, r8)

00003794 <__aeabi_fmul>:
    3794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3796:	4657      	mov	r7, sl
    3798:	464e      	mov	r6, r9
    379a:	4645      	mov	r5, r8
    379c:	46de      	mov	lr, fp
    379e:	b5e0      	push	{r5, r6, r7, lr}
    37a0:	0247      	lsls	r7, r0, #9
    37a2:	0046      	lsls	r6, r0, #1
    37a4:	4688      	mov	r8, r1
    37a6:	0a7f      	lsrs	r7, r7, #9
    37a8:	0e36      	lsrs	r6, r6, #24
    37aa:	0fc4      	lsrs	r4, r0, #31
    37ac:	2e00      	cmp	r6, #0
    37ae:	d047      	beq.n	3840 <__aeabi_fmul+0xac>
    37b0:	2eff      	cmp	r6, #255	; 0xff
    37b2:	d024      	beq.n	37fe <__aeabi_fmul+0x6a>
    37b4:	00fb      	lsls	r3, r7, #3
    37b6:	2780      	movs	r7, #128	; 0x80
    37b8:	04ff      	lsls	r7, r7, #19
    37ba:	431f      	orrs	r7, r3
    37bc:	2300      	movs	r3, #0
    37be:	4699      	mov	r9, r3
    37c0:	469a      	mov	sl, r3
    37c2:	3e7f      	subs	r6, #127	; 0x7f
    37c4:	4643      	mov	r3, r8
    37c6:	025d      	lsls	r5, r3, #9
    37c8:	0058      	lsls	r0, r3, #1
    37ca:	0fdb      	lsrs	r3, r3, #31
    37cc:	0a6d      	lsrs	r5, r5, #9
    37ce:	0e00      	lsrs	r0, r0, #24
    37d0:	4698      	mov	r8, r3
    37d2:	d043      	beq.n	385c <__aeabi_fmul+0xc8>
    37d4:	28ff      	cmp	r0, #255	; 0xff
    37d6:	d03b      	beq.n	3850 <__aeabi_fmul+0xbc>
    37d8:	00eb      	lsls	r3, r5, #3
    37da:	2580      	movs	r5, #128	; 0x80
    37dc:	2200      	movs	r2, #0
    37de:	04ed      	lsls	r5, r5, #19
    37e0:	431d      	orrs	r5, r3
    37e2:	387f      	subs	r0, #127	; 0x7f
    37e4:	1836      	adds	r6, r6, r0
    37e6:	1c73      	adds	r3, r6, #1
    37e8:	4641      	mov	r1, r8
    37ea:	469b      	mov	fp, r3
    37ec:	464b      	mov	r3, r9
    37ee:	4061      	eors	r1, r4
    37f0:	4313      	orrs	r3, r2
    37f2:	2b0f      	cmp	r3, #15
    37f4:	d864      	bhi.n	38c0 <__aeabi_fmul+0x12c>
    37f6:	4875      	ldr	r0, [pc, #468]	; (39cc <__aeabi_fmul+0x238>)
    37f8:	009b      	lsls	r3, r3, #2
    37fa:	58c3      	ldr	r3, [r0, r3]
    37fc:	469f      	mov	pc, r3
    37fe:	2f00      	cmp	r7, #0
    3800:	d142      	bne.n	3888 <__aeabi_fmul+0xf4>
    3802:	2308      	movs	r3, #8
    3804:	4699      	mov	r9, r3
    3806:	3b06      	subs	r3, #6
    3808:	26ff      	movs	r6, #255	; 0xff
    380a:	469a      	mov	sl, r3
    380c:	e7da      	b.n	37c4 <__aeabi_fmul+0x30>
    380e:	4641      	mov	r1, r8
    3810:	2a02      	cmp	r2, #2
    3812:	d028      	beq.n	3866 <__aeabi_fmul+0xd2>
    3814:	2a03      	cmp	r2, #3
    3816:	d100      	bne.n	381a <__aeabi_fmul+0x86>
    3818:	e0ce      	b.n	39b8 <__aeabi_fmul+0x224>
    381a:	2a01      	cmp	r2, #1
    381c:	d000      	beq.n	3820 <__aeabi_fmul+0x8c>
    381e:	e0ac      	b.n	397a <__aeabi_fmul+0x1e6>
    3820:	4011      	ands	r1, r2
    3822:	2000      	movs	r0, #0
    3824:	2200      	movs	r2, #0
    3826:	b2cc      	uxtb	r4, r1
    3828:	0240      	lsls	r0, r0, #9
    382a:	05d2      	lsls	r2, r2, #23
    382c:	0a40      	lsrs	r0, r0, #9
    382e:	07e4      	lsls	r4, r4, #31
    3830:	4310      	orrs	r0, r2
    3832:	4320      	orrs	r0, r4
    3834:	bc3c      	pop	{r2, r3, r4, r5}
    3836:	4690      	mov	r8, r2
    3838:	4699      	mov	r9, r3
    383a:	46a2      	mov	sl, r4
    383c:	46ab      	mov	fp, r5
    383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3840:	2f00      	cmp	r7, #0
    3842:	d115      	bne.n	3870 <__aeabi_fmul+0xdc>
    3844:	2304      	movs	r3, #4
    3846:	4699      	mov	r9, r3
    3848:	3b03      	subs	r3, #3
    384a:	2600      	movs	r6, #0
    384c:	469a      	mov	sl, r3
    384e:	e7b9      	b.n	37c4 <__aeabi_fmul+0x30>
    3850:	20ff      	movs	r0, #255	; 0xff
    3852:	2202      	movs	r2, #2
    3854:	2d00      	cmp	r5, #0
    3856:	d0c5      	beq.n	37e4 <__aeabi_fmul+0x50>
    3858:	2203      	movs	r2, #3
    385a:	e7c3      	b.n	37e4 <__aeabi_fmul+0x50>
    385c:	2d00      	cmp	r5, #0
    385e:	d119      	bne.n	3894 <__aeabi_fmul+0x100>
    3860:	2000      	movs	r0, #0
    3862:	2201      	movs	r2, #1
    3864:	e7be      	b.n	37e4 <__aeabi_fmul+0x50>
    3866:	2401      	movs	r4, #1
    3868:	22ff      	movs	r2, #255	; 0xff
    386a:	400c      	ands	r4, r1
    386c:	2000      	movs	r0, #0
    386e:	e7db      	b.n	3828 <__aeabi_fmul+0x94>
    3870:	0038      	movs	r0, r7
    3872:	f000 fe07 	bl	4484 <__clzsi2>
    3876:	2676      	movs	r6, #118	; 0x76
    3878:	1f43      	subs	r3, r0, #5
    387a:	409f      	lsls	r7, r3
    387c:	2300      	movs	r3, #0
    387e:	4276      	negs	r6, r6
    3880:	1a36      	subs	r6, r6, r0
    3882:	4699      	mov	r9, r3
    3884:	469a      	mov	sl, r3
    3886:	e79d      	b.n	37c4 <__aeabi_fmul+0x30>
    3888:	230c      	movs	r3, #12
    388a:	4699      	mov	r9, r3
    388c:	3b09      	subs	r3, #9
    388e:	26ff      	movs	r6, #255	; 0xff
    3890:	469a      	mov	sl, r3
    3892:	e797      	b.n	37c4 <__aeabi_fmul+0x30>
    3894:	0028      	movs	r0, r5
    3896:	f000 fdf5 	bl	4484 <__clzsi2>
    389a:	1f43      	subs	r3, r0, #5
    389c:	409d      	lsls	r5, r3
    389e:	2376      	movs	r3, #118	; 0x76
    38a0:	425b      	negs	r3, r3
    38a2:	1a18      	subs	r0, r3, r0
    38a4:	2200      	movs	r2, #0
    38a6:	e79d      	b.n	37e4 <__aeabi_fmul+0x50>
    38a8:	2080      	movs	r0, #128	; 0x80
    38aa:	2400      	movs	r4, #0
    38ac:	03c0      	lsls	r0, r0, #15
    38ae:	22ff      	movs	r2, #255	; 0xff
    38b0:	e7ba      	b.n	3828 <__aeabi_fmul+0x94>
    38b2:	003d      	movs	r5, r7
    38b4:	4652      	mov	r2, sl
    38b6:	e7ab      	b.n	3810 <__aeabi_fmul+0x7c>
    38b8:	003d      	movs	r5, r7
    38ba:	0021      	movs	r1, r4
    38bc:	4652      	mov	r2, sl
    38be:	e7a7      	b.n	3810 <__aeabi_fmul+0x7c>
    38c0:	0c3b      	lsrs	r3, r7, #16
    38c2:	469c      	mov	ip, r3
    38c4:	042a      	lsls	r2, r5, #16
    38c6:	0c12      	lsrs	r2, r2, #16
    38c8:	0c2b      	lsrs	r3, r5, #16
    38ca:	0014      	movs	r4, r2
    38cc:	4660      	mov	r0, ip
    38ce:	4665      	mov	r5, ip
    38d0:	043f      	lsls	r7, r7, #16
    38d2:	0c3f      	lsrs	r7, r7, #16
    38d4:	437c      	muls	r4, r7
    38d6:	4342      	muls	r2, r0
    38d8:	435d      	muls	r5, r3
    38da:	437b      	muls	r3, r7
    38dc:	0c27      	lsrs	r7, r4, #16
    38de:	189b      	adds	r3, r3, r2
    38e0:	18ff      	adds	r7, r7, r3
    38e2:	42ba      	cmp	r2, r7
    38e4:	d903      	bls.n	38ee <__aeabi_fmul+0x15a>
    38e6:	2380      	movs	r3, #128	; 0x80
    38e8:	025b      	lsls	r3, r3, #9
    38ea:	469c      	mov	ip, r3
    38ec:	4465      	add	r5, ip
    38ee:	0424      	lsls	r4, r4, #16
    38f0:	043a      	lsls	r2, r7, #16
    38f2:	0c24      	lsrs	r4, r4, #16
    38f4:	1912      	adds	r2, r2, r4
    38f6:	0193      	lsls	r3, r2, #6
    38f8:	1e5c      	subs	r4, r3, #1
    38fa:	41a3      	sbcs	r3, r4
    38fc:	0c3f      	lsrs	r7, r7, #16
    38fe:	0e92      	lsrs	r2, r2, #26
    3900:	197d      	adds	r5, r7, r5
    3902:	431a      	orrs	r2, r3
    3904:	01ad      	lsls	r5, r5, #6
    3906:	4315      	orrs	r5, r2
    3908:	012b      	lsls	r3, r5, #4
    390a:	d504      	bpl.n	3916 <__aeabi_fmul+0x182>
    390c:	2301      	movs	r3, #1
    390e:	465e      	mov	r6, fp
    3910:	086a      	lsrs	r2, r5, #1
    3912:	401d      	ands	r5, r3
    3914:	4315      	orrs	r5, r2
    3916:	0032      	movs	r2, r6
    3918:	327f      	adds	r2, #127	; 0x7f
    391a:	2a00      	cmp	r2, #0
    391c:	dd25      	ble.n	396a <__aeabi_fmul+0x1d6>
    391e:	076b      	lsls	r3, r5, #29
    3920:	d004      	beq.n	392c <__aeabi_fmul+0x198>
    3922:	230f      	movs	r3, #15
    3924:	402b      	ands	r3, r5
    3926:	2b04      	cmp	r3, #4
    3928:	d000      	beq.n	392c <__aeabi_fmul+0x198>
    392a:	3504      	adds	r5, #4
    392c:	012b      	lsls	r3, r5, #4
    392e:	d503      	bpl.n	3938 <__aeabi_fmul+0x1a4>
    3930:	0032      	movs	r2, r6
    3932:	4b27      	ldr	r3, [pc, #156]	; (39d0 <__aeabi_fmul+0x23c>)
    3934:	3280      	adds	r2, #128	; 0x80
    3936:	401d      	ands	r5, r3
    3938:	2afe      	cmp	r2, #254	; 0xfe
    393a:	dc94      	bgt.n	3866 <__aeabi_fmul+0xd2>
    393c:	2401      	movs	r4, #1
    393e:	01a8      	lsls	r0, r5, #6
    3940:	0a40      	lsrs	r0, r0, #9
    3942:	b2d2      	uxtb	r2, r2
    3944:	400c      	ands	r4, r1
    3946:	e76f      	b.n	3828 <__aeabi_fmul+0x94>
    3948:	2080      	movs	r0, #128	; 0x80
    394a:	03c0      	lsls	r0, r0, #15
    394c:	4207      	tst	r7, r0
    394e:	d007      	beq.n	3960 <__aeabi_fmul+0x1cc>
    3950:	4205      	tst	r5, r0
    3952:	d105      	bne.n	3960 <__aeabi_fmul+0x1cc>
    3954:	4328      	orrs	r0, r5
    3956:	0240      	lsls	r0, r0, #9
    3958:	0a40      	lsrs	r0, r0, #9
    395a:	4644      	mov	r4, r8
    395c:	22ff      	movs	r2, #255	; 0xff
    395e:	e763      	b.n	3828 <__aeabi_fmul+0x94>
    3960:	4338      	orrs	r0, r7
    3962:	0240      	lsls	r0, r0, #9
    3964:	0a40      	lsrs	r0, r0, #9
    3966:	22ff      	movs	r2, #255	; 0xff
    3968:	e75e      	b.n	3828 <__aeabi_fmul+0x94>
    396a:	2401      	movs	r4, #1
    396c:	1aa3      	subs	r3, r4, r2
    396e:	2b1b      	cmp	r3, #27
    3970:	dd05      	ble.n	397e <__aeabi_fmul+0x1ea>
    3972:	400c      	ands	r4, r1
    3974:	2200      	movs	r2, #0
    3976:	2000      	movs	r0, #0
    3978:	e756      	b.n	3828 <__aeabi_fmul+0x94>
    397a:	465e      	mov	r6, fp
    397c:	e7cb      	b.n	3916 <__aeabi_fmul+0x182>
    397e:	002a      	movs	r2, r5
    3980:	2020      	movs	r0, #32
    3982:	40da      	lsrs	r2, r3
    3984:	1ac3      	subs	r3, r0, r3
    3986:	409d      	lsls	r5, r3
    3988:	002b      	movs	r3, r5
    398a:	1e5d      	subs	r5, r3, #1
    398c:	41ab      	sbcs	r3, r5
    398e:	4313      	orrs	r3, r2
    3990:	075a      	lsls	r2, r3, #29
    3992:	d004      	beq.n	399e <__aeabi_fmul+0x20a>
    3994:	220f      	movs	r2, #15
    3996:	401a      	ands	r2, r3
    3998:	2a04      	cmp	r2, #4
    399a:	d000      	beq.n	399e <__aeabi_fmul+0x20a>
    399c:	3304      	adds	r3, #4
    399e:	015a      	lsls	r2, r3, #5
    39a0:	d504      	bpl.n	39ac <__aeabi_fmul+0x218>
    39a2:	2401      	movs	r4, #1
    39a4:	2201      	movs	r2, #1
    39a6:	400c      	ands	r4, r1
    39a8:	2000      	movs	r0, #0
    39aa:	e73d      	b.n	3828 <__aeabi_fmul+0x94>
    39ac:	2401      	movs	r4, #1
    39ae:	019b      	lsls	r3, r3, #6
    39b0:	0a58      	lsrs	r0, r3, #9
    39b2:	400c      	ands	r4, r1
    39b4:	2200      	movs	r2, #0
    39b6:	e737      	b.n	3828 <__aeabi_fmul+0x94>
    39b8:	2080      	movs	r0, #128	; 0x80
    39ba:	2401      	movs	r4, #1
    39bc:	03c0      	lsls	r0, r0, #15
    39be:	4328      	orrs	r0, r5
    39c0:	0240      	lsls	r0, r0, #9
    39c2:	0a40      	lsrs	r0, r0, #9
    39c4:	400c      	ands	r4, r1
    39c6:	22ff      	movs	r2, #255	; 0xff
    39c8:	e72e      	b.n	3828 <__aeabi_fmul+0x94>
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	00004668 	.word	0x00004668
    39d0:	f7ffffff 	.word	0xf7ffffff

000039d4 <__aeabi_fsub>:
    39d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d6:	464f      	mov	r7, r9
    39d8:	46d6      	mov	lr, sl
    39da:	4646      	mov	r6, r8
    39dc:	0044      	lsls	r4, r0, #1
    39de:	b5c0      	push	{r6, r7, lr}
    39e0:	0fc2      	lsrs	r2, r0, #31
    39e2:	0247      	lsls	r7, r0, #9
    39e4:	0248      	lsls	r0, r1, #9
    39e6:	0a40      	lsrs	r0, r0, #9
    39e8:	4684      	mov	ip, r0
    39ea:	4666      	mov	r6, ip
    39ec:	0a7b      	lsrs	r3, r7, #9
    39ee:	0048      	lsls	r0, r1, #1
    39f0:	0fc9      	lsrs	r1, r1, #31
    39f2:	469a      	mov	sl, r3
    39f4:	0e24      	lsrs	r4, r4, #24
    39f6:	0015      	movs	r5, r2
    39f8:	00db      	lsls	r3, r3, #3
    39fa:	0e00      	lsrs	r0, r0, #24
    39fc:	4689      	mov	r9, r1
    39fe:	00f6      	lsls	r6, r6, #3
    3a00:	28ff      	cmp	r0, #255	; 0xff
    3a02:	d100      	bne.n	3a06 <__aeabi_fsub+0x32>
    3a04:	e08f      	b.n	3b26 <__aeabi_fsub+0x152>
    3a06:	2101      	movs	r1, #1
    3a08:	464f      	mov	r7, r9
    3a0a:	404f      	eors	r7, r1
    3a0c:	0039      	movs	r1, r7
    3a0e:	4291      	cmp	r1, r2
    3a10:	d066      	beq.n	3ae0 <__aeabi_fsub+0x10c>
    3a12:	1a22      	subs	r2, r4, r0
    3a14:	2a00      	cmp	r2, #0
    3a16:	dc00      	bgt.n	3a1a <__aeabi_fsub+0x46>
    3a18:	e09d      	b.n	3b56 <__aeabi_fsub+0x182>
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d13d      	bne.n	3a9a <__aeabi_fsub+0xc6>
    3a1e:	2e00      	cmp	r6, #0
    3a20:	d100      	bne.n	3a24 <__aeabi_fsub+0x50>
    3a22:	e08b      	b.n	3b3c <__aeabi_fsub+0x168>
    3a24:	1e51      	subs	r1, r2, #1
    3a26:	2900      	cmp	r1, #0
    3a28:	d000      	beq.n	3a2c <__aeabi_fsub+0x58>
    3a2a:	e0b5      	b.n	3b98 <__aeabi_fsub+0x1c4>
    3a2c:	2401      	movs	r4, #1
    3a2e:	1b9b      	subs	r3, r3, r6
    3a30:	015a      	lsls	r2, r3, #5
    3a32:	d544      	bpl.n	3abe <__aeabi_fsub+0xea>
    3a34:	019b      	lsls	r3, r3, #6
    3a36:	099f      	lsrs	r7, r3, #6
    3a38:	0038      	movs	r0, r7
    3a3a:	f000 fd23 	bl	4484 <__clzsi2>
    3a3e:	3805      	subs	r0, #5
    3a40:	4087      	lsls	r7, r0
    3a42:	4284      	cmp	r4, r0
    3a44:	dd00      	ble.n	3a48 <__aeabi_fsub+0x74>
    3a46:	e096      	b.n	3b76 <__aeabi_fsub+0x1a2>
    3a48:	1b04      	subs	r4, r0, r4
    3a4a:	003a      	movs	r2, r7
    3a4c:	2020      	movs	r0, #32
    3a4e:	3401      	adds	r4, #1
    3a50:	40e2      	lsrs	r2, r4
    3a52:	1b04      	subs	r4, r0, r4
    3a54:	40a7      	lsls	r7, r4
    3a56:	003b      	movs	r3, r7
    3a58:	1e5f      	subs	r7, r3, #1
    3a5a:	41bb      	sbcs	r3, r7
    3a5c:	2400      	movs	r4, #0
    3a5e:	4313      	orrs	r3, r2
    3a60:	075a      	lsls	r2, r3, #29
    3a62:	d004      	beq.n	3a6e <__aeabi_fsub+0x9a>
    3a64:	220f      	movs	r2, #15
    3a66:	401a      	ands	r2, r3
    3a68:	2a04      	cmp	r2, #4
    3a6a:	d000      	beq.n	3a6e <__aeabi_fsub+0x9a>
    3a6c:	3304      	adds	r3, #4
    3a6e:	015a      	lsls	r2, r3, #5
    3a70:	d527      	bpl.n	3ac2 <__aeabi_fsub+0xee>
    3a72:	3401      	adds	r4, #1
    3a74:	2cff      	cmp	r4, #255	; 0xff
    3a76:	d100      	bne.n	3a7a <__aeabi_fsub+0xa6>
    3a78:	e079      	b.n	3b6e <__aeabi_fsub+0x19a>
    3a7a:	2201      	movs	r2, #1
    3a7c:	019b      	lsls	r3, r3, #6
    3a7e:	0a5b      	lsrs	r3, r3, #9
    3a80:	b2e4      	uxtb	r4, r4
    3a82:	402a      	ands	r2, r5
    3a84:	025b      	lsls	r3, r3, #9
    3a86:	05e4      	lsls	r4, r4, #23
    3a88:	0a58      	lsrs	r0, r3, #9
    3a8a:	07d2      	lsls	r2, r2, #31
    3a8c:	4320      	orrs	r0, r4
    3a8e:	4310      	orrs	r0, r2
    3a90:	bc1c      	pop	{r2, r3, r4}
    3a92:	4690      	mov	r8, r2
    3a94:	4699      	mov	r9, r3
    3a96:	46a2      	mov	sl, r4
    3a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a9a:	2cff      	cmp	r4, #255	; 0xff
    3a9c:	d0e0      	beq.n	3a60 <__aeabi_fsub+0x8c>
    3a9e:	2180      	movs	r1, #128	; 0x80
    3aa0:	04c9      	lsls	r1, r1, #19
    3aa2:	430e      	orrs	r6, r1
    3aa4:	2a1b      	cmp	r2, #27
    3aa6:	dc7b      	bgt.n	3ba0 <__aeabi_fsub+0x1cc>
    3aa8:	0031      	movs	r1, r6
    3aaa:	2020      	movs	r0, #32
    3aac:	40d1      	lsrs	r1, r2
    3aae:	1a82      	subs	r2, r0, r2
    3ab0:	4096      	lsls	r6, r2
    3ab2:	1e72      	subs	r2, r6, #1
    3ab4:	4196      	sbcs	r6, r2
    3ab6:	430e      	orrs	r6, r1
    3ab8:	1b9b      	subs	r3, r3, r6
    3aba:	015a      	lsls	r2, r3, #5
    3abc:	d4ba      	bmi.n	3a34 <__aeabi_fsub+0x60>
    3abe:	075a      	lsls	r2, r3, #29
    3ac0:	d1d0      	bne.n	3a64 <__aeabi_fsub+0x90>
    3ac2:	2201      	movs	r2, #1
    3ac4:	08df      	lsrs	r7, r3, #3
    3ac6:	402a      	ands	r2, r5
    3ac8:	2cff      	cmp	r4, #255	; 0xff
    3aca:	d133      	bne.n	3b34 <__aeabi_fsub+0x160>
    3acc:	2f00      	cmp	r7, #0
    3ace:	d100      	bne.n	3ad2 <__aeabi_fsub+0xfe>
    3ad0:	e0a8      	b.n	3c24 <__aeabi_fsub+0x250>
    3ad2:	2380      	movs	r3, #128	; 0x80
    3ad4:	03db      	lsls	r3, r3, #15
    3ad6:	433b      	orrs	r3, r7
    3ad8:	025b      	lsls	r3, r3, #9
    3ada:	0a5b      	lsrs	r3, r3, #9
    3adc:	24ff      	movs	r4, #255	; 0xff
    3ade:	e7d1      	b.n	3a84 <__aeabi_fsub+0xb0>
    3ae0:	1a21      	subs	r1, r4, r0
    3ae2:	2900      	cmp	r1, #0
    3ae4:	dd4c      	ble.n	3b80 <__aeabi_fsub+0x1ac>
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d02a      	beq.n	3b40 <__aeabi_fsub+0x16c>
    3aea:	2cff      	cmp	r4, #255	; 0xff
    3aec:	d0b8      	beq.n	3a60 <__aeabi_fsub+0x8c>
    3aee:	2080      	movs	r0, #128	; 0x80
    3af0:	04c0      	lsls	r0, r0, #19
    3af2:	4306      	orrs	r6, r0
    3af4:	291b      	cmp	r1, #27
    3af6:	dd00      	ble.n	3afa <__aeabi_fsub+0x126>
    3af8:	e0af      	b.n	3c5a <__aeabi_fsub+0x286>
    3afa:	0030      	movs	r0, r6
    3afc:	2720      	movs	r7, #32
    3afe:	40c8      	lsrs	r0, r1
    3b00:	1a79      	subs	r1, r7, r1
    3b02:	408e      	lsls	r6, r1
    3b04:	1e71      	subs	r1, r6, #1
    3b06:	418e      	sbcs	r6, r1
    3b08:	4306      	orrs	r6, r0
    3b0a:	199b      	adds	r3, r3, r6
    3b0c:	0159      	lsls	r1, r3, #5
    3b0e:	d5d6      	bpl.n	3abe <__aeabi_fsub+0xea>
    3b10:	3401      	adds	r4, #1
    3b12:	2cff      	cmp	r4, #255	; 0xff
    3b14:	d100      	bne.n	3b18 <__aeabi_fsub+0x144>
    3b16:	e085      	b.n	3c24 <__aeabi_fsub+0x250>
    3b18:	2201      	movs	r2, #1
    3b1a:	497a      	ldr	r1, [pc, #488]	; (3d04 <__aeabi_fsub+0x330>)
    3b1c:	401a      	ands	r2, r3
    3b1e:	085b      	lsrs	r3, r3, #1
    3b20:	400b      	ands	r3, r1
    3b22:	4313      	orrs	r3, r2
    3b24:	e79c      	b.n	3a60 <__aeabi_fsub+0x8c>
    3b26:	2e00      	cmp	r6, #0
    3b28:	d000      	beq.n	3b2c <__aeabi_fsub+0x158>
    3b2a:	e770      	b.n	3a0e <__aeabi_fsub+0x3a>
    3b2c:	e76b      	b.n	3a06 <__aeabi_fsub+0x32>
    3b2e:	1e3b      	subs	r3, r7, #0
    3b30:	d1c5      	bne.n	3abe <__aeabi_fsub+0xea>
    3b32:	2200      	movs	r2, #0
    3b34:	027b      	lsls	r3, r7, #9
    3b36:	0a5b      	lsrs	r3, r3, #9
    3b38:	b2e4      	uxtb	r4, r4
    3b3a:	e7a3      	b.n	3a84 <__aeabi_fsub+0xb0>
    3b3c:	0014      	movs	r4, r2
    3b3e:	e78f      	b.n	3a60 <__aeabi_fsub+0x8c>
    3b40:	2e00      	cmp	r6, #0
    3b42:	d04d      	beq.n	3be0 <__aeabi_fsub+0x20c>
    3b44:	1e48      	subs	r0, r1, #1
    3b46:	2800      	cmp	r0, #0
    3b48:	d157      	bne.n	3bfa <__aeabi_fsub+0x226>
    3b4a:	199b      	adds	r3, r3, r6
    3b4c:	2401      	movs	r4, #1
    3b4e:	015a      	lsls	r2, r3, #5
    3b50:	d5b5      	bpl.n	3abe <__aeabi_fsub+0xea>
    3b52:	2402      	movs	r4, #2
    3b54:	e7e0      	b.n	3b18 <__aeabi_fsub+0x144>
    3b56:	2a00      	cmp	r2, #0
    3b58:	d125      	bne.n	3ba6 <__aeabi_fsub+0x1d2>
    3b5a:	1c62      	adds	r2, r4, #1
    3b5c:	b2d2      	uxtb	r2, r2
    3b5e:	2a01      	cmp	r2, #1
    3b60:	dd72      	ble.n	3c48 <__aeabi_fsub+0x274>
    3b62:	1b9f      	subs	r7, r3, r6
    3b64:	017a      	lsls	r2, r7, #5
    3b66:	d535      	bpl.n	3bd4 <__aeabi_fsub+0x200>
    3b68:	1af7      	subs	r7, r6, r3
    3b6a:	000d      	movs	r5, r1
    3b6c:	e764      	b.n	3a38 <__aeabi_fsub+0x64>
    3b6e:	2201      	movs	r2, #1
    3b70:	2300      	movs	r3, #0
    3b72:	402a      	ands	r2, r5
    3b74:	e786      	b.n	3a84 <__aeabi_fsub+0xb0>
    3b76:	003b      	movs	r3, r7
    3b78:	4a63      	ldr	r2, [pc, #396]	; (3d08 <__aeabi_fsub+0x334>)
    3b7a:	1a24      	subs	r4, r4, r0
    3b7c:	4013      	ands	r3, r2
    3b7e:	e76f      	b.n	3a60 <__aeabi_fsub+0x8c>
    3b80:	2900      	cmp	r1, #0
    3b82:	d16c      	bne.n	3c5e <__aeabi_fsub+0x28a>
    3b84:	1c61      	adds	r1, r4, #1
    3b86:	b2c8      	uxtb	r0, r1
    3b88:	2801      	cmp	r0, #1
    3b8a:	dd4e      	ble.n	3c2a <__aeabi_fsub+0x256>
    3b8c:	29ff      	cmp	r1, #255	; 0xff
    3b8e:	d049      	beq.n	3c24 <__aeabi_fsub+0x250>
    3b90:	199b      	adds	r3, r3, r6
    3b92:	085b      	lsrs	r3, r3, #1
    3b94:	000c      	movs	r4, r1
    3b96:	e763      	b.n	3a60 <__aeabi_fsub+0x8c>
    3b98:	2aff      	cmp	r2, #255	; 0xff
    3b9a:	d041      	beq.n	3c20 <__aeabi_fsub+0x24c>
    3b9c:	000a      	movs	r2, r1
    3b9e:	e781      	b.n	3aa4 <__aeabi_fsub+0xd0>
    3ba0:	2601      	movs	r6, #1
    3ba2:	1b9b      	subs	r3, r3, r6
    3ba4:	e789      	b.n	3aba <__aeabi_fsub+0xe6>
    3ba6:	2c00      	cmp	r4, #0
    3ba8:	d01c      	beq.n	3be4 <__aeabi_fsub+0x210>
    3baa:	28ff      	cmp	r0, #255	; 0xff
    3bac:	d021      	beq.n	3bf2 <__aeabi_fsub+0x21e>
    3bae:	2480      	movs	r4, #128	; 0x80
    3bb0:	04e4      	lsls	r4, r4, #19
    3bb2:	4252      	negs	r2, r2
    3bb4:	4323      	orrs	r3, r4
    3bb6:	2a1b      	cmp	r2, #27
    3bb8:	dd00      	ble.n	3bbc <__aeabi_fsub+0x1e8>
    3bba:	e096      	b.n	3cea <__aeabi_fsub+0x316>
    3bbc:	001c      	movs	r4, r3
    3bbe:	2520      	movs	r5, #32
    3bc0:	40d4      	lsrs	r4, r2
    3bc2:	1aaa      	subs	r2, r5, r2
    3bc4:	4093      	lsls	r3, r2
    3bc6:	1e5a      	subs	r2, r3, #1
    3bc8:	4193      	sbcs	r3, r2
    3bca:	4323      	orrs	r3, r4
    3bcc:	1af3      	subs	r3, r6, r3
    3bce:	0004      	movs	r4, r0
    3bd0:	000d      	movs	r5, r1
    3bd2:	e72d      	b.n	3a30 <__aeabi_fsub+0x5c>
    3bd4:	2f00      	cmp	r7, #0
    3bd6:	d000      	beq.n	3bda <__aeabi_fsub+0x206>
    3bd8:	e72e      	b.n	3a38 <__aeabi_fsub+0x64>
    3bda:	2200      	movs	r2, #0
    3bdc:	2400      	movs	r4, #0
    3bde:	e7a9      	b.n	3b34 <__aeabi_fsub+0x160>
    3be0:	000c      	movs	r4, r1
    3be2:	e73d      	b.n	3a60 <__aeabi_fsub+0x8c>
    3be4:	2b00      	cmp	r3, #0
    3be6:	d058      	beq.n	3c9a <__aeabi_fsub+0x2c6>
    3be8:	43d2      	mvns	r2, r2
    3bea:	2a00      	cmp	r2, #0
    3bec:	d0ee      	beq.n	3bcc <__aeabi_fsub+0x1f8>
    3bee:	28ff      	cmp	r0, #255	; 0xff
    3bf0:	d1e1      	bne.n	3bb6 <__aeabi_fsub+0x1e2>
    3bf2:	0033      	movs	r3, r6
    3bf4:	24ff      	movs	r4, #255	; 0xff
    3bf6:	000d      	movs	r5, r1
    3bf8:	e732      	b.n	3a60 <__aeabi_fsub+0x8c>
    3bfa:	29ff      	cmp	r1, #255	; 0xff
    3bfc:	d010      	beq.n	3c20 <__aeabi_fsub+0x24c>
    3bfe:	0001      	movs	r1, r0
    3c00:	e778      	b.n	3af4 <__aeabi_fsub+0x120>
    3c02:	2b00      	cmp	r3, #0
    3c04:	d06e      	beq.n	3ce4 <__aeabi_fsub+0x310>
    3c06:	24ff      	movs	r4, #255	; 0xff
    3c08:	2e00      	cmp	r6, #0
    3c0a:	d100      	bne.n	3c0e <__aeabi_fsub+0x23a>
    3c0c:	e728      	b.n	3a60 <__aeabi_fsub+0x8c>
    3c0e:	2280      	movs	r2, #128	; 0x80
    3c10:	4651      	mov	r1, sl
    3c12:	03d2      	lsls	r2, r2, #15
    3c14:	4211      	tst	r1, r2
    3c16:	d003      	beq.n	3c20 <__aeabi_fsub+0x24c>
    3c18:	4661      	mov	r1, ip
    3c1a:	4211      	tst	r1, r2
    3c1c:	d100      	bne.n	3c20 <__aeabi_fsub+0x24c>
    3c1e:	0033      	movs	r3, r6
    3c20:	24ff      	movs	r4, #255	; 0xff
    3c22:	e71d      	b.n	3a60 <__aeabi_fsub+0x8c>
    3c24:	24ff      	movs	r4, #255	; 0xff
    3c26:	2300      	movs	r3, #0
    3c28:	e72c      	b.n	3a84 <__aeabi_fsub+0xb0>
    3c2a:	2c00      	cmp	r4, #0
    3c2c:	d1e9      	bne.n	3c02 <__aeabi_fsub+0x22e>
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d063      	beq.n	3cfa <__aeabi_fsub+0x326>
    3c32:	2e00      	cmp	r6, #0
    3c34:	d100      	bne.n	3c38 <__aeabi_fsub+0x264>
    3c36:	e713      	b.n	3a60 <__aeabi_fsub+0x8c>
    3c38:	199b      	adds	r3, r3, r6
    3c3a:	015a      	lsls	r2, r3, #5
    3c3c:	d400      	bmi.n	3c40 <__aeabi_fsub+0x26c>
    3c3e:	e73e      	b.n	3abe <__aeabi_fsub+0xea>
    3c40:	4a31      	ldr	r2, [pc, #196]	; (3d08 <__aeabi_fsub+0x334>)
    3c42:	000c      	movs	r4, r1
    3c44:	4013      	ands	r3, r2
    3c46:	e70b      	b.n	3a60 <__aeabi_fsub+0x8c>
    3c48:	2c00      	cmp	r4, #0
    3c4a:	d11e      	bne.n	3c8a <__aeabi_fsub+0x2b6>
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d12f      	bne.n	3cb0 <__aeabi_fsub+0x2dc>
    3c50:	2e00      	cmp	r6, #0
    3c52:	d04f      	beq.n	3cf4 <__aeabi_fsub+0x320>
    3c54:	0033      	movs	r3, r6
    3c56:	000d      	movs	r5, r1
    3c58:	e702      	b.n	3a60 <__aeabi_fsub+0x8c>
    3c5a:	2601      	movs	r6, #1
    3c5c:	e755      	b.n	3b0a <__aeabi_fsub+0x136>
    3c5e:	2c00      	cmp	r4, #0
    3c60:	d11f      	bne.n	3ca2 <__aeabi_fsub+0x2ce>
    3c62:	2b00      	cmp	r3, #0
    3c64:	d043      	beq.n	3cee <__aeabi_fsub+0x31a>
    3c66:	43c9      	mvns	r1, r1
    3c68:	2900      	cmp	r1, #0
    3c6a:	d00b      	beq.n	3c84 <__aeabi_fsub+0x2b0>
    3c6c:	28ff      	cmp	r0, #255	; 0xff
    3c6e:	d039      	beq.n	3ce4 <__aeabi_fsub+0x310>
    3c70:	291b      	cmp	r1, #27
    3c72:	dc44      	bgt.n	3cfe <__aeabi_fsub+0x32a>
    3c74:	001c      	movs	r4, r3
    3c76:	2720      	movs	r7, #32
    3c78:	40cc      	lsrs	r4, r1
    3c7a:	1a79      	subs	r1, r7, r1
    3c7c:	408b      	lsls	r3, r1
    3c7e:	1e59      	subs	r1, r3, #1
    3c80:	418b      	sbcs	r3, r1
    3c82:	4323      	orrs	r3, r4
    3c84:	199b      	adds	r3, r3, r6
    3c86:	0004      	movs	r4, r0
    3c88:	e740      	b.n	3b0c <__aeabi_fsub+0x138>
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d11a      	bne.n	3cc4 <__aeabi_fsub+0x2f0>
    3c8e:	2e00      	cmp	r6, #0
    3c90:	d124      	bne.n	3cdc <__aeabi_fsub+0x308>
    3c92:	2780      	movs	r7, #128	; 0x80
    3c94:	2200      	movs	r2, #0
    3c96:	03ff      	lsls	r7, r7, #15
    3c98:	e71b      	b.n	3ad2 <__aeabi_fsub+0xfe>
    3c9a:	0033      	movs	r3, r6
    3c9c:	0004      	movs	r4, r0
    3c9e:	000d      	movs	r5, r1
    3ca0:	e6de      	b.n	3a60 <__aeabi_fsub+0x8c>
    3ca2:	28ff      	cmp	r0, #255	; 0xff
    3ca4:	d01e      	beq.n	3ce4 <__aeabi_fsub+0x310>
    3ca6:	2480      	movs	r4, #128	; 0x80
    3ca8:	04e4      	lsls	r4, r4, #19
    3caa:	4249      	negs	r1, r1
    3cac:	4323      	orrs	r3, r4
    3cae:	e7df      	b.n	3c70 <__aeabi_fsub+0x29c>
    3cb0:	2e00      	cmp	r6, #0
    3cb2:	d100      	bne.n	3cb6 <__aeabi_fsub+0x2e2>
    3cb4:	e6d4      	b.n	3a60 <__aeabi_fsub+0x8c>
    3cb6:	1b9f      	subs	r7, r3, r6
    3cb8:	017a      	lsls	r2, r7, #5
    3cba:	d400      	bmi.n	3cbe <__aeabi_fsub+0x2ea>
    3cbc:	e737      	b.n	3b2e <__aeabi_fsub+0x15a>
    3cbe:	1af3      	subs	r3, r6, r3
    3cc0:	000d      	movs	r5, r1
    3cc2:	e6cd      	b.n	3a60 <__aeabi_fsub+0x8c>
    3cc4:	24ff      	movs	r4, #255	; 0xff
    3cc6:	2e00      	cmp	r6, #0
    3cc8:	d100      	bne.n	3ccc <__aeabi_fsub+0x2f8>
    3cca:	e6c9      	b.n	3a60 <__aeabi_fsub+0x8c>
    3ccc:	2280      	movs	r2, #128	; 0x80
    3cce:	4650      	mov	r0, sl
    3cd0:	03d2      	lsls	r2, r2, #15
    3cd2:	4210      	tst	r0, r2
    3cd4:	d0a4      	beq.n	3c20 <__aeabi_fsub+0x24c>
    3cd6:	4660      	mov	r0, ip
    3cd8:	4210      	tst	r0, r2
    3cda:	d1a1      	bne.n	3c20 <__aeabi_fsub+0x24c>
    3cdc:	0033      	movs	r3, r6
    3cde:	000d      	movs	r5, r1
    3ce0:	24ff      	movs	r4, #255	; 0xff
    3ce2:	e6bd      	b.n	3a60 <__aeabi_fsub+0x8c>
    3ce4:	0033      	movs	r3, r6
    3ce6:	24ff      	movs	r4, #255	; 0xff
    3ce8:	e6ba      	b.n	3a60 <__aeabi_fsub+0x8c>
    3cea:	2301      	movs	r3, #1
    3cec:	e76e      	b.n	3bcc <__aeabi_fsub+0x1f8>
    3cee:	0033      	movs	r3, r6
    3cf0:	0004      	movs	r4, r0
    3cf2:	e6b5      	b.n	3a60 <__aeabi_fsub+0x8c>
    3cf4:	2700      	movs	r7, #0
    3cf6:	2200      	movs	r2, #0
    3cf8:	e71c      	b.n	3b34 <__aeabi_fsub+0x160>
    3cfa:	0033      	movs	r3, r6
    3cfc:	e6b0      	b.n	3a60 <__aeabi_fsub+0x8c>
    3cfe:	2301      	movs	r3, #1
    3d00:	e7c0      	b.n	3c84 <__aeabi_fsub+0x2b0>
    3d02:	46c0      	nop			; (mov r8, r8)
    3d04:	7dffffff 	.word	0x7dffffff
    3d08:	fbffffff 	.word	0xfbffffff

00003d0c <__aeabi_f2iz>:
    3d0c:	0241      	lsls	r1, r0, #9
    3d0e:	0043      	lsls	r3, r0, #1
    3d10:	0fc2      	lsrs	r2, r0, #31
    3d12:	0a49      	lsrs	r1, r1, #9
    3d14:	0e1b      	lsrs	r3, r3, #24
    3d16:	2000      	movs	r0, #0
    3d18:	2b7e      	cmp	r3, #126	; 0x7e
    3d1a:	dd0d      	ble.n	3d38 <__aeabi_f2iz+0x2c>
    3d1c:	2b9d      	cmp	r3, #157	; 0x9d
    3d1e:	dc0c      	bgt.n	3d3a <__aeabi_f2iz+0x2e>
    3d20:	2080      	movs	r0, #128	; 0x80
    3d22:	0400      	lsls	r0, r0, #16
    3d24:	4301      	orrs	r1, r0
    3d26:	2b95      	cmp	r3, #149	; 0x95
    3d28:	dc0a      	bgt.n	3d40 <__aeabi_f2iz+0x34>
    3d2a:	2096      	movs	r0, #150	; 0x96
    3d2c:	1ac3      	subs	r3, r0, r3
    3d2e:	40d9      	lsrs	r1, r3
    3d30:	4248      	negs	r0, r1
    3d32:	2a00      	cmp	r2, #0
    3d34:	d100      	bne.n	3d38 <__aeabi_f2iz+0x2c>
    3d36:	0008      	movs	r0, r1
    3d38:	4770      	bx	lr
    3d3a:	4b03      	ldr	r3, [pc, #12]	; (3d48 <__aeabi_f2iz+0x3c>)
    3d3c:	18d0      	adds	r0, r2, r3
    3d3e:	e7fb      	b.n	3d38 <__aeabi_f2iz+0x2c>
    3d40:	3b96      	subs	r3, #150	; 0x96
    3d42:	4099      	lsls	r1, r3
    3d44:	e7f4      	b.n	3d30 <__aeabi_f2iz+0x24>
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	7fffffff 	.word	0x7fffffff

00003d4c <__aeabi_i2f>:
    3d4c:	b570      	push	{r4, r5, r6, lr}
    3d4e:	2800      	cmp	r0, #0
    3d50:	d030      	beq.n	3db4 <__aeabi_i2f+0x68>
    3d52:	17c3      	asrs	r3, r0, #31
    3d54:	18c4      	adds	r4, r0, r3
    3d56:	405c      	eors	r4, r3
    3d58:	0fc5      	lsrs	r5, r0, #31
    3d5a:	0020      	movs	r0, r4
    3d5c:	f000 fb92 	bl	4484 <__clzsi2>
    3d60:	239e      	movs	r3, #158	; 0x9e
    3d62:	1a1b      	subs	r3, r3, r0
    3d64:	2b96      	cmp	r3, #150	; 0x96
    3d66:	dc0d      	bgt.n	3d84 <__aeabi_i2f+0x38>
    3d68:	2296      	movs	r2, #150	; 0x96
    3d6a:	1ad2      	subs	r2, r2, r3
    3d6c:	4094      	lsls	r4, r2
    3d6e:	002a      	movs	r2, r5
    3d70:	0264      	lsls	r4, r4, #9
    3d72:	0a64      	lsrs	r4, r4, #9
    3d74:	b2db      	uxtb	r3, r3
    3d76:	0264      	lsls	r4, r4, #9
    3d78:	05db      	lsls	r3, r3, #23
    3d7a:	0a60      	lsrs	r0, r4, #9
    3d7c:	07d2      	lsls	r2, r2, #31
    3d7e:	4318      	orrs	r0, r3
    3d80:	4310      	orrs	r0, r2
    3d82:	bd70      	pop	{r4, r5, r6, pc}
    3d84:	2b99      	cmp	r3, #153	; 0x99
    3d86:	dc19      	bgt.n	3dbc <__aeabi_i2f+0x70>
    3d88:	2299      	movs	r2, #153	; 0x99
    3d8a:	1ad2      	subs	r2, r2, r3
    3d8c:	2a00      	cmp	r2, #0
    3d8e:	dd29      	ble.n	3de4 <__aeabi_i2f+0x98>
    3d90:	4094      	lsls	r4, r2
    3d92:	0022      	movs	r2, r4
    3d94:	4c14      	ldr	r4, [pc, #80]	; (3de8 <__aeabi_i2f+0x9c>)
    3d96:	4014      	ands	r4, r2
    3d98:	0751      	lsls	r1, r2, #29
    3d9a:	d004      	beq.n	3da6 <__aeabi_i2f+0x5a>
    3d9c:	210f      	movs	r1, #15
    3d9e:	400a      	ands	r2, r1
    3da0:	2a04      	cmp	r2, #4
    3da2:	d000      	beq.n	3da6 <__aeabi_i2f+0x5a>
    3da4:	3404      	adds	r4, #4
    3da6:	0162      	lsls	r2, r4, #5
    3da8:	d413      	bmi.n	3dd2 <__aeabi_i2f+0x86>
    3daa:	01a4      	lsls	r4, r4, #6
    3dac:	0a64      	lsrs	r4, r4, #9
    3dae:	b2db      	uxtb	r3, r3
    3db0:	002a      	movs	r2, r5
    3db2:	e7e0      	b.n	3d76 <__aeabi_i2f+0x2a>
    3db4:	2200      	movs	r2, #0
    3db6:	2300      	movs	r3, #0
    3db8:	2400      	movs	r4, #0
    3dba:	e7dc      	b.n	3d76 <__aeabi_i2f+0x2a>
    3dbc:	2205      	movs	r2, #5
    3dbe:	0021      	movs	r1, r4
    3dc0:	1a12      	subs	r2, r2, r0
    3dc2:	40d1      	lsrs	r1, r2
    3dc4:	22b9      	movs	r2, #185	; 0xb9
    3dc6:	1ad2      	subs	r2, r2, r3
    3dc8:	4094      	lsls	r4, r2
    3dca:	1e62      	subs	r2, r4, #1
    3dcc:	4194      	sbcs	r4, r2
    3dce:	430c      	orrs	r4, r1
    3dd0:	e7da      	b.n	3d88 <__aeabi_i2f+0x3c>
    3dd2:	4b05      	ldr	r3, [pc, #20]	; (3de8 <__aeabi_i2f+0x9c>)
    3dd4:	002a      	movs	r2, r5
    3dd6:	401c      	ands	r4, r3
    3dd8:	239f      	movs	r3, #159	; 0x9f
    3dda:	01a4      	lsls	r4, r4, #6
    3ddc:	1a1b      	subs	r3, r3, r0
    3dde:	0a64      	lsrs	r4, r4, #9
    3de0:	b2db      	uxtb	r3, r3
    3de2:	e7c8      	b.n	3d76 <__aeabi_i2f+0x2a>
    3de4:	0022      	movs	r2, r4
    3de6:	e7d5      	b.n	3d94 <__aeabi_i2f+0x48>
    3de8:	fbffffff 	.word	0xfbffffff

00003dec <__aeabi_dmul>:
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	4657      	mov	r7, sl
    3df0:	4645      	mov	r5, r8
    3df2:	46de      	mov	lr, fp
    3df4:	464e      	mov	r6, r9
    3df6:	b5e0      	push	{r5, r6, r7, lr}
    3df8:	030c      	lsls	r4, r1, #12
    3dfa:	4698      	mov	r8, r3
    3dfc:	004e      	lsls	r6, r1, #1
    3dfe:	0b23      	lsrs	r3, r4, #12
    3e00:	b087      	sub	sp, #28
    3e02:	0007      	movs	r7, r0
    3e04:	4692      	mov	sl, r2
    3e06:	469b      	mov	fp, r3
    3e08:	0d76      	lsrs	r6, r6, #21
    3e0a:	0fcd      	lsrs	r5, r1, #31
    3e0c:	2e00      	cmp	r6, #0
    3e0e:	d06b      	beq.n	3ee8 <__aeabi_dmul+0xfc>
    3e10:	4b6d      	ldr	r3, [pc, #436]	; (3fc8 <__aeabi_dmul+0x1dc>)
    3e12:	429e      	cmp	r6, r3
    3e14:	d035      	beq.n	3e82 <__aeabi_dmul+0x96>
    3e16:	2480      	movs	r4, #128	; 0x80
    3e18:	465b      	mov	r3, fp
    3e1a:	0f42      	lsrs	r2, r0, #29
    3e1c:	0424      	lsls	r4, r4, #16
    3e1e:	00db      	lsls	r3, r3, #3
    3e20:	4314      	orrs	r4, r2
    3e22:	431c      	orrs	r4, r3
    3e24:	00c3      	lsls	r3, r0, #3
    3e26:	4699      	mov	r9, r3
    3e28:	4b68      	ldr	r3, [pc, #416]	; (3fcc <__aeabi_dmul+0x1e0>)
    3e2a:	46a3      	mov	fp, r4
    3e2c:	469c      	mov	ip, r3
    3e2e:	2300      	movs	r3, #0
    3e30:	2700      	movs	r7, #0
    3e32:	4466      	add	r6, ip
    3e34:	9302      	str	r3, [sp, #8]
    3e36:	4643      	mov	r3, r8
    3e38:	031c      	lsls	r4, r3, #12
    3e3a:	005a      	lsls	r2, r3, #1
    3e3c:	0fdb      	lsrs	r3, r3, #31
    3e3e:	4650      	mov	r0, sl
    3e40:	0b24      	lsrs	r4, r4, #12
    3e42:	0d52      	lsrs	r2, r2, #21
    3e44:	4698      	mov	r8, r3
    3e46:	d100      	bne.n	3e4a <__aeabi_dmul+0x5e>
    3e48:	e076      	b.n	3f38 <__aeabi_dmul+0x14c>
    3e4a:	4b5f      	ldr	r3, [pc, #380]	; (3fc8 <__aeabi_dmul+0x1dc>)
    3e4c:	429a      	cmp	r2, r3
    3e4e:	d06d      	beq.n	3f2c <__aeabi_dmul+0x140>
    3e50:	2380      	movs	r3, #128	; 0x80
    3e52:	0f41      	lsrs	r1, r0, #29
    3e54:	041b      	lsls	r3, r3, #16
    3e56:	430b      	orrs	r3, r1
    3e58:	495c      	ldr	r1, [pc, #368]	; (3fcc <__aeabi_dmul+0x1e0>)
    3e5a:	00e4      	lsls	r4, r4, #3
    3e5c:	468c      	mov	ip, r1
    3e5e:	431c      	orrs	r4, r3
    3e60:	00c3      	lsls	r3, r0, #3
    3e62:	2000      	movs	r0, #0
    3e64:	4462      	add	r2, ip
    3e66:	4641      	mov	r1, r8
    3e68:	18b6      	adds	r6, r6, r2
    3e6a:	4069      	eors	r1, r5
    3e6c:	1c72      	adds	r2, r6, #1
    3e6e:	9101      	str	r1, [sp, #4]
    3e70:	4694      	mov	ip, r2
    3e72:	4307      	orrs	r7, r0
    3e74:	2f0f      	cmp	r7, #15
    3e76:	d900      	bls.n	3e7a <__aeabi_dmul+0x8e>
    3e78:	e0b0      	b.n	3fdc <__aeabi_dmul+0x1f0>
    3e7a:	4a55      	ldr	r2, [pc, #340]	; (3fd0 <__aeabi_dmul+0x1e4>)
    3e7c:	00bf      	lsls	r7, r7, #2
    3e7e:	59d2      	ldr	r2, [r2, r7]
    3e80:	4697      	mov	pc, r2
    3e82:	465b      	mov	r3, fp
    3e84:	4303      	orrs	r3, r0
    3e86:	4699      	mov	r9, r3
    3e88:	d000      	beq.n	3e8c <__aeabi_dmul+0xa0>
    3e8a:	e087      	b.n	3f9c <__aeabi_dmul+0x1b0>
    3e8c:	2300      	movs	r3, #0
    3e8e:	469b      	mov	fp, r3
    3e90:	3302      	adds	r3, #2
    3e92:	2708      	movs	r7, #8
    3e94:	9302      	str	r3, [sp, #8]
    3e96:	e7ce      	b.n	3e36 <__aeabi_dmul+0x4a>
    3e98:	4642      	mov	r2, r8
    3e9a:	9201      	str	r2, [sp, #4]
    3e9c:	2802      	cmp	r0, #2
    3e9e:	d067      	beq.n	3f70 <__aeabi_dmul+0x184>
    3ea0:	2803      	cmp	r0, #3
    3ea2:	d100      	bne.n	3ea6 <__aeabi_dmul+0xba>
    3ea4:	e20e      	b.n	42c4 <__aeabi_dmul+0x4d8>
    3ea6:	2801      	cmp	r0, #1
    3ea8:	d000      	beq.n	3eac <__aeabi_dmul+0xc0>
    3eaa:	e162      	b.n	4172 <__aeabi_dmul+0x386>
    3eac:	2300      	movs	r3, #0
    3eae:	2400      	movs	r4, #0
    3eb0:	2200      	movs	r2, #0
    3eb2:	4699      	mov	r9, r3
    3eb4:	9901      	ldr	r1, [sp, #4]
    3eb6:	4001      	ands	r1, r0
    3eb8:	b2cd      	uxtb	r5, r1
    3eba:	2100      	movs	r1, #0
    3ebc:	0312      	lsls	r2, r2, #12
    3ebe:	0d0b      	lsrs	r3, r1, #20
    3ec0:	0b12      	lsrs	r2, r2, #12
    3ec2:	051b      	lsls	r3, r3, #20
    3ec4:	4313      	orrs	r3, r2
    3ec6:	4a43      	ldr	r2, [pc, #268]	; (3fd4 <__aeabi_dmul+0x1e8>)
    3ec8:	0524      	lsls	r4, r4, #20
    3eca:	4013      	ands	r3, r2
    3ecc:	431c      	orrs	r4, r3
    3ece:	0064      	lsls	r4, r4, #1
    3ed0:	07ed      	lsls	r5, r5, #31
    3ed2:	0864      	lsrs	r4, r4, #1
    3ed4:	432c      	orrs	r4, r5
    3ed6:	4648      	mov	r0, r9
    3ed8:	0021      	movs	r1, r4
    3eda:	b007      	add	sp, #28
    3edc:	bc3c      	pop	{r2, r3, r4, r5}
    3ede:	4690      	mov	r8, r2
    3ee0:	4699      	mov	r9, r3
    3ee2:	46a2      	mov	sl, r4
    3ee4:	46ab      	mov	fp, r5
    3ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ee8:	4303      	orrs	r3, r0
    3eea:	4699      	mov	r9, r3
    3eec:	d04f      	beq.n	3f8e <__aeabi_dmul+0x1a2>
    3eee:	465b      	mov	r3, fp
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d100      	bne.n	3ef6 <__aeabi_dmul+0x10a>
    3ef4:	e189      	b.n	420a <__aeabi_dmul+0x41e>
    3ef6:	4658      	mov	r0, fp
    3ef8:	f000 fac4 	bl	4484 <__clzsi2>
    3efc:	0003      	movs	r3, r0
    3efe:	3b0b      	subs	r3, #11
    3f00:	2b1c      	cmp	r3, #28
    3f02:	dd00      	ble.n	3f06 <__aeabi_dmul+0x11a>
    3f04:	e17a      	b.n	41fc <__aeabi_dmul+0x410>
    3f06:	221d      	movs	r2, #29
    3f08:	1ad3      	subs	r3, r2, r3
    3f0a:	003a      	movs	r2, r7
    3f0c:	0001      	movs	r1, r0
    3f0e:	465c      	mov	r4, fp
    3f10:	40da      	lsrs	r2, r3
    3f12:	3908      	subs	r1, #8
    3f14:	408c      	lsls	r4, r1
    3f16:	0013      	movs	r3, r2
    3f18:	408f      	lsls	r7, r1
    3f1a:	4323      	orrs	r3, r4
    3f1c:	469b      	mov	fp, r3
    3f1e:	46b9      	mov	r9, r7
    3f20:	2300      	movs	r3, #0
    3f22:	4e2d      	ldr	r6, [pc, #180]	; (3fd8 <__aeabi_dmul+0x1ec>)
    3f24:	2700      	movs	r7, #0
    3f26:	1a36      	subs	r6, r6, r0
    3f28:	9302      	str	r3, [sp, #8]
    3f2a:	e784      	b.n	3e36 <__aeabi_dmul+0x4a>
    3f2c:	4653      	mov	r3, sl
    3f2e:	4323      	orrs	r3, r4
    3f30:	d12a      	bne.n	3f88 <__aeabi_dmul+0x19c>
    3f32:	2400      	movs	r4, #0
    3f34:	2002      	movs	r0, #2
    3f36:	e796      	b.n	3e66 <__aeabi_dmul+0x7a>
    3f38:	4653      	mov	r3, sl
    3f3a:	4323      	orrs	r3, r4
    3f3c:	d020      	beq.n	3f80 <__aeabi_dmul+0x194>
    3f3e:	2c00      	cmp	r4, #0
    3f40:	d100      	bne.n	3f44 <__aeabi_dmul+0x158>
    3f42:	e157      	b.n	41f4 <__aeabi_dmul+0x408>
    3f44:	0020      	movs	r0, r4
    3f46:	f000 fa9d 	bl	4484 <__clzsi2>
    3f4a:	0003      	movs	r3, r0
    3f4c:	3b0b      	subs	r3, #11
    3f4e:	2b1c      	cmp	r3, #28
    3f50:	dd00      	ble.n	3f54 <__aeabi_dmul+0x168>
    3f52:	e149      	b.n	41e8 <__aeabi_dmul+0x3fc>
    3f54:	211d      	movs	r1, #29
    3f56:	1acb      	subs	r3, r1, r3
    3f58:	4651      	mov	r1, sl
    3f5a:	0002      	movs	r2, r0
    3f5c:	40d9      	lsrs	r1, r3
    3f5e:	4653      	mov	r3, sl
    3f60:	3a08      	subs	r2, #8
    3f62:	4094      	lsls	r4, r2
    3f64:	4093      	lsls	r3, r2
    3f66:	430c      	orrs	r4, r1
    3f68:	4a1b      	ldr	r2, [pc, #108]	; (3fd8 <__aeabi_dmul+0x1ec>)
    3f6a:	1a12      	subs	r2, r2, r0
    3f6c:	2000      	movs	r0, #0
    3f6e:	e77a      	b.n	3e66 <__aeabi_dmul+0x7a>
    3f70:	2501      	movs	r5, #1
    3f72:	9b01      	ldr	r3, [sp, #4]
    3f74:	4c14      	ldr	r4, [pc, #80]	; (3fc8 <__aeabi_dmul+0x1dc>)
    3f76:	401d      	ands	r5, r3
    3f78:	2300      	movs	r3, #0
    3f7a:	2200      	movs	r2, #0
    3f7c:	4699      	mov	r9, r3
    3f7e:	e79c      	b.n	3eba <__aeabi_dmul+0xce>
    3f80:	2400      	movs	r4, #0
    3f82:	2200      	movs	r2, #0
    3f84:	2001      	movs	r0, #1
    3f86:	e76e      	b.n	3e66 <__aeabi_dmul+0x7a>
    3f88:	4653      	mov	r3, sl
    3f8a:	2003      	movs	r0, #3
    3f8c:	e76b      	b.n	3e66 <__aeabi_dmul+0x7a>
    3f8e:	2300      	movs	r3, #0
    3f90:	469b      	mov	fp, r3
    3f92:	3301      	adds	r3, #1
    3f94:	2704      	movs	r7, #4
    3f96:	2600      	movs	r6, #0
    3f98:	9302      	str	r3, [sp, #8]
    3f9a:	e74c      	b.n	3e36 <__aeabi_dmul+0x4a>
    3f9c:	2303      	movs	r3, #3
    3f9e:	4681      	mov	r9, r0
    3fa0:	270c      	movs	r7, #12
    3fa2:	9302      	str	r3, [sp, #8]
    3fa4:	e747      	b.n	3e36 <__aeabi_dmul+0x4a>
    3fa6:	2280      	movs	r2, #128	; 0x80
    3fa8:	2300      	movs	r3, #0
    3faa:	2500      	movs	r5, #0
    3fac:	0312      	lsls	r2, r2, #12
    3fae:	4699      	mov	r9, r3
    3fb0:	4c05      	ldr	r4, [pc, #20]	; (3fc8 <__aeabi_dmul+0x1dc>)
    3fb2:	e782      	b.n	3eba <__aeabi_dmul+0xce>
    3fb4:	465c      	mov	r4, fp
    3fb6:	464b      	mov	r3, r9
    3fb8:	9802      	ldr	r0, [sp, #8]
    3fba:	e76f      	b.n	3e9c <__aeabi_dmul+0xb0>
    3fbc:	465c      	mov	r4, fp
    3fbe:	464b      	mov	r3, r9
    3fc0:	9501      	str	r5, [sp, #4]
    3fc2:	9802      	ldr	r0, [sp, #8]
    3fc4:	e76a      	b.n	3e9c <__aeabi_dmul+0xb0>
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	000007ff 	.word	0x000007ff
    3fcc:	fffffc01 	.word	0xfffffc01
    3fd0:	000046a8 	.word	0x000046a8
    3fd4:	800fffff 	.word	0x800fffff
    3fd8:	fffffc0d 	.word	0xfffffc0d
    3fdc:	464a      	mov	r2, r9
    3fde:	4649      	mov	r1, r9
    3fe0:	0c17      	lsrs	r7, r2, #16
    3fe2:	0c1a      	lsrs	r2, r3, #16
    3fe4:	041b      	lsls	r3, r3, #16
    3fe6:	0c1b      	lsrs	r3, r3, #16
    3fe8:	0408      	lsls	r0, r1, #16
    3fea:	0019      	movs	r1, r3
    3fec:	0c00      	lsrs	r0, r0, #16
    3fee:	4341      	muls	r1, r0
    3ff0:	0015      	movs	r5, r2
    3ff2:	4688      	mov	r8, r1
    3ff4:	0019      	movs	r1, r3
    3ff6:	437d      	muls	r5, r7
    3ff8:	4379      	muls	r1, r7
    3ffa:	9503      	str	r5, [sp, #12]
    3ffc:	4689      	mov	r9, r1
    3ffe:	0029      	movs	r1, r5
    4000:	0015      	movs	r5, r2
    4002:	4345      	muls	r5, r0
    4004:	444d      	add	r5, r9
    4006:	9502      	str	r5, [sp, #8]
    4008:	4645      	mov	r5, r8
    400a:	0c2d      	lsrs	r5, r5, #16
    400c:	46aa      	mov	sl, r5
    400e:	9d02      	ldr	r5, [sp, #8]
    4010:	4455      	add	r5, sl
    4012:	45a9      	cmp	r9, r5
    4014:	d906      	bls.n	4024 <__aeabi_dmul+0x238>
    4016:	468a      	mov	sl, r1
    4018:	2180      	movs	r1, #128	; 0x80
    401a:	0249      	lsls	r1, r1, #9
    401c:	4689      	mov	r9, r1
    401e:	44ca      	add	sl, r9
    4020:	4651      	mov	r1, sl
    4022:	9103      	str	r1, [sp, #12]
    4024:	0c29      	lsrs	r1, r5, #16
    4026:	9104      	str	r1, [sp, #16]
    4028:	4641      	mov	r1, r8
    402a:	0409      	lsls	r1, r1, #16
    402c:	042d      	lsls	r5, r5, #16
    402e:	0c09      	lsrs	r1, r1, #16
    4030:	4688      	mov	r8, r1
    4032:	0029      	movs	r1, r5
    4034:	0c25      	lsrs	r5, r4, #16
    4036:	0424      	lsls	r4, r4, #16
    4038:	4441      	add	r1, r8
    403a:	0c24      	lsrs	r4, r4, #16
    403c:	9105      	str	r1, [sp, #20]
    403e:	0021      	movs	r1, r4
    4040:	4341      	muls	r1, r0
    4042:	4688      	mov	r8, r1
    4044:	0021      	movs	r1, r4
    4046:	4379      	muls	r1, r7
    4048:	468a      	mov	sl, r1
    404a:	4368      	muls	r0, r5
    404c:	4641      	mov	r1, r8
    404e:	4450      	add	r0, sl
    4050:	4681      	mov	r9, r0
    4052:	0c08      	lsrs	r0, r1, #16
    4054:	4448      	add	r0, r9
    4056:	436f      	muls	r7, r5
    4058:	4582      	cmp	sl, r0
    405a:	d903      	bls.n	4064 <__aeabi_dmul+0x278>
    405c:	2180      	movs	r1, #128	; 0x80
    405e:	0249      	lsls	r1, r1, #9
    4060:	4689      	mov	r9, r1
    4062:	444f      	add	r7, r9
    4064:	0c01      	lsrs	r1, r0, #16
    4066:	4689      	mov	r9, r1
    4068:	0039      	movs	r1, r7
    406a:	4449      	add	r1, r9
    406c:	9102      	str	r1, [sp, #8]
    406e:	4641      	mov	r1, r8
    4070:	040f      	lsls	r7, r1, #16
    4072:	9904      	ldr	r1, [sp, #16]
    4074:	0c3f      	lsrs	r7, r7, #16
    4076:	4688      	mov	r8, r1
    4078:	0400      	lsls	r0, r0, #16
    407a:	19c0      	adds	r0, r0, r7
    407c:	4480      	add	r8, r0
    407e:	4641      	mov	r1, r8
    4080:	9104      	str	r1, [sp, #16]
    4082:	4659      	mov	r1, fp
    4084:	0c0f      	lsrs	r7, r1, #16
    4086:	0409      	lsls	r1, r1, #16
    4088:	0c09      	lsrs	r1, r1, #16
    408a:	4688      	mov	r8, r1
    408c:	4359      	muls	r1, r3
    408e:	468a      	mov	sl, r1
    4090:	0039      	movs	r1, r7
    4092:	4351      	muls	r1, r2
    4094:	4689      	mov	r9, r1
    4096:	4641      	mov	r1, r8
    4098:	434a      	muls	r2, r1
    409a:	4651      	mov	r1, sl
    409c:	0c09      	lsrs	r1, r1, #16
    409e:	468b      	mov	fp, r1
    40a0:	437b      	muls	r3, r7
    40a2:	18d2      	adds	r2, r2, r3
    40a4:	445a      	add	r2, fp
    40a6:	4293      	cmp	r3, r2
    40a8:	d903      	bls.n	40b2 <__aeabi_dmul+0x2c6>
    40aa:	2380      	movs	r3, #128	; 0x80
    40ac:	025b      	lsls	r3, r3, #9
    40ae:	469b      	mov	fp, r3
    40b0:	44d9      	add	r9, fp
    40b2:	4651      	mov	r1, sl
    40b4:	0409      	lsls	r1, r1, #16
    40b6:	0c09      	lsrs	r1, r1, #16
    40b8:	468a      	mov	sl, r1
    40ba:	4641      	mov	r1, r8
    40bc:	4361      	muls	r1, r4
    40be:	437c      	muls	r4, r7
    40c0:	0c13      	lsrs	r3, r2, #16
    40c2:	0412      	lsls	r2, r2, #16
    40c4:	444b      	add	r3, r9
    40c6:	4452      	add	r2, sl
    40c8:	46a1      	mov	r9, r4
    40ca:	468a      	mov	sl, r1
    40cc:	003c      	movs	r4, r7
    40ce:	4641      	mov	r1, r8
    40d0:	436c      	muls	r4, r5
    40d2:	434d      	muls	r5, r1
    40d4:	4651      	mov	r1, sl
    40d6:	444d      	add	r5, r9
    40d8:	0c0f      	lsrs	r7, r1, #16
    40da:	197d      	adds	r5, r7, r5
    40dc:	45a9      	cmp	r9, r5
    40de:	d903      	bls.n	40e8 <__aeabi_dmul+0x2fc>
    40e0:	2180      	movs	r1, #128	; 0x80
    40e2:	0249      	lsls	r1, r1, #9
    40e4:	4688      	mov	r8, r1
    40e6:	4444      	add	r4, r8
    40e8:	9f04      	ldr	r7, [sp, #16]
    40ea:	9903      	ldr	r1, [sp, #12]
    40ec:	46b8      	mov	r8, r7
    40ee:	4441      	add	r1, r8
    40f0:	468b      	mov	fp, r1
    40f2:	4583      	cmp	fp, r0
    40f4:	4180      	sbcs	r0, r0
    40f6:	4241      	negs	r1, r0
    40f8:	4688      	mov	r8, r1
    40fa:	4651      	mov	r1, sl
    40fc:	0408      	lsls	r0, r1, #16
    40fe:	042f      	lsls	r7, r5, #16
    4100:	0c00      	lsrs	r0, r0, #16
    4102:	183f      	adds	r7, r7, r0
    4104:	4658      	mov	r0, fp
    4106:	9902      	ldr	r1, [sp, #8]
    4108:	1810      	adds	r0, r2, r0
    410a:	4689      	mov	r9, r1
    410c:	4290      	cmp	r0, r2
    410e:	4192      	sbcs	r2, r2
    4110:	444f      	add	r7, r9
    4112:	46ba      	mov	sl, r7
    4114:	4252      	negs	r2, r2
    4116:	4699      	mov	r9, r3
    4118:	4693      	mov	fp, r2
    411a:	44c2      	add	sl, r8
    411c:	44d1      	add	r9, sl
    411e:	44cb      	add	fp, r9
    4120:	428f      	cmp	r7, r1
    4122:	41bf      	sbcs	r7, r7
    4124:	45c2      	cmp	sl, r8
    4126:	4189      	sbcs	r1, r1
    4128:	4599      	cmp	r9, r3
    412a:	419b      	sbcs	r3, r3
    412c:	4593      	cmp	fp, r2
    412e:	4192      	sbcs	r2, r2
    4130:	427f      	negs	r7, r7
    4132:	4249      	negs	r1, r1
    4134:	0c2d      	lsrs	r5, r5, #16
    4136:	4252      	negs	r2, r2
    4138:	430f      	orrs	r7, r1
    413a:	425b      	negs	r3, r3
    413c:	4313      	orrs	r3, r2
    413e:	197f      	adds	r7, r7, r5
    4140:	18ff      	adds	r7, r7, r3
    4142:	465b      	mov	r3, fp
    4144:	193c      	adds	r4, r7, r4
    4146:	0ddb      	lsrs	r3, r3, #23
    4148:	9a05      	ldr	r2, [sp, #20]
    414a:	0264      	lsls	r4, r4, #9
    414c:	431c      	orrs	r4, r3
    414e:	0243      	lsls	r3, r0, #9
    4150:	4313      	orrs	r3, r2
    4152:	1e5d      	subs	r5, r3, #1
    4154:	41ab      	sbcs	r3, r5
    4156:	465a      	mov	r2, fp
    4158:	0dc0      	lsrs	r0, r0, #23
    415a:	4303      	orrs	r3, r0
    415c:	0252      	lsls	r2, r2, #9
    415e:	4313      	orrs	r3, r2
    4160:	01e2      	lsls	r2, r4, #7
    4162:	d556      	bpl.n	4212 <__aeabi_dmul+0x426>
    4164:	2001      	movs	r0, #1
    4166:	085a      	lsrs	r2, r3, #1
    4168:	4003      	ands	r3, r0
    416a:	4313      	orrs	r3, r2
    416c:	07e2      	lsls	r2, r4, #31
    416e:	4313      	orrs	r3, r2
    4170:	0864      	lsrs	r4, r4, #1
    4172:	485a      	ldr	r0, [pc, #360]	; (42dc <__aeabi_dmul+0x4f0>)
    4174:	4460      	add	r0, ip
    4176:	2800      	cmp	r0, #0
    4178:	dd4d      	ble.n	4216 <__aeabi_dmul+0x42a>
    417a:	075a      	lsls	r2, r3, #29
    417c:	d009      	beq.n	4192 <__aeabi_dmul+0x3a6>
    417e:	220f      	movs	r2, #15
    4180:	401a      	ands	r2, r3
    4182:	2a04      	cmp	r2, #4
    4184:	d005      	beq.n	4192 <__aeabi_dmul+0x3a6>
    4186:	1d1a      	adds	r2, r3, #4
    4188:	429a      	cmp	r2, r3
    418a:	419b      	sbcs	r3, r3
    418c:	425b      	negs	r3, r3
    418e:	18e4      	adds	r4, r4, r3
    4190:	0013      	movs	r3, r2
    4192:	01e2      	lsls	r2, r4, #7
    4194:	d504      	bpl.n	41a0 <__aeabi_dmul+0x3b4>
    4196:	2080      	movs	r0, #128	; 0x80
    4198:	4a51      	ldr	r2, [pc, #324]	; (42e0 <__aeabi_dmul+0x4f4>)
    419a:	00c0      	lsls	r0, r0, #3
    419c:	4014      	ands	r4, r2
    419e:	4460      	add	r0, ip
    41a0:	4a50      	ldr	r2, [pc, #320]	; (42e4 <__aeabi_dmul+0x4f8>)
    41a2:	4290      	cmp	r0, r2
    41a4:	dd00      	ble.n	41a8 <__aeabi_dmul+0x3bc>
    41a6:	e6e3      	b.n	3f70 <__aeabi_dmul+0x184>
    41a8:	2501      	movs	r5, #1
    41aa:	08db      	lsrs	r3, r3, #3
    41ac:	0762      	lsls	r2, r4, #29
    41ae:	431a      	orrs	r2, r3
    41b0:	0264      	lsls	r4, r4, #9
    41b2:	9b01      	ldr	r3, [sp, #4]
    41b4:	4691      	mov	r9, r2
    41b6:	0b22      	lsrs	r2, r4, #12
    41b8:	0544      	lsls	r4, r0, #21
    41ba:	0d64      	lsrs	r4, r4, #21
    41bc:	401d      	ands	r5, r3
    41be:	e67c      	b.n	3eba <__aeabi_dmul+0xce>
    41c0:	2280      	movs	r2, #128	; 0x80
    41c2:	4659      	mov	r1, fp
    41c4:	0312      	lsls	r2, r2, #12
    41c6:	4211      	tst	r1, r2
    41c8:	d008      	beq.n	41dc <__aeabi_dmul+0x3f0>
    41ca:	4214      	tst	r4, r2
    41cc:	d106      	bne.n	41dc <__aeabi_dmul+0x3f0>
    41ce:	4322      	orrs	r2, r4
    41d0:	0312      	lsls	r2, r2, #12
    41d2:	0b12      	lsrs	r2, r2, #12
    41d4:	4645      	mov	r5, r8
    41d6:	4699      	mov	r9, r3
    41d8:	4c43      	ldr	r4, [pc, #268]	; (42e8 <__aeabi_dmul+0x4fc>)
    41da:	e66e      	b.n	3eba <__aeabi_dmul+0xce>
    41dc:	465b      	mov	r3, fp
    41de:	431a      	orrs	r2, r3
    41e0:	0312      	lsls	r2, r2, #12
    41e2:	0b12      	lsrs	r2, r2, #12
    41e4:	4c40      	ldr	r4, [pc, #256]	; (42e8 <__aeabi_dmul+0x4fc>)
    41e6:	e668      	b.n	3eba <__aeabi_dmul+0xce>
    41e8:	0003      	movs	r3, r0
    41ea:	4654      	mov	r4, sl
    41ec:	3b28      	subs	r3, #40	; 0x28
    41ee:	409c      	lsls	r4, r3
    41f0:	2300      	movs	r3, #0
    41f2:	e6b9      	b.n	3f68 <__aeabi_dmul+0x17c>
    41f4:	f000 f946 	bl	4484 <__clzsi2>
    41f8:	3020      	adds	r0, #32
    41fa:	e6a6      	b.n	3f4a <__aeabi_dmul+0x15e>
    41fc:	0003      	movs	r3, r0
    41fe:	3b28      	subs	r3, #40	; 0x28
    4200:	409f      	lsls	r7, r3
    4202:	2300      	movs	r3, #0
    4204:	46bb      	mov	fp, r7
    4206:	4699      	mov	r9, r3
    4208:	e68a      	b.n	3f20 <__aeabi_dmul+0x134>
    420a:	f000 f93b 	bl	4484 <__clzsi2>
    420e:	3020      	adds	r0, #32
    4210:	e674      	b.n	3efc <__aeabi_dmul+0x110>
    4212:	46b4      	mov	ip, r6
    4214:	e7ad      	b.n	4172 <__aeabi_dmul+0x386>
    4216:	2501      	movs	r5, #1
    4218:	1a2a      	subs	r2, r5, r0
    421a:	2a38      	cmp	r2, #56	; 0x38
    421c:	dd06      	ble.n	422c <__aeabi_dmul+0x440>
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	2400      	movs	r4, #0
    4222:	401d      	ands	r5, r3
    4224:	2300      	movs	r3, #0
    4226:	2200      	movs	r2, #0
    4228:	4699      	mov	r9, r3
    422a:	e646      	b.n	3eba <__aeabi_dmul+0xce>
    422c:	2a1f      	cmp	r2, #31
    422e:	dc21      	bgt.n	4274 <__aeabi_dmul+0x488>
    4230:	2520      	movs	r5, #32
    4232:	0020      	movs	r0, r4
    4234:	1aad      	subs	r5, r5, r2
    4236:	001e      	movs	r6, r3
    4238:	40ab      	lsls	r3, r5
    423a:	40a8      	lsls	r0, r5
    423c:	40d6      	lsrs	r6, r2
    423e:	1e5d      	subs	r5, r3, #1
    4240:	41ab      	sbcs	r3, r5
    4242:	4330      	orrs	r0, r6
    4244:	4318      	orrs	r0, r3
    4246:	40d4      	lsrs	r4, r2
    4248:	0743      	lsls	r3, r0, #29
    424a:	d009      	beq.n	4260 <__aeabi_dmul+0x474>
    424c:	230f      	movs	r3, #15
    424e:	4003      	ands	r3, r0
    4250:	2b04      	cmp	r3, #4
    4252:	d005      	beq.n	4260 <__aeabi_dmul+0x474>
    4254:	0003      	movs	r3, r0
    4256:	1d18      	adds	r0, r3, #4
    4258:	4298      	cmp	r0, r3
    425a:	419b      	sbcs	r3, r3
    425c:	425b      	negs	r3, r3
    425e:	18e4      	adds	r4, r4, r3
    4260:	0223      	lsls	r3, r4, #8
    4262:	d521      	bpl.n	42a8 <__aeabi_dmul+0x4bc>
    4264:	2501      	movs	r5, #1
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	2401      	movs	r4, #1
    426a:	401d      	ands	r5, r3
    426c:	2300      	movs	r3, #0
    426e:	2200      	movs	r2, #0
    4270:	4699      	mov	r9, r3
    4272:	e622      	b.n	3eba <__aeabi_dmul+0xce>
    4274:	251f      	movs	r5, #31
    4276:	0021      	movs	r1, r4
    4278:	426d      	negs	r5, r5
    427a:	1a28      	subs	r0, r5, r0
    427c:	40c1      	lsrs	r1, r0
    427e:	0008      	movs	r0, r1
    4280:	2a20      	cmp	r2, #32
    4282:	d01d      	beq.n	42c0 <__aeabi_dmul+0x4d4>
    4284:	355f      	adds	r5, #95	; 0x5f
    4286:	1aaa      	subs	r2, r5, r2
    4288:	4094      	lsls	r4, r2
    428a:	4323      	orrs	r3, r4
    428c:	1e5c      	subs	r4, r3, #1
    428e:	41a3      	sbcs	r3, r4
    4290:	2507      	movs	r5, #7
    4292:	4303      	orrs	r3, r0
    4294:	401d      	ands	r5, r3
    4296:	2200      	movs	r2, #0
    4298:	2d00      	cmp	r5, #0
    429a:	d009      	beq.n	42b0 <__aeabi_dmul+0x4c4>
    429c:	220f      	movs	r2, #15
    429e:	2400      	movs	r4, #0
    42a0:	401a      	ands	r2, r3
    42a2:	0018      	movs	r0, r3
    42a4:	2a04      	cmp	r2, #4
    42a6:	d1d6      	bne.n	4256 <__aeabi_dmul+0x46a>
    42a8:	0003      	movs	r3, r0
    42aa:	0765      	lsls	r5, r4, #29
    42ac:	0264      	lsls	r4, r4, #9
    42ae:	0b22      	lsrs	r2, r4, #12
    42b0:	08db      	lsrs	r3, r3, #3
    42b2:	432b      	orrs	r3, r5
    42b4:	2501      	movs	r5, #1
    42b6:	4699      	mov	r9, r3
    42b8:	9b01      	ldr	r3, [sp, #4]
    42ba:	2400      	movs	r4, #0
    42bc:	401d      	ands	r5, r3
    42be:	e5fc      	b.n	3eba <__aeabi_dmul+0xce>
    42c0:	2400      	movs	r4, #0
    42c2:	e7e2      	b.n	428a <__aeabi_dmul+0x49e>
    42c4:	2280      	movs	r2, #128	; 0x80
    42c6:	2501      	movs	r5, #1
    42c8:	0312      	lsls	r2, r2, #12
    42ca:	4322      	orrs	r2, r4
    42cc:	9901      	ldr	r1, [sp, #4]
    42ce:	0312      	lsls	r2, r2, #12
    42d0:	0b12      	lsrs	r2, r2, #12
    42d2:	400d      	ands	r5, r1
    42d4:	4699      	mov	r9, r3
    42d6:	4c04      	ldr	r4, [pc, #16]	; (42e8 <__aeabi_dmul+0x4fc>)
    42d8:	e5ef      	b.n	3eba <__aeabi_dmul+0xce>
    42da:	46c0      	nop			; (mov r8, r8)
    42dc:	000003ff 	.word	0x000003ff
    42e0:	feffffff 	.word	0xfeffffff
    42e4:	000007fe 	.word	0x000007fe
    42e8:	000007ff 	.word	0x000007ff

000042ec <__aeabi_i2d>:
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	2800      	cmp	r0, #0
    42f0:	d030      	beq.n	4354 <__aeabi_i2d+0x68>
    42f2:	17c3      	asrs	r3, r0, #31
    42f4:	18c4      	adds	r4, r0, r3
    42f6:	405c      	eors	r4, r3
    42f8:	0fc5      	lsrs	r5, r0, #31
    42fa:	0020      	movs	r0, r4
    42fc:	f000 f8c2 	bl	4484 <__clzsi2>
    4300:	4b17      	ldr	r3, [pc, #92]	; (4360 <__aeabi_i2d+0x74>)
    4302:	4a18      	ldr	r2, [pc, #96]	; (4364 <__aeabi_i2d+0x78>)
    4304:	1a1b      	subs	r3, r3, r0
    4306:	1ad2      	subs	r2, r2, r3
    4308:	2a1f      	cmp	r2, #31
    430a:	dd18      	ble.n	433e <__aeabi_i2d+0x52>
    430c:	4a16      	ldr	r2, [pc, #88]	; (4368 <__aeabi_i2d+0x7c>)
    430e:	1ad2      	subs	r2, r2, r3
    4310:	4094      	lsls	r4, r2
    4312:	2200      	movs	r2, #0
    4314:	0324      	lsls	r4, r4, #12
    4316:	055b      	lsls	r3, r3, #21
    4318:	0b24      	lsrs	r4, r4, #12
    431a:	0d5b      	lsrs	r3, r3, #21
    431c:	2100      	movs	r1, #0
    431e:	0010      	movs	r0, r2
    4320:	0324      	lsls	r4, r4, #12
    4322:	0d0a      	lsrs	r2, r1, #20
    4324:	0b24      	lsrs	r4, r4, #12
    4326:	0512      	lsls	r2, r2, #20
    4328:	4322      	orrs	r2, r4
    432a:	4c10      	ldr	r4, [pc, #64]	; (436c <__aeabi_i2d+0x80>)
    432c:	051b      	lsls	r3, r3, #20
    432e:	4022      	ands	r2, r4
    4330:	4313      	orrs	r3, r2
    4332:	005b      	lsls	r3, r3, #1
    4334:	07ed      	lsls	r5, r5, #31
    4336:	085b      	lsrs	r3, r3, #1
    4338:	432b      	orrs	r3, r5
    433a:	0019      	movs	r1, r3
    433c:	bd70      	pop	{r4, r5, r6, pc}
    433e:	0021      	movs	r1, r4
    4340:	4091      	lsls	r1, r2
    4342:	000a      	movs	r2, r1
    4344:	210b      	movs	r1, #11
    4346:	1a08      	subs	r0, r1, r0
    4348:	40c4      	lsrs	r4, r0
    434a:	055b      	lsls	r3, r3, #21
    434c:	0324      	lsls	r4, r4, #12
    434e:	0b24      	lsrs	r4, r4, #12
    4350:	0d5b      	lsrs	r3, r3, #21
    4352:	e7e3      	b.n	431c <__aeabi_i2d+0x30>
    4354:	2500      	movs	r5, #0
    4356:	2300      	movs	r3, #0
    4358:	2400      	movs	r4, #0
    435a:	2200      	movs	r2, #0
    435c:	e7de      	b.n	431c <__aeabi_i2d+0x30>
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	0000041e 	.word	0x0000041e
    4364:	00000433 	.word	0x00000433
    4368:	00000413 	.word	0x00000413
    436c:	800fffff 	.word	0x800fffff

00004370 <__aeabi_d2f>:
    4370:	b5f0      	push	{r4, r5, r6, r7, lr}
    4372:	004c      	lsls	r4, r1, #1
    4374:	0d64      	lsrs	r4, r4, #21
    4376:	030b      	lsls	r3, r1, #12
    4378:	1c62      	adds	r2, r4, #1
    437a:	0f45      	lsrs	r5, r0, #29
    437c:	0a5b      	lsrs	r3, r3, #9
    437e:	0552      	lsls	r2, r2, #21
    4380:	432b      	orrs	r3, r5
    4382:	0fc9      	lsrs	r1, r1, #31
    4384:	00c5      	lsls	r5, r0, #3
    4386:	0d52      	lsrs	r2, r2, #21
    4388:	2a01      	cmp	r2, #1
    438a:	dd28      	ble.n	43de <__aeabi_d2f+0x6e>
    438c:	4a3a      	ldr	r2, [pc, #232]	; (4478 <__aeabi_d2f+0x108>)
    438e:	18a6      	adds	r6, r4, r2
    4390:	2efe      	cmp	r6, #254	; 0xfe
    4392:	dc1b      	bgt.n	43cc <__aeabi_d2f+0x5c>
    4394:	2e00      	cmp	r6, #0
    4396:	dd3e      	ble.n	4416 <__aeabi_d2f+0xa6>
    4398:	0180      	lsls	r0, r0, #6
    439a:	0002      	movs	r2, r0
    439c:	1e50      	subs	r0, r2, #1
    439e:	4182      	sbcs	r2, r0
    43a0:	0f6d      	lsrs	r5, r5, #29
    43a2:	432a      	orrs	r2, r5
    43a4:	00db      	lsls	r3, r3, #3
    43a6:	4313      	orrs	r3, r2
    43a8:	075a      	lsls	r2, r3, #29
    43aa:	d004      	beq.n	43b6 <__aeabi_d2f+0x46>
    43ac:	220f      	movs	r2, #15
    43ae:	401a      	ands	r2, r3
    43b0:	2a04      	cmp	r2, #4
    43b2:	d000      	beq.n	43b6 <__aeabi_d2f+0x46>
    43b4:	3304      	adds	r3, #4
    43b6:	2280      	movs	r2, #128	; 0x80
    43b8:	04d2      	lsls	r2, r2, #19
    43ba:	401a      	ands	r2, r3
    43bc:	d05a      	beq.n	4474 <__aeabi_d2f+0x104>
    43be:	3601      	adds	r6, #1
    43c0:	2eff      	cmp	r6, #255	; 0xff
    43c2:	d003      	beq.n	43cc <__aeabi_d2f+0x5c>
    43c4:	019b      	lsls	r3, r3, #6
    43c6:	0a5b      	lsrs	r3, r3, #9
    43c8:	b2f4      	uxtb	r4, r6
    43ca:	e001      	b.n	43d0 <__aeabi_d2f+0x60>
    43cc:	24ff      	movs	r4, #255	; 0xff
    43ce:	2300      	movs	r3, #0
    43d0:	0258      	lsls	r0, r3, #9
    43d2:	05e4      	lsls	r4, r4, #23
    43d4:	0a40      	lsrs	r0, r0, #9
    43d6:	07c9      	lsls	r1, r1, #31
    43d8:	4320      	orrs	r0, r4
    43da:	4308      	orrs	r0, r1
    43dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43de:	2c00      	cmp	r4, #0
    43e0:	d007      	beq.n	43f2 <__aeabi_d2f+0x82>
    43e2:	431d      	orrs	r5, r3
    43e4:	d0f2      	beq.n	43cc <__aeabi_d2f+0x5c>
    43e6:	2080      	movs	r0, #128	; 0x80
    43e8:	00db      	lsls	r3, r3, #3
    43ea:	0480      	lsls	r0, r0, #18
    43ec:	4303      	orrs	r3, r0
    43ee:	26ff      	movs	r6, #255	; 0xff
    43f0:	e7da      	b.n	43a8 <__aeabi_d2f+0x38>
    43f2:	432b      	orrs	r3, r5
    43f4:	d003      	beq.n	43fe <__aeabi_d2f+0x8e>
    43f6:	2305      	movs	r3, #5
    43f8:	08db      	lsrs	r3, r3, #3
    43fa:	2cff      	cmp	r4, #255	; 0xff
    43fc:	d003      	beq.n	4406 <__aeabi_d2f+0x96>
    43fe:	025b      	lsls	r3, r3, #9
    4400:	0a5b      	lsrs	r3, r3, #9
    4402:	b2e4      	uxtb	r4, r4
    4404:	e7e4      	b.n	43d0 <__aeabi_d2f+0x60>
    4406:	2b00      	cmp	r3, #0
    4408:	d032      	beq.n	4470 <__aeabi_d2f+0x100>
    440a:	2080      	movs	r0, #128	; 0x80
    440c:	03c0      	lsls	r0, r0, #15
    440e:	4303      	orrs	r3, r0
    4410:	025b      	lsls	r3, r3, #9
    4412:	0a5b      	lsrs	r3, r3, #9
    4414:	e7dc      	b.n	43d0 <__aeabi_d2f+0x60>
    4416:	0032      	movs	r2, r6
    4418:	3217      	adds	r2, #23
    441a:	db14      	blt.n	4446 <__aeabi_d2f+0xd6>
    441c:	2280      	movs	r2, #128	; 0x80
    441e:	271e      	movs	r7, #30
    4420:	0412      	lsls	r2, r2, #16
    4422:	4313      	orrs	r3, r2
    4424:	1bbf      	subs	r7, r7, r6
    4426:	2f1f      	cmp	r7, #31
    4428:	dc0f      	bgt.n	444a <__aeabi_d2f+0xda>
    442a:	4a14      	ldr	r2, [pc, #80]	; (447c <__aeabi_d2f+0x10c>)
    442c:	4694      	mov	ip, r2
    442e:	4464      	add	r4, ip
    4430:	002a      	movs	r2, r5
    4432:	40a5      	lsls	r5, r4
    4434:	002e      	movs	r6, r5
    4436:	40a3      	lsls	r3, r4
    4438:	1e75      	subs	r5, r6, #1
    443a:	41ae      	sbcs	r6, r5
    443c:	40fa      	lsrs	r2, r7
    443e:	4333      	orrs	r3, r6
    4440:	4313      	orrs	r3, r2
    4442:	2600      	movs	r6, #0
    4444:	e7b0      	b.n	43a8 <__aeabi_d2f+0x38>
    4446:	2400      	movs	r4, #0
    4448:	e7d5      	b.n	43f6 <__aeabi_d2f+0x86>
    444a:	2202      	movs	r2, #2
    444c:	4252      	negs	r2, r2
    444e:	1b96      	subs	r6, r2, r6
    4450:	001a      	movs	r2, r3
    4452:	40f2      	lsrs	r2, r6
    4454:	2f20      	cmp	r7, #32
    4456:	d009      	beq.n	446c <__aeabi_d2f+0xfc>
    4458:	4809      	ldr	r0, [pc, #36]	; (4480 <__aeabi_d2f+0x110>)
    445a:	4684      	mov	ip, r0
    445c:	4464      	add	r4, ip
    445e:	40a3      	lsls	r3, r4
    4460:	432b      	orrs	r3, r5
    4462:	1e5d      	subs	r5, r3, #1
    4464:	41ab      	sbcs	r3, r5
    4466:	2600      	movs	r6, #0
    4468:	4313      	orrs	r3, r2
    446a:	e79d      	b.n	43a8 <__aeabi_d2f+0x38>
    446c:	2300      	movs	r3, #0
    446e:	e7f7      	b.n	4460 <__aeabi_d2f+0xf0>
    4470:	2300      	movs	r3, #0
    4472:	e7ad      	b.n	43d0 <__aeabi_d2f+0x60>
    4474:	0034      	movs	r4, r6
    4476:	e7bf      	b.n	43f8 <__aeabi_d2f+0x88>
    4478:	fffffc80 	.word	0xfffffc80
    447c:	fffffc82 	.word	0xfffffc82
    4480:	fffffca2 	.word	0xfffffca2

00004484 <__clzsi2>:
    4484:	211c      	movs	r1, #28
    4486:	2301      	movs	r3, #1
    4488:	041b      	lsls	r3, r3, #16
    448a:	4298      	cmp	r0, r3
    448c:	d301      	bcc.n	4492 <__clzsi2+0xe>
    448e:	0c00      	lsrs	r0, r0, #16
    4490:	3910      	subs	r1, #16
    4492:	0a1b      	lsrs	r3, r3, #8
    4494:	4298      	cmp	r0, r3
    4496:	d301      	bcc.n	449c <__clzsi2+0x18>
    4498:	0a00      	lsrs	r0, r0, #8
    449a:	3908      	subs	r1, #8
    449c:	091b      	lsrs	r3, r3, #4
    449e:	4298      	cmp	r0, r3
    44a0:	d301      	bcc.n	44a6 <__clzsi2+0x22>
    44a2:	0900      	lsrs	r0, r0, #4
    44a4:	3904      	subs	r1, #4
    44a6:	a202      	add	r2, pc, #8	; (adr r2, 44b0 <__clzsi2+0x2c>)
    44a8:	5c10      	ldrb	r0, [r2, r0]
    44aa:	1840      	adds	r0, r0, r1
    44ac:	4770      	bx	lr
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	02020304 	.word	0x02020304
    44b4:	01010101 	.word	0x01010101
	...

000044c0 <__libc_init_array>:
    44c0:	b570      	push	{r4, r5, r6, lr}
    44c2:	2600      	movs	r6, #0
    44c4:	4d0c      	ldr	r5, [pc, #48]	; (44f8 <__libc_init_array+0x38>)
    44c6:	4c0d      	ldr	r4, [pc, #52]	; (44fc <__libc_init_array+0x3c>)
    44c8:	1b64      	subs	r4, r4, r5
    44ca:	10a4      	asrs	r4, r4, #2
    44cc:	42a6      	cmp	r6, r4
    44ce:	d109      	bne.n	44e4 <__libc_init_array+0x24>
    44d0:	2600      	movs	r6, #0
    44d2:	f000 f909 	bl	46e8 <_init>
    44d6:	4d0a      	ldr	r5, [pc, #40]	; (4500 <__libc_init_array+0x40>)
    44d8:	4c0a      	ldr	r4, [pc, #40]	; (4504 <__libc_init_array+0x44>)
    44da:	1b64      	subs	r4, r4, r5
    44dc:	10a4      	asrs	r4, r4, #2
    44de:	42a6      	cmp	r6, r4
    44e0:	d105      	bne.n	44ee <__libc_init_array+0x2e>
    44e2:	bd70      	pop	{r4, r5, r6, pc}
    44e4:	00b3      	lsls	r3, r6, #2
    44e6:	58eb      	ldr	r3, [r5, r3]
    44e8:	4798      	blx	r3
    44ea:	3601      	adds	r6, #1
    44ec:	e7ee      	b.n	44cc <__libc_init_array+0xc>
    44ee:	00b3      	lsls	r3, r6, #2
    44f0:	58eb      	ldr	r3, [r5, r3]
    44f2:	4798      	blx	r3
    44f4:	3601      	adds	r6, #1
    44f6:	e7f2      	b.n	44de <__libc_init_array+0x1e>
    44f8:	000046f4 	.word	0x000046f4
    44fc:	000046f4 	.word	0x000046f4
    4500:	000046f4 	.word	0x000046f4
    4504:	000046f8 	.word	0x000046f8

00004508 <memset>:
    4508:	0003      	movs	r3, r0
    450a:	1882      	adds	r2, r0, r2
    450c:	4293      	cmp	r3, r2
    450e:	d100      	bne.n	4512 <memset+0xa>
    4510:	4770      	bx	lr
    4512:	7019      	strb	r1, [r3, #0]
    4514:	3301      	adds	r3, #1
    4516:	e7f9      	b.n	450c <memset+0x4>
    4518:	682f2e2e 	.word	0x682f2e2e
    451c:	702f6c70 	.word	0x702f6c70
    4520:	2f74726f 	.word	0x2f74726f
    4524:	5f6c7068 	.word	0x5f6c7068
    4528:	6f697067 	.word	0x6f697067
    452c:	7361625f 	.word	0x7361625f
    4530:	00682e65 	.word	0x00682e65
    4534:	682f2e2e 	.word	0x682f2e2e
    4538:	692f6c61 	.word	0x692f6c61
    453c:	756c636e 	.word	0x756c636e
    4540:	682f6564 	.word	0x682f6564
    4544:	775f6c61 	.word	0x775f6c61
    4548:	682e7464 	.word	0x682e7464
    454c:	00000000 	.word	0x00000000
    4550:	682f2e2e 	.word	0x682f2e2e
    4554:	732f6c61 	.word	0x732f6c61
    4558:	682f6372 	.word	0x682f6372
    455c:	695f6c61 	.word	0x695f6c61
    4560:	6d5f6332 	.word	0x6d5f6332
    4564:	6e79735f 	.word	0x6e79735f
    4568:	00632e63 	.word	0x00632e63
    456c:	682f2e2e 	.word	0x682f2e2e
    4570:	732f6c61 	.word	0x732f6c61
    4574:	682f6372 	.word	0x682f6372
    4578:	695f6c61 	.word	0x695f6c61
    457c:	00632e6f 	.word	0x00632e6f
    4580:	682f2e2e 	.word	0x682f2e2e
    4584:	752f6c61 	.word	0x752f6c61
    4588:	736c6974 	.word	0x736c6974
    458c:	6372732f 	.word	0x6372732f
    4590:	6974752f 	.word	0x6974752f
    4594:	655f736c 	.word	0x655f736c
    4598:	746e6576 	.word	0x746e6576
    459c:	0000632e 	.word	0x0000632e
    45a0:	682f2e2e 	.word	0x682f2e2e
    45a4:	752f6c61 	.word	0x752f6c61
    45a8:	736c6974 	.word	0x736c6974
    45ac:	6372732f 	.word	0x6372732f
    45b0:	6974752f 	.word	0x6974752f
    45b4:	6c5f736c 	.word	0x6c5f736c
    45b8:	2e747369 	.word	0x2e747369
    45bc:	00000063 	.word	0x00000063
    45c0:	682f2e2e 	.word	0x682f2e2e
    45c4:	632f6c70 	.word	0x632f6c70
    45c8:	2f65726f 	.word	0x2f65726f
    45cc:	5f6c7068 	.word	0x5f6c7068
    45d0:	65726f63 	.word	0x65726f63
    45d4:	70306d5f 	.word	0x70306d5f
    45d8:	5f73756c 	.word	0x5f73756c
    45dc:	65736162 	.word	0x65736162
    45e0:	0000632e 	.word	0x0000632e
    45e4:	000010e2 	.word	0x000010e2
    45e8:	000010c0 	.word	0x000010c0
    45ec:	0000109e 	.word	0x0000109e
    45f0:	0000107c 	.word	0x0000107c
    45f4:	0000105a 	.word	0x0000105a
    45f8:	000011ce 	.word	0x000011ce
    45fc:	000011ac 	.word	0x000011ac
    4600:	00001198 	.word	0x00001198
    4604:	0000117a 	.word	0x0000117a
    4608:	00001162 	.word	0x00001162
    460c:	682f2e2e 	.word	0x682f2e2e
    4610:	732f6c70 	.word	0x732f6c70
    4614:	6f637265 	.word	0x6f637265
    4618:	70682f6d 	.word	0x70682f6d
    461c:	65735f6c 	.word	0x65735f6c
    4620:	6d6f6372 	.word	0x6d6f6372
    4624:	0000632e 	.word	0x0000632e

00004628 <sercomspi_regs>:
	...
    463c:	732f2e2e 7065656c 6e616d5f 72656761     ../sleep_manager
    464c:	656c732f 6d5f7065 67616e61 632e7265     /sleep_manager.c
    465c:	00000000                                ....

00004660 <mcp980x_interface>:
    4660:	00002c55 00002d21 000038c0 00003810     U,..!-...8...8..
    4670:	00003810 0000380e 000038b2 000038b2     .8...8...8...8..
    4680:	000038a8 0000380e 000038b2 000038a8     .8...8...8...8..
    4690:	000038b2 0000380e 000038b8 000038b8     .8...8...8...8..
    46a0:	000038b8 00003948 00003fdc 00003e9c     .8..H9...?...>..
    46b0:	00003e9c 00003e98 00003fb4 00003fb4     .>...>...?...?..
    46c0:	00003fa6 00003e98 00003fb4 00003fa6     .?...>...?...?..
    46d0:	00003fb4 00003e98 00003fbc 00003fbc     .?...>...?...?..
    46e0:	00003fbc 000041c0                       .?...A..

000046e8 <_init>:
    46e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46ee:	bc08      	pop	{r3}
    46f0:	469e      	mov	lr, r3
    46f2:	4770      	bx	lr

000046f4 <__init_array_start>:
    46f4:	000000dd 	.word	0x000000dd

000046f8 <_fini>:
    46f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46fe:	bc08      	pop	{r3}
    4700:	469e      	mov	lr, r3
    4702:	4770      	bx	lr

00004704 <__fini_array_start>:
    4704:	000000b5 	.word	0x000000b5
