
SatCube_SAML21E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007360  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  00007360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020050  2**0
                  CONTENTS
  3 .bss          0000017c  20000050  000073b0  00020050  2**2
                  ALLOC
  4 .stack        00002004  200001cc  0000752c  00020050  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022b0e  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b45  00000000  00000000  00042bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000887a  00000000  00000000  00046724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016e0  00000000  00000000  0004ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014e8  00000000  00000000  0005067e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f12f  00000000  00000000  00051b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a28f  00000000  00000000  00070c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d1cc  00000000  00000000  0008af24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005268  00000000  00000000  001180f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 21 00 20 31 01 00 00 c5 01 00 00 c5 01 00 00     .!. 1...........
	...
      2c:	c5 01 00 00 00 00 00 00 00 00 00 00 c5 01 00 00     ................
      3c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 a5 2d 00 00     .............-..
      4c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      5c:	c5 01 00 00 91 47 00 00 ad 47 00 00 c5 01 00 00     .....G...G......
      6c:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      7c:	c5 01 00 00 c5 01 00 00 e5 4e 00 00 c5 01 00 00     .........N......
	...
      94:	c5 01 00 00 c5 01 00 00 c5 01 00 00 c5 01 00 00     ................
      a4:	c5 01 00 00 c5 01 00 00 c5 01 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000050 	.word	0x20000050
      d4:	00000000 	.word	0x00000000
      d8:	00007360 	.word	0x00007360

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000054 	.word	0x20000054
     108:	00007360 	.word	0x00007360
     10c:	00007360 	.word	0x00007360
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11a:	4798      	blx	r3
	sleep_manager_init();
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     11e:	4798      	blx	r3
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	00000d15 	.word	0x00000d15
     12c:	00005489 	.word	0x00005489

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b19      	ldr	r3, [pc, #100]	; (19c <Reset_Handler+0x6c>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x70>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <Reset_Handler+0x74>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b11      	ldr	r3, [pc, #68]	; (1a8 <Reset_Handler+0x78>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0e      	ldr	r3, [pc, #56]	; (1ac <Reset_Handler+0x7c>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0d      	ldr	r3, [pc, #52]	; (1b0 <Reset_Handler+0x80>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x84>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     186:	4a0c      	ldr	r2, [pc, #48]	; (1b8 <Reset_Handler+0x88>)
     188:	6853      	ldr	r3, [r2, #4]
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	430b      	orrs	r3, r1
     18e:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     190:	4b0a      	ldr	r3, [pc, #40]	; (1bc <Reset_Handler+0x8c>)
     192:	4798      	blx	r3

        /* Branch to main function */
        main();
     194:	4b0a      	ldr	r3, [pc, #40]	; (1c0 <Reset_Handler+0x90>)
     196:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     198:	e7fe      	b.n	198 <Reset_Handler+0x68>
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	00007360 	.word	0x00007360
     1a0:	20000000 	.word	0x20000000
     1a4:	20000050 	.word	0x20000050
     1a8:	20000050 	.word	0x20000050
     1ac:	200001cc 	.word	0x200001cc
     1b0:	00000000 	.word	0x00000000
     1b4:	e000ed00 	.word	0xe000ed00
     1b8:	41004000 	.word	0x41004000
     1bc:	00006f71 	.word	0x00006f71
     1c0:	000052b1 	.word	0x000052b1

000001c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	af00      	add	r7, sp, #0
        while (1) {
     1c8:	e7fe      	b.n	1c8 <Dummy_Handler+0x4>

000001ca <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ca:	b580      	push	{r7, lr}
     1cc:	b084      	sub	sp, #16
     1ce:	af00      	add	r7, sp, #0
     1d0:	60f8      	str	r0, [r7, #12]
     1d2:	607a      	str	r2, [r7, #4]
     1d4:	230b      	movs	r3, #11
     1d6:	18fb      	adds	r3, r7, r3
     1d8:	1c0a      	adds	r2, r1, #0
     1da:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1dc:	230b      	movs	r3, #11
     1de:	18fb      	adds	r3, r7, r3
     1e0:	781a      	ldrb	r2, [r3, #0]
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	3220      	adds	r2, #32
     1e6:	0092      	lsls	r2, r2, #2
     1e8:	6879      	ldr	r1, [r7, #4]
     1ea:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1ec:	46c0      	nop			; (mov r8, r8)
     1ee:	46bd      	mov	sp, r7
     1f0:	b004      	add	sp, #16
     1f2:	bd80      	pop	{r7, pc}

000001f4 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     1f4:	b580      	push	{r7, lr}
     1f6:	b082      	sub	sp, #8
     1f8:	af00      	add	r7, sp, #0
     1fa:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	695b      	ldr	r3, [r3, #20]
     200:	2280      	movs	r2, #128	; 0x80
     202:	431a      	orrs	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}

00000210 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     210:	b580      	push	{r7, lr}
     212:	b082      	sub	sp, #8
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	695b      	ldr	r3, [r3, #20]
     21c:	2280      	movs	r2, #128	; 0x80
     21e:	0052      	lsls	r2, r2, #1
     220:	431a      	orrs	r2, r3
     222:	687b      	ldr	r3, [r7, #4]
     224:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     226:	46c0      	nop			; (mov r8, r8)
     228:	46bd      	mov	sp, r7
     22a:	b002      	add	sp, #8
     22c:	bd80      	pop	{r7, pc}

0000022e <hri_mclk_set_APBCMASK_SERCOM0_bit>:
{
	return ((Mclk *)hw)->APBBMASK.reg;
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
     22e:	b580      	push	{r7, lr}
     230:	b082      	sub	sp, #8
     232:	af00      	add	r7, sp, #0
     234:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     236:	687b      	ldr	r3, [r7, #4]
     238:	69db      	ldr	r3, [r3, #28]
     23a:	2201      	movs	r2, #1
     23c:	431a      	orrs	r2, r3
     23e:	687b      	ldr	r3, [r7, #4]
     240:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     242:	46c0      	nop			; (mov r8, r8)
     244:	46bd      	mov	sp, r7
     246:	b002      	add	sp, #8
     248:	bd80      	pop	{r7, pc}

0000024a <hri_mclk_set_APBCMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
     24a:	b580      	push	{r7, lr}
     24c:	b082      	sub	sp, #8
     24e:	af00      	add	r7, sp, #0
     250:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     252:	687b      	ldr	r3, [r7, #4]
     254:	69db      	ldr	r3, [r3, #28]
     256:	2202      	movs	r2, #2
     258:	431a      	orrs	r2, r3
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	46bd      	mov	sp, r7
     262:	b002      	add	sp, #8
     264:	bd80      	pop	{r7, pc}

00000266 <hri_mclk_set_APBCMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM2_bit(const void *const hw)
{
     266:	b580      	push	{r7, lr}
     268:	b082      	sub	sp, #8
     26a:	af00      	add	r7, sp, #0
     26c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	69db      	ldr	r3, [r3, #28]
     272:	2204      	movs	r2, #4
     274:	431a      	orrs	r2, r3
     276:	687b      	ldr	r3, [r7, #4]
     278:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}

00000282 <hri_mclk_set_APBCMASK_TC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
     282:	b580      	push	{r7, lr}
     284:	b082      	sub	sp, #8
     286:	af00      	add	r7, sp, #0
     288:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	69db      	ldr	r3, [r3, #28]
     28e:	2280      	movs	r2, #128	; 0x80
     290:	0052      	lsls	r2, r2, #1
     292:	431a      	orrs	r2, r3
     294:	687b      	ldr	r3, [r7, #4]
     296:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     298:	46c0      	nop			; (mov r8, r8)
     29a:	46bd      	mov	sp, r7
     29c:	b002      	add	sp, #8
     29e:	bd80      	pop	{r7, pc}

000002a0 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b084      	sub	sp, #16
     2a4:	af00      	add	r7, sp, #0
     2a6:	60f8      	str	r0, [r7, #12]
     2a8:	607a      	str	r2, [r7, #4]
     2aa:	230b      	movs	r3, #11
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	1c0a      	adds	r2, r1, #0
     2b0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2b2:	230b      	movs	r3, #11
     2b4:	18fb      	adds	r3, r7, r3
     2b6:	781b      	ldrb	r3, [r3, #0]
     2b8:	68fa      	ldr	r2, [r7, #12]
     2ba:	01db      	lsls	r3, r3, #7
     2bc:	18d3      	adds	r3, r2, r3
     2be:	3308      	adds	r3, #8
     2c0:	687a      	ldr	r2, [r7, #4]
     2c2:	601a      	str	r2, [r3, #0]
}
     2c4:	46c0      	nop			; (mov r8, r8)
     2c6:	46bd      	mov	sp, r7
     2c8:	b004      	add	sp, #16
     2ca:	bd80      	pop	{r7, pc}

000002cc <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	60f8      	str	r0, [r7, #12]
     2d4:	607a      	str	r2, [r7, #4]
     2d6:	230b      	movs	r3, #11
     2d8:	18fb      	adds	r3, r7, r3
     2da:	1c0a      	adds	r2, r1, #0
     2dc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2de:	230b      	movs	r3, #11
     2e0:	18fb      	adds	r3, r7, r3
     2e2:	781b      	ldrb	r3, [r3, #0]
     2e4:	68fa      	ldr	r2, [r7, #12]
     2e6:	01db      	lsls	r3, r3, #7
     2e8:	18d3      	adds	r3, r2, r3
     2ea:	3304      	adds	r3, #4
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	601a      	str	r2, [r3, #0]
}
     2f0:	46c0      	nop			; (mov r8, r8)
     2f2:	46bd      	mov	sp, r7
     2f4:	b004      	add	sp, #16
     2f6:	bd80      	pop	{r7, pc}

000002f8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b084      	sub	sp, #16
     2fc:	af00      	add	r7, sp, #0
     2fe:	60f8      	str	r0, [r7, #12]
     300:	607a      	str	r2, [r7, #4]
     302:	230b      	movs	r3, #11
     304:	18fb      	adds	r3, r7, r3
     306:	1c0a      	adds	r2, r1, #0
     308:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     30a:	230b      	movs	r3, #11
     30c:	18fb      	adds	r3, r7, r3
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	68fa      	ldr	r2, [r7, #12]
     312:	01db      	lsls	r3, r3, #7
     314:	18d3      	adds	r3, r2, r3
     316:	3318      	adds	r3, #24
     318:	687a      	ldr	r2, [r7, #4]
     31a:	601a      	str	r2, [r3, #0]
}
     31c:	46c0      	nop			; (mov r8, r8)
     31e:	46bd      	mov	sp, r7
     320:	b004      	add	sp, #16
     322:	bd80      	pop	{r7, pc}

00000324 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     324:	b580      	push	{r7, lr}
     326:	b084      	sub	sp, #16
     328:	af00      	add	r7, sp, #0
     32a:	60f8      	str	r0, [r7, #12]
     32c:	607a      	str	r2, [r7, #4]
     32e:	230b      	movs	r3, #11
     330:	18fb      	adds	r3, r7, r3
     332:	1c0a      	adds	r2, r1, #0
     334:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     336:	230b      	movs	r3, #11
     338:	18fb      	adds	r3, r7, r3
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	68fa      	ldr	r2, [r7, #12]
     33e:	01db      	lsls	r3, r3, #7
     340:	18d3      	adds	r3, r2, r3
     342:	3314      	adds	r3, #20
     344:	687a      	ldr	r2, [r7, #4]
     346:	601a      	str	r2, [r3, #0]
}
     348:	46c0      	nop			; (mov r8, r8)
     34a:	46bd      	mov	sp, r7
     34c:	b004      	add	sp, #16
     34e:	bd80      	pop	{r7, pc}

00000350 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     350:	b590      	push	{r4, r7, lr}
     352:	b085      	sub	sp, #20
     354:	af00      	add	r7, sp, #0
     356:	6078      	str	r0, [r7, #4]
     358:	000c      	movs	r4, r1
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	1cfb      	adds	r3, r7, #3
     360:	1c22      	adds	r2, r4, #0
     362:	701a      	strb	r2, [r3, #0]
     364:	1cbb      	adds	r3, r7, #2
     366:	1c02      	adds	r2, r0, #0
     368:	701a      	strb	r2, [r3, #0]
     36a:	1c7b      	adds	r3, r7, #1
     36c:	1c0a      	adds	r2, r1, #0
     36e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     370:	1cfb      	adds	r3, r7, #3
     372:	7819      	ldrb	r1, [r3, #0]
     374:	1cbb      	adds	r3, r7, #2
     376:	781a      	ldrb	r2, [r3, #0]
     378:	230f      	movs	r3, #15
     37a:	18fb      	adds	r3, r7, r3
     37c:	6878      	ldr	r0, [r7, #4]
     37e:	2430      	movs	r4, #48	; 0x30
     380:	01c9      	lsls	r1, r1, #7
     382:	1841      	adds	r1, r0, r1
     384:	188a      	adds	r2, r1, r2
     386:	1912      	adds	r2, r2, r4
     388:	7812      	ldrb	r2, [r2, #0]
     38a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     38c:	230f      	movs	r3, #15
     38e:	18fb      	adds	r3, r7, r3
     390:	220f      	movs	r2, #15
     392:	18ba      	adds	r2, r7, r2
     394:	7812      	ldrb	r2, [r2, #0]
     396:	210f      	movs	r1, #15
     398:	438a      	bics	r2, r1
     39a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     39c:	1c7b      	adds	r3, r7, #1
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	220f      	movs	r2, #15
     3a2:	4013      	ands	r3, r2
     3a4:	b2d9      	uxtb	r1, r3
     3a6:	230f      	movs	r3, #15
     3a8:	18fb      	adds	r3, r7, r3
     3aa:	220f      	movs	r2, #15
     3ac:	18ba      	adds	r2, r7, r2
     3ae:	7812      	ldrb	r2, [r2, #0]
     3b0:	430a      	orrs	r2, r1
     3b2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b4:	1cfb      	adds	r3, r7, #3
     3b6:	781a      	ldrb	r2, [r3, #0]
     3b8:	1cbb      	adds	r3, r7, #2
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	6879      	ldr	r1, [r7, #4]
     3be:	2030      	movs	r0, #48	; 0x30
     3c0:	01d2      	lsls	r2, r2, #7
     3c2:	188a      	adds	r2, r1, r2
     3c4:	18d3      	adds	r3, r2, r3
     3c6:	181b      	adds	r3, r3, r0
     3c8:	220f      	movs	r2, #15
     3ca:	18ba      	adds	r2, r7, r2
     3cc:	7812      	ldrb	r2, [r2, #0]
     3ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3d0:	46c0      	nop			; (mov r8, r8)
     3d2:	46bd      	mov	sp, r7
     3d4:	b005      	add	sp, #20
     3d6:	bd90      	pop	{r4, r7, pc}

000003d8 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     3d8:	b590      	push	{r4, r7, lr}
     3da:	b085      	sub	sp, #20
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
     3e0:	000c      	movs	r4, r1
     3e2:	0010      	movs	r0, r2
     3e4:	0019      	movs	r1, r3
     3e6:	1cfb      	adds	r3, r7, #3
     3e8:	1c22      	adds	r2, r4, #0
     3ea:	701a      	strb	r2, [r3, #0]
     3ec:	1cbb      	adds	r3, r7, #2
     3ee:	1c02      	adds	r2, r0, #0
     3f0:	701a      	strb	r2, [r3, #0]
     3f2:	1c7b      	adds	r3, r7, #1
     3f4:	1c0a      	adds	r2, r1, #0
     3f6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f8:	1cfb      	adds	r3, r7, #3
     3fa:	7819      	ldrb	r1, [r3, #0]
     3fc:	1cbb      	adds	r3, r7, #2
     3fe:	781a      	ldrb	r2, [r3, #0]
     400:	230f      	movs	r3, #15
     402:	18fb      	adds	r3, r7, r3
     404:	6878      	ldr	r0, [r7, #4]
     406:	2430      	movs	r4, #48	; 0x30
     408:	01c9      	lsls	r1, r1, #7
     40a:	1841      	adds	r1, r0, r1
     40c:	188a      	adds	r2, r1, r2
     40e:	1912      	adds	r2, r2, r4
     410:	7812      	ldrb	r2, [r2, #0]
     412:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	220f      	movs	r2, #15
     41a:	18ba      	adds	r2, r7, r2
     41c:	7812      	ldrb	r2, [r2, #0]
     41e:	210f      	movs	r1, #15
     420:	400a      	ands	r2, r1
     422:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     424:	1c7b      	adds	r3, r7, #1
     426:	781b      	ldrb	r3, [r3, #0]
     428:	011b      	lsls	r3, r3, #4
     42a:	b2d9      	uxtb	r1, r3
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	220f      	movs	r2, #15
     432:	18ba      	adds	r2, r7, r2
     434:	7812      	ldrb	r2, [r2, #0]
     436:	430a      	orrs	r2, r1
     438:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     43a:	1cfb      	adds	r3, r7, #3
     43c:	781a      	ldrb	r2, [r3, #0]
     43e:	1cbb      	adds	r3, r7, #2
     440:	781b      	ldrb	r3, [r3, #0]
     442:	6879      	ldr	r1, [r7, #4]
     444:	2030      	movs	r0, #48	; 0x30
     446:	01d2      	lsls	r2, r2, #7
     448:	188a      	adds	r2, r1, r2
     44a:	18d3      	adds	r3, r2, r3
     44c:	181b      	adds	r3, r3, r0
     44e:	220f      	movs	r2, #15
     450:	18ba      	adds	r2, r7, r2
     452:	7812      	ldrb	r2, [r2, #0]
     454:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     456:	46c0      	nop			; (mov r8, r8)
     458:	46bd      	mov	sp, r7
     45a:	b005      	add	sp, #20
     45c:	bd90      	pop	{r4, r7, pc}

0000045e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     45e:	b590      	push	{r4, r7, lr}
     460:	b085      	sub	sp, #20
     462:	af00      	add	r7, sp, #0
     464:	6078      	str	r0, [r7, #4]
     466:	000c      	movs	r4, r1
     468:	0010      	movs	r0, r2
     46a:	0019      	movs	r1, r3
     46c:	1cfb      	adds	r3, r7, #3
     46e:	1c22      	adds	r2, r4, #0
     470:	701a      	strb	r2, [r3, #0]
     472:	1cbb      	adds	r3, r7, #2
     474:	1c02      	adds	r2, r0, #0
     476:	701a      	strb	r2, [r3, #0]
     478:	1c7b      	adds	r3, r7, #1
     47a:	1c0a      	adds	r2, r1, #0
     47c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47e:	1cfb      	adds	r3, r7, #3
     480:	7819      	ldrb	r1, [r3, #0]
     482:	1cbb      	adds	r3, r7, #2
     484:	781a      	ldrb	r2, [r3, #0]
     486:	230f      	movs	r3, #15
     488:	18fb      	adds	r3, r7, r3
     48a:	6878      	ldr	r0, [r7, #4]
     48c:	2440      	movs	r4, #64	; 0x40
     48e:	01c9      	lsls	r1, r1, #7
     490:	1841      	adds	r1, r0, r1
     492:	188a      	adds	r2, r1, r2
     494:	1912      	adds	r2, r2, r4
     496:	7812      	ldrb	r2, [r2, #0]
     498:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	230f      	movs	r3, #15
     49c:	18fb      	adds	r3, r7, r3
     49e:	220f      	movs	r2, #15
     4a0:	18ba      	adds	r2, r7, r2
     4a2:	7812      	ldrb	r2, [r2, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	438a      	bics	r2, r1
     4a8:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4aa:	1c7b      	adds	r3, r7, #1
     4ac:	7819      	ldrb	r1, [r3, #0]
     4ae:	230f      	movs	r3, #15
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	220f      	movs	r2, #15
     4b4:	18ba      	adds	r2, r7, r2
     4b6:	7812      	ldrb	r2, [r2, #0]
     4b8:	430a      	orrs	r2, r1
     4ba:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4bc:	1cfb      	adds	r3, r7, #3
     4be:	781a      	ldrb	r2, [r3, #0]
     4c0:	1cbb      	adds	r3, r7, #2
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	6879      	ldr	r1, [r7, #4]
     4c6:	2040      	movs	r0, #64	; 0x40
     4c8:	01d2      	lsls	r2, r2, #7
     4ca:	188a      	adds	r2, r1, r2
     4cc:	18d3      	adds	r3, r2, r3
     4ce:	181b      	adds	r3, r3, r0
     4d0:	220f      	movs	r2, #15
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	7812      	ldrb	r2, [r2, #0]
     4d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4d8:	46c0      	nop			; (mov r8, r8)
     4da:	46bd      	mov	sp, r7
     4dc:	b005      	add	sp, #20
     4de:	bd90      	pop	{r4, r7, pc}

000004e0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4e0:	b5b0      	push	{r4, r5, r7, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	af00      	add	r7, sp, #0
     4e6:	6078      	str	r0, [r7, #4]
     4e8:	0008      	movs	r0, r1
     4ea:	0011      	movs	r1, r2
     4ec:	1cfb      	adds	r3, r7, #3
     4ee:	1c02      	adds	r2, r0, #0
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	1cbb      	adds	r3, r7, #2
     4f4:	1c0a      	adds	r2, r1, #0
     4f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4f8:	1cfb      	adds	r3, r7, #3
     4fa:	781a      	ldrb	r2, [r3, #0]
     4fc:	1cbb      	adds	r3, r7, #2
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	1cf9      	adds	r1, r7, #3
     502:	7808      	ldrb	r0, [r1, #0]
     504:	1cb9      	adds	r1, r7, #2
     506:	7809      	ldrb	r1, [r1, #0]
     508:	687c      	ldr	r4, [r7, #4]
     50a:	2540      	movs	r5, #64	; 0x40
     50c:	01c0      	lsls	r0, r0, #7
     50e:	1820      	adds	r0, r4, r0
     510:	1841      	adds	r1, r0, r1
     512:	1949      	adds	r1, r1, r5
     514:	7809      	ldrb	r1, [r1, #0]
     516:	b2c9      	uxtb	r1, r1
     518:	2004      	movs	r0, #4
     51a:	4301      	orrs	r1, r0
     51c:	b2cc      	uxtb	r4, r1
     51e:	6879      	ldr	r1, [r7, #4]
     520:	2040      	movs	r0, #64	; 0x40
     522:	01d2      	lsls	r2, r2, #7
     524:	188a      	adds	r2, r1, r2
     526:	18d3      	adds	r3, r2, r3
     528:	181b      	adds	r3, r3, r0
     52a:	1c22      	adds	r2, r4, #0
     52c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	46bd      	mov	sp, r7
     532:	b002      	add	sp, #8
     534:	bdb0      	pop	{r4, r5, r7, pc}

00000536 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     536:	b5b0      	push	{r4, r5, r7, lr}
     538:	b082      	sub	sp, #8
     53a:	af00      	add	r7, sp, #0
     53c:	6078      	str	r0, [r7, #4]
     53e:	0008      	movs	r0, r1
     540:	0011      	movs	r1, r2
     542:	1cfb      	adds	r3, r7, #3
     544:	1c02      	adds	r2, r0, #0
     546:	701a      	strb	r2, [r3, #0]
     548:	1cbb      	adds	r3, r7, #2
     54a:	1c0a      	adds	r2, r1, #0
     54c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54e:	1cfb      	adds	r3, r7, #3
     550:	781a      	ldrb	r2, [r3, #0]
     552:	1cbb      	adds	r3, r7, #2
     554:	781b      	ldrb	r3, [r3, #0]
     556:	1cf9      	adds	r1, r7, #3
     558:	7808      	ldrb	r0, [r1, #0]
     55a:	1cb9      	adds	r1, r7, #2
     55c:	7809      	ldrb	r1, [r1, #0]
     55e:	687c      	ldr	r4, [r7, #4]
     560:	2540      	movs	r5, #64	; 0x40
     562:	01c0      	lsls	r0, r0, #7
     564:	1820      	adds	r0, r4, r0
     566:	1841      	adds	r1, r0, r1
     568:	1949      	adds	r1, r1, r5
     56a:	7809      	ldrb	r1, [r1, #0]
     56c:	b2c9      	uxtb	r1, r1
     56e:	2004      	movs	r0, #4
     570:	4381      	bics	r1, r0
     572:	b2cc      	uxtb	r4, r1
     574:	6879      	ldr	r1, [r7, #4]
     576:	2040      	movs	r0, #64	; 0x40
     578:	01d2      	lsls	r2, r2, #7
     57a:	188a      	adds	r2, r1, r2
     57c:	18d3      	adds	r3, r2, r3
     57e:	181b      	adds	r3, r3, r0
     580:	1c22      	adds	r2, r4, #0
     582:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b002      	add	sp, #8
     58a:	bdb0      	pop	{r4, r5, r7, pc}

0000058c <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     58c:	b580      	push	{r7, lr}
     58e:	b084      	sub	sp, #16
     590:	af00      	add	r7, sp, #0
     592:	60f8      	str	r0, [r7, #12]
     594:	607a      	str	r2, [r7, #4]
     596:	230b      	movs	r3, #11
     598:	18fb      	adds	r3, r7, r3
     59a:	1c0a      	adds	r2, r1, #0
     59c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59e:	230b      	movs	r3, #11
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	68fa      	ldr	r2, [r7, #12]
     5a6:	01db      	lsls	r3, r3, #7
     5a8:	18d3      	adds	r3, r2, r3
     5aa:	3328      	adds	r3, #40	; 0x28
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5b0:	46c0      	nop			; (mov r8, r8)
     5b2:	46bd      	mov	sp, r7
     5b4:	b004      	add	sp, #16
     5b6:	bd80      	pop	{r7, pc}

000005b8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	6039      	str	r1, [r7, #0]
     5c0:	0011      	movs	r1, r2
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	1c02      	adds	r2, r0, #0
     5c6:	701a      	strb	r2, [r3, #0]
     5c8:	1dbb      	adds	r3, r7, #6
     5ca:	1c0a      	adds	r2, r1, #0
     5cc:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     5ce:	1dbb      	adds	r3, r7, #6
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	2b01      	cmp	r3, #1
     5d4:	d023      	beq.n	61e <_gpio_set_direction+0x66>
     5d6:	2b02      	cmp	r3, #2
     5d8:	d03f      	beq.n	65a <_gpio_set_direction+0xa2>
     5da:	2b00      	cmp	r3, #0
     5dc:	d15d      	bne.n	69a <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5de:	683a      	ldr	r2, [r7, #0]
     5e0:	1dfb      	adds	r3, r7, #7
     5e2:	7819      	ldrb	r1, [r3, #0]
     5e4:	23c0      	movs	r3, #192	; 0xc0
     5e6:	05db      	lsls	r3, r3, #23
     5e8:	0018      	movs	r0, r3
     5ea:	4b31      	ldr	r3, [pc, #196]	; (6b0 <_gpio_set_direction+0xf8>)
     5ec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5ee:	683b      	ldr	r3, [r7, #0]
     5f0:	041b      	lsls	r3, r3, #16
     5f2:	0c1b      	lsrs	r3, r3, #16
     5f4:	2280      	movs	r2, #128	; 0x80
     5f6:	05d2      	lsls	r2, r2, #23
     5f8:	431a      	orrs	r2, r3
     5fa:	1dfb      	adds	r3, r7, #7
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	482d      	ldr	r0, [pc, #180]	; (6b4 <_gpio_set_direction+0xfc>)
     600:	0019      	movs	r1, r3
     602:	4b2d      	ldr	r3, [pc, #180]	; (6b8 <_gpio_set_direction+0x100>)
     604:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     606:	683b      	ldr	r3, [r7, #0]
     608:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     60a:	22c0      	movs	r2, #192	; 0xc0
     60c:	0612      	lsls	r2, r2, #24
     60e:	431a      	orrs	r2, r3
     610:	1dfb      	adds	r3, r7, #7
     612:	781b      	ldrb	r3, [r3, #0]
     614:	4827      	ldr	r0, [pc, #156]	; (6b4 <_gpio_set_direction+0xfc>)
     616:	0019      	movs	r1, r3
     618:	4b27      	ldr	r3, [pc, #156]	; (6b8 <_gpio_set_direction+0x100>)
     61a:	4798      	blx	r3
		break;
     61c:	e043      	b.n	6a6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     61e:	683a      	ldr	r2, [r7, #0]
     620:	1dfb      	adds	r3, r7, #7
     622:	7819      	ldrb	r1, [r3, #0]
     624:	23c0      	movs	r3, #192	; 0xc0
     626:	05db      	lsls	r3, r3, #23
     628:	0018      	movs	r0, r3
     62a:	4b21      	ldr	r3, [pc, #132]	; (6b0 <_gpio_set_direction+0xf8>)
     62c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     62e:	683b      	ldr	r3, [r7, #0]
     630:	041b      	lsls	r3, r3, #16
     632:	0c1b      	lsrs	r3, r3, #16
     634:	4a21      	ldr	r2, [pc, #132]	; (6bc <_gpio_set_direction+0x104>)
     636:	431a      	orrs	r2, r3
     638:	1dfb      	adds	r3, r7, #7
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	481d      	ldr	r0, [pc, #116]	; (6b4 <_gpio_set_direction+0xfc>)
     63e:	0019      	movs	r1, r3
     640:	4b1d      	ldr	r3, [pc, #116]	; (6b8 <_gpio_set_direction+0x100>)
     642:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     644:	683b      	ldr	r3, [r7, #0]
     646:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     648:	4a1d      	ldr	r2, [pc, #116]	; (6c0 <_gpio_set_direction+0x108>)
     64a:	431a      	orrs	r2, r3
     64c:	1dfb      	adds	r3, r7, #7
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	4818      	ldr	r0, [pc, #96]	; (6b4 <_gpio_set_direction+0xfc>)
     652:	0019      	movs	r1, r3
     654:	4b18      	ldr	r3, [pc, #96]	; (6b8 <_gpio_set_direction+0x100>)
     656:	4798      	blx	r3
		break;
     658:	e025      	b.n	6a6 <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     65a:	683a      	ldr	r2, [r7, #0]
     65c:	1dfb      	adds	r3, r7, #7
     65e:	7819      	ldrb	r1, [r3, #0]
     660:	23c0      	movs	r3, #192	; 0xc0
     662:	05db      	lsls	r3, r3, #23
     664:	0018      	movs	r0, r3
     666:	4b17      	ldr	r3, [pc, #92]	; (6c4 <_gpio_set_direction+0x10c>)
     668:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	041b      	lsls	r3, r3, #16
     66e:	0c1b      	lsrs	r3, r3, #16
     670:	2280      	movs	r2, #128	; 0x80
     672:	05d2      	lsls	r2, r2, #23
     674:	431a      	orrs	r2, r3
     676:	1dfb      	adds	r3, r7, #7
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	480e      	ldr	r0, [pc, #56]	; (6b4 <_gpio_set_direction+0xfc>)
     67c:	0019      	movs	r1, r3
     67e:	4b0e      	ldr	r3, [pc, #56]	; (6b8 <_gpio_set_direction+0x100>)
     680:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     682:	683b      	ldr	r3, [r7, #0]
     684:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     686:	22c0      	movs	r2, #192	; 0xc0
     688:	0612      	lsls	r2, r2, #24
     68a:	431a      	orrs	r2, r3
     68c:	1dfb      	adds	r3, r7, #7
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	4808      	ldr	r0, [pc, #32]	; (6b4 <_gpio_set_direction+0xfc>)
     692:	0019      	movs	r1, r3
     694:	4b08      	ldr	r3, [pc, #32]	; (6b8 <_gpio_set_direction+0x100>)
     696:	4798      	blx	r3
		break;
     698:	e005      	b.n	6a6 <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     69a:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <_gpio_set_direction+0x110>)
     69c:	2246      	movs	r2, #70	; 0x46
     69e:	0019      	movs	r1, r3
     6a0:	2000      	movs	r0, #0
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <_gpio_set_direction+0x114>)
     6a4:	4798      	blx	r3
	}
}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	46bd      	mov	sp, r7
     6aa:	b002      	add	sp, #8
     6ac:	bd80      	pop	{r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	000002cd 	.word	0x000002cd
     6b4:	40002800 	.word	0x40002800
     6b8:	0000058d 	.word	0x0000058d
     6bc:	40020000 	.word	0x40020000
     6c0:	c0020000 	.word	0xc0020000
     6c4:	000002a1 	.word	0x000002a1
     6c8:	00006fc8 	.word	0x00006fc8
     6cc:	0000209b 	.word	0x0000209b

000006d0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6039      	str	r1, [r7, #0]
     6d8:	0011      	movs	r1, r2
     6da:	1dfb      	adds	r3, r7, #7
     6dc:	1c02      	adds	r2, r0, #0
     6de:	701a      	strb	r2, [r3, #0]
     6e0:	1dbb      	adds	r3, r7, #6
     6e2:	1c0a      	adds	r2, r1, #0
     6e4:	701a      	strb	r2, [r3, #0]
	if (level) {
     6e6:	1dbb      	adds	r3, r7, #6
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d008      	beq.n	700 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     6ee:	683a      	ldr	r2, [r7, #0]
     6f0:	1dfb      	adds	r3, r7, #7
     6f2:	7819      	ldrb	r1, [r3, #0]
     6f4:	23c0      	movs	r3, #192	; 0xc0
     6f6:	05db      	lsls	r3, r3, #23
     6f8:	0018      	movs	r0, r3
     6fa:	4b07      	ldr	r3, [pc, #28]	; (718 <_gpio_set_level+0x48>)
     6fc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6fe:	e007      	b.n	710 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     700:	683a      	ldr	r2, [r7, #0]
     702:	1dfb      	adds	r3, r7, #7
     704:	7819      	ldrb	r1, [r3, #0]
     706:	23c0      	movs	r3, #192	; 0xc0
     708:	05db      	lsls	r3, r3, #23
     70a:	0018      	movs	r0, r3
     70c:	4b03      	ldr	r3, [pc, #12]	; (71c <_gpio_set_level+0x4c>)
     70e:	4798      	blx	r3
}
     710:	46c0      	nop			; (mov r8, r8)
     712:	46bd      	mov	sp, r7
     714:	b002      	add	sp, #8
     716:	bd80      	pop	{r7, pc}
     718:	000002f9 	.word	0x000002f9
     71c:	00000325 	.word	0x00000325

00000720 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     720:	b590      	push	{r4, r7, lr}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	0004      	movs	r4, r0
     728:	0008      	movs	r0, r1
     72a:	0011      	movs	r1, r2
     72c:	1dfb      	adds	r3, r7, #7
     72e:	1c22      	adds	r2, r4, #0
     730:	701a      	strb	r2, [r3, #0]
     732:	1dbb      	adds	r3, r7, #6
     734:	1c02      	adds	r2, r0, #0
     736:	701a      	strb	r2, [r3, #0]
     738:	1d7b      	adds	r3, r7, #5
     73a:	1c0a      	adds	r2, r1, #0
     73c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     73e:	1d7b      	adds	r3, r7, #5
     740:	781b      	ldrb	r3, [r3, #0]
     742:	2b01      	cmp	r3, #1
     744:	d00c      	beq.n	760 <_gpio_set_pin_pull_mode+0x40>
     746:	2b02      	cmp	r3, #2
     748:	d029      	beq.n	79e <_gpio_set_pin_pull_mode+0x7e>
     74a:	2b00      	cmp	r3, #0
     74c:	d146      	bne.n	7dc <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     74e:	1dbb      	adds	r3, r7, #6
     750:	781a      	ldrb	r2, [r3, #0]
     752:	1dfb      	adds	r3, r7, #7
     754:	781b      	ldrb	r3, [r3, #0]
     756:	4827      	ldr	r0, [pc, #156]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     758:	0019      	movs	r1, r3
     75a:	4b27      	ldr	r3, [pc, #156]	; (7f8 <_gpio_set_pin_pull_mode+0xd8>)
     75c:	4798      	blx	r3
		break;
     75e:	e044      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     760:	1dbb      	adds	r3, r7, #6
     762:	781b      	ldrb	r3, [r3, #0]
     764:	2201      	movs	r2, #1
     766:	409a      	lsls	r2, r3
     768:	1dfb      	adds	r3, r7, #7
     76a:	7819      	ldrb	r1, [r3, #0]
     76c:	23c0      	movs	r3, #192	; 0xc0
     76e:	05db      	lsls	r3, r3, #23
     770:	0018      	movs	r0, r3
     772:	4b22      	ldr	r3, [pc, #136]	; (7fc <_gpio_set_pin_pull_mode+0xdc>)
     774:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     776:	1dbb      	adds	r3, r7, #6
     778:	781a      	ldrb	r2, [r3, #0]
     77a:	1dfb      	adds	r3, r7, #7
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	481d      	ldr	r0, [pc, #116]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     780:	0019      	movs	r1, r3
     782:	4b1f      	ldr	r3, [pc, #124]	; (800 <_gpio_set_pin_pull_mode+0xe0>)
     784:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     786:	1dbb      	adds	r3, r7, #6
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	2201      	movs	r2, #1
     78c:	409a      	lsls	r2, r3
     78e:	1dfb      	adds	r3, r7, #7
     790:	7819      	ldrb	r1, [r3, #0]
     792:	23c0      	movs	r3, #192	; 0xc0
     794:	05db      	lsls	r3, r3, #23
     796:	0018      	movs	r0, r3
     798:	4b1a      	ldr	r3, [pc, #104]	; (804 <_gpio_set_pin_pull_mode+0xe4>)
     79a:	4798      	blx	r3
		break;
     79c:	e025      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     79e:	1dbb      	adds	r3, r7, #6
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2201      	movs	r2, #1
     7a4:	409a      	lsls	r2, r3
     7a6:	1dfb      	adds	r3, r7, #7
     7a8:	7819      	ldrb	r1, [r3, #0]
     7aa:	23c0      	movs	r3, #192	; 0xc0
     7ac:	05db      	lsls	r3, r3, #23
     7ae:	0018      	movs	r0, r3
     7b0:	4b12      	ldr	r3, [pc, #72]	; (7fc <_gpio_set_pin_pull_mode+0xdc>)
     7b2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     7b4:	1dbb      	adds	r3, r7, #6
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	1dfb      	adds	r3, r7, #7
     7ba:	781b      	ldrb	r3, [r3, #0]
     7bc:	480d      	ldr	r0, [pc, #52]	; (7f4 <_gpio_set_pin_pull_mode+0xd4>)
     7be:	0019      	movs	r1, r3
     7c0:	4b0f      	ldr	r3, [pc, #60]	; (800 <_gpio_set_pin_pull_mode+0xe0>)
     7c2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     7c4:	1dbb      	adds	r3, r7, #6
     7c6:	781b      	ldrb	r3, [r3, #0]
     7c8:	2201      	movs	r2, #1
     7ca:	409a      	lsls	r2, r3
     7cc:	1dfb      	adds	r3, r7, #7
     7ce:	7819      	ldrb	r1, [r3, #0]
     7d0:	23c0      	movs	r3, #192	; 0xc0
     7d2:	05db      	lsls	r3, r3, #23
     7d4:	0018      	movs	r0, r3
     7d6:	4b0c      	ldr	r3, [pc, #48]	; (808 <_gpio_set_pin_pull_mode+0xe8>)
     7d8:	4798      	blx	r3
		break;
     7da:	e006      	b.n	7ea <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     7dc:	4b0b      	ldr	r3, [pc, #44]	; (80c <_gpio_set_pin_pull_mode+0xec>)
     7de:	2289      	movs	r2, #137	; 0x89
     7e0:	0019      	movs	r1, r3
     7e2:	2000      	movs	r0, #0
     7e4:	4b0a      	ldr	r3, [pc, #40]	; (810 <_gpio_set_pin_pull_mode+0xf0>)
     7e6:	4798      	blx	r3
		break;
     7e8:	46c0      	nop			; (mov r8, r8)
	}
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b003      	add	sp, #12
     7f0:	bd90      	pop	{r4, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	40002800 	.word	0x40002800
     7f8:	00000537 	.word	0x00000537
     7fc:	000002cd 	.word	0x000002cd
     800:	000004e1 	.word	0x000004e1
     804:	000002f9 	.word	0x000002f9
     808:	00000325 	.word	0x00000325
     80c:	00006fc8 	.word	0x00006fc8
     810:	0000209b 	.word	0x0000209b

00000814 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     814:	b590      	push	{r4, r7, lr}
     816:	b085      	sub	sp, #20
     818:	af00      	add	r7, sp, #0
     81a:	6078      	str	r0, [r7, #4]
     81c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     81e:	687b      	ldr	r3, [r7, #4]
     820:	095a      	lsrs	r2, r3, #5
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     828:	687b      	ldr	r3, [r7, #4]
     82a:	b2da      	uxtb	r2, r3
     82c:	230e      	movs	r3, #14
     82e:	18fb      	adds	r3, r7, r3
     830:	211f      	movs	r1, #31
     832:	400a      	ands	r2, r1
     834:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     836:	683b      	ldr	r3, [r7, #0]
     838:	3301      	adds	r3, #1
     83a:	d10a      	bne.n	852 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     83c:	230e      	movs	r3, #14
     83e:	18fb      	adds	r3, r7, r3
     840:	781a      	ldrb	r2, [r3, #0]
     842:	230f      	movs	r3, #15
     844:	18fb      	adds	r3, r7, r3
     846:	7819      	ldrb	r1, [r3, #0]
     848:	481b      	ldr	r0, [pc, #108]	; (8b8 <_gpio_set_pin_function+0xa4>)
     84a:	2300      	movs	r3, #0
     84c:	4c1b      	ldr	r4, [pc, #108]	; (8bc <_gpio_set_pin_function+0xa8>)
     84e:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     850:	e02e      	b.n	8b0 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     852:	230e      	movs	r3, #14
     854:	18fb      	adds	r3, r7, r3
     856:	781a      	ldrb	r2, [r3, #0]
     858:	230f      	movs	r3, #15
     85a:	18fb      	adds	r3, r7, r3
     85c:	7819      	ldrb	r1, [r3, #0]
     85e:	4816      	ldr	r0, [pc, #88]	; (8b8 <_gpio_set_pin_function+0xa4>)
     860:	2301      	movs	r3, #1
     862:	4c16      	ldr	r4, [pc, #88]	; (8bc <_gpio_set_pin_function+0xa8>)
     864:	47a0      	blx	r4
		if (pin & 1) {
     866:	230e      	movs	r3, #14
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2201      	movs	r2, #1
     86e:	4013      	ands	r3, r2
     870:	d00f      	beq.n	892 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     872:	230e      	movs	r3, #14
     874:	18fb      	adds	r3, r7, r3
     876:	781b      	ldrb	r3, [r3, #0]
     878:	085b      	lsrs	r3, r3, #1
     87a:	b2da      	uxtb	r2, r3
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	b2d8      	uxtb	r0, r3
     880:	230f      	movs	r3, #15
     882:	18fb      	adds	r3, r7, r3
     884:	7819      	ldrb	r1, [r3, #0]
     886:	4c0c      	ldr	r4, [pc, #48]	; (8b8 <_gpio_set_pin_function+0xa4>)
     888:	0003      	movs	r3, r0
     88a:	0020      	movs	r0, r4
     88c:	4c0c      	ldr	r4, [pc, #48]	; (8c0 <_gpio_set_pin_function+0xac>)
     88e:	47a0      	blx	r4
}
     890:	e00e      	b.n	8b0 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     892:	230e      	movs	r3, #14
     894:	18fb      	adds	r3, r7, r3
     896:	781b      	ldrb	r3, [r3, #0]
     898:	085b      	lsrs	r3, r3, #1
     89a:	b2da      	uxtb	r2, r3
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	b2d8      	uxtb	r0, r3
     8a0:	230f      	movs	r3, #15
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	7819      	ldrb	r1, [r3, #0]
     8a6:	4c04      	ldr	r4, [pc, #16]	; (8b8 <_gpio_set_pin_function+0xa4>)
     8a8:	0003      	movs	r3, r0
     8aa:	0020      	movs	r0, r4
     8ac:	4c05      	ldr	r4, [pc, #20]	; (8c4 <_gpio_set_pin_function+0xb0>)
     8ae:	47a0      	blx	r4
}
     8b0:	46c0      	nop			; (mov r8, r8)
     8b2:	46bd      	mov	sp, r7
     8b4:	b005      	add	sp, #20
     8b6:	bd90      	pop	{r4, r7, pc}
     8b8:	40002800 	.word	0x40002800
     8bc:	0000045f 	.word	0x0000045f
     8c0:	000003d9 	.word	0x000003d9
     8c4:	00000351 	.word	0x00000351

000008c8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b082      	sub	sp, #8
     8cc:	af00      	add	r7, sp, #0
     8ce:	0002      	movs	r2, r0
     8d0:	1dfb      	adds	r3, r7, #7
     8d2:	701a      	strb	r2, [r3, #0]
     8d4:	1dbb      	adds	r3, r7, #6
     8d6:	1c0a      	adds	r2, r1, #0
     8d8:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8da:	1dfb      	adds	r3, r7, #7
     8dc:	781b      	ldrb	r3, [r3, #0]
     8de:	095b      	lsrs	r3, r3, #5
     8e0:	b2d8      	uxtb	r0, r3
     8e2:	1dfb      	adds	r3, r7, #7
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	221f      	movs	r2, #31
     8e8:	4013      	ands	r3, r2
     8ea:	b2d9      	uxtb	r1, r3
     8ec:	1dbb      	adds	r3, r7, #6
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	001a      	movs	r2, r3
     8f2:	4b03      	ldr	r3, [pc, #12]	; (900 <gpio_set_pin_pull_mode+0x38>)
     8f4:	4798      	blx	r3
}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	46bd      	mov	sp, r7
     8fa:	b002      	add	sp, #8
     8fc:	bd80      	pop	{r7, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00000721 	.word	0x00000721

00000904 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
     90c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     90e:	683a      	ldr	r2, [r7, #0]
     910:	687b      	ldr	r3, [r7, #4]
     912:	0011      	movs	r1, r2
     914:	0018      	movs	r0, r3
     916:	4b03      	ldr	r3, [pc, #12]	; (924 <gpio_set_pin_function+0x20>)
     918:	4798      	blx	r3
}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	46bd      	mov	sp, r7
     91e:	b002      	add	sp, #8
     920:	bd80      	pop	{r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00000815 	.word	0x00000815

00000928 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
     92e:	0002      	movs	r2, r0
     930:	1dfb      	adds	r3, r7, #7
     932:	701a      	strb	r2, [r3, #0]
     934:	1dbb      	adds	r3, r7, #6
     936:	1c0a      	adds	r2, r1, #0
     938:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     93a:	1dfb      	adds	r3, r7, #7
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	095b      	lsrs	r3, r3, #5
     940:	b2d8      	uxtb	r0, r3
     942:	1dfb      	adds	r3, r7, #7
     944:	781b      	ldrb	r3, [r3, #0]
     946:	221f      	movs	r2, #31
     948:	4013      	ands	r3, r2
     94a:	2201      	movs	r2, #1
     94c:	409a      	lsls	r2, r3
     94e:	0011      	movs	r1, r2
     950:	1dbb      	adds	r3, r7, #6
     952:	781b      	ldrb	r3, [r3, #0]
     954:	001a      	movs	r2, r3
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <gpio_set_pin_direction+0x3c>)
     958:	4798      	blx	r3
}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	46bd      	mov	sp, r7
     95e:	b002      	add	sp, #8
     960:	bd80      	pop	{r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	000005b9 	.word	0x000005b9

00000968 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     968:	b580      	push	{r7, lr}
     96a:	b082      	sub	sp, #8
     96c:	af00      	add	r7, sp, #0
     96e:	0002      	movs	r2, r0
     970:	1dfb      	adds	r3, r7, #7
     972:	701a      	strb	r2, [r3, #0]
     974:	1dbb      	adds	r3, r7, #6
     976:	1c0a      	adds	r2, r1, #0
     978:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     97a:	1dfb      	adds	r3, r7, #7
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	095b      	lsrs	r3, r3, #5
     980:	b2d8      	uxtb	r0, r3
     982:	1dfb      	adds	r3, r7, #7
     984:	781b      	ldrb	r3, [r3, #0]
     986:	221f      	movs	r2, #31
     988:	4013      	ands	r3, r2
     98a:	2201      	movs	r2, #1
     98c:	409a      	lsls	r2, r3
     98e:	0011      	movs	r1, r2
     990:	1dbb      	adds	r3, r7, #6
     992:	781b      	ldrb	r3, [r3, #0]
     994:	001a      	movs	r2, r3
     996:	4b03      	ldr	r3, [pc, #12]	; (9a4 <gpio_set_pin_level+0x3c>)
     998:	4798      	blx	r3
}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	46bd      	mov	sp, r7
     99e:	b002      	add	sp, #8
     9a0:	bd80      	pop	{r7, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	000006d1 	.word	0x000006d1

000009a8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	af00      	add	r7, sp, #0
	_init_chip();
     9ac:	4b02      	ldr	r3, [pc, #8]	; (9b8 <init_mcu+0x10>)
     9ae:	4798      	blx	r3
}
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	46bd      	mov	sp, r7
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00002699 	.word	0x00002699

000009bc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b082      	sub	sp, #8
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d004      	beq.n	9d6 <wdt_init+0x1a>
     9cc:	683b      	ldr	r3, [r7, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d001      	beq.n	9d6 <wdt_init+0x1a>
     9d2:	2301      	movs	r3, #1
     9d4:	e000      	b.n	9d8 <wdt_init+0x1c>
     9d6:	2300      	movs	r3, #0
     9d8:	1c1a      	adds	r2, r3, #0
     9da:	2301      	movs	r3, #1
     9dc:	4013      	ands	r3, r2
     9de:	b2db      	uxtb	r3, r3
     9e0:	4908      	ldr	r1, [pc, #32]	; (a04 <wdt_init+0x48>)
     9e2:	2248      	movs	r2, #72	; 0x48
     9e4:	0018      	movs	r0, r3
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <wdt_init+0x4c>)
     9e8:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	683a      	ldr	r2, [r7, #0]
     9ee:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	0018      	movs	r0, r3
     9f4:	4b05      	ldr	r3, [pc, #20]	; (a0c <wdt_init+0x50>)
     9f6:	4798      	blx	r3
     9f8:	0003      	movs	r3, r0
}
     9fa:	0018      	movs	r0, r3
     9fc:	46bd      	mov	sp, r7
     9fe:	b002      	add	sp, #8
     a00:	bd80      	pop	{r7, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00006fe4 	.word	0x00006fe4
     a08:	0000209b 	.word	0x0000209b
     a0c:	00005145 	.word	0x00005145

00000a10 <CALENDAR_0_CLOCK_init>:
struct i2c_m_sync_desc I2C_OUT;

struct wdt_descriptor WDT_0;

void CALENDAR_0_CLOCK_init(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     a14:	4b03      	ldr	r3, [pc, #12]	; (a24 <CALENDAR_0_CLOCK_init+0x14>)
     a16:	0018      	movs	r0, r3
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <CALENDAR_0_CLOCK_init+0x18>)
     a1a:	4798      	blx	r3
}
     a1c:	46c0      	nop			; (mov r8, r8)
     a1e:	46bd      	mov	sp, r7
     a20:	bd80      	pop	{r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	40000400 	.word	0x40000400
     a28:	00000211 	.word	0x00000211

00000a2c <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
	CALENDAR_0_CLOCK_init();
     a30:	4b05      	ldr	r3, [pc, #20]	; (a48 <CALENDAR_0_init+0x1c>)
     a32:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     a34:	4a05      	ldr	r2, [pc, #20]	; (a4c <CALENDAR_0_init+0x20>)
     a36:	4b06      	ldr	r3, [pc, #24]	; (a50 <CALENDAR_0_init+0x24>)
     a38:	0011      	movs	r1, r2
     a3a:	0018      	movs	r0, r3
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <CALENDAR_0_init+0x28>)
     a3e:	4798      	blx	r3
}
     a40:	46c0      	nop			; (mov r8, r8)
     a42:	46bd      	mov	sp, r7
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	00000a11 	.word	0x00000a11
     a4c:	40002000 	.word	0x40002000
     a50:	2000012c 	.word	0x2000012c
     a54:	000014cd 	.word	0x000014cd

00000a58 <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <USART_0_CLOCK_init+0x2c>)
     a5e:	2240      	movs	r2, #64	; 0x40
     a60:	2112      	movs	r1, #18
     a62:	0018      	movs	r0, r3
     a64:	4b08      	ldr	r3, [pc, #32]	; (a88 <USART_0_CLOCK_init+0x30>)
     a66:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <USART_0_CLOCK_init+0x2c>)
     a6a:	2243      	movs	r2, #67	; 0x43
     a6c:	2111      	movs	r1, #17
     a6e:	0018      	movs	r0, r3
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <USART_0_CLOCK_init+0x30>)
     a72:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
     a74:	4b05      	ldr	r3, [pc, #20]	; (a8c <USART_0_CLOCK_init+0x34>)
     a76:	0018      	movs	r0, r3
     a78:	4b05      	ldr	r3, [pc, #20]	; (a90 <USART_0_CLOCK_init+0x38>)
     a7a:	4798      	blx	r3
}
     a7c:	46c0      	nop			; (mov r8, r8)
     a7e:	46bd      	mov	sp, r7
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	40001800 	.word	0x40001800
     a88:	000001cb 	.word	0x000001cb
     a8c:	40000400 	.word	0x40000400
     a90:	0000022f 	.word	0x0000022f

00000a94 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     a94:	b580      	push	{r7, lr}
     a96:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     a98:	4b06      	ldr	r3, [pc, #24]	; (ab4 <USART_0_PORT_init+0x20>)
     a9a:	0019      	movs	r1, r3
     a9c:	2004      	movs	r0, #4
     a9e:	4b06      	ldr	r3, [pc, #24]	; (ab8 <USART_0_PORT_init+0x24>)
     aa0:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <USART_0_PORT_init+0x28>)
     aa4:	0019      	movs	r1, r3
     aa6:	2005      	movs	r0, #5
     aa8:	4b03      	ldr	r3, [pc, #12]	; (ab8 <USART_0_PORT_init+0x24>)
     aaa:	4798      	blx	r3
}
     aac:	46c0      	nop			; (mov r8, r8)
     aae:	46bd      	mov	sp, r7
     ab0:	bd80      	pop	{r7, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00040003 	.word	0x00040003
     ab8:	00000905 	.word	0x00000905
     abc:	00050003 	.word	0x00050003

00000ac0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     ac0:	b590      	push	{r4, r7, lr}
     ac2:	b083      	sub	sp, #12
     ac4:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     ac6:	4b08      	ldr	r3, [pc, #32]	; (ae8 <USART_0_init+0x28>)
     ac8:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     aca:	4a08      	ldr	r2, [pc, #32]	; (aec <USART_0_init+0x2c>)
     acc:	2384      	movs	r3, #132	; 0x84
     ace:	05d9      	lsls	r1, r3, #23
     ad0:	4807      	ldr	r0, [pc, #28]	; (af0 <USART_0_init+0x30>)
     ad2:	2300      	movs	r3, #0
     ad4:	9300      	str	r3, [sp, #0]
     ad6:	2310      	movs	r3, #16
     ad8:	4c06      	ldr	r4, [pc, #24]	; (af4 <USART_0_init+0x34>)
     ada:	47a0      	blx	r4
	USART_0_PORT_init();
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <USART_0_init+0x38>)
     ade:	4798      	blx	r3
}
     ae0:	46c0      	nop			; (mov r8, r8)
     ae2:	46bd      	mov	sp, r7
     ae4:	b001      	add	sp, #4
     ae6:	bd90      	pop	{r4, r7, pc}
     ae8:	00000a59 	.word	0x00000a59
     aec:	2000006c 	.word	0x2000006c
     af0:	20000148 	.word	0x20000148
     af4:	00001d51 	.word	0x00001d51
     af8:	00000a95 	.word	0x00000a95

00000afc <I2C_IN_PORT_init>:

void I2C_IN_PORT_init(void)
{
     afc:	b580      	push	{r7, lr}
     afe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
     b00:	2100      	movs	r1, #0
     b02:	2010      	movs	r0, #16
     b04:	4b09      	ldr	r3, [pc, #36]	; (b2c <I2C_IN_PORT_init+0x30>)
     b06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
     b08:	4b09      	ldr	r3, [pc, #36]	; (b30 <I2C_IN_PORT_init+0x34>)
     b0a:	0019      	movs	r1, r3
     b0c:	2010      	movs	r0, #16
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <I2C_IN_PORT_init+0x38>)
     b10:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
     b12:	2100      	movs	r1, #0
     b14:	2011      	movs	r0, #17
     b16:	4b05      	ldr	r3, [pc, #20]	; (b2c <I2C_IN_PORT_init+0x30>)
     b18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
     b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <I2C_IN_PORT_init+0x3c>)
     b1c:	0019      	movs	r1, r3
     b1e:	2011      	movs	r0, #17
     b20:	4b04      	ldr	r3, [pc, #16]	; (b34 <I2C_IN_PORT_init+0x38>)
     b22:	4798      	blx	r3
}
     b24:	46c0      	nop			; (mov r8, r8)
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	000008c9 	.word	0x000008c9
     b30:	00100002 	.word	0x00100002
     b34:	00000905 	.word	0x00000905
     b38:	00110002 	.word	0x00110002

00000b3c <I2C_IN_CLOCK_init>:

void I2C_IN_CLOCK_init(void)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <I2C_IN_CLOCK_init+0x2c>)
     b42:	2240      	movs	r2, #64	; 0x40
     b44:	2113      	movs	r1, #19
     b46:	0018      	movs	r0, r3
     b48:	4b08      	ldr	r3, [pc, #32]	; (b6c <I2C_IN_CLOCK_init+0x30>)
     b4a:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <I2C_IN_CLOCK_init+0x2c>)
     b4e:	2243      	movs	r2, #67	; 0x43
     b50:	2111      	movs	r1, #17
     b52:	0018      	movs	r0, r3
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <I2C_IN_CLOCK_init+0x30>)
     b56:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <I2C_IN_CLOCK_init+0x34>)
     b5a:	0018      	movs	r0, r3
     b5c:	4b05      	ldr	r3, [pc, #20]	; (b74 <I2C_IN_CLOCK_init+0x38>)
     b5e:	4798      	blx	r3
}
     b60:	46c0      	nop			; (mov r8, r8)
     b62:	46bd      	mov	sp, r7
     b64:	bd80      	pop	{r7, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	40001800 	.word	0x40001800
     b6c:	000001cb 	.word	0x000001cb
     b70:	40000400 	.word	0x40000400
     b74:	0000024b 	.word	0x0000024b

00000b78 <I2C_IN_init>:

void I2C_IN_init(void)
{
     b78:	b5b0      	push	{r4, r5, r7, lr}
     b7a:	af00      	add	r7, sp, #0
	I2C_IN_CLOCK_init();
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <I2C_IN_init+0x20>)
     b7e:	4798      	blx	r3
	i2c_s_async_init(&I2C_IN, SERCOM1, SERCOM1_i2c_s_buffer, SERCOM1_I2CS_BUFFER_SIZE);
     b80:	4a06      	ldr	r2, [pc, #24]	; (b9c <I2C_IN_init+0x24>)
     b82:	4907      	ldr	r1, [pc, #28]	; (ba0 <I2C_IN_init+0x28>)
     b84:	4807      	ldr	r0, [pc, #28]	; (ba4 <I2C_IN_init+0x2c>)
     b86:	2310      	movs	r3, #16
     b88:	4c07      	ldr	r4, [pc, #28]	; (ba8 <I2C_IN_init+0x30>)
     b8a:	47a0      	blx	r4
	I2C_IN_PORT_init();
     b8c:	4b07      	ldr	r3, [pc, #28]	; (bac <I2C_IN_init+0x34>)
     b8e:	4798      	blx	r3
}
     b90:	46c0      	nop			; (mov r8, r8)
     b92:	46bd      	mov	sp, r7
     b94:	bdb0      	pop	{r4, r5, r7, pc}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	00000b3d 	.word	0x00000b3d
     b9c:	20000198 	.word	0x20000198
     ba0:	42000400 	.word	0x42000400
     ba4:	200000c0 	.word	0x200000c0
     ba8:	00001751 	.word	0x00001751
     bac:	00000afd 	.word	0x00000afd

00000bb0 <I2C_OUT_PORT_init>:

void I2C_OUT_PORT_init(void)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     bb4:	2100      	movs	r1, #0
     bb6:	2008      	movs	r0, #8
     bb8:	4b09      	ldr	r3, [pc, #36]	; (be0 <I2C_OUT_PORT_init+0x30>)
     bba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);
     bbc:	4b09      	ldr	r3, [pc, #36]	; (be4 <I2C_OUT_PORT_init+0x34>)
     bbe:	0019      	movs	r1, r3
     bc0:	2008      	movs	r0, #8
     bc2:	4b09      	ldr	r3, [pc, #36]	; (be8 <I2C_OUT_PORT_init+0x38>)
     bc4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     bc6:	2100      	movs	r1, #0
     bc8:	2009      	movs	r0, #9
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <I2C_OUT_PORT_init+0x30>)
     bcc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
     bce:	4b07      	ldr	r3, [pc, #28]	; (bec <I2C_OUT_PORT_init+0x3c>)
     bd0:	0019      	movs	r1, r3
     bd2:	2009      	movs	r0, #9
     bd4:	4b04      	ldr	r3, [pc, #16]	; (be8 <I2C_OUT_PORT_init+0x38>)
     bd6:	4798      	blx	r3
}
     bd8:	46c0      	nop			; (mov r8, r8)
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	000008c9 	.word	0x000008c9
     be4:	00080003 	.word	0x00080003
     be8:	00000905 	.word	0x00000905
     bec:	00090003 	.word	0x00090003

00000bf0 <I2C_OUT_CLOCK_init>:

void I2C_OUT_CLOCK_init(void)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bf4:	4b09      	ldr	r3, [pc, #36]	; (c1c <I2C_OUT_CLOCK_init+0x2c>)
     bf6:	2240      	movs	r2, #64	; 0x40
     bf8:	2114      	movs	r1, #20
     bfa:	0018      	movs	r0, r3
     bfc:	4b08      	ldr	r3, [pc, #32]	; (c20 <I2C_OUT_CLOCK_init+0x30>)
     bfe:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <I2C_OUT_CLOCK_init+0x2c>)
     c02:	2243      	movs	r2, #67	; 0x43
     c04:	2111      	movs	r1, #17
     c06:	0018      	movs	r0, r3
     c08:	4b05      	ldr	r3, [pc, #20]	; (c20 <I2C_OUT_CLOCK_init+0x30>)
     c0a:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <I2C_OUT_CLOCK_init+0x34>)
     c0e:	0018      	movs	r0, r3
     c10:	4b05      	ldr	r3, [pc, #20]	; (c28 <I2C_OUT_CLOCK_init+0x38>)
     c12:	4798      	blx	r3
}
     c14:	46c0      	nop			; (mov r8, r8)
     c16:	46bd      	mov	sp, r7
     c18:	bd80      	pop	{r7, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	40001800 	.word	0x40001800
     c20:	000001cb 	.word	0x000001cb
     c24:	40000400 	.word	0x40000400
     c28:	00000267 	.word	0x00000267

00000c2c <I2C_OUT_init>:

void I2C_OUT_init(void)
{
     c2c:	b580      	push	{r7, lr}
     c2e:	af00      	add	r7, sp, #0
	I2C_OUT_CLOCK_init();
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <I2C_OUT_init+0x20>)
     c32:	4798      	blx	r3
	i2c_m_sync_init(&I2C_OUT, SERCOM2);
     c34:	4a06      	ldr	r2, [pc, #24]	; (c50 <I2C_OUT_init+0x24>)
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <I2C_OUT_init+0x28>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	4b06      	ldr	r3, [pc, #24]	; (c58 <I2C_OUT_init+0x2c>)
     c3e:	4798      	blx	r3
	I2C_OUT_PORT_init();
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <I2C_OUT_init+0x30>)
     c42:	4798      	blx	r3
}
     c44:	46c0      	nop			; (mov r8, r8)
     c46:	46bd      	mov	sp, r7
     c48:	bd80      	pop	{r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00000bf1 	.word	0x00000bf1
     c50:	42000800 	.word	0x42000800
     c54:	2000010c 	.word	0x2000010c
     c58:	0000166d 	.word	0x0000166d
     c5c:	00000bb1 	.word	0x00000bb1

00000c60 <delay_driver_init>:

void delay_driver_init(void)
{
     c60:	b580      	push	{r7, lr}
     c62:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     c64:	4b03      	ldr	r3, [pc, #12]	; (c74 <delay_driver_init+0x14>)
     c66:	0018      	movs	r0, r3
     c68:	4b03      	ldr	r3, [pc, #12]	; (c78 <delay_driver_init+0x18>)
     c6a:	4798      	blx	r3
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	e000e010 	.word	0xe000e010
     c78:	0000153d 	.word	0x0000153d

00000c7c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
     c80:	4b0a      	ldr	r3, [pc, #40]	; (cac <TIMER_0_init+0x30>)
     c82:	0018      	movs	r0, r3
     c84:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <TIMER_0_init+0x34>)
     c86:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c88:	4b0a      	ldr	r3, [pc, #40]	; (cb4 <TIMER_0_init+0x38>)
     c8a:	2240      	movs	r2, #64	; 0x40
     c8c:	211b      	movs	r1, #27
     c8e:	0018      	movs	r0, r3
     c90:	4b09      	ldr	r3, [pc, #36]	; (cb8 <TIMER_0_init+0x3c>)
     c92:	4798      	blx	r3

	timer_init(&TIMER_0, TC0, _tc_get_timer());
     c94:	4b09      	ldr	r3, [pc, #36]	; (cbc <TIMER_0_init+0x40>)
     c96:	4798      	blx	r3
     c98:	0002      	movs	r2, r0
     c9a:	4909      	ldr	r1, [pc, #36]	; (cc0 <TIMER_0_init+0x44>)
     c9c:	4b09      	ldr	r3, [pc, #36]	; (cc4 <TIMER_0_init+0x48>)
     c9e:	0018      	movs	r0, r3
     ca0:	4b09      	ldr	r3, [pc, #36]	; (cc8 <TIMER_0_init+0x4c>)
     ca2:	4798      	blx	r3
}
     ca4:	46c0      	nop			; (mov r8, r8)
     ca6:	46bd      	mov	sp, r7
     ca8:	bd80      	pop	{r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	40000400 	.word	0x40000400
     cb0:	00000283 	.word	0x00000283
     cb4:	40001800 	.word	0x40001800
     cb8:	000001cb 	.word	0x000001cb
     cbc:	00004e9d 	.word	0x00004e9d
     cc0:	42002000 	.word	0x42002000
     cc4:	200001a8 	.word	0x200001a8
     cc8:	00001b65 	.word	0x00001b65

00000ccc <WDT_0_CLOCK_init>:

void WDT_0_CLOCK_init(void)
{
     ccc:	b580      	push	{r7, lr}
     cce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
     cd0:	4b03      	ldr	r3, [pc, #12]	; (ce0 <WDT_0_CLOCK_init+0x14>)
     cd2:	0018      	movs	r0, r3
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <WDT_0_CLOCK_init+0x18>)
     cd6:	4798      	blx	r3
}
     cd8:	46c0      	nop			; (mov r8, r8)
     cda:	46bd      	mov	sp, r7
     cdc:	bd80      	pop	{r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000400 	.word	0x40000400
     ce4:	000001f5 	.word	0x000001f5

00000ce8 <WDT_0_init>:

void WDT_0_init(void)
{
     ce8:	b580      	push	{r7, lr}
     cea:	af00      	add	r7, sp, #0
	WDT_0_CLOCK_init();
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <WDT_0_init+0x1c>)
     cee:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
     cf0:	4a05      	ldr	r2, [pc, #20]	; (d08 <WDT_0_init+0x20>)
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <WDT_0_init+0x24>)
     cf4:	0011      	movs	r1, r2
     cf6:	0018      	movs	r0, r3
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <WDT_0_init+0x28>)
     cfa:	4798      	blx	r3
}
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000ccd 	.word	0x00000ccd
     d08:	40001c00 	.word	0x40001c00
     d0c:	20000108 	.word	0x20000108
     d10:	000009bd 	.word	0x000009bd

00000d14 <system_init>:

void system_init(void)
{
     d14:	b580      	push	{r7, lr}
     d16:	af00      	add	r7, sp, #0
	init_mcu();
     d18:	4b72      	ldr	r3, [pc, #456]	; (ee4 <system_init+0x1d0>)
     d1a:	4798      	blx	r3

	// GPIO on PA02

	gpio_set_pin_level(MCU_1_STATUS_1,
     d1c:	2100      	movs	r1, #0
     d1e:	2002      	movs	r0, #2
     d20:	4b71      	ldr	r3, [pc, #452]	; (ee8 <system_init+0x1d4>)
     d22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_1, GPIO_DIRECTION_OUT);
     d24:	2102      	movs	r1, #2
     d26:	2002      	movs	r0, #2
     d28:	4b70      	ldr	r3, [pc, #448]	; (eec <system_init+0x1d8>)
     d2a:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     d2c:	2301      	movs	r3, #1
     d2e:	425b      	negs	r3, r3
     d30:	0019      	movs	r1, r3
     d32:	2002      	movs	r0, #2
     d34:	4b6e      	ldr	r3, [pc, #440]	; (ef0 <system_init+0x1dc>)
     d36:	4798      	blx	r3

	// GPIO on PA03

	gpio_set_pin_level(MCU_1_STATUS_2,
     d38:	2100      	movs	r1, #0
     d3a:	2003      	movs	r0, #3
     d3c:	4b6a      	ldr	r3, [pc, #424]	; (ee8 <system_init+0x1d4>)
     d3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_2, GPIO_DIRECTION_OUT);
     d40:	2102      	movs	r1, #2
     d42:	2003      	movs	r0, #3
     d44:	4b69      	ldr	r3, [pc, #420]	; (eec <system_init+0x1d8>)
     d46:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     d48:	2301      	movs	r3, #1
     d4a:	425b      	negs	r3, r3
     d4c:	0019      	movs	r1, r3
     d4e:	2003      	movs	r0, #3
     d50:	4b67      	ldr	r3, [pc, #412]	; (ef0 <system_init+0x1dc>)
     d52:	4798      	blx	r3

	// GPIO on PA06

	gpio_set_pin_level(MCU_1_STATUS_3,
     d54:	2100      	movs	r1, #0
     d56:	2006      	movs	r0, #6
     d58:	4b63      	ldr	r3, [pc, #396]	; (ee8 <system_init+0x1d4>)
     d5a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_1_STATUS_3, GPIO_DIRECTION_OUT);
     d5c:	2102      	movs	r1, #2
     d5e:	2006      	movs	r0, #6
     d60:	4b62      	ldr	r3, [pc, #392]	; (eec <system_init+0x1d8>)
     d62:	4798      	blx	r3

	gpio_set_pin_function(MCU_1_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     d64:	2301      	movs	r3, #1
     d66:	425b      	negs	r3, r3
     d68:	0019      	movs	r1, r3
     d6a:	2006      	movs	r0, #6
     d6c:	4b60      	ldr	r3, [pc, #384]	; (ef0 <system_init+0x1dc>)
     d6e:	4798      	blx	r3

	// GPIO on PA07

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_1, GPIO_DIRECTION_IN);
     d70:	2101      	movs	r1, #1
     d72:	2007      	movs	r0, #7
     d74:	4b5d      	ldr	r3, [pc, #372]	; (eec <system_init+0x1d8>)
     d76:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_1,
     d78:	2100      	movs	r1, #0
     d7a:	2007      	movs	r0, #7
     d7c:	4b5d      	ldr	r3, [pc, #372]	; (ef4 <system_init+0x1e0>)
     d7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     d80:	2301      	movs	r3, #1
     d82:	425b      	negs	r3, r3
     d84:	0019      	movs	r1, r3
     d86:	2007      	movs	r0, #7
     d88:	4b59      	ldr	r3, [pc, #356]	; (ef0 <system_init+0x1dc>)
     d8a:	4798      	blx	r3

	// GPIO on PA10

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_2, GPIO_DIRECTION_IN);
     d8c:	2101      	movs	r1, #1
     d8e:	200a      	movs	r0, #10
     d90:	4b56      	ldr	r3, [pc, #344]	; (eec <system_init+0x1d8>)
     d92:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_2,
     d94:	2100      	movs	r1, #0
     d96:	200a      	movs	r0, #10
     d98:	4b56      	ldr	r3, [pc, #344]	; (ef4 <system_init+0x1e0>)
     d9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     d9c:	2301      	movs	r3, #1
     d9e:	425b      	negs	r3, r3
     da0:	0019      	movs	r1, r3
     da2:	200a      	movs	r0, #10
     da4:	4b52      	ldr	r3, [pc, #328]	; (ef0 <system_init+0x1dc>)
     da6:	4798      	blx	r3

	// GPIO on PA11

	// Set pin direction to input
	gpio_set_pin_direction(MCU_2_STATUS_3, GPIO_DIRECTION_IN);
     da8:	2101      	movs	r1, #1
     daa:	200b      	movs	r0, #11
     dac:	4b4f      	ldr	r3, [pc, #316]	; (eec <system_init+0x1d8>)
     dae:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_2_STATUS_3,
     db0:	2100      	movs	r1, #0
     db2:	200b      	movs	r0, #11
     db4:	4b4f      	ldr	r3, [pc, #316]	; (ef4 <system_init+0x1e0>)
     db6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_2_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     db8:	2301      	movs	r3, #1
     dba:	425b      	negs	r3, r3
     dbc:	0019      	movs	r1, r3
     dbe:	200b      	movs	r0, #11
     dc0:	4b4b      	ldr	r3, [pc, #300]	; (ef0 <system_init+0x1dc>)
     dc2:	4798      	blx	r3

	// GPIO on PA14

	gpio_set_pin_level(POWER_BLOCK_2,
     dc4:	2100      	movs	r1, #0
     dc6:	200e      	movs	r0, #14
     dc8:	4b47      	ldr	r3, [pc, #284]	; (ee8 <system_init+0x1d4>)
     dca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_2, GPIO_DIRECTION_OUT);
     dcc:	2102      	movs	r1, #2
     dce:	200e      	movs	r0, #14
     dd0:	4b46      	ldr	r3, [pc, #280]	; (eec <system_init+0x1d8>)
     dd2:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_2, GPIO_PIN_FUNCTION_OFF);
     dd4:	2301      	movs	r3, #1
     dd6:	425b      	negs	r3, r3
     dd8:	0019      	movs	r1, r3
     dda:	200e      	movs	r0, #14
     ddc:	4b44      	ldr	r3, [pc, #272]	; (ef0 <system_init+0x1dc>)
     dde:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(POWER_BLOCK_1,
     de0:	2100      	movs	r1, #0
     de2:	200f      	movs	r0, #15
     de4:	4b40      	ldr	r3, [pc, #256]	; (ee8 <system_init+0x1d4>)
     de6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(POWER_BLOCK_1, GPIO_DIRECTION_OUT);
     de8:	2102      	movs	r1, #2
     dea:	200f      	movs	r0, #15
     dec:	4b3f      	ldr	r3, [pc, #252]	; (eec <system_init+0x1d8>)
     dee:	4798      	blx	r3

	gpio_set_pin_function(POWER_BLOCK_1, GPIO_PIN_FUNCTION_OFF);
     df0:	2301      	movs	r3, #1
     df2:	425b      	negs	r3, r3
     df4:	0019      	movs	r1, r3
     df6:	200f      	movs	r0, #15
     df8:	4b3d      	ldr	r3, [pc, #244]	; (ef0 <system_init+0x1dc>)
     dfa:	4798      	blx	r3

	// GPIO on PA18

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_1, GPIO_DIRECTION_IN);
     dfc:	2101      	movs	r1, #1
     dfe:	2012      	movs	r0, #18
     e00:	4b3a      	ldr	r3, [pc, #232]	; (eec <system_init+0x1d8>)
     e02:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_1,
     e04:	2100      	movs	r1, #0
     e06:	2012      	movs	r0, #18
     e08:	4b3a      	ldr	r3, [pc, #232]	; (ef4 <system_init+0x1e0>)
     e0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_1, GPIO_PIN_FUNCTION_OFF);
     e0c:	2301      	movs	r3, #1
     e0e:	425b      	negs	r3, r3
     e10:	0019      	movs	r1, r3
     e12:	2012      	movs	r0, #18
     e14:	4b36      	ldr	r3, [pc, #216]	; (ef0 <system_init+0x1dc>)
     e16:	4798      	blx	r3

	// GPIO on PA19

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_2, GPIO_DIRECTION_IN);
     e18:	2101      	movs	r1, #1
     e1a:	2013      	movs	r0, #19
     e1c:	4b33      	ldr	r3, [pc, #204]	; (eec <system_init+0x1d8>)
     e1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_2,
     e20:	2100      	movs	r1, #0
     e22:	2013      	movs	r0, #19
     e24:	4b33      	ldr	r3, [pc, #204]	; (ef4 <system_init+0x1e0>)
     e26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_2, GPIO_PIN_FUNCTION_OFF);
     e28:	2301      	movs	r3, #1
     e2a:	425b      	negs	r3, r3
     e2c:	0019      	movs	r1, r3
     e2e:	2013      	movs	r0, #19
     e30:	4b2f      	ldr	r3, [pc, #188]	; (ef0 <system_init+0x1dc>)
     e32:	4798      	blx	r3

	// GPIO on PA22

	// Set pin direction to input
	gpio_set_pin_direction(MCU_3_STATUS_3, GPIO_DIRECTION_IN);
     e34:	2101      	movs	r1, #1
     e36:	2016      	movs	r0, #22
     e38:	4b2c      	ldr	r3, [pc, #176]	; (eec <system_init+0x1d8>)
     e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(MCU_3_STATUS_3,
     e3c:	2100      	movs	r1, #0
     e3e:	2016      	movs	r0, #22
     e40:	4b2c      	ldr	r3, [pc, #176]	; (ef4 <system_init+0x1e0>)
     e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(MCU_3_STATUS_3, GPIO_PIN_FUNCTION_OFF);
     e44:	2301      	movs	r3, #1
     e46:	425b      	negs	r3, r3
     e48:	0019      	movs	r1, r3
     e4a:	2016      	movs	r0, #22
     e4c:	4b28      	ldr	r3, [pc, #160]	; (ef0 <system_init+0x1dc>)
     e4e:	4798      	blx	r3

	// GPIO on PA23

	gpio_set_pin_level(MCU_2_EN,
     e50:	2100      	movs	r1, #0
     e52:	2017      	movs	r0, #23
     e54:	4b24      	ldr	r3, [pc, #144]	; (ee8 <system_init+0x1d4>)
     e56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_2_EN, GPIO_DIRECTION_OUT);
     e58:	2102      	movs	r1, #2
     e5a:	2017      	movs	r0, #23
     e5c:	4b23      	ldr	r3, [pc, #140]	; (eec <system_init+0x1d8>)
     e5e:	4798      	blx	r3

	gpio_set_pin_function(MCU_2_EN, GPIO_PIN_FUNCTION_OFF);
     e60:	2301      	movs	r3, #1
     e62:	425b      	negs	r3, r3
     e64:	0019      	movs	r1, r3
     e66:	2017      	movs	r0, #23
     e68:	4b21      	ldr	r3, [pc, #132]	; (ef0 <system_init+0x1dc>)
     e6a:	4798      	blx	r3

	// GPIO on PA24

	gpio_set_pin_level(BLOCK_2_EN,
     e6c:	2100      	movs	r1, #0
     e6e:	2018      	movs	r0, #24
     e70:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <system_init+0x1d4>)
     e72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_2_EN, GPIO_DIRECTION_OUT);
     e74:	2102      	movs	r1, #2
     e76:	2018      	movs	r0, #24
     e78:	4b1c      	ldr	r3, [pc, #112]	; (eec <system_init+0x1d8>)
     e7a:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_2_EN, GPIO_PIN_FUNCTION_OFF);
     e7c:	2301      	movs	r3, #1
     e7e:	425b      	negs	r3, r3
     e80:	0019      	movs	r1, r3
     e82:	2018      	movs	r0, #24
     e84:	4b1a      	ldr	r3, [pc, #104]	; (ef0 <system_init+0x1dc>)
     e86:	4798      	blx	r3

	// GPIO on PA25

	gpio_set_pin_level(BLOCK_1_EN,
     e88:	2100      	movs	r1, #0
     e8a:	2019      	movs	r0, #25
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <system_init+0x1d4>)
     e8e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(BLOCK_1_EN, GPIO_DIRECTION_OUT);
     e90:	2102      	movs	r1, #2
     e92:	2019      	movs	r0, #25
     e94:	4b15      	ldr	r3, [pc, #84]	; (eec <system_init+0x1d8>)
     e96:	4798      	blx	r3

	gpio_set_pin_function(BLOCK_1_EN, GPIO_PIN_FUNCTION_OFF);
     e98:	2301      	movs	r3, #1
     e9a:	425b      	negs	r3, r3
     e9c:	0019      	movs	r1, r3
     e9e:	2019      	movs	r0, #25
     ea0:	4b13      	ldr	r3, [pc, #76]	; (ef0 <system_init+0x1dc>)
     ea2:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(MCU_3_EN,
     ea4:	2100      	movs	r1, #0
     ea6:	201b      	movs	r0, #27
     ea8:	4b0f      	ldr	r3, [pc, #60]	; (ee8 <system_init+0x1d4>)
     eaa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MCU_3_EN, GPIO_DIRECTION_OUT);
     eac:	2102      	movs	r1, #2
     eae:	201b      	movs	r0, #27
     eb0:	4b0e      	ldr	r3, [pc, #56]	; (eec <system_init+0x1d8>)
     eb2:	4798      	blx	r3

	gpio_set_pin_function(MCU_3_EN, GPIO_PIN_FUNCTION_OFF);
     eb4:	2301      	movs	r3, #1
     eb6:	425b      	negs	r3, r3
     eb8:	0019      	movs	r1, r3
     eba:	201b      	movs	r0, #27
     ebc:	4b0c      	ldr	r3, [pc, #48]	; (ef0 <system_init+0x1dc>)
     ebe:	4798      	blx	r3

	CALENDAR_0_init();
     ec0:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <system_init+0x1e4>)
     ec2:	4798      	blx	r3
	USART_0_init();
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <system_init+0x1e8>)
     ec6:	4798      	blx	r3

	I2C_IN_init();
     ec8:	4b0d      	ldr	r3, [pc, #52]	; (f00 <system_init+0x1ec>)
     eca:	4798      	blx	r3

	I2C_OUT_init();
     ecc:	4b0d      	ldr	r3, [pc, #52]	; (f04 <system_init+0x1f0>)
     ece:	4798      	blx	r3

	delay_driver_init();
     ed0:	4b0d      	ldr	r3, [pc, #52]	; (f08 <system_init+0x1f4>)
     ed2:	4798      	blx	r3

	TIMER_0_init();
     ed4:	4b0d      	ldr	r3, [pc, #52]	; (f0c <system_init+0x1f8>)
     ed6:	4798      	blx	r3
	WDT_0_init();
     ed8:	4b0d      	ldr	r3, [pc, #52]	; (f10 <system_init+0x1fc>)
     eda:	4798      	blx	r3
}
     edc:	46c0      	nop			; (mov r8, r8)
     ede:	46bd      	mov	sp, r7
     ee0:	bd80      	pop	{r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	000009a9 	.word	0x000009a9
     ee8:	00000969 	.word	0x00000969
     eec:	00000929 	.word	0x00000929
     ef0:	00000905 	.word	0x00000905
     ef4:	000008c9 	.word	0x000008c9
     ef8:	00000a2d 	.word	0x00000a2d
     efc:	00000ac1 	.word	0x00000ac1
     f00:	00000b79 	.word	0x00000b79
     f04:	00000c2d 	.word	0x00000c2d
     f08:	00000c61 	.word	0x00000c61
     f0c:	00000c7d 	.word	0x00000c7d
     f10:	00000ce9 	.word	0x00000ce9

00000f14 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     f14:	b580      	push	{r7, lr}
     f16:	b084      	sub	sp, #16
     f18:	af00      	add	r7, sp, #0
     f1a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f1c:	f3ef 8310 	mrs	r3, PRIMASK
     f20:	60fb      	str	r3, [r7, #12]
  return(result);
     f22:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f28:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f2a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	46bd      	mov	sp, r7
     f32:	b004      	add	sp, #16
     f34:	bd80      	pop	{r7, pc}

00000f36 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     f36:	b580      	push	{r7, lr}
     f38:	b084      	sub	sp, #16
     f3a:	af00      	add	r7, sp, #0
     f3c:	6078      	str	r0, [r7, #4]
     f3e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f48:	68fb      	ldr	r3, [r7, #12]
     f4a:	f383 8810 	msr	PRIMASK, r3
}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	46bd      	mov	sp, r7
     f52:	b004      	add	sp, #16
     f54:	bd80      	pop	{r7, pc}

00000f56 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
     f56:	b580      	push	{r7, lr}
     f58:	b082      	sub	sp, #8
     f5a:	af00      	add	r7, sp, #0
     f5c:	0002      	movs	r2, r0
     f5e:	1dbb      	adds	r3, r7, #6
     f60:	801a      	strh	r2, [r3, #0]
	if (year & 3) {
     f62:	1dbb      	adds	r3, r7, #6
     f64:	881b      	ldrh	r3, [r3, #0]
     f66:	2203      	movs	r2, #3
     f68:	4013      	ands	r3, r2
     f6a:	d001      	beq.n	f70 <leap_year+0x1a>
		return false;
     f6c:	2300      	movs	r3, #0
     f6e:	e000      	b.n	f72 <leap_year+0x1c>
	} else {
		return true;
     f70:	2301      	movs	r3, #1
	}
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	b002      	add	sp, #8
     f78:	bd80      	pop	{r7, pc}
	...

00000f7c <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b084      	sub	sp, #16
     f80:	af00      	add	r7, sp, #0
     f82:	6078      	str	r0, [r7, #4]
     f84:	000a      	movs	r2, r1
     f86:	1cfb      	adds	r3, r7, #3
     f88:	701a      	strb	r2, [r3, #0]
	uint32_t sec_in_month = 0;
     f8a:	2300      	movs	r3, #0
     f8c:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	b29b      	uxth	r3, r3
     f92:	0018      	movs	r0, r3
     f94:	4b17      	ldr	r3, [pc, #92]	; (ff4 <get_secs_in_month+0x78>)
     f96:	4798      	blx	r3
     f98:	1e03      	subs	r3, r0, #0
     f9a:	d011      	beq.n	fc0 <get_secs_in_month+0x44>
		switch (month) {
     f9c:	1cfb      	adds	r3, r7, #3
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b0c      	cmp	r3, #12
     fa2:	d81f      	bhi.n	fe4 <get_secs_in_month+0x68>
     fa4:	009a      	lsls	r2, r3, #2
     fa6:	4b14      	ldr	r3, [pc, #80]	; (ff8 <get_secs_in_month+0x7c>)
     fa8:	18d3      	adds	r3, r2, r3
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     fae:	4b13      	ldr	r3, [pc, #76]	; (ffc <get_secs_in_month+0x80>)
     fb0:	60fb      	str	r3, [r7, #12]
			break;
     fb2:	e01a      	b.n	fea <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
     fb4:	4b12      	ldr	r3, [pc, #72]	; (1000 <get_secs_in_month+0x84>)
     fb6:	60fb      	str	r3, [r7, #12]
			break;
     fb8:	e017      	b.n	fea <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     fba:	4b12      	ldr	r3, [pc, #72]	; (1004 <get_secs_in_month+0x88>)
     fbc:	60fb      	str	r3, [r7, #12]
			break;
     fbe:	e014      	b.n	fea <get_secs_in_month+0x6e>
		default:
			break;
		}
	} else {
		switch (month) {
     fc0:	1cfb      	adds	r3, r7, #3
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	2b0c      	cmp	r3, #12
     fc6:	d80f      	bhi.n	fe8 <get_secs_in_month+0x6c>
     fc8:	009a      	lsls	r2, r3, #2
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <get_secs_in_month+0x8c>)
     fcc:	18d3      	adds	r3, r2, r3
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
     fd2:	4b0a      	ldr	r3, [pc, #40]	; (ffc <get_secs_in_month+0x80>)
     fd4:	60fb      	str	r3, [r7, #12]
			break;
     fd6:	e008      	b.n	fea <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <get_secs_in_month+0x90>)
     fda:	60fb      	str	r3, [r7, #12]
			break;
     fdc:	e005      	b.n	fea <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
     fde:	4b09      	ldr	r3, [pc, #36]	; (1004 <get_secs_in_month+0x88>)
     fe0:	60fb      	str	r3, [r7, #12]
			break;
     fe2:	e002      	b.n	fea <get_secs_in_month+0x6e>
			break;
     fe4:	46c0      	nop			; (mov r8, r8)
     fe6:	e000      	b.n	fea <get_secs_in_month+0x6e>
		default:
			break;
     fe8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sec_in_month;
     fea:	68fb      	ldr	r3, [r7, #12]
}
     fec:	0018      	movs	r0, r3
     fee:	46bd      	mov	sp, r7
     ff0:	b004      	add	sp, #16
     ff2:	bd80      	pop	{r7, pc}
     ff4:	00000f57 	.word	0x00000f57
     ff8:	00007000 	.word	0x00007000
     ffc:	0028de80 	.word	0x0028de80
    1000:	00263b80 	.word	0x00263b80
    1004:	00278d00 	.word	0x00278d00
    1008:	00007034 	.word	0x00007034
    100c:	0024ea00 	.word	0x0024ea00

00001010 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1010:	b580      	push	{r7, lr}
    1012:	b08a      	sub	sp, #40	; 0x28
    1014:	af00      	add	r7, sp, #0
    1016:	60f8      	str	r0, [r7, #12]
    1018:	60b9      	str	r1, [r7, #8]
    101a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    101c:	68fb      	ldr	r3, [r7, #12]
    101e:	695b      	ldr	r3, [r3, #20]
    1020:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1022:	231f      	movs	r3, #31
    1024:	18fb      	adds	r3, r7, r3
    1026:	2201      	movs	r2, #1
    1028:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_day     = 1;
    102a:	231e      	movs	r3, #30
    102c:	18fb      	adds	r3, r7, r3
    102e:	2201      	movs	r2, #1
    1030:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_hour    = 0;
    1032:	231d      	movs	r3, #29
    1034:	18fb      	adds	r3, r7, r3
    1036:	2200      	movs	r2, #0
    1038:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_minutes = 0;
    103a:	231c      	movs	r3, #28
    103c:	18fb      	adds	r3, r7, r3
    103e:	2200      	movs	r2, #0
    1040:	701a      	strb	r2, [r3, #0]

	tmp = ts;
    1042:	68bb      	ldr	r3, [r7, #8]
    1044:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1046:	6a3b      	ldr	r3, [r7, #32]
    1048:	b29b      	uxth	r3, r3
    104a:	0018      	movs	r0, r3
    104c:	4b3f      	ldr	r3, [pc, #252]	; (114c <convert_timestamp_to_datetime+0x13c>)
    104e:	4798      	blx	r3
    1050:	1e03      	subs	r3, r0, #0
    1052:	d001      	beq.n	1058 <convert_timestamp_to_datetime+0x48>
    1054:	4b3e      	ldr	r3, [pc, #248]	; (1150 <convert_timestamp_to_datetime+0x140>)
    1056:	e000      	b.n	105a <convert_timestamp_to_datetime+0x4a>
    1058:	4b3e      	ldr	r3, [pc, #248]	; (1154 <convert_timestamp_to_datetime+0x144>)
    105a:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    105e:	69bb      	ldr	r3, [r7, #24]
    1060:	429a      	cmp	r2, r3
    1062:	d307      	bcc.n	1074 <convert_timestamp_to_datetime+0x64>
			tmp -= sec_in_year;
    1064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1066:	69bb      	ldr	r3, [r7, #24]
    1068:	1ad3      	subs	r3, r2, r3
    106a:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    106c:	6a3b      	ldr	r3, [r7, #32]
    106e:	3301      	adds	r3, #1
    1070:	623b      	str	r3, [r7, #32]
    1072:	e7e8      	b.n	1046 <convert_timestamp_to_datetime+0x36>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1074:	231f      	movs	r3, #31
    1076:	18fb      	adds	r3, r7, r3
    1078:	781a      	ldrb	r2, [r3, #0]
    107a:	6a3b      	ldr	r3, [r7, #32]
    107c:	0011      	movs	r1, r2
    107e:	0018      	movs	r0, r3
    1080:	4b35      	ldr	r3, [pc, #212]	; (1158 <convert_timestamp_to_datetime+0x148>)
    1082:	4798      	blx	r3
    1084:	0003      	movs	r3, r0
    1086:	617b      	str	r3, [r7, #20]

		if (tmp >= sec_in_month) {
    1088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    108a:	697b      	ldr	r3, [r7, #20]
    108c:	429a      	cmp	r2, r3
    108e:	d30b      	bcc.n	10a8 <convert_timestamp_to_datetime+0x98>
			tmp -= sec_in_month;
    1090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1092:	697b      	ldr	r3, [r7, #20]
    1094:	1ad3      	subs	r3, r2, r3
    1096:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    1098:	231f      	movs	r3, #31
    109a:	18fb      	adds	r3, r7, r3
    109c:	781a      	ldrb	r2, [r3, #0]
    109e:	231f      	movs	r3, #31
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	3201      	adds	r2, #1
    10a4:	701a      	strb	r2, [r3, #0]
    10a6:	e7e5      	b.n	1074 <convert_timestamp_to_datetime+0x64>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    10a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10aa:	4a2c      	ldr	r2, [pc, #176]	; (115c <convert_timestamp_to_datetime+0x14c>)
    10ac:	4293      	cmp	r3, r2
    10ae:	d90c      	bls.n	10ca <convert_timestamp_to_datetime+0xba>
			tmp -= SECS_IN_DAY;
    10b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10b2:	4a2b      	ldr	r2, [pc, #172]	; (1160 <convert_timestamp_to_datetime+0x150>)
    10b4:	4694      	mov	ip, r2
    10b6:	4463      	add	r3, ip
    10b8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    10ba:	231e      	movs	r3, #30
    10bc:	18fb      	adds	r3, r7, r3
    10be:	781a      	ldrb	r2, [r3, #0]
    10c0:	231e      	movs	r3, #30
    10c2:	18fb      	adds	r3, r7, r3
    10c4:	3201      	adds	r2, #1
    10c6:	701a      	strb	r2, [r3, #0]
    10c8:	e7ee      	b.n	10a8 <convert_timestamp_to_datetime+0x98>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    10ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10cc:	4a25      	ldr	r2, [pc, #148]	; (1164 <convert_timestamp_to_datetime+0x154>)
    10ce:	4293      	cmp	r3, r2
    10d0:	d90c      	bls.n	10ec <convert_timestamp_to_datetime+0xdc>
			tmp -= SECS_IN_HOUR;
    10d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d4:	4a24      	ldr	r2, [pc, #144]	; (1168 <convert_timestamp_to_datetime+0x158>)
    10d6:	4694      	mov	ip, r2
    10d8:	4463      	add	r3, ip
    10da:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    10dc:	231d      	movs	r3, #29
    10de:	18fb      	adds	r3, r7, r3
    10e0:	781a      	ldrb	r2, [r3, #0]
    10e2:	231d      	movs	r3, #29
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	3201      	adds	r2, #1
    10e8:	701a      	strb	r2, [r3, #0]
    10ea:	e7ee      	b.n	10ca <convert_timestamp_to_datetime+0xba>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    10ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ee:	2b3b      	cmp	r3, #59	; 0x3b
    10f0:	d90a      	bls.n	1108 <convert_timestamp_to_datetime+0xf8>
			tmp -= SECS_IN_MINUTE;
    10f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10f4:	3b3c      	subs	r3, #60	; 0x3c
    10f6:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    10f8:	231c      	movs	r3, #28
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781a      	ldrb	r2, [r3, #0]
    10fe:	231c      	movs	r3, #28
    1100:	18fb      	adds	r3, r7, r3
    1102:	3201      	adds	r2, #1
    1104:	701a      	strb	r2, [r3, #0]
		if (tmp >= SECS_IN_MINUTE) {
    1106:	e7f1      	b.n	10ec <convert_timestamp_to_datetime+0xdc>
		} else {
			break;
    1108:	46c0      	nop			; (mov r8, r8)
		}
	}

	dt->date.year  = tmp_year;
    110a:	6a3b      	ldr	r3, [r7, #32]
    110c:	b29a      	uxth	r2, r3
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	221f      	movs	r2, #31
    1116:	18ba      	adds	r2, r7, r2
    1118:	7812      	ldrb	r2, [r2, #0]
    111a:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	221e      	movs	r2, #30
    1120:	18ba      	adds	r2, r7, r2
    1122:	7812      	ldrb	r2, [r2, #0]
    1124:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	221d      	movs	r2, #29
    112a:	18ba      	adds	r2, r7, r2
    112c:	7812      	ldrb	r2, [r2, #0]
    112e:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	221c      	movs	r2, #28
    1134:	18ba      	adds	r2, r7, r2
    1136:	7812      	ldrb	r2, [r2, #0]
    1138:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113c:	b2da      	uxtb	r2, r3
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    1142:	2300      	movs	r3, #0
}
    1144:	0018      	movs	r0, r3
    1146:	46bd      	mov	sp, r7
    1148:	b00a      	add	sp, #40	; 0x28
    114a:	bd80      	pop	{r7, pc}
    114c:	00000f57 	.word	0x00000f57
    1150:	01e28500 	.word	0x01e28500
    1154:	01e13380 	.word	0x01e13380
    1158:	00000f7d 	.word	0x00000f7d
    115c:	0001517f 	.word	0x0001517f
    1160:	fffeae80 	.word	0xfffeae80
    1164:	00000e0f 	.word	0x00000e0f
    1168:	fffff1f0 	.word	0xfffff1f0

0000116c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    116c:	b580      	push	{r7, lr}
    116e:	b086      	sub	sp, #24
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    1176:	2300      	movs	r3, #0
    1178:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    117a:	2300      	movs	r3, #0
    117c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    117e:	683b      	ldr	r3, [r7, #0]
    1180:	88db      	ldrh	r3, [r3, #6]
    1182:	b2d9      	uxtb	r1, r3
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	695b      	ldr	r3, [r3, #20]
    1188:	b2da      	uxtb	r2, r3
    118a:	230f      	movs	r3, #15
    118c:	18fb      	adds	r3, r7, r3
    118e:	1a8a      	subs	r2, r1, r2
    1190:	701a      	strb	r2, [r3, #0]
	month   = dt->date.month;
    1192:	230e      	movs	r3, #14
    1194:	18fb      	adds	r3, r7, r3
    1196:	683a      	ldr	r2, [r7, #0]
    1198:	7952      	ldrb	r2, [r2, #5]
    119a:	701a      	strb	r2, [r3, #0]
	day     = dt->date.day;
    119c:	230d      	movs	r3, #13
    119e:	18fb      	adds	r3, r7, r3
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	7912      	ldrb	r2, [r2, #4]
    11a4:	701a      	strb	r2, [r3, #0]
	hour    = dt->time.hour;
    11a6:	230c      	movs	r3, #12
    11a8:	18fb      	adds	r3, r7, r3
    11aa:	683a      	ldr	r2, [r7, #0]
    11ac:	7892      	ldrb	r2, [r2, #2]
    11ae:	701a      	strb	r2, [r3, #0]
	minutes = dt->time.min;
    11b0:	230b      	movs	r3, #11
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	683a      	ldr	r2, [r7, #0]
    11b6:	7852      	ldrb	r2, [r2, #1]
    11b8:	701a      	strb	r2, [r3, #0]
	seconds = dt->time.sec;
    11ba:	230a      	movs	r3, #10
    11bc:	18fb      	adds	r3, r7, r3
    11be:	683a      	ldr	r2, [r7, #0]
    11c0:	7812      	ldrb	r2, [r2, #0]
    11c2:	701a      	strb	r2, [r3, #0]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    11c4:	2300      	movs	r3, #0
    11c6:	613b      	str	r3, [r7, #16]
    11c8:	e019      	b.n	11fe <convert_datetime_to_timestamp+0x92>
		if (leap_year(calendar->base_year + i)) {
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	695b      	ldr	r3, [r3, #20]
    11ce:	b29a      	uxth	r2, r3
    11d0:	693b      	ldr	r3, [r7, #16]
    11d2:	b29b      	uxth	r3, r3
    11d4:	18d3      	adds	r3, r2, r3
    11d6:	b29b      	uxth	r3, r3
    11d8:	0018      	movs	r0, r3
    11da:	4b2d      	ldr	r3, [pc, #180]	; (1290 <convert_datetime_to_timestamp+0x124>)
    11dc:	4798      	blx	r3
    11de:	1e03      	subs	r3, r0, #0
    11e0:	d005      	beq.n	11ee <convert_datetime_to_timestamp+0x82>
			tmp += SECS_IN_LEAP_YEAR;
    11e2:	697b      	ldr	r3, [r7, #20]
    11e4:	4a2b      	ldr	r2, [pc, #172]	; (1294 <convert_datetime_to_timestamp+0x128>)
    11e6:	4694      	mov	ip, r2
    11e8:	4463      	add	r3, ip
    11ea:	617b      	str	r3, [r7, #20]
    11ec:	e004      	b.n	11f8 <convert_datetime_to_timestamp+0x8c>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    11ee:	697b      	ldr	r3, [r7, #20]
    11f0:	4a29      	ldr	r2, [pc, #164]	; (1298 <convert_datetime_to_timestamp+0x12c>)
    11f2:	4694      	mov	ip, r2
    11f4:	4463      	add	r3, ip
    11f6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    11f8:	693b      	ldr	r3, [r7, #16]
    11fa:	3301      	adds	r3, #1
    11fc:	613b      	str	r3, [r7, #16]
    11fe:	230f      	movs	r3, #15
    1200:	18fb      	adds	r3, r7, r3
    1202:	781a      	ldrb	r2, [r3, #0]
    1204:	693b      	ldr	r3, [r7, #16]
    1206:	429a      	cmp	r2, r3
    1208:	d8df      	bhi.n	11ca <convert_datetime_to_timestamp+0x5e>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    120a:	2301      	movs	r3, #1
    120c:	613b      	str	r3, [r7, #16]
    120e:	e00f      	b.n	1230 <convert_datetime_to_timestamp+0xc4>
		tmp += get_secs_in_month(dt->date.year, i);
    1210:	683b      	ldr	r3, [r7, #0]
    1212:	88db      	ldrh	r3, [r3, #6]
    1214:	001a      	movs	r2, r3
    1216:	693b      	ldr	r3, [r7, #16]
    1218:	b2db      	uxtb	r3, r3
    121a:	0019      	movs	r1, r3
    121c:	0010      	movs	r0, r2
    121e:	4b1f      	ldr	r3, [pc, #124]	; (129c <convert_datetime_to_timestamp+0x130>)
    1220:	4798      	blx	r3
    1222:	0002      	movs	r2, r0
    1224:	697b      	ldr	r3, [r7, #20]
    1226:	189b      	adds	r3, r3, r2
    1228:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    122a:	693b      	ldr	r3, [r7, #16]
    122c:	3301      	adds	r3, #1
    122e:	613b      	str	r3, [r7, #16]
    1230:	230e      	movs	r3, #14
    1232:	18fb      	adds	r3, r7, r3
    1234:	781a      	ldrb	r2, [r3, #0]
    1236:	693b      	ldr	r3, [r7, #16]
    1238:	429a      	cmp	r2, r3
    123a:	d8e9      	bhi.n	1210 <convert_datetime_to_timestamp+0xa4>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    123c:	230d      	movs	r3, #13
    123e:	18fb      	adds	r3, r7, r3
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	3b01      	subs	r3, #1
    1244:	4a16      	ldr	r2, [pc, #88]	; (12a0 <convert_datetime_to_timestamp+0x134>)
    1246:	4353      	muls	r3, r2
    1248:	001a      	movs	r2, r3
    124a:	697b      	ldr	r3, [r7, #20]
    124c:	189b      	adds	r3, r3, r2
    124e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1250:	230c      	movs	r3, #12
    1252:	18fb      	adds	r3, r7, r3
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	22e1      	movs	r2, #225	; 0xe1
    1258:	0112      	lsls	r2, r2, #4
    125a:	4353      	muls	r3, r2
    125c:	001a      	movs	r2, r3
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	189b      	adds	r3, r3, r2
    1262:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1264:	230b      	movs	r3, #11
    1266:	18fb      	adds	r3, r7, r3
    1268:	781a      	ldrb	r2, [r3, #0]
    126a:	0013      	movs	r3, r2
    126c:	011b      	lsls	r3, r3, #4
    126e:	1a9b      	subs	r3, r3, r2
    1270:	009b      	lsls	r3, r3, #2
    1272:	001a      	movs	r2, r3
    1274:	697b      	ldr	r3, [r7, #20]
    1276:	189b      	adds	r3, r3, r2
    1278:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    127a:	230a      	movs	r3, #10
    127c:	18fb      	adds	r3, r7, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	697a      	ldr	r2, [r7, #20]
    1282:	18d3      	adds	r3, r2, r3
    1284:	617b      	str	r3, [r7, #20]

	return tmp;
    1286:	697b      	ldr	r3, [r7, #20]
}
    1288:	0018      	movs	r0, r3
    128a:	46bd      	mov	sp, r7
    128c:	b006      	add	sp, #24
    128e:	bd80      	pop	{r7, pc}
    1290:	00000f57 	.word	0x00000f57
    1294:	01e28500 	.word	0x01e28500
    1298:	01e13380 	.word	0x01e13380
    129c:	00000f7d 	.word	0x00000f7d
    12a0:	00015180 	.word	0x00015180

000012a4 <calibrate_timestamp>:

/** \brief calibrate timestamp to make desired timestamp ahead of current timestamp
 */
static void calibrate_timestamp(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm,
                                struct calendar_alarm *current_dt)
{
    12a4:	b580      	push	{r7, lr}
    12a6:	b086      	sub	sp, #24
    12a8:	af00      	add	r7, sp, #0
    12aa:	60f8      	str	r0, [r7, #12]
    12ac:	60b9      	str	r1, [r7, #8]
    12ae:	607a      	str	r2, [r7, #4]
	uint32_t alarm_ts;
	uint32_t current_ts = current_dt->cal_alarm.timestamp;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	68db      	ldr	r3, [r3, #12]
    12b4:	613b      	str	r3, [r7, #16]

	alarm_ts = alarm->cal_alarm.timestamp;
    12b6:	68bb      	ldr	r3, [r7, #8]
    12b8:	68db      	ldr	r3, [r3, #12]
    12ba:	617b      	str	r3, [r7, #20]

	/* calibrate timestamp */
	switch (alarm->cal_alarm.option) {
    12bc:	68bb      	ldr	r3, [r7, #8]
    12be:	7c1b      	ldrb	r3, [r3, #16]
    12c0:	2b05      	cmp	r3, #5
    12c2:	d84a      	bhi.n	135a <calibrate_timestamp+0xb6>
    12c4:	009a      	lsls	r2, r3, #2
    12c6:	4b2e      	ldr	r3, [pc, #184]	; (1380 <calibrate_timestamp+0xdc>)
    12c8:	18d3      	adds	r3, r2, r3
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:

		if (alarm_ts <= current_ts) {
    12ce:	697a      	ldr	r2, [r7, #20]
    12d0:	693b      	ldr	r3, [r7, #16]
    12d2:	429a      	cmp	r2, r3
    12d4:	d843      	bhi.n	135e <calibrate_timestamp+0xba>
			alarm_ts += SECS_IN_MINUTE;
    12d6:	697b      	ldr	r3, [r7, #20]
    12d8:	333c      	adds	r3, #60	; 0x3c
    12da:	617b      	str	r3, [r7, #20]
		}

		break;
    12dc:	e03f      	b.n	135e <calibrate_timestamp+0xba>
	case CALENDAR_ALARM_MATCH_MIN:

		if (alarm_ts <= current_ts) {
    12de:	697a      	ldr	r2, [r7, #20]
    12e0:	693b      	ldr	r3, [r7, #16]
    12e2:	429a      	cmp	r2, r3
    12e4:	d83d      	bhi.n	1362 <calibrate_timestamp+0xbe>
			alarm_ts += SECS_IN_HOUR;
    12e6:	697b      	ldr	r3, [r7, #20]
    12e8:	22e1      	movs	r2, #225	; 0xe1
    12ea:	0112      	lsls	r2, r2, #4
    12ec:	4694      	mov	ip, r2
    12ee:	4463      	add	r3, ip
    12f0:	617b      	str	r3, [r7, #20]
		}

		break;
    12f2:	e036      	b.n	1362 <calibrate_timestamp+0xbe>
	case CALENDAR_ALARM_MATCH_HOUR:

		if (alarm_ts <= current_ts) {
    12f4:	697a      	ldr	r2, [r7, #20]
    12f6:	693b      	ldr	r3, [r7, #16]
    12f8:	429a      	cmp	r2, r3
    12fa:	d834      	bhi.n	1366 <calibrate_timestamp+0xc2>
			alarm_ts += SECS_IN_DAY;
    12fc:	697b      	ldr	r3, [r7, #20]
    12fe:	4a21      	ldr	r2, [pc, #132]	; (1384 <calibrate_timestamp+0xe0>)
    1300:	4694      	mov	ip, r2
    1302:	4463      	add	r3, ip
    1304:	617b      	str	r3, [r7, #20]
		}

		break;
    1306:	e02e      	b.n	1366 <calibrate_timestamp+0xc2>
	case CALENDAR_ALARM_MATCH_DAY:

		if (alarm_ts <= current_ts) {
    1308:	697a      	ldr	r2, [r7, #20]
    130a:	693b      	ldr	r3, [r7, #16]
    130c:	429a      	cmp	r2, r3
    130e:	d82c      	bhi.n	136a <calibrate_timestamp+0xc6>
			alarm_ts += get_secs_in_month(current_dt->cal_alarm.datetime.date.year,
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	895b      	ldrh	r3, [r3, #10]
    1314:	001a      	movs	r2, r3
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	7a5b      	ldrb	r3, [r3, #9]
    131a:	0019      	movs	r1, r3
    131c:	0010      	movs	r0, r2
    131e:	4b1a      	ldr	r3, [pc, #104]	; (1388 <calibrate_timestamp+0xe4>)
    1320:	4798      	blx	r3
    1322:	0002      	movs	r2, r0
    1324:	697b      	ldr	r3, [r7, #20]
    1326:	189b      	adds	r3, r3, r2
    1328:	617b      	str	r3, [r7, #20]
			                              current_dt->cal_alarm.datetime.date.month);
		}

		break;
    132a:	e01e      	b.n	136a <calibrate_timestamp+0xc6>
	case CALENDAR_ALARM_MATCH_MONTH:

		if (alarm_ts <= current_ts) {
    132c:	697a      	ldr	r2, [r7, #20]
    132e:	693b      	ldr	r3, [r7, #16]
    1330:	429a      	cmp	r2, r3
    1332:	d81c      	bhi.n	136e <calibrate_timestamp+0xca>
			if (leap_year(current_dt->cal_alarm.datetime.date.year)) {
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	895b      	ldrh	r3, [r3, #10]
    1338:	0018      	movs	r0, r3
    133a:	4b14      	ldr	r3, [pc, #80]	; (138c <calibrate_timestamp+0xe8>)
    133c:	4798      	blx	r3
    133e:	1e03      	subs	r3, r0, #0
    1340:	d005      	beq.n	134e <calibrate_timestamp+0xaa>
				alarm_ts += SECS_IN_LEAP_YEAR;
    1342:	697b      	ldr	r3, [r7, #20]
    1344:	4a12      	ldr	r2, [pc, #72]	; (1390 <calibrate_timestamp+0xec>)
    1346:	4694      	mov	ip, r2
    1348:	4463      	add	r3, ip
    134a:	617b      	str	r3, [r7, #20]
			} else {
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
			}
		}

		break;
    134c:	e00f      	b.n	136e <calibrate_timestamp+0xca>
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
    134e:	697b      	ldr	r3, [r7, #20]
    1350:	4a10      	ldr	r2, [pc, #64]	; (1394 <calibrate_timestamp+0xf0>)
    1352:	4694      	mov	ip, r2
    1354:	4463      	add	r3, ip
    1356:	617b      	str	r3, [r7, #20]
		break;
    1358:	e009      	b.n	136e <calibrate_timestamp+0xca>
	/* do nothing for year match */
	case CALENDAR_ALARM_MATCH_YEAR:
	default:
		break;
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	e008      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	e006      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	e004      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	e002      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	e000      	b.n	1370 <calibrate_timestamp+0xcc>
		break;
    136e:	46c0      	nop			; (mov r8, r8)
	}

	/* desired timestamp after calibration */
	alarm->cal_alarm.timestamp = alarm_ts;
    1370:	68bb      	ldr	r3, [r7, #8]
    1372:	697a      	ldr	r2, [r7, #20]
    1374:	60da      	str	r2, [r3, #12]
}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b006      	add	sp, #24
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00007068 	.word	0x00007068
    1384:	00015180 	.word	0x00015180
    1388:	00000f7d 	.word	0x00000f7d
    138c:	00000f57 	.word	0x00000f57
    1390:	01e28500 	.word	0x01e28500
    1394:	01e13380 	.word	0x01e13380

00001398 <fill_alarm>:

/** \brief complete alarm to absolute date/time, then fill up the timestamp
 */
static void fill_alarm(struct calendar_descriptor *const calendar, struct calendar_alarm *alarm)
{
    1398:	b580      	push	{r7, lr}
    139a:	b08a      	sub	sp, #40	; 0x28
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
    13a0:	6039      	str	r1, [r7, #0]
	struct calendar_alarm current_dt;
	uint32_t              tmp, current_ts;

	/* get current date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	0018      	movs	r0, r3
    13a6:	4b44      	ldr	r3, [pc, #272]	; (14b8 <fill_alarm+0x120>)
    13a8:	4798      	blx	r3
    13aa:	0003      	movs	r3, r0
    13ac:	627b      	str	r3, [r7, #36]	; 0x24
	convert_timestamp_to_datetime(calendar, current_ts, &current_dt.cal_alarm.datetime);
    13ae:	2308      	movs	r3, #8
    13b0:	18fb      	adds	r3, r7, r3
    13b2:	1d1a      	adds	r2, r3, #4
    13b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	0018      	movs	r0, r3
    13ba:	4b40      	ldr	r3, [pc, #256]	; (14bc <fill_alarm+0x124>)
    13bc:	4798      	blx	r3

	current_dt.cal_alarm.timestamp = current_ts;
    13be:	2308      	movs	r3, #8
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13c4:	60da      	str	r2, [r3, #12]

	/* complete alarm */
	switch (alarm->cal_alarm.option) {
    13c6:	683b      	ldr	r3, [r7, #0]
    13c8:	7c1b      	ldrb	r3, [r3, #16]
    13ca:	2b06      	cmp	r3, #6
    13cc:	d854      	bhi.n	1478 <fill_alarm+0xe0>
    13ce:	009a      	lsls	r2, r3, #2
    13d0:	4b3b      	ldr	r3, [pc, #236]	; (14c0 <fill_alarm+0x128>)
    13d2:	18d3      	adds	r3, r2, r3
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    13d8:	2308      	movs	r3, #8
    13da:	18fb      	adds	r3, r7, r3
    13dc:	895a      	ldrh	r2, [r3, #10]
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    13e2:	2308      	movs	r3, #8
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	7a5a      	ldrb	r2, [r3, #9]
    13e8:	683b      	ldr	r3, [r7, #0]
    13ea:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    13ec:	2308      	movs	r3, #8
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	7a1a      	ldrb	r2, [r3, #8]
    13f2:	683b      	ldr	r3, [r7, #0]
    13f4:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    13f6:	2308      	movs	r3, #8
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	799a      	ldrb	r2, [r3, #6]
    13fc:	683b      	ldr	r3, [r7, #0]
    13fe:	719a      	strb	r2, [r3, #6]
		alarm->cal_alarm.datetime.time.min   = current_dt.cal_alarm.datetime.time.min;
    1400:	2308      	movs	r3, #8
    1402:	18fb      	adds	r3, r7, r3
    1404:	795a      	ldrb	r2, [r3, #5]
    1406:	683b      	ldr	r3, [r7, #0]
    1408:	715a      	strb	r2, [r3, #5]
		break;
    140a:	e036      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MIN:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    140c:	2308      	movs	r3, #8
    140e:	18fb      	adds	r3, r7, r3
    1410:	895a      	ldrh	r2, [r3, #10]
    1412:	683b      	ldr	r3, [r7, #0]
    1414:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1416:	2308      	movs	r3, #8
    1418:	18fb      	adds	r3, r7, r3
    141a:	7a5a      	ldrb	r2, [r3, #9]
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    1420:	2308      	movs	r3, #8
    1422:	18fb      	adds	r3, r7, r3
    1424:	7a1a      	ldrb	r2, [r3, #8]
    1426:	683b      	ldr	r3, [r7, #0]
    1428:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    142a:	2308      	movs	r3, #8
    142c:	18fb      	adds	r3, r7, r3
    142e:	799a      	ldrb	r2, [r3, #6]
    1430:	683b      	ldr	r3, [r7, #0]
    1432:	719a      	strb	r2, [r3, #6]
		break;
    1434:	e021      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_HOUR:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1436:	2308      	movs	r3, #8
    1438:	18fb      	adds	r3, r7, r3
    143a:	895a      	ldrh	r2, [r3, #10]
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1440:	2308      	movs	r3, #8
    1442:	18fb      	adds	r3, r7, r3
    1444:	7a5a      	ldrb	r2, [r3, #9]
    1446:	683b      	ldr	r3, [r7, #0]
    1448:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    144a:	2308      	movs	r3, #8
    144c:	18fb      	adds	r3, r7, r3
    144e:	7a1a      	ldrb	r2, [r3, #8]
    1450:	683b      	ldr	r3, [r7, #0]
    1452:	721a      	strb	r2, [r3, #8]
		break;
    1454:	e011      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_DAY:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1456:	2308      	movs	r3, #8
    1458:	18fb      	adds	r3, r7, r3
    145a:	895a      	ldrh	r2, [r3, #10]
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1460:	2308      	movs	r3, #8
    1462:	18fb      	adds	r3, r7, r3
    1464:	7a5a      	ldrb	r2, [r3, #9]
    1466:	683b      	ldr	r3, [r7, #0]
    1468:	725a      	strb	r2, [r3, #9]
		break;
    146a:	e006      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MONTH:
		alarm->cal_alarm.datetime.date.year = current_dt.cal_alarm.datetime.date.year;
    146c:	2308      	movs	r3, #8
    146e:	18fb      	adds	r3, r7, r3
    1470:	895a      	ldrh	r2, [r3, #10]
    1472:	683b      	ldr	r3, [r7, #0]
    1474:	815a      	strh	r2, [r3, #10]
		break;
    1476:	e000      	b.n	147a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_YEAR:
		break;
	default:
		break;
    1478:	46c0      	nop			; (mov r8, r8)
	}

	/* fill up the timestamp */
	tmp                        = convert_datetime_to_timestamp(calendar, &alarm->cal_alarm.datetime);
    147a:	683b      	ldr	r3, [r7, #0]
    147c:	1d1a      	adds	r2, r3, #4
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	0011      	movs	r1, r2
    1482:	0018      	movs	r0, r3
    1484:	4b0f      	ldr	r3, [pc, #60]	; (14c4 <fill_alarm+0x12c>)
    1486:	4798      	blx	r3
    1488:	0003      	movs	r3, r0
    148a:	623b      	str	r3, [r7, #32]
	alarm->cal_alarm.timestamp = tmp;
    148c:	683b      	ldr	r3, [r7, #0]
    148e:	6a3a      	ldr	r2, [r7, #32]
    1490:	60da      	str	r2, [r3, #12]

	/* calibrate the timestamp */
	calibrate_timestamp(calendar, alarm, &current_dt);
    1492:	2308      	movs	r3, #8
    1494:	18fa      	adds	r2, r7, r3
    1496:	6839      	ldr	r1, [r7, #0]
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	0018      	movs	r0, r3
    149c:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <fill_alarm+0x130>)
    149e:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, alarm->cal_alarm.timestamp, &alarm->cal_alarm.datetime);
    14a0:	683b      	ldr	r3, [r7, #0]
    14a2:	68d9      	ldr	r1, [r3, #12]
    14a4:	683b      	ldr	r3, [r7, #0]
    14a6:	1d1a      	adds	r2, r3, #4
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	0018      	movs	r0, r3
    14ac:	4b03      	ldr	r3, [pc, #12]	; (14bc <fill_alarm+0x124>)
    14ae:	4798      	blx	r3
}
    14b0:	46c0      	nop			; (mov r8, r8)
    14b2:	46bd      	mov	sp, r7
    14b4:	b00a      	add	sp, #40	; 0x28
    14b6:	bd80      	pop	{r7, pc}
    14b8:	00002d09 	.word	0x00002d09
    14bc:	00001011 	.word	0x00001011
    14c0:	00007080 	.word	0x00007080
    14c4:	0000116d 	.word	0x0000116d
    14c8:	000012a5 	.word	0x000012a5

000014cc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b084      	sub	sp, #16
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
    14d4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    14d6:	2300      	movs	r3, #0
    14d8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	1e5a      	subs	r2, r3, #1
    14de:	4193      	sbcs	r3, r2
    14e0:	b2d8      	uxtb	r0, r3
    14e2:	23e0      	movs	r3, #224	; 0xe0
    14e4:	005a      	lsls	r2, r3, #1
    14e6:	4b11      	ldr	r3, [pc, #68]	; (152c <calendar_init+0x60>)
    14e8:	0019      	movs	r1, r3
    14ea:	4b11      	ldr	r3, [pc, #68]	; (1530 <calendar_init+0x64>)
    14ec:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	681a      	ldr	r2, [r3, #0]
    14f2:	683b      	ldr	r3, [r7, #0]
    14f4:	429a      	cmp	r2, r3
    14f6:	d101      	bne.n	14fc <calendar_init+0x30>
		/* Already initialized with current configuration */
		return ERR_NONE;
    14f8:	2300      	movs	r3, #0
    14fa:	e013      	b.n	1524 <calendar_init+0x58>
	} else if (calendar->device.hw != NULL) {
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	2b00      	cmp	r3, #0
    1502:	d002      	beq.n	150a <calendar_init+0x3e>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1504:	2312      	movs	r3, #18
    1506:	425b      	negs	r3, r3
    1508:	e00c      	b.n	1524 <calendar_init+0x58>
	}
	calendar->device.hw = (void *)hw;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	683a      	ldr	r2, [r7, #0]
    150e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	0018      	movs	r0, r3
    1514:	4b07      	ldr	r3, [pc, #28]	; (1534 <calendar_init+0x68>)
    1516:	4798      	blx	r3
    1518:	0003      	movs	r3, r0
    151a:	60fb      	str	r3, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	4a06      	ldr	r2, [pc, #24]	; (1538 <calendar_init+0x6c>)
    1520:	615a      	str	r2, [r3, #20]

	return ret;
    1522:	68fb      	ldr	r3, [r7, #12]
}
    1524:	0018      	movs	r0, r3
    1526:	46bd      	mov	sp, r7
    1528:	b004      	add	sp, #16
    152a:	bd80      	pop	{r7, pc}
    152c:	0000709c 	.word	0x0000709c
    1530:	0000209b 	.word	0x0000209b
    1534:	00002c55 	.word	0x00002c55
    1538:	000007b2 	.word	0x000007b2

0000153c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    153c:	b580      	push	{r7, lr}
    153e:	b082      	sub	sp, #8
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
    1544:	4b05      	ldr	r3, [pc, #20]	; (155c <delay_init+0x20>)
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	601a      	str	r2, [r3, #0]
    154a:	4b04      	ldr	r3, [pc, #16]	; (155c <delay_init+0x20>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	0018      	movs	r0, r3
    1550:	4b03      	ldr	r3, [pc, #12]	; (1560 <delay_init+0x24>)
    1552:	4798      	blx	r3
}
    1554:	46c0      	nop			; (mov r8, r8)
    1556:	46bd      	mov	sp, r7
    1558:	b002      	add	sp, #8
    155a:	bd80      	pop	{r7, pc}
    155c:	2000007c 	.word	0x2000007c
    1560:	000047ed 	.word	0x000047ed

00001564 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1564:	b590      	push	{r4, r7, lr}
    1566:	b083      	sub	sp, #12
    1568:	af00      	add	r7, sp, #0
    156a:	0002      	movs	r2, r0
    156c:	1dbb      	adds	r3, r7, #6
    156e:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1570:	4b07      	ldr	r3, [pc, #28]	; (1590 <delay_ms+0x2c>)
    1572:	681c      	ldr	r4, [r3, #0]
    1574:	1dbb      	adds	r3, r7, #6
    1576:	881b      	ldrh	r3, [r3, #0]
    1578:	0018      	movs	r0, r3
    157a:	4b06      	ldr	r3, [pc, #24]	; (1594 <delay_ms+0x30>)
    157c:	4798      	blx	r3
    157e:	0003      	movs	r3, r0
    1580:	0019      	movs	r1, r3
    1582:	0020      	movs	r0, r4
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <delay_ms+0x34>)
    1586:	4798      	blx	r3
}
    1588:	46c0      	nop			; (mov r8, r8)
    158a:	46bd      	mov	sp, r7
    158c:	b003      	add	sp, #12
    158e:	bd90      	pop	{r4, r7, pc}
    1590:	2000007c 	.word	0x2000007c
    1594:	00002649 	.word	0x00002649
    1598:	00004809 	.word	0x00004809

0000159c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    159c:	b580      	push	{r7, lr}
    159e:	b08a      	sub	sp, #40	; 0x28
    15a0:	af00      	add	r7, sp, #0
    15a2:	60f8      	str	r0, [r7, #12]
    15a4:	60b9      	str	r1, [r7, #8]
    15a6:	1dbb      	adds	r3, r7, #6
    15a8:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	3b14      	subs	r3, #20
    15ae:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    15b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15b2:	8b9a      	ldrh	r2, [r3, #28]
    15b4:	2314      	movs	r3, #20
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    15ba:	1dbb      	adds	r3, r7, #6
    15bc:	881a      	ldrh	r2, [r3, #0]
    15be:	2314      	movs	r3, #20
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    15c4:	2314      	movs	r3, #20
    15c6:	18fb      	adds	r3, r7, r3
    15c8:	4a0c      	ldr	r2, [pc, #48]	; (15fc <i2c_m_sync_read+0x60>)
    15ca:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    15cc:	2314      	movs	r3, #20
    15ce:	18fb      	adds	r3, r7, r3
    15d0:	68ba      	ldr	r2, [r7, #8]
    15d2:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    15d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15d6:	2214      	movs	r2, #20
    15d8:	18ba      	adds	r2, r7, r2
    15da:	0011      	movs	r1, r2
    15dc:	0018      	movs	r0, r3
    15de:	4b08      	ldr	r3, [pc, #32]	; (1600 <i2c_m_sync_read+0x64>)
    15e0:	4798      	blx	r3
    15e2:	0003      	movs	r3, r0
    15e4:	623b      	str	r3, [r7, #32]

	if (ret) {
    15e6:	6a3b      	ldr	r3, [r7, #32]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d001      	beq.n	15f0 <i2c_m_sync_read+0x54>
		return ret;
    15ec:	6a3b      	ldr	r3, [r7, #32]
    15ee:	e001      	b.n	15f4 <i2c_m_sync_read+0x58>
	}

	return n;
    15f0:	1dbb      	adds	r3, r7, #6
    15f2:	881b      	ldrh	r3, [r3, #0]
}
    15f4:	0018      	movs	r0, r3
    15f6:	46bd      	mov	sp, r7
    15f8:	b00a      	add	sp, #40	; 0x28
    15fa:	bd80      	pop	{r7, pc}
    15fc:	ffff8001 	.word	0xffff8001
    1600:	00004109 	.word	0x00004109

00001604 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1604:	b580      	push	{r7, lr}
    1606:	b08a      	sub	sp, #40	; 0x28
    1608:	af00      	add	r7, sp, #0
    160a:	60f8      	str	r0, [r7, #12]
    160c:	60b9      	str	r1, [r7, #8]
    160e:	1dbb      	adds	r3, r7, #6
    1610:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	3b14      	subs	r3, #20
    1616:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    161a:	8b9a      	ldrh	r2, [r3, #28]
    161c:	2314      	movs	r3, #20
    161e:	18fb      	adds	r3, r7, r3
    1620:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1622:	1dbb      	adds	r3, r7, #6
    1624:	881a      	ldrh	r2, [r3, #0]
    1626:	2314      	movs	r3, #20
    1628:	18fb      	adds	r3, r7, r3
    162a:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    162c:	2314      	movs	r3, #20
    162e:	18fb      	adds	r3, r7, r3
    1630:	4a0c      	ldr	r2, [pc, #48]	; (1664 <i2c_m_sync_write+0x60>)
    1632:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1634:	2314      	movs	r3, #20
    1636:	18fb      	adds	r3, r7, r3
    1638:	68ba      	ldr	r2, [r7, #8]
    163a:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    163e:	2214      	movs	r2, #20
    1640:	18ba      	adds	r2, r7, r2
    1642:	0011      	movs	r1, r2
    1644:	0018      	movs	r0, r3
    1646:	4b08      	ldr	r3, [pc, #32]	; (1668 <i2c_m_sync_write+0x64>)
    1648:	4798      	blx	r3
    164a:	0003      	movs	r3, r0
    164c:	623b      	str	r3, [r7, #32]

	if (ret) {
    164e:	6a3b      	ldr	r3, [r7, #32]
    1650:	2b00      	cmp	r3, #0
    1652:	d001      	beq.n	1658 <i2c_m_sync_write+0x54>
		return ret;
    1654:	6a3b      	ldr	r3, [r7, #32]
    1656:	e001      	b.n	165c <i2c_m_sync_write+0x58>
	}

	return n;
    1658:	1dbb      	adds	r3, r7, #6
    165a:	881b      	ldrh	r3, [r3, #0]
}
    165c:	0018      	movs	r0, r3
    165e:	46bd      	mov	sp, r7
    1660:	b00a      	add	sp, #40	; 0x28
    1662:	bd80      	pop	{r7, pc}
    1664:	ffff8000 	.word	0xffff8000
    1668:	00004109 	.word	0x00004109

0000166c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    166c:	b580      	push	{r7, lr}
    166e:	b084      	sub	sp, #16
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	1e5a      	subs	r2, r3, #1
    167a:	4193      	sbcs	r3, r2
    167c:	b2db      	uxtb	r3, r3
    167e:	490e      	ldr	r1, [pc, #56]	; (16b8 <i2c_m_sync_init+0x4c>)
    1680:	225e      	movs	r2, #94	; 0x5e
    1682:	0018      	movs	r0, r3
    1684:	4b0d      	ldr	r3, [pc, #52]	; (16bc <i2c_m_sync_init+0x50>)
    1686:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	683a      	ldr	r2, [r7, #0]
    168c:	0011      	movs	r1, r2
    168e:	0018      	movs	r0, r3
    1690:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <i2c_m_sync_init+0x54>)
    1692:	4798      	blx	r3
    1694:	0003      	movs	r3, r0
    1696:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1698:	68fb      	ldr	r3, [r7, #12]
    169a:	2b00      	cmp	r3, #0
    169c:	d001      	beq.n	16a2 <i2c_m_sync_init+0x36>
		return init_status;
    169e:	68fb      	ldr	r3, [r7, #12]
    16a0:	e006      	b.n	16b0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	4a07      	ldr	r2, [pc, #28]	; (16c4 <i2c_m_sync_init+0x58>)
    16a6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	4a07      	ldr	r2, [pc, #28]	; (16c8 <i2c_m_sync_init+0x5c>)
    16ac:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    16ae:	2300      	movs	r3, #0
}
    16b0:	0018      	movs	r0, r3
    16b2:	46bd      	mov	sp, r7
    16b4:	b004      	add	sp, #16
    16b6:	bd80      	pop	{r7, pc}
    16b8:	000070b8 	.word	0x000070b8
    16bc:	0000209b 	.word	0x0000209b
    16c0:	00003ee5 	.word	0x00003ee5
    16c4:	0000159d 	.word	0x0000159d
    16c8:	00001605 	.word	0x00001605

000016cc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b082      	sub	sp, #8
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	0018      	movs	r0, r3
    16d8:	4b03      	ldr	r3, [pc, #12]	; (16e8 <i2c_m_sync_enable+0x1c>)
    16da:	4798      	blx	r3
    16dc:	0003      	movs	r3, r0
}
    16de:	0018      	movs	r0, r3
    16e0:	46bd      	mov	sp, r7
    16e2:	b002      	add	sp, #8
    16e4:	bd80      	pop	{r7, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00003f2d 	.word	0x00003f2d

000016ec <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    16ec:	b580      	push	{r7, lr}
    16ee:	b084      	sub	sp, #16
    16f0:	af00      	add	r7, sp, #0
    16f2:	60f8      	str	r0, [r7, #12]
    16f4:	607a      	str	r2, [r7, #4]
    16f6:	230a      	movs	r3, #10
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	1c0a      	adds	r2, r1, #0
    16fc:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    16fe:	230a      	movs	r3, #10
    1700:	18fb      	adds	r3, r7, r3
    1702:	881b      	ldrh	r3, [r3, #0]
    1704:	059b      	lsls	r3, r3, #22
    1706:	0d9b      	lsrs	r3, r3, #22
    1708:	b21a      	sxth	r2, r3
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	b219      	sxth	r1, r3
    170e:	2380      	movs	r3, #128	; 0x80
    1710:	00db      	lsls	r3, r3, #3
    1712:	400b      	ands	r3, r1
    1714:	b21b      	sxth	r3, r3
    1716:	4313      	orrs	r3, r2
    1718:	b21b      	sxth	r3, r3
    171a:	b29a      	uxth	r2, r3
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	839a      	strh	r2, [r3, #28]
    1720:	68fb      	ldr	r3, [r7, #12]
    1722:	8b9b      	ldrh	r3, [r3, #28]
}
    1724:	0018      	movs	r0, r3
    1726:	46bd      	mov	sp, r7
    1728:	b004      	add	sp, #16
    172a:	bd80      	pop	{r7, pc}

0000172c <i2c_m_sync_transfer>:

/**
 * \brief Sync version of i2c transfer command
 */
int32_t i2c_m_sync_transfer(struct i2c_m_sync_desc *const i2c, struct _i2c_m_msg *msg)
{
    172c:	b580      	push	{r7, lr}
    172e:	b082      	sub	sp, #8
    1730:	af00      	add	r7, sp, #0
    1732:	6078      	str	r0, [r7, #4]
    1734:	6039      	str	r1, [r7, #0]
	return _i2c_m_sync_transfer(&i2c->device, msg);
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	683a      	ldr	r2, [r7, #0]
    173a:	0011      	movs	r1, r2
    173c:	0018      	movs	r0, r3
    173e:	4b03      	ldr	r3, [pc, #12]	; (174c <i2c_m_sync_transfer+0x20>)
    1740:	4798      	blx	r3
    1742:	0003      	movs	r3, r0
}
    1744:	0018      	movs	r0, r3
    1746:	46bd      	mov	sp, r7
    1748:	b002      	add	sp, #8
    174a:	bd80      	pop	{r7, pc}
    174c:	00004109 	.word	0x00004109

00001750 <i2c_s_async_init>:
/**
 * \brief Initialize asynchronous i2c slave interface
 */
int32_t i2c_s_async_init(struct i2c_s_async_descriptor *const descr, void *const hw, uint8_t *const rx_buffer,
                         const uint16_t rx_buffer_length)
{
    1750:	b580      	push	{r7, lr}
    1752:	b086      	sub	sp, #24
    1754:	af00      	add	r7, sp, #0
    1756:	60f8      	str	r0, [r7, #12]
    1758:	60b9      	str	r1, [r7, #8]
    175a:	607a      	str	r2, [r7, #4]
    175c:	001a      	movs	r2, r3
    175e:	1cbb      	adds	r3, r7, #2
    1760:	801a      	strh	r2, [r3, #0]
	int32_t init_status;

	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	2b00      	cmp	r3, #0
    1766:	d00b      	beq.n	1780 <i2c_s_async_init+0x30>
    1768:	68bb      	ldr	r3, [r7, #8]
    176a:	2b00      	cmp	r3, #0
    176c:	d008      	beq.n	1780 <i2c_s_async_init+0x30>
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	2b00      	cmp	r3, #0
    1772:	d005      	beq.n	1780 <i2c_s_async_init+0x30>
    1774:	1cbb      	adds	r3, r7, #2
    1776:	881b      	ldrh	r3, [r3, #0]
    1778:	2b00      	cmp	r3, #0
    177a:	d001      	beq.n	1780 <i2c_s_async_init+0x30>
    177c:	2301      	movs	r3, #1
    177e:	e000      	b.n	1782 <i2c_s_async_init+0x32>
    1780:	2300      	movs	r3, #0
    1782:	1c1a      	adds	r2, r3, #0
    1784:	2301      	movs	r3, #1
    1786:	4013      	ands	r3, r2
    1788:	b2db      	uxtb	r3, r3
    178a:	491e      	ldr	r1, [pc, #120]	; (1804 <i2c_s_async_init+0xb4>)
    178c:	223a      	movs	r2, #58	; 0x3a
    178e:	0018      	movs	r0, r3
    1790:	4b1d      	ldr	r3, [pc, #116]	; (1808 <i2c_s_async_init+0xb8>)
    1792:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	3330      	adds	r3, #48	; 0x30
    1798:	0018      	movs	r0, r3
    179a:	1cbb      	adds	r3, r7, #2
    179c:	881a      	ldrh	r2, [r3, #0]
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	0019      	movs	r1, r3
    17a2:	4b1a      	ldr	r3, [pc, #104]	; (180c <i2c_s_async_init+0xbc>)
    17a4:	4798      	blx	r3
    17a6:	1e03      	subs	r3, r0, #0
    17a8:	d002      	beq.n	17b0 <i2c_s_async_init+0x60>
		return ERR_INVALID_ARG;
    17aa:	230d      	movs	r3, #13
    17ac:	425b      	negs	r3, r3
    17ae:	e024      	b.n	17fa <i2c_s_async_init+0xaa>
	}

	init_status = _i2c_s_async_init(&descr->device, hw);
    17b0:	68fb      	ldr	r3, [r7, #12]
    17b2:	68ba      	ldr	r2, [r7, #8]
    17b4:	0011      	movs	r1, r2
    17b6:	0018      	movs	r0, r3
    17b8:	4b15      	ldr	r3, [pc, #84]	; (1810 <i2c_s_async_init+0xc0>)
    17ba:	4798      	blx	r3
    17bc:	0003      	movs	r3, r0
    17be:	617b      	str	r3, [r7, #20]
	if (init_status) {
    17c0:	697b      	ldr	r3, [r7, #20]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d001      	beq.n	17ca <i2c_s_async_init+0x7a>
		return init_status;
    17c6:	697b      	ldr	r3, [r7, #20]
    17c8:	e017      	b.n	17fa <i2c_s_async_init+0xaa>
	}

	descr->io.read  = i2c_s_async_read;
    17ca:	68fb      	ldr	r3, [r7, #12]
    17cc:	4a11      	ldr	r2, [pc, #68]	; (1814 <i2c_s_async_init+0xc4>)
    17ce:	61da      	str	r2, [r3, #28]
	descr->io.write = i2c_s_async_write;
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	4a11      	ldr	r2, [pc, #68]	; (1818 <i2c_s_async_init+0xc8>)
    17d4:	619a      	str	r2, [r3, #24]

	descr->device.cb.error   = i2c_s_async_error;
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	4a10      	ldr	r2, [pc, #64]	; (181c <i2c_s_async_init+0xcc>)
    17da:	605a      	str	r2, [r3, #4]
	descr->device.cb.tx      = i2c_s_async_tx;
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	4a10      	ldr	r2, [pc, #64]	; (1820 <i2c_s_async_init+0xd0>)
    17e0:	609a      	str	r2, [r3, #8]
	descr->device.cb.rx_done = i2c_s_async_byte_received;
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	4a0f      	ldr	r2, [pc, #60]	; (1824 <i2c_s_async_init+0xd4>)
    17e6:	60da      	str	r2, [r3, #12]

	descr->tx_por           = 0;
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	2246      	movs	r2, #70	; 0x46
    17ec:	2100      	movs	r1, #0
    17ee:	5299      	strh	r1, [r3, r2]
	descr->tx_buffer_length = 0;
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	2244      	movs	r2, #68	; 0x44
    17f4:	2100      	movs	r1, #0
    17f6:	5299      	strh	r1, [r3, r2]

	return ERR_NONE;
    17f8:	2300      	movs	r3, #0
}
    17fa:	0018      	movs	r0, r3
    17fc:	46bd      	mov	sp, r7
    17fe:	b006      	add	sp, #24
    1800:	bd80      	pop	{r7, pc}
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	000070d4 	.word	0x000070d4
    1808:	0000209b 	.word	0x0000209b
    180c:	000022c9 	.word	0x000022c9
    1810:	00004449 	.word	0x00004449
    1814:	00001925 	.word	0x00001925
    1818:	000019f5 	.word	0x000019f5
    181c:	000018fd 	.word	0x000018fd
    1820:	00001829 	.word	0x00001829
    1824:	000018b9 	.word	0x000018b9

00001828 <i2c_s_async_tx>:
 * \internal Callback function for data sending
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_tx(struct _i2c_s_async_device *const device)
{
    1828:	b580      	push	{r7, lr}
    182a:	b084      	sub	sp, #16
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    1830:	687b      	ldr	r3, [r7, #4]
    1832:	60fb      	str	r3, [r7, #12]

	if (!descr->tx_buffer_length) {
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	2244      	movs	r2, #68	; 0x44
    1838:	5a9b      	ldrh	r3, [r3, r2]
    183a:	2b00      	cmp	r3, #0
    183c:	d109      	bne.n	1852 <i2c_s_async_tx+0x2a>
		if (descr->cbs.tx_pending) {
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1842:	2b00      	cmp	r3, #0
    1844:	d032      	beq.n	18ac <i2c_s_async_tx+0x84>
			descr->cbs.tx_pending(descr);
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    184a:	68fa      	ldr	r2, [r7, #12]
    184c:	0010      	movs	r0, r2
    184e:	4798      	blx	r3
		descr->tx_buffer_length = 0;
		if (descr->cbs.tx) {
			descr->cbs.tx(descr);
		}
	}
}
    1850:	e02c      	b.n	18ac <i2c_s_async_tx+0x84>
	} else if (++descr->tx_por != descr->tx_buffer_length) {
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	2246      	movs	r2, #70	; 0x46
    1856:	5a9b      	ldrh	r3, [r3, r2]
    1858:	3301      	adds	r3, #1
    185a:	b299      	uxth	r1, r3
    185c:	68fb      	ldr	r3, [r7, #12]
    185e:	2246      	movs	r2, #70	; 0x46
    1860:	5299      	strh	r1, [r3, r2]
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	2246      	movs	r2, #70	; 0x46
    1866:	5a9a      	ldrh	r2, [r3, r2]
    1868:	68fb      	ldr	r3, [r7, #12]
    186a:	2144      	movs	r1, #68	; 0x44
    186c:	5a5b      	ldrh	r3, [r3, r1]
    186e:	429a      	cmp	r2, r3
    1870:	d00b      	beq.n	188a <i2c_s_async_tx+0x62>
		_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por]);
    1872:	68f8      	ldr	r0, [r7, #12]
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1878:	68fa      	ldr	r2, [r7, #12]
    187a:	2146      	movs	r1, #70	; 0x46
    187c:	5a52      	ldrh	r2, [r2, r1]
    187e:	189b      	adds	r3, r3, r2
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	0019      	movs	r1, r3
    1884:	4b0b      	ldr	r3, [pc, #44]	; (18b4 <i2c_s_async_tx+0x8c>)
    1886:	4798      	blx	r3
}
    1888:	e010      	b.n	18ac <i2c_s_async_tx+0x84>
		descr->tx_por           = 0;
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	2246      	movs	r2, #70	; 0x46
    188e:	2100      	movs	r1, #0
    1890:	5299      	strh	r1, [r3, r2]
		descr->tx_buffer_length = 0;
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	2244      	movs	r2, #68	; 0x44
    1896:	2100      	movs	r1, #0
    1898:	5299      	strh	r1, [r3, r2]
		if (descr->cbs.tx) {
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    189e:	2b00      	cmp	r3, #0
    18a0:	d004      	beq.n	18ac <i2c_s_async_tx+0x84>
			descr->cbs.tx(descr);
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18a6:	68fa      	ldr	r2, [r7, #12]
    18a8:	0010      	movs	r0, r2
    18aa:	4798      	blx	r3
}
    18ac:	46c0      	nop			; (mov r8, r8)
    18ae:	46bd      	mov	sp, r7
    18b0:	b004      	add	sp, #16
    18b2:	bd80      	pop	{r7, pc}
    18b4:	000044f1 	.word	0x000044f1

000018b8 <i2c_s_async_byte_received>:
 * \internal Callback function for data receipt
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_byte_received(struct _i2c_s_async_device *const device, const uint8_t data)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	b084      	sub	sp, #16
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	000a      	movs	r2, r1
    18c2:	1cfb      	adds	r3, r7, #3
    18c4:	701a      	strb	r2, [r3, #0]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    18ca:	68fb      	ldr	r3, [r7, #12]
    18cc:	3330      	adds	r3, #48	; 0x30
    18ce:	001a      	movs	r2, r3
    18d0:	1cfb      	adds	r3, r7, #3
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	0019      	movs	r1, r3
    18d6:	0010      	movs	r0, r2
    18d8:	4b07      	ldr	r3, [pc, #28]	; (18f8 <i2c_s_async_byte_received+0x40>)
    18da:	4798      	blx	r3

	if (descr->cbs.rx) {
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18e0:	2b00      	cmp	r3, #0
    18e2:	d004      	beq.n	18ee <i2c_s_async_byte_received+0x36>
		descr->cbs.rx(descr);
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18e8:	68fa      	ldr	r2, [r7, #12]
    18ea:	0010      	movs	r0, r2
    18ec:	4798      	blx	r3
	}
}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	46bd      	mov	sp, r7
    18f2:	b004      	add	sp, #16
    18f4:	bd80      	pop	{r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	000023b1 	.word	0x000023b1

000018fc <i2c_s_async_error>:
 * \internal Callback function for error
 *
 * \param[in] device The pointer to i2c slave device
 */
static void i2c_s_async_error(struct _i2c_s_async_device *const device)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b084      	sub	sp, #16
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(device, struct i2c_s_async_descriptor, device);
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	60fb      	str	r3, [r7, #12]

	if (descr->cbs.error) {
    1908:	68fb      	ldr	r3, [r7, #12]
    190a:	6a1b      	ldr	r3, [r3, #32]
    190c:	2b00      	cmp	r3, #0
    190e:	d004      	beq.n	191a <i2c_s_async_error+0x1e>
		descr->cbs.error(descr);
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	6a1b      	ldr	r3, [r3, #32]
    1914:	68fa      	ldr	r2, [r7, #12]
    1916:	0010      	movs	r0, r2
    1918:	4798      	blx	r3
	}
}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	46bd      	mov	sp, r7
    191e:	b004      	add	sp, #16
    1920:	bd80      	pop	{r7, pc}
	...

00001924 <i2c_s_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t i2c_s_async_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length)
{
    1924:	b580      	push	{r7, lr}
    1926:	b088      	sub	sp, #32
    1928:	af00      	add	r7, sp, #0
    192a:	60f8      	str	r0, [r7, #12]
    192c:	60b9      	str	r1, [r7, #8]
    192e:	1dbb      	adds	r3, r7, #6
    1930:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    1932:	231e      	movs	r3, #30
    1934:	18fb      	adds	r3, r7, r3
    1936:	2200      	movs	r2, #0
    1938:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	3b18      	subs	r3, #24
    193e:	61bb      	str	r3, [r7, #24]

	ASSERT(io && buf && length);
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	2b00      	cmp	r3, #0
    1944:	d008      	beq.n	1958 <i2c_s_async_read+0x34>
    1946:	68bb      	ldr	r3, [r7, #8]
    1948:	2b00      	cmp	r3, #0
    194a:	d005      	beq.n	1958 <i2c_s_async_read+0x34>
    194c:	1dbb      	adds	r3, r7, #6
    194e:	881b      	ldrh	r3, [r3, #0]
    1950:	2b00      	cmp	r3, #0
    1952:	d001      	beq.n	1958 <i2c_s_async_read+0x34>
    1954:	2301      	movs	r3, #1
    1956:	e000      	b.n	195a <i2c_s_async_read+0x36>
    1958:	2300      	movs	r3, #0
    195a:	1c1a      	adds	r2, r3, #0
    195c:	2301      	movs	r3, #1
    195e:	4013      	ands	r3, r2
    1960:	b2d8      	uxtb	r0, r3
    1962:	239b      	movs	r3, #155	; 0x9b
    1964:	005a      	lsls	r2, r3, #1
    1966:	4b1d      	ldr	r3, [pc, #116]	; (19dc <i2c_s_async_read+0xb8>)
    1968:	0019      	movs	r1, r3
    196a:	4b1d      	ldr	r3, [pc, #116]	; (19e0 <i2c_s_async_read+0xbc>)
    196c:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    196e:	2310      	movs	r3, #16
    1970:	18fb      	adds	r3, r7, r3
    1972:	0018      	movs	r0, r3
    1974:	4b1b      	ldr	r3, [pc, #108]	; (19e4 <i2c_s_async_read+0xc0>)
    1976:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1978:	69bb      	ldr	r3, [r7, #24]
    197a:	3330      	adds	r3, #48	; 0x30
    197c:	0018      	movs	r0, r3
    197e:	4b1a      	ldr	r3, [pc, #104]	; (19e8 <i2c_s_async_read+0xc4>)
    1980:	4798      	blx	r3
    1982:	0003      	movs	r3, r0
    1984:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1986:	2310      	movs	r3, #16
    1988:	18fb      	adds	r3, r7, r3
    198a:	0018      	movs	r0, r3
    198c:	4b17      	ldr	r3, [pc, #92]	; (19ec <i2c_s_async_read+0xc8>)
    198e:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1990:	e00f      	b.n	19b2 <i2c_s_async_read+0x8e>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1992:	69bb      	ldr	r3, [r7, #24]
    1994:	3330      	adds	r3, #48	; 0x30
    1996:	0018      	movs	r0, r3
    1998:	231e      	movs	r3, #30
    199a:	18fb      	adds	r3, r7, r3
    199c:	881b      	ldrh	r3, [r3, #0]
    199e:	221e      	movs	r2, #30
    19a0:	18ba      	adds	r2, r7, r2
    19a2:	1c59      	adds	r1, r3, #1
    19a4:	8011      	strh	r1, [r2, #0]
    19a6:	001a      	movs	r2, r3
    19a8:	68bb      	ldr	r3, [r7, #8]
    19aa:	189b      	adds	r3, r3, r2
    19ac:	0019      	movs	r1, r3
    19ae:	4b10      	ldr	r3, [pc, #64]	; (19f0 <i2c_s_async_read+0xcc>)
    19b0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    19b2:	231e      	movs	r3, #30
    19b4:	18fb      	adds	r3, r7, r3
    19b6:	881a      	ldrh	r2, [r3, #0]
    19b8:	697b      	ldr	r3, [r7, #20]
    19ba:	429a      	cmp	r2, r3
    19bc:	d206      	bcs.n	19cc <i2c_s_async_read+0xa8>
    19be:	231e      	movs	r3, #30
    19c0:	18fa      	adds	r2, r7, r3
    19c2:	1dbb      	adds	r3, r7, #6
    19c4:	8812      	ldrh	r2, [r2, #0]
    19c6:	881b      	ldrh	r3, [r3, #0]
    19c8:	429a      	cmp	r2, r3
    19ca:	d3e2      	bcc.n	1992 <i2c_s_async_read+0x6e>
	}

	return (int32_t)was_read;
    19cc:	231e      	movs	r3, #30
    19ce:	18fb      	adds	r3, r7, r3
    19d0:	881b      	ldrh	r3, [r3, #0]
}
    19d2:	0018      	movs	r0, r3
    19d4:	46bd      	mov	sp, r7
    19d6:	b008      	add	sp, #32
    19d8:	bd80      	pop	{r7, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	000070d4 	.word	0x000070d4
    19e0:	0000209b 	.word	0x0000209b
    19e4:	00000f15 	.word	0x00000f15
    19e8:	00002425 	.word	0x00002425
    19ec:	00000f37 	.word	0x00000f37
    19f0:	0000233d 	.word	0x0000233d

000019f4 <i2c_s_async_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_async_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	b086      	sub	sp, #24
    19f8:	af00      	add	r7, sp, #0
    19fa:	60f8      	str	r0, [r7, #12]
    19fc:	60b9      	str	r1, [r7, #8]
    19fe:	1dbb      	adds	r3, r7, #6
    1a00:	801a      	strh	r2, [r3, #0]
	struct i2c_s_async_descriptor *descr = CONTAINER_OF(io, struct i2c_s_async_descriptor, io);
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	3b18      	subs	r3, #24
    1a06:	617b      	str	r3, [r7, #20]

	ASSERT(io && buf && length);
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d008      	beq.n	1a20 <i2c_s_async_write+0x2c>
    1a0e:	68bb      	ldr	r3, [r7, #8]
    1a10:	2b00      	cmp	r3, #0
    1a12:	d005      	beq.n	1a20 <i2c_s_async_write+0x2c>
    1a14:	1dbb      	adds	r3, r7, #6
    1a16:	881b      	ldrh	r3, [r3, #0]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d001      	beq.n	1a20 <i2c_s_async_write+0x2c>
    1a1c:	2301      	movs	r3, #1
    1a1e:	e000      	b.n	1a22 <i2c_s_async_write+0x2e>
    1a20:	2300      	movs	r3, #0
    1a22:	1c1a      	adds	r2, r3, #0
    1a24:	2301      	movs	r3, #1
    1a26:	4013      	ands	r3, r2
    1a28:	b2d8      	uxtb	r0, r3
    1a2a:	2352      	movs	r3, #82	; 0x52
    1a2c:	33ff      	adds	r3, #255	; 0xff
    1a2e:	001a      	movs	r2, r3
    1a30:	4b12      	ldr	r3, [pc, #72]	; (1a7c <i2c_s_async_write+0x88>)
    1a32:	0019      	movs	r1, r3
    1a34:	4b12      	ldr	r3, [pc, #72]	; (1a80 <i2c_s_async_write+0x8c>)
    1a36:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1a38:	697b      	ldr	r3, [r7, #20]
    1a3a:	2246      	movs	r2, #70	; 0x46
    1a3c:	5a9a      	ldrh	r2, [r3, r2]
    1a3e:	697b      	ldr	r3, [r7, #20]
    1a40:	2144      	movs	r1, #68	; 0x44
    1a42:	5a5b      	ldrh	r3, [r3, r1]
    1a44:	429a      	cmp	r2, r3
    1a46:	d002      	beq.n	1a4e <i2c_s_async_write+0x5a>
		return ERR_BUSY;
    1a48:	2304      	movs	r3, #4
    1a4a:	425b      	negs	r3, r3
    1a4c:	e011      	b.n	1a72 <i2c_s_async_write+0x7e>
	}

	descr->tx_buffer        = (uint8_t *)buf;
    1a4e:	697b      	ldr	r3, [r7, #20]
    1a50:	68ba      	ldr	r2, [r7, #8]
    1a52:	641a      	str	r2, [r3, #64]	; 0x40
	descr->tx_buffer_length = length;
    1a54:	697b      	ldr	r3, [r7, #20]
    1a56:	1dba      	adds	r2, r7, #6
    1a58:	2144      	movs	r1, #68	; 0x44
    1a5a:	8812      	ldrh	r2, [r2, #0]
    1a5c:	525a      	strh	r2, [r3, r1]
	_i2c_s_async_write_byte(&descr->device, descr->tx_buffer[0]);
    1a5e:	697a      	ldr	r2, [r7, #20]
    1a60:	697b      	ldr	r3, [r7, #20]
    1a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	0019      	movs	r1, r3
    1a68:	0010      	movs	r0, r2
    1a6a:	4b06      	ldr	r3, [pc, #24]	; (1a84 <i2c_s_async_write+0x90>)
    1a6c:	4798      	blx	r3

	return (int32_t)length;
    1a6e:	1dbb      	adds	r3, r7, #6
    1a70:	881b      	ldrh	r3, [r3, #0]
}
    1a72:	0018      	movs	r0, r3
    1a74:	46bd      	mov	sp, r7
    1a76:	b006      	add	sp, #24
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	000070d4 	.word	0x000070d4
    1a80:	0000209b 	.word	0x0000209b
    1a84:	000044f1 	.word	0x000044f1

00001a88 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	b084      	sub	sp, #16
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	60f8      	str	r0, [r7, #12]
    1a90:	60b9      	str	r1, [r7, #8]
    1a92:	1dbb      	adds	r3, r7, #6
    1a94:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d004      	beq.n	1aa6 <io_write+0x1e>
    1a9c:	68bb      	ldr	r3, [r7, #8]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d001      	beq.n	1aa6 <io_write+0x1e>
    1aa2:	2301      	movs	r3, #1
    1aa4:	e000      	b.n	1aa8 <io_write+0x20>
    1aa6:	2300      	movs	r3, #0
    1aa8:	1c1a      	adds	r2, r3, #0
    1aaa:	2301      	movs	r3, #1
    1aac:	4013      	ands	r3, r2
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	4908      	ldr	r1, [pc, #32]	; (1ad4 <io_write+0x4c>)
    1ab2:	2234      	movs	r2, #52	; 0x34
    1ab4:	0018      	movs	r0, r3
    1ab6:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <io_write+0x50>)
    1ab8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1aba:	68fb      	ldr	r3, [r7, #12]
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	1dba      	adds	r2, r7, #6
    1ac0:	8812      	ldrh	r2, [r2, #0]
    1ac2:	68b9      	ldr	r1, [r7, #8]
    1ac4:	68f8      	ldr	r0, [r7, #12]
    1ac6:	4798      	blx	r3
    1ac8:	0003      	movs	r3, r0
}
    1aca:	0018      	movs	r0, r3
    1acc:	46bd      	mov	sp, r7
    1ace:	b004      	add	sp, #16
    1ad0:	bd80      	pop	{r7, pc}
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	000070f4 	.word	0x000070f4
    1ad8:	0000209b 	.word	0x0000209b

00001adc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	b084      	sub	sp, #16
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	60f8      	str	r0, [r7, #12]
    1ae4:	60b9      	str	r1, [r7, #8]
    1ae6:	1dbb      	adds	r3, r7, #6
    1ae8:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d004      	beq.n	1afa <io_read+0x1e>
    1af0:	68bb      	ldr	r3, [r7, #8]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d001      	beq.n	1afa <io_read+0x1e>
    1af6:	2301      	movs	r3, #1
    1af8:	e000      	b.n	1afc <io_read+0x20>
    1afa:	2300      	movs	r3, #0
    1afc:	1c1a      	adds	r2, r3, #0
    1afe:	2301      	movs	r3, #1
    1b00:	4013      	ands	r3, r2
    1b02:	b2db      	uxtb	r3, r3
    1b04:	4908      	ldr	r1, [pc, #32]	; (1b28 <io_read+0x4c>)
    1b06:	223d      	movs	r2, #61	; 0x3d
    1b08:	0018      	movs	r0, r3
    1b0a:	4b08      	ldr	r3, [pc, #32]	; (1b2c <io_read+0x50>)
    1b0c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1b0e:	68fb      	ldr	r3, [r7, #12]
    1b10:	685b      	ldr	r3, [r3, #4]
    1b12:	1dba      	adds	r2, r7, #6
    1b14:	8812      	ldrh	r2, [r2, #0]
    1b16:	68b9      	ldr	r1, [r7, #8]
    1b18:	68f8      	ldr	r0, [r7, #12]
    1b1a:	4798      	blx	r3
    1b1c:	0003      	movs	r3, r0
}
    1b1e:	0018      	movs	r0, r3
    1b20:	46bd      	mov	sp, r7
    1b22:	b004      	add	sp, #16
    1b24:	bd80      	pop	{r7, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	000070f4 	.word	0x000070f4
    1b2c:	0000209b 	.word	0x0000209b

00001b30 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	b082      	sub	sp, #8
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	681b      	ldr	r3, [r3, #0]
}
    1b3c:	0018      	movs	r0, r3
    1b3e:	46bd      	mov	sp, r7
    1b40:	b002      	add	sp, #8
    1b42:	bd80      	pop	{r7, pc}

00001b44 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d002      	beq.n	1b58 <list_get_next_element+0x14>
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	e000      	b.n	1b5a <list_get_next_element+0x16>
    1b58:	2300      	movs	r3, #0
}
    1b5a:	0018      	movs	r0, r3
    1b5c:	46bd      	mov	sp, r7
    1b5e:	b002      	add	sp, #8
    1b60:	bd80      	pop	{r7, pc}
	...

00001b64 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b084      	sub	sp, #16
    1b68:	af00      	add	r7, sp, #0
    1b6a:	60f8      	str	r0, [r7, #12]
    1b6c:	60b9      	str	r1, [r7, #8]
    1b6e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d004      	beq.n	1b80 <timer_init+0x1c>
    1b76:	68bb      	ldr	r3, [r7, #8]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d001      	beq.n	1b80 <timer_init+0x1c>
    1b7c:	2301      	movs	r3, #1
    1b7e:	e000      	b.n	1b82 <timer_init+0x1e>
    1b80:	2300      	movs	r3, #0
    1b82:	1c1a      	adds	r2, r3, #0
    1b84:	2301      	movs	r3, #1
    1b86:	4013      	ands	r3, r2
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	490b      	ldr	r1, [pc, #44]	; (1bb8 <timer_init+0x54>)
    1b8c:	223b      	movs	r2, #59	; 0x3b
    1b8e:	0018      	movs	r0, r3
    1b90:	4b0a      	ldr	r3, [pc, #40]	; (1bbc <timer_init+0x58>)
    1b92:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	68ba      	ldr	r2, [r7, #8]
    1b98:	0011      	movs	r1, r2
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b08      	ldr	r3, [pc, #32]	; (1bc0 <timer_init+0x5c>)
    1b9e:	4798      	blx	r3
	descr->time                           = 0;
    1ba0:	68fb      	ldr	r3, [r7, #12]
    1ba2:	2200      	movs	r2, #0
    1ba4:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1ba6:	68fb      	ldr	r3, [r7, #12]
    1ba8:	4a06      	ldr	r2, [pc, #24]	; (1bc4 <timer_init+0x60>)
    1baa:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1bac:	2300      	movs	r3, #0
}
    1bae:	0018      	movs	r0, r3
    1bb0:	46bd      	mov	sp, r7
    1bb2:	b004      	add	sp, #16
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	00007108 	.word	0x00007108
    1bbc:	0000209b 	.word	0x0000209b
    1bc0:	00004b89 	.word	0x00004b89
    1bc4:	00001c8d 	.word	0x00001c8d

00001bc8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b088      	sub	sp, #32
    1bcc:	af00      	add	r7, sp, #0
    1bce:	60f8      	str	r0, [r7, #12]
    1bd0:	60b9      	str	r1, [r7, #8]
    1bd2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1bd4:	2300      	movs	r3, #0
    1bd6:	61bb      	str	r3, [r7, #24]
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	0018      	movs	r0, r3
    1bdc:	4b27      	ldr	r3, [pc, #156]	; (1c7c <timer_add_timer_task+0xb4>)
    1bde:	4798      	blx	r3
    1be0:	0003      	movs	r3, r0
    1be2:	613b      	str	r3, [r7, #16]

	if (!head) {
    1be4:	693b      	ldr	r3, [r7, #16]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d106      	bne.n	1bf8 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1bea:	68ba      	ldr	r2, [r7, #8]
    1bec:	68fb      	ldr	r3, [r7, #12]
    1bee:	0011      	movs	r1, r2
    1bf0:	0018      	movs	r0, r3
    1bf2:	4b23      	ldr	r3, [pc, #140]	; (1c80 <timer_add_timer_task+0xb8>)
    1bf4:	4798      	blx	r3
		return;
    1bf6:	e03d      	b.n	1c74 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1bf8:	693b      	ldr	r3, [r7, #16]
    1bfa:	61fb      	str	r3, [r7, #28]
    1bfc:	e024      	b.n	1c48 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    1bfe:	69fb      	ldr	r3, [r7, #28]
    1c00:	685a      	ldr	r2, [r3, #4]
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	429a      	cmp	r2, r3
    1c06:	d808      	bhi.n	1c1a <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1c08:	69fb      	ldr	r3, [r7, #28]
    1c0a:	689a      	ldr	r2, [r3, #8]
    1c0c:	69fb      	ldr	r3, [r7, #28]
    1c0e:	6859      	ldr	r1, [r3, #4]
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	1acb      	subs	r3, r1, r3
    1c14:	18d3      	adds	r3, r2, r3
    1c16:	617b      	str	r3, [r7, #20]
    1c18:	e009      	b.n	1c2e <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c1a:	69fb      	ldr	r3, [r7, #28]
    1c1c:	689a      	ldr	r2, [r3, #8]
    1c1e:	69fb      	ldr	r3, [r7, #28]
    1c20:	685b      	ldr	r3, [r3, #4]
    1c22:	18d2      	adds	r2, r2, r3
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	425b      	negs	r3, r3
    1c28:	18d3      	adds	r3, r2, r3
    1c2a:	3301      	adds	r3, #1
    1c2c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1c2e:	68bb      	ldr	r3, [r7, #8]
    1c30:	689a      	ldr	r2, [r3, #8]
    1c32:	697b      	ldr	r3, [r7, #20]
    1c34:	429a      	cmp	r2, r3
    1c36:	d90b      	bls.n	1c50 <timer_add_timer_task+0x88>
			break;
		prev = it;
    1c38:	69fb      	ldr	r3, [r7, #28]
    1c3a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c3c:	69fb      	ldr	r3, [r7, #28]
    1c3e:	0018      	movs	r0, r3
    1c40:	4b10      	ldr	r3, [pc, #64]	; (1c84 <timer_add_timer_task+0xbc>)
    1c42:	4798      	blx	r3
    1c44:	0003      	movs	r3, r0
    1c46:	61fb      	str	r3, [r7, #28]
    1c48:	69fb      	ldr	r3, [r7, #28]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d1d7      	bne.n	1bfe <timer_add_timer_task+0x36>
    1c4e:	e000      	b.n	1c52 <timer_add_timer_task+0x8a>
			break;
    1c50:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    1c52:	69fa      	ldr	r2, [r7, #28]
    1c54:	693b      	ldr	r3, [r7, #16]
    1c56:	429a      	cmp	r2, r3
    1c58:	d106      	bne.n	1c68 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    1c5a:	68ba      	ldr	r2, [r7, #8]
    1c5c:	68fb      	ldr	r3, [r7, #12]
    1c5e:	0011      	movs	r1, r2
    1c60:	0018      	movs	r0, r3
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <timer_add_timer_task+0xb8>)
    1c64:	4798      	blx	r3
    1c66:	e005      	b.n	1c74 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    1c68:	68ba      	ldr	r2, [r7, #8]
    1c6a:	69bb      	ldr	r3, [r7, #24]
    1c6c:	0011      	movs	r1, r2
    1c6e:	0018      	movs	r0, r3
    1c70:	4b05      	ldr	r3, [pc, #20]	; (1c88 <timer_add_timer_task+0xc0>)
    1c72:	4798      	blx	r3
	}
}
    1c74:	46bd      	mov	sp, r7
    1c76:	b008      	add	sp, #32
    1c78:	bd80      	pop	{r7, pc}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	00001b31 	.word	0x00001b31
    1c80:	00002221 	.word	0x00002221
    1c84:	00001b45 	.word	0x00001b45
    1c88:	00002279 	.word	0x00002279

00001c8c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b086      	sub	sp, #24
    1c90:	af00      	add	r7, sp, #0
    1c92:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1c98:	693b      	ldr	r3, [r7, #16]
    1c9a:	3314      	adds	r3, #20
    1c9c:	0018      	movs	r0, r3
    1c9e:	4b29      	ldr	r3, [pc, #164]	; (1d44 <timer_process_counted+0xb8>)
    1ca0:	4798      	blx	r3
    1ca2:	0003      	movs	r3, r0
    1ca4:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1ca6:	693b      	ldr	r3, [r7, #16]
    1ca8:	691b      	ldr	r3, [r3, #16]
    1caa:	1c5a      	adds	r2, r3, #1
    1cac:	693b      	ldr	r3, [r7, #16]
    1cae:	611a      	str	r2, [r3, #16]
    1cb0:	693b      	ldr	r3, [r7, #16]
    1cb2:	691b      	ldr	r3, [r3, #16]
    1cb4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1cb6:	693b      	ldr	r3, [r7, #16]
    1cb8:	7e1b      	ldrb	r3, [r3, #24]
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	001a      	movs	r2, r3
    1cbe:	2301      	movs	r3, #1
    1cc0:	4013      	ands	r3, r2
    1cc2:	d106      	bne.n	1cd2 <timer_process_counted+0x46>
    1cc4:	693b      	ldr	r3, [r7, #16]
    1cc6:	7e1b      	ldrb	r3, [r3, #24]
    1cc8:	b2db      	uxtb	r3, r3
    1cca:	001a      	movs	r2, r3
    1ccc:	2302      	movs	r3, #2
    1cce:	4013      	ands	r3, r2
    1cd0:	d029      	beq.n	1d26 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1cd2:	693b      	ldr	r3, [r7, #16]
    1cd4:	7e1b      	ldrb	r3, [r3, #24]
    1cd6:	b2db      	uxtb	r3, r3
    1cd8:	2202      	movs	r2, #2
    1cda:	4313      	orrs	r3, r2
    1cdc:	b2da      	uxtb	r2, r3
    1cde:	693b      	ldr	r3, [r7, #16]
    1ce0:	761a      	strb	r2, [r3, #24]
		return;
    1ce2:	e02b      	b.n	1d3c <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1ce4:	697b      	ldr	r3, [r7, #20]
    1ce6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1ce8:	693b      	ldr	r3, [r7, #16]
    1cea:	3314      	adds	r3, #20
    1cec:	0018      	movs	r0, r3
    1cee:	4b16      	ldr	r3, [pc, #88]	; (1d48 <timer_process_counted+0xbc>)
    1cf0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1cf2:	68bb      	ldr	r3, [r7, #8]
    1cf4:	7c1b      	ldrb	r3, [r3, #16]
    1cf6:	2b01      	cmp	r3, #1
    1cf8:	d109      	bne.n	1d0e <timer_process_counted+0x82>
			tmp->time_label = time;
    1cfa:	68bb      	ldr	r3, [r7, #8]
    1cfc:	68fa      	ldr	r2, [r7, #12]
    1cfe:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d00:	693b      	ldr	r3, [r7, #16]
    1d02:	3314      	adds	r3, #20
    1d04:	68fa      	ldr	r2, [r7, #12]
    1d06:	68b9      	ldr	r1, [r7, #8]
    1d08:	0018      	movs	r0, r3
    1d0a:	4b10      	ldr	r3, [pc, #64]	; (1d4c <timer_process_counted+0xc0>)
    1d0c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1d0e:	693b      	ldr	r3, [r7, #16]
    1d10:	3314      	adds	r3, #20
    1d12:	0018      	movs	r0, r3
    1d14:	4b0b      	ldr	r3, [pc, #44]	; (1d44 <timer_process_counted+0xb8>)
    1d16:	4798      	blx	r3
    1d18:	0003      	movs	r3, r0
    1d1a:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1d1c:	68bb      	ldr	r3, [r7, #8]
    1d1e:	68db      	ldr	r3, [r3, #12]
    1d20:	68ba      	ldr	r2, [r7, #8]
    1d22:	0010      	movs	r0, r2
    1d24:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1d26:	697b      	ldr	r3, [r7, #20]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d007      	beq.n	1d3c <timer_process_counted+0xb0>
    1d2c:	697b      	ldr	r3, [r7, #20]
    1d2e:	685b      	ldr	r3, [r3, #4]
    1d30:	68fa      	ldr	r2, [r7, #12]
    1d32:	1ad2      	subs	r2, r2, r3
    1d34:	697b      	ldr	r3, [r7, #20]
    1d36:	689b      	ldr	r3, [r3, #8]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d2d3      	bcs.n	1ce4 <timer_process_counted+0x58>
	}
}
    1d3c:	46bd      	mov	sp, r7
    1d3e:	b006      	add	sp, #24
    1d40:	bd80      	pop	{r7, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	00001b31 	.word	0x00001b31
    1d48:	00002299 	.word	0x00002299
    1d4c:	00001bc9 	.word	0x00001bc9

00001d50 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b086      	sub	sp, #24
    1d54:	af00      	add	r7, sp, #0
    1d56:	60f8      	str	r0, [r7, #12]
    1d58:	60b9      	str	r1, [r7, #8]
    1d5a:	607a      	str	r2, [r7, #4]
    1d5c:	001a      	movs	r2, r3
    1d5e:	1cbb      	adds	r3, r7, #2
    1d60:	801a      	strh	r2, [r3, #0]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1d62:	68fb      	ldr	r3, [r7, #12]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d00b      	beq.n	1d80 <usart_async_init+0x30>
    1d68:	68bb      	ldr	r3, [r7, #8]
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d008      	beq.n	1d80 <usart_async_init+0x30>
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d005      	beq.n	1d80 <usart_async_init+0x30>
    1d74:	1cbb      	adds	r3, r7, #2
    1d76:	881b      	ldrh	r3, [r3, #0]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d001      	beq.n	1d80 <usart_async_init+0x30>
    1d7c:	2301      	movs	r3, #1
    1d7e:	e000      	b.n	1d82 <usart_async_init+0x32>
    1d80:	2300      	movs	r3, #0
    1d82:	1c1a      	adds	r2, r3, #0
    1d84:	2301      	movs	r3, #1
    1d86:	4013      	ands	r3, r2
    1d88:	b2db      	uxtb	r3, r3
    1d8a:	491c      	ldr	r1, [pc, #112]	; (1dfc <usart_async_init+0xac>)
    1d8c:	223a      	movs	r2, #58	; 0x3a
    1d8e:	0018      	movs	r0, r3
    1d90:	4b1b      	ldr	r3, [pc, #108]	; (1e00 <usart_async_init+0xb0>)
    1d92:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	3334      	adds	r3, #52	; 0x34
    1d98:	0018      	movs	r0, r3
    1d9a:	1cbb      	adds	r3, r7, #2
    1d9c:	881a      	ldrh	r2, [r3, #0]
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	0019      	movs	r1, r3
    1da2:	4b18      	ldr	r3, [pc, #96]	; (1e04 <usart_async_init+0xb4>)
    1da4:	4798      	blx	r3
    1da6:	1e03      	subs	r3, r0, #0
    1da8:	d002      	beq.n	1db0 <usart_async_init+0x60>
		return ERR_INVALID_ARG;
    1daa:	230d      	movs	r3, #13
    1dac:	425b      	negs	r3, r3
    1dae:	e020      	b.n	1df2 <usart_async_init+0xa2>
	}
	init_status = _usart_async_init(&descr->device, hw);
    1db0:	68fb      	ldr	r3, [r7, #12]
    1db2:	3308      	adds	r3, #8
    1db4:	68ba      	ldr	r2, [r7, #8]
    1db6:	0011      	movs	r1, r2
    1db8:	0018      	movs	r0, r3
    1dba:	4b13      	ldr	r3, [pc, #76]	; (1e08 <usart_async_init+0xb8>)
    1dbc:	4798      	blx	r3
    1dbe:	0003      	movs	r3, r0
    1dc0:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1dc2:	697b      	ldr	r3, [r7, #20]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d001      	beq.n	1dcc <usart_async_init+0x7c>
		return init_status;
    1dc8:	697b      	ldr	r3, [r7, #20]
    1dca:	e012      	b.n	1df2 <usart_async_init+0xa2>
	}

	descr->io.read  = usart_async_read;
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	4a0f      	ldr	r2, [pc, #60]	; (1e0c <usart_async_init+0xbc>)
    1dd0:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    1dd2:	68fb      	ldr	r3, [r7, #12]
    1dd4:	4a0e      	ldr	r2, [pc, #56]	; (1e10 <usart_async_init+0xc0>)
    1dd6:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1dd8:	68fb      	ldr	r3, [r7, #12]
    1dda:	4a0e      	ldr	r2, [pc, #56]	; (1e14 <usart_async_init+0xc4>)
    1ddc:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	4a0d      	ldr	r2, [pc, #52]	; (1e18 <usart_async_init+0xc8>)
    1de2:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1de4:	68fb      	ldr	r3, [r7, #12]
    1de6:	4a0d      	ldr	r2, [pc, #52]	; (1e1c <usart_async_init+0xcc>)
    1de8:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	4a0c      	ldr	r2, [pc, #48]	; (1e20 <usart_async_init+0xd0>)
    1dee:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1df0:	2300      	movs	r3, #0
}
    1df2:	0018      	movs	r0, r3
    1df4:	46bd      	mov	sp, r7
    1df6:	b006      	add	sp, #24
    1df8:	bd80      	pop	{r7, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	00007120 	.word	0x00007120
    1e00:	0000209b 	.word	0x0000209b
    1e04:	000022c9 	.word	0x000022c9
    1e08:	00003699 	.word	0x00003699
    1e0c:	00001ebd 	.word	0x00001ebd
    1e10:	00001e25 	.word	0x00001e25
    1e14:	00001f89 	.word	0x00001f89
    1e18:	00002029 	.word	0x00002029
    1e1c:	00001ff9 	.word	0x00001ff9
    1e20:	0000206d 	.word	0x0000206d

00001e24 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b086      	sub	sp, #24
    1e28:	af00      	add	r7, sp, #0
    1e2a:	60f8      	str	r0, [r7, #12]
    1e2c:	60b9      	str	r1, [r7, #8]
    1e2e:	1dbb      	adds	r3, r7, #6
    1e30:	801a      	strh	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    1e36:	697b      	ldr	r3, [r7, #20]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d008      	beq.n	1e4e <usart_async_write+0x2a>
    1e3c:	68bb      	ldr	r3, [r7, #8]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d005      	beq.n	1e4e <usart_async_write+0x2a>
    1e42:	1dbb      	adds	r3, r7, #6
    1e44:	881b      	ldrh	r3, [r3, #0]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d001      	beq.n	1e4e <usart_async_write+0x2a>
    1e4a:	2301      	movs	r3, #1
    1e4c:	e000      	b.n	1e50 <usart_async_write+0x2c>
    1e4e:	2300      	movs	r3, #0
    1e50:	1c1a      	adds	r2, r3, #0
    1e52:	2301      	movs	r3, #1
    1e54:	4013      	ands	r3, r2
    1e56:	b2d8      	uxtb	r0, r3
    1e58:	233c      	movs	r3, #60	; 0x3c
    1e5a:	33ff      	adds	r3, #255	; 0xff
    1e5c:	001a      	movs	r2, r3
    1e5e:	4b14      	ldr	r3, [pc, #80]	; (1eb0 <usart_async_write+0x8c>)
    1e60:	0019      	movs	r1, r3
    1e62:	4b14      	ldr	r3, [pc, #80]	; (1eb4 <usart_async_write+0x90>)
    1e64:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1e66:	697b      	ldr	r3, [r7, #20]
    1e68:	2244      	movs	r2, #68	; 0x44
    1e6a:	5a9a      	ldrh	r2, [r3, r2]
    1e6c:	697b      	ldr	r3, [r7, #20]
    1e6e:	214c      	movs	r1, #76	; 0x4c
    1e70:	5a5b      	ldrh	r3, [r3, r1]
    1e72:	429a      	cmp	r2, r3
    1e74:	d002      	beq.n	1e7c <usart_async_write+0x58>
		return ERR_NO_RESOURCE;
    1e76:	231c      	movs	r3, #28
    1e78:	425b      	negs	r3, r3
    1e7a:	e015      	b.n	1ea8 <usart_async_write+0x84>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    1e7c:	697b      	ldr	r3, [r7, #20]
    1e7e:	68ba      	ldr	r2, [r7, #8]
    1e80:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1e82:	697b      	ldr	r3, [r7, #20]
    1e84:	1dba      	adds	r2, r7, #6
    1e86:	214c      	movs	r1, #76	; 0x4c
    1e88:	8812      	ldrh	r2, [r2, #0]
    1e8a:	525a      	strh	r2, [r3, r1]
	descr->tx_por           = 0;
    1e8c:	697b      	ldr	r3, [r7, #20]
    1e8e:	2244      	movs	r2, #68	; 0x44
    1e90:	2100      	movs	r1, #0
    1e92:	5299      	strh	r1, [r3, r2]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1e94:	697b      	ldr	r3, [r7, #20]
    1e96:	2201      	movs	r2, #1
    1e98:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1e9a:	697b      	ldr	r3, [r7, #20]
    1e9c:	3308      	adds	r3, #8
    1e9e:	0018      	movs	r0, r3
    1ea0:	4b05      	ldr	r3, [pc, #20]	; (1eb8 <usart_async_write+0x94>)
    1ea2:	4798      	blx	r3

	return (int32_t)length;
    1ea4:	1dbb      	adds	r3, r7, #6
    1ea6:	881b      	ldrh	r3, [r3, #0]
}
    1ea8:	0018      	movs	r0, r3
    1eaa:	46bd      	mov	sp, r7
    1eac:	b006      	add	sp, #24
    1eae:	bd80      	pop	{r7, pc}
    1eb0:	00007120 	.word	0x00007120
    1eb4:	0000209b 	.word	0x0000209b
    1eb8:	00003769 	.word	0x00003769

00001ebc <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b088      	sub	sp, #32
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	60f8      	str	r0, [r7, #12]
    1ec4:	60b9      	str	r1, [r7, #8]
    1ec6:	1dbb      	adds	r3, r7, #6
    1ec8:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    1eca:	231e      	movs	r3, #30
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	2200      	movs	r2, #0
    1ed0:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1ed2:	68fb      	ldr	r3, [r7, #12]
    1ed4:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    1ed6:	69bb      	ldr	r3, [r7, #24]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d008      	beq.n	1eee <usart_async_read+0x32>
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d005      	beq.n	1eee <usart_async_read+0x32>
    1ee2:	1dbb      	adds	r3, r7, #6
    1ee4:	881b      	ldrh	r3, [r3, #0]
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d001      	beq.n	1eee <usart_async_read+0x32>
    1eea:	2301      	movs	r3, #1
    1eec:	e000      	b.n	1ef0 <usart_async_read+0x34>
    1eee:	2300      	movs	r3, #0
    1ef0:	1c1a      	adds	r2, r3, #0
    1ef2:	2301      	movs	r3, #1
    1ef4:	4013      	ands	r3, r2
    1ef6:	b2d8      	uxtb	r0, r3
    1ef8:	23ac      	movs	r3, #172	; 0xac
    1efa:	005a      	lsls	r2, r3, #1
    1efc:	4b1c      	ldr	r3, [pc, #112]	; (1f70 <usart_async_read+0xb4>)
    1efe:	0019      	movs	r1, r3
    1f00:	4b1c      	ldr	r3, [pc, #112]	; (1f74 <usart_async_read+0xb8>)
    1f02:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1f04:	2310      	movs	r3, #16
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	0018      	movs	r0, r3
    1f0a:	4b1b      	ldr	r3, [pc, #108]	; (1f78 <usart_async_read+0xbc>)
    1f0c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1f0e:	69bb      	ldr	r3, [r7, #24]
    1f10:	3334      	adds	r3, #52	; 0x34
    1f12:	0018      	movs	r0, r3
    1f14:	4b19      	ldr	r3, [pc, #100]	; (1f7c <usart_async_read+0xc0>)
    1f16:	4798      	blx	r3
    1f18:	0003      	movs	r3, r0
    1f1a:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1f1c:	2310      	movs	r3, #16
    1f1e:	18fb      	adds	r3, r7, r3
    1f20:	0018      	movs	r0, r3
    1f22:	4b17      	ldr	r3, [pc, #92]	; (1f80 <usart_async_read+0xc4>)
    1f24:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1f26:	e00f      	b.n	1f48 <usart_async_read+0x8c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1f28:	69bb      	ldr	r3, [r7, #24]
    1f2a:	3334      	adds	r3, #52	; 0x34
    1f2c:	0018      	movs	r0, r3
    1f2e:	231e      	movs	r3, #30
    1f30:	18fb      	adds	r3, r7, r3
    1f32:	881b      	ldrh	r3, [r3, #0]
    1f34:	221e      	movs	r2, #30
    1f36:	18ba      	adds	r2, r7, r2
    1f38:	1c59      	adds	r1, r3, #1
    1f3a:	8011      	strh	r1, [r2, #0]
    1f3c:	001a      	movs	r2, r3
    1f3e:	68bb      	ldr	r3, [r7, #8]
    1f40:	189b      	adds	r3, r3, r2
    1f42:	0019      	movs	r1, r3
    1f44:	4b0f      	ldr	r3, [pc, #60]	; (1f84 <usart_async_read+0xc8>)
    1f46:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1f48:	231e      	movs	r3, #30
    1f4a:	18fb      	adds	r3, r7, r3
    1f4c:	881a      	ldrh	r2, [r3, #0]
    1f4e:	697b      	ldr	r3, [r7, #20]
    1f50:	429a      	cmp	r2, r3
    1f52:	d206      	bcs.n	1f62 <usart_async_read+0xa6>
    1f54:	231e      	movs	r3, #30
    1f56:	18fa      	adds	r2, r7, r3
    1f58:	1dbb      	adds	r3, r7, #6
    1f5a:	8812      	ldrh	r2, [r2, #0]
    1f5c:	881b      	ldrh	r3, [r3, #0]
    1f5e:	429a      	cmp	r2, r3
    1f60:	d3e2      	bcc.n	1f28 <usart_async_read+0x6c>
	}

	return (int32_t)was_read;
    1f62:	231e      	movs	r3, #30
    1f64:	18fb      	adds	r3, r7, r3
    1f66:	881b      	ldrh	r3, [r3, #0]
}
    1f68:	0018      	movs	r0, r3
    1f6a:	46bd      	mov	sp, r7
    1f6c:	b008      	add	sp, #32
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	00007120 	.word	0x00007120
    1f74:	0000209b 	.word	0x0000209b
    1f78:	00000f15 	.word	0x00000f15
    1f7c:	00002425 	.word	0x00002425
    1f80:	00000f37 	.word	0x00000f37
    1f84:	0000233d 	.word	0x0000233d

00001f88 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1f88:	b5b0      	push	{r4, r5, r7, lr}
    1f8a:	b084      	sub	sp, #16
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	3b08      	subs	r3, #8
    1f94:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    1f96:	68fb      	ldr	r3, [r7, #12]
    1f98:	2244      	movs	r2, #68	; 0x44
    1f9a:	5a9a      	ldrh	r2, [r3, r2]
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	214c      	movs	r1, #76	; 0x4c
    1fa0:	5a5b      	ldrh	r3, [r3, r1]
    1fa2:	429a      	cmp	r2, r3
    1fa4:	d018      	beq.n	1fd8 <usart_process_byte_sent+0x50>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1fa6:	68fb      	ldr	r3, [r7, #12]
    1fa8:	3308      	adds	r3, #8
    1faa:	001c      	movs	r4, r3
    1fac:	68fb      	ldr	r3, [r7, #12]
    1fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1fb0:	68fb      	ldr	r3, [r7, #12]
    1fb2:	2144      	movs	r1, #68	; 0x44
    1fb4:	5a5b      	ldrh	r3, [r3, r1]
    1fb6:	1c59      	adds	r1, r3, #1
    1fb8:	b28d      	uxth	r5, r1
    1fba:	68f9      	ldr	r1, [r7, #12]
    1fbc:	2044      	movs	r0, #68	; 0x44
    1fbe:	520d      	strh	r5, [r1, r0]
    1fc0:	18d3      	adds	r3, r2, r3
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	0019      	movs	r1, r3
    1fc6:	0020      	movs	r0, r4
    1fc8:	4b08      	ldr	r3, [pc, #32]	; (1fec <usart_process_byte_sent+0x64>)
    1fca:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	3308      	adds	r3, #8
    1fd0:	0018      	movs	r0, r3
    1fd2:	4b07      	ldr	r3, [pc, #28]	; (1ff0 <usart_process_byte_sent+0x68>)
    1fd4:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1fd6:	e004      	b.n	1fe2 <usart_process_byte_sent+0x5a>
		_usart_async_enable_tx_done_irq(&descr->device);
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	3308      	adds	r3, #8
    1fdc:	0018      	movs	r0, r3
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <usart_process_byte_sent+0x6c>)
    1fe0:	4798      	blx	r3
}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	46bd      	mov	sp, r7
    1fe6:	b004      	add	sp, #16
    1fe8:	bdb0      	pop	{r4, r5, r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	0000373d 	.word	0x0000373d
    1ff0:	00003769 	.word	0x00003769
    1ff4:	00003789 	.word	0x00003789

00001ff8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	b084      	sub	sp, #16
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	3b08      	subs	r3, #8
    2004:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	2200      	movs	r2, #0
    200a:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2010:	2b00      	cmp	r3, #0
    2012:	d004      	beq.n	201e <STACK_SIZE+0x1e>
		descr->usart_cb.tx_done(descr);
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2018:	68fa      	ldr	r2, [r7, #12]
    201a:	0010      	movs	r0, r2
    201c:	4798      	blx	r3
	}
}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	46bd      	mov	sp, r7
    2022:	b004      	add	sp, #16
    2024:	bd80      	pop	{r7, pc}
	...

00002028 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    2028:	b580      	push	{r7, lr}
    202a:	b084      	sub	sp, #16
    202c:	af00      	add	r7, sp, #0
    202e:	6078      	str	r0, [r7, #4]
    2030:	000a      	movs	r2, r1
    2032:	1cfb      	adds	r3, r7, #3
    2034:	701a      	strb	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	3b08      	subs	r3, #8
    203a:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	3334      	adds	r3, #52	; 0x34
    2040:	001a      	movs	r2, r3
    2042:	1cfb      	adds	r3, r7, #3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	0019      	movs	r1, r3
    2048:	0010      	movs	r0, r2
    204a:	4b07      	ldr	r3, [pc, #28]	; (2068 <usart_fill_rx_buffer+0x40>)
    204c:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    204e:	68fb      	ldr	r3, [r7, #12]
    2050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2052:	2b00      	cmp	r3, #0
    2054:	d004      	beq.n	2060 <usart_fill_rx_buffer+0x38>
		descr->usart_cb.rx_done(descr);
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    205a:	68fa      	ldr	r2, [r7, #12]
    205c:	0010      	movs	r0, r2
    205e:	4798      	blx	r3
	}
}
    2060:	46c0      	nop			; (mov r8, r8)
    2062:	46bd      	mov	sp, r7
    2064:	b004      	add	sp, #16
    2066:	bd80      	pop	{r7, pc}
    2068:	000023b1 	.word	0x000023b1

0000206c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    206c:	b580      	push	{r7, lr}
    206e:	b084      	sub	sp, #16
    2070:	af00      	add	r7, sp, #0
    2072:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	3b08      	subs	r3, #8
    2078:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    207a:	68fb      	ldr	r3, [r7, #12]
    207c:	2200      	movs	r2, #0
    207e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    2080:	68fb      	ldr	r3, [r7, #12]
    2082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2084:	2b00      	cmp	r3, #0
    2086:	d004      	beq.n	2092 <usart_error+0x26>
		descr->usart_cb.error(descr);
    2088:	68fb      	ldr	r3, [r7, #12]
    208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    208c:	68fa      	ldr	r2, [r7, #12]
    208e:	0010      	movs	r0, r2
    2090:	4798      	blx	r3
	}
}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	46bd      	mov	sp, r7
    2096:	b004      	add	sp, #16
    2098:	bd80      	pop	{r7, pc}

0000209a <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    209a:	b580      	push	{r7, lr}
    209c:	b084      	sub	sp, #16
    209e:	af00      	add	r7, sp, #0
    20a0:	60b9      	str	r1, [r7, #8]
    20a2:	607a      	str	r2, [r7, #4]
    20a4:	230f      	movs	r3, #15
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	1c02      	adds	r2, r0, #0
    20aa:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    20ac:	230f      	movs	r3, #15
    20ae:	18fb      	adds	r3, r7, r3
    20b0:	781b      	ldrb	r3, [r3, #0]
    20b2:	2201      	movs	r2, #1
    20b4:	4053      	eors	r3, r2
    20b6:	b2db      	uxtb	r3, r3
    20b8:	2b00      	cmp	r3, #0
    20ba:	d000      	beq.n	20be <assert+0x24>
		__asm("BKPT #0");
    20bc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	46bd      	mov	sp, r7
    20c2:	b004      	add	sp, #16
    20c4:	bd80      	pop	{r7, pc}
	...

000020c8 <event_subscribe>:

static struct list_descriptor events;
static uint8_t                subscribed[EVENT_MASK_SIZE];

int32_t event_subscribe(struct event *const event, const event_id_t id, event_cb_t cb)
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b086      	sub	sp, #24
    20cc:	af00      	add	r7, sp, #0
    20ce:	60f8      	str	r0, [r7, #12]
    20d0:	607a      	str	r2, [r7, #4]
    20d2:	230b      	movs	r3, #11
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	1c0a      	adds	r2, r1, #0
    20d8:	701a      	strb	r2, [r3, #0]
	/* get byte and bit number of the given event in the event mask */
	const uint8_t position = id >> 3;
    20da:	2317      	movs	r3, #23
    20dc:	18fb      	adds	r3, r7, r3
    20de:	220b      	movs	r2, #11
    20e0:	18ba      	adds	r2, r7, r2
    20e2:	7812      	ldrb	r2, [r2, #0]
    20e4:	08d2      	lsrs	r2, r2, #3
    20e6:	701a      	strb	r2, [r3, #0]
	const uint8_t mask     = 1 << (id & 0x7);
    20e8:	230b      	movs	r3, #11
    20ea:	18fb      	adds	r3, r7, r3
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	2207      	movs	r2, #7
    20f0:	4013      	ands	r3, r2
    20f2:	2201      	movs	r2, #1
    20f4:	409a      	lsls	r2, r3
    20f6:	2316      	movs	r3, #22
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	701a      	strb	r2, [r3, #0]

	ASSERT(event && cb && (id < EVENT_MAX_AMOUNT));
    20fc:	68fb      	ldr	r3, [r7, #12]
    20fe:	2b00      	cmp	r3, #0
    2100:	d009      	beq.n	2116 <event_subscribe+0x4e>
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	2b00      	cmp	r3, #0
    2106:	d006      	beq.n	2116 <event_subscribe+0x4e>
    2108:	230b      	movs	r3, #11
    210a:	18fb      	adds	r3, r7, r3
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	2b07      	cmp	r3, #7
    2110:	d801      	bhi.n	2116 <event_subscribe+0x4e>
    2112:	2301      	movs	r3, #1
    2114:	e000      	b.n	2118 <event_subscribe+0x50>
    2116:	2300      	movs	r3, #0
    2118:	1c1a      	adds	r2, r3, #0
    211a:	2301      	movs	r3, #1
    211c:	4013      	ands	r3, r2
    211e:	b2db      	uxtb	r3, r3
    2120:	492b      	ldr	r1, [pc, #172]	; (21d0 <event_subscribe+0x108>)
    2122:	2231      	movs	r2, #49	; 0x31
    2124:	0018      	movs	r0, r3
    2126:	4b2b      	ldr	r3, [pc, #172]	; (21d4 <event_subscribe+0x10c>)
    2128:	4798      	blx	r3

	if (event->mask[position] & mask) {
    212a:	2317      	movs	r3, #23
    212c:	18fb      	adds	r3, r7, r3
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	68fa      	ldr	r2, [r7, #12]
    2132:	18d3      	adds	r3, r2, r3
    2134:	791b      	ldrb	r3, [r3, #4]
    2136:	2216      	movs	r2, #22
    2138:	18ba      	adds	r2, r7, r2
    213a:	7812      	ldrb	r2, [r2, #0]
    213c:	4013      	ands	r3, r2
    213e:	b2db      	uxtb	r3, r3
    2140:	2b00      	cmp	r3, #0
    2142:	d002      	beq.n	214a <event_subscribe+0x82>
		return ERR_NO_CHANGE; /* Already subscribed */
    2144:	2302      	movs	r3, #2
    2146:	425b      	negs	r3, r3
    2148:	e03e      	b.n	21c8 <event_subscribe+0x100>
	}

	if (!is_list_element(&events, event)) {
    214a:	68fa      	ldr	r2, [r7, #12]
    214c:	4b22      	ldr	r3, [pc, #136]	; (21d8 <event_subscribe+0x110>)
    214e:	0011      	movs	r1, r2
    2150:	0018      	movs	r0, r3
    2152:	4b22      	ldr	r3, [pc, #136]	; (21dc <event_subscribe+0x114>)
    2154:	4798      	blx	r3
    2156:	0003      	movs	r3, r0
    2158:	001a      	movs	r2, r3
    215a:	2301      	movs	r3, #1
    215c:	4053      	eors	r3, r2
    215e:	b2db      	uxtb	r3, r3
    2160:	2b00      	cmp	r3, #0
    2162:	d00c      	beq.n	217e <event_subscribe+0xb6>
		memset(event->mask, 0, EVENT_MASK_SIZE);
    2164:	68fb      	ldr	r3, [r7, #12]
    2166:	3304      	adds	r3, #4
    2168:	2201      	movs	r2, #1
    216a:	2100      	movs	r1, #0
    216c:	0018      	movs	r0, r3
    216e:	4b1c      	ldr	r3, [pc, #112]	; (21e0 <event_subscribe+0x118>)
    2170:	4798      	blx	r3
		list_insert_as_head(&events, event);
    2172:	68fa      	ldr	r2, [r7, #12]
    2174:	4b18      	ldr	r3, [pc, #96]	; (21d8 <event_subscribe+0x110>)
    2176:	0011      	movs	r1, r2
    2178:	0018      	movs	r0, r3
    217a:	4b1a      	ldr	r3, [pc, #104]	; (21e4 <event_subscribe+0x11c>)
    217c:	4798      	blx	r3
	}
	event->cb = cb;
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	687a      	ldr	r2, [r7, #4]
    2182:	609a      	str	r2, [r3, #8]
	event->mask[position] |= mask;
    2184:	2317      	movs	r3, #23
    2186:	18fb      	adds	r3, r7, r3
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	2217      	movs	r2, #23
    218c:	18ba      	adds	r2, r7, r2
    218e:	7812      	ldrb	r2, [r2, #0]
    2190:	68f9      	ldr	r1, [r7, #12]
    2192:	188a      	adds	r2, r1, r2
    2194:	7911      	ldrb	r1, [r2, #4]
    2196:	2216      	movs	r2, #22
    2198:	18ba      	adds	r2, r7, r2
    219a:	7812      	ldrb	r2, [r2, #0]
    219c:	430a      	orrs	r2, r1
    219e:	b2d1      	uxtb	r1, r2
    21a0:	68fa      	ldr	r2, [r7, #12]
    21a2:	18d3      	adds	r3, r2, r3
    21a4:	1c0a      	adds	r2, r1, #0
    21a6:	711a      	strb	r2, [r3, #4]

	subscribed[position] |= mask;
    21a8:	2317      	movs	r3, #23
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	2217      	movs	r2, #23
    21b0:	18ba      	adds	r2, r7, r2
    21b2:	7812      	ldrb	r2, [r2, #0]
    21b4:	490c      	ldr	r1, [pc, #48]	; (21e8 <event_subscribe+0x120>)
    21b6:	5c89      	ldrb	r1, [r1, r2]
    21b8:	2216      	movs	r2, #22
    21ba:	18ba      	adds	r2, r7, r2
    21bc:	7812      	ldrb	r2, [r2, #0]
    21be:	430a      	orrs	r2, r1
    21c0:	b2d1      	uxtb	r1, r2
    21c2:	4a09      	ldr	r2, [pc, #36]	; (21e8 <event_subscribe+0x120>)
    21c4:	54d1      	strb	r1, [r2, r3]

	return ERR_NONE;
    21c6:	2300      	movs	r3, #0
}
    21c8:	0018      	movs	r0, r3
    21ca:	46bd      	mov	sp, r7
    21cc:	b006      	add	sp, #24
    21ce:	bd80      	pop	{r7, pc}
    21d0:	00007140 	.word	0x00007140
    21d4:	0000209b 	.word	0x0000209b
    21d8:	20000080 	.word	0x20000080
    21dc:	000021ed 	.word	0x000021ed
    21e0:	00006fb9 	.word	0x00006fb9
    21e4:	00002221 	.word	0x00002221
    21e8:	20000084 	.word	0x20000084

000021ec <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	b084      	sub	sp, #16
    21f0:	af00      	add	r7, sp, #0
    21f2:	6078      	str	r0, [r7, #4]
    21f4:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	60fb      	str	r3, [r7, #12]
    21fc:	e008      	b.n	2210 <is_list_element+0x24>
		if (it == element) {
    21fe:	68fa      	ldr	r2, [r7, #12]
    2200:	683b      	ldr	r3, [r7, #0]
    2202:	429a      	cmp	r2, r3
    2204:	d101      	bne.n	220a <is_list_element+0x1e>
			return true;
    2206:	2301      	movs	r3, #1
    2208:	e006      	b.n	2218 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	681b      	ldr	r3, [r3, #0]
    220e:	60fb      	str	r3, [r7, #12]
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	2b00      	cmp	r3, #0
    2214:	d1f3      	bne.n	21fe <is_list_element+0x12>
		}
	}

	return false;
    2216:	2300      	movs	r3, #0
}
    2218:	0018      	movs	r0, r3
    221a:	46bd      	mov	sp, r7
    221c:	b004      	add	sp, #16
    221e:	bd80      	pop	{r7, pc}

00002220 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    222a:	683a      	ldr	r2, [r7, #0]
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	0011      	movs	r1, r2
    2230:	0018      	movs	r0, r3
    2232:	4b0e      	ldr	r3, [pc, #56]	; (226c <list_insert_as_head+0x4c>)
    2234:	4798      	blx	r3
    2236:	0003      	movs	r3, r0
    2238:	1e5a      	subs	r2, r3, #1
    223a:	4193      	sbcs	r3, r2
    223c:	b2db      	uxtb	r3, r3
    223e:	2201      	movs	r2, #1
    2240:	4053      	eors	r3, r2
    2242:	b2db      	uxtb	r3, r3
    2244:	1c1a      	adds	r2, r3, #0
    2246:	2301      	movs	r3, #1
    2248:	4013      	ands	r3, r2
    224a:	b2db      	uxtb	r3, r3
    224c:	4908      	ldr	r1, [pc, #32]	; (2270 <list_insert_as_head+0x50>)
    224e:	2239      	movs	r2, #57	; 0x39
    2250:	0018      	movs	r0, r3
    2252:	4b08      	ldr	r3, [pc, #32]	; (2274 <list_insert_as_head+0x54>)
    2254:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	681a      	ldr	r2, [r3, #0]
    225a:	683b      	ldr	r3, [r7, #0]
    225c:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	683a      	ldr	r2, [r7, #0]
    2262:	601a      	str	r2, [r3, #0]
}
    2264:	46c0      	nop			; (mov r8, r8)
    2266:	46bd      	mov	sp, r7
    2268:	b002      	add	sp, #8
    226a:	bd80      	pop	{r7, pc}
    226c:	000021ed 	.word	0x000021ed
    2270:	00007160 	.word	0x00007160
    2274:	0000209b 	.word	0x0000209b

00002278 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2278:	b580      	push	{r7, lr}
    227a:	b082      	sub	sp, #8
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    2280:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	681a      	ldr	r2, [r3, #0]
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	683a      	ldr	r2, [r7, #0]
    228e:	601a      	str	r2, [r3, #0]
}
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46bd      	mov	sp, r7
    2294:	b002      	add	sp, #8
    2296:	bd80      	pop	{r7, pc}

00002298 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2298:	b580      	push	{r7, lr}
    229a:	b084      	sub	sp, #16
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d009      	beq.n	22bc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	681a      	ldr	r2, [r3, #0]
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	e000      	b.n	22be <list_remove_head+0x26>
	}

	return NULL;
    22bc:	2300      	movs	r3, #0
}
    22be:	0018      	movs	r0, r3
    22c0:	46bd      	mov	sp, r7
    22c2:	b004      	add	sp, #16
    22c4:	bd80      	pop	{r7, pc}
	...

000022c8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b084      	sub	sp, #16
    22cc:	af00      	add	r7, sp, #0
    22ce:	60f8      	str	r0, [r7, #12]
    22d0:	60b9      	str	r1, [r7, #8]
    22d2:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    22d4:	68fb      	ldr	r3, [r7, #12]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d007      	beq.n	22ea <ringbuffer_init+0x22>
    22da:	68bb      	ldr	r3, [r7, #8]
    22dc:	2b00      	cmp	r3, #0
    22de:	d004      	beq.n	22ea <ringbuffer_init+0x22>
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d001      	beq.n	22ea <ringbuffer_init+0x22>
    22e6:	2301      	movs	r3, #1
    22e8:	e000      	b.n	22ec <ringbuffer_init+0x24>
    22ea:	2300      	movs	r3, #0
    22ec:	1c1a      	adds	r2, r3, #0
    22ee:	2301      	movs	r3, #1
    22f0:	4013      	ands	r3, r2
    22f2:	b2db      	uxtb	r3, r3
    22f4:	490f      	ldr	r1, [pc, #60]	; (2334 <ringbuffer_init+0x6c>)
    22f6:	2228      	movs	r2, #40	; 0x28
    22f8:	0018      	movs	r0, r3
    22fa:	4b0f      	ldr	r3, [pc, #60]	; (2338 <ringbuffer_init+0x70>)
    22fc:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	3b01      	subs	r3, #1
    2302:	687a      	ldr	r2, [r7, #4]
    2304:	4013      	ands	r3, r2
    2306:	d002      	beq.n	230e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    2308:	230d      	movs	r3, #13
    230a:	425b      	negs	r3, r3
    230c:	e00e      	b.n	232c <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	1e5a      	subs	r2, r3, #1
    2312:	68fb      	ldr	r3, [r7, #12]
    2314:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    2316:	68fb      	ldr	r3, [r7, #12]
    2318:	2200      	movs	r2, #0
    231a:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    231c:	68fb      	ldr	r3, [r7, #12]
    231e:	689a      	ldr	r2, [r3, #8]
    2320:	68fb      	ldr	r3, [r7, #12]
    2322:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    2324:	68fb      	ldr	r3, [r7, #12]
    2326:	68ba      	ldr	r2, [r7, #8]
    2328:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    232a:	2300      	movs	r3, #0
}
    232c:	0018      	movs	r0, r3
    232e:	46bd      	mov	sp, r7
    2330:	b004      	add	sp, #16
    2332:	bd80      	pop	{r7, pc}
    2334:	00007180 	.word	0x00007180
    2338:	0000209b 	.word	0x0000209b

0000233c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    233c:	b580      	push	{r7, lr}
    233e:	b082      	sub	sp, #8
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	2b00      	cmp	r3, #0
    234a:	d004      	beq.n	2356 <ringbuffer_get+0x1a>
    234c:	683b      	ldr	r3, [r7, #0]
    234e:	2b00      	cmp	r3, #0
    2350:	d001      	beq.n	2356 <ringbuffer_get+0x1a>
    2352:	2301      	movs	r3, #1
    2354:	e000      	b.n	2358 <ringbuffer_get+0x1c>
    2356:	2300      	movs	r3, #0
    2358:	1c1a      	adds	r2, r3, #0
    235a:	2301      	movs	r3, #1
    235c:	4013      	ands	r3, r2
    235e:	b2db      	uxtb	r3, r3
    2360:	4911      	ldr	r1, [pc, #68]	; (23a8 <ringbuffer_get+0x6c>)
    2362:	2240      	movs	r2, #64	; 0x40
    2364:	0018      	movs	r0, r3
    2366:	4b11      	ldr	r3, [pc, #68]	; (23ac <ringbuffer_get+0x70>)
    2368:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	68da      	ldr	r2, [r3, #12]
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	689b      	ldr	r3, [r3, #8]
    2372:	429a      	cmp	r2, r3
    2374:	d011      	beq.n	239a <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	681a      	ldr	r2, [r3, #0]
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	6899      	ldr	r1, [r3, #8]
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	685b      	ldr	r3, [r3, #4]
    2382:	400b      	ands	r3, r1
    2384:	18d3      	adds	r3, r2, r3
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	683b      	ldr	r3, [r7, #0]
    238a:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    238c:	687b      	ldr	r3, [r7, #4]
    238e:	689b      	ldr	r3, [r3, #8]
    2390:	1c5a      	adds	r2, r3, #1
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    2396:	2300      	movs	r3, #0
    2398:	e001      	b.n	239e <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
    239a:	230a      	movs	r3, #10
    239c:	425b      	negs	r3, r3
}
    239e:	0018      	movs	r0, r3
    23a0:	46bd      	mov	sp, r7
    23a2:	b002      	add	sp, #8
    23a4:	bd80      	pop	{r7, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	00007180 	.word	0x00007180
    23ac:	0000209b 	.word	0x0000209b

000023b0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	b082      	sub	sp, #8
    23b4:	af00      	add	r7, sp, #0
    23b6:	6078      	str	r0, [r7, #4]
    23b8:	000a      	movs	r2, r1
    23ba:	1cfb      	adds	r3, r7, #3
    23bc:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
    23be:	687b      	ldr	r3, [r7, #4]
    23c0:	1e5a      	subs	r2, r3, #1
    23c2:	4193      	sbcs	r3, r2
    23c4:	b2db      	uxtb	r3, r3
    23c6:	4915      	ldr	r1, [pc, #84]	; (241c <ringbuffer_put+0x6c>)
    23c8:	2251      	movs	r2, #81	; 0x51
    23ca:	0018      	movs	r0, r3
    23cc:	4b14      	ldr	r3, [pc, #80]	; (2420 <ringbuffer_put+0x70>)
    23ce:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	681a      	ldr	r2, [r3, #0]
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68d9      	ldr	r1, [r3, #12]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	685b      	ldr	r3, [r3, #4]
    23dc:	400b      	ands	r3, r1
    23de:	18d3      	adds	r3, r2, r3
    23e0:	1cfa      	adds	r2, r7, #3
    23e2:	7812      	ldrb	r2, [r2, #0]
    23e4:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	68da      	ldr	r2, [r3, #12]
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	689b      	ldr	r3, [r3, #8]
    23ee:	1ad2      	subs	r2, r2, r3
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	685b      	ldr	r3, [r3, #4]
    23f4:	429a      	cmp	r2, r3
    23f6:	d906      	bls.n	2406 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	68da      	ldr	r2, [r3, #12]
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	685b      	ldr	r3, [r3, #4]
    2400:	1ad2      	subs	r2, r2, r3
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	68db      	ldr	r3, [r3, #12]
    240a:	1c5a      	adds	r2, r3, #1
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2410:	2300      	movs	r3, #0
}
    2412:	0018      	movs	r0, r3
    2414:	46bd      	mov	sp, r7
    2416:	b002      	add	sp, #8
    2418:	bd80      	pop	{r7, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	00007180 	.word	0x00007180
    2420:	0000209b 	.word	0x0000209b

00002424 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2424:	b580      	push	{r7, lr}
    2426:	b082      	sub	sp, #8
    2428:	af00      	add	r7, sp, #0
    242a:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	1e5a      	subs	r2, r3, #1
    2430:	4193      	sbcs	r3, r2
    2432:	b2db      	uxtb	r3, r3
    2434:	4906      	ldr	r1, [pc, #24]	; (2450 <ringbuffer_num+0x2c>)
    2436:	2267      	movs	r2, #103	; 0x67
    2438:	0018      	movs	r0, r3
    243a:	4b06      	ldr	r3, [pc, #24]	; (2454 <ringbuffer_num+0x30>)
    243c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	68da      	ldr	r2, [r3, #12]
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	689b      	ldr	r3, [r3, #8]
    2446:	1ad3      	subs	r3, r2, r3
}
    2448:	0018      	movs	r0, r3
    244a:	46bd      	mov	sp, r7
    244c:	b002      	add	sp, #8
    244e:	bd80      	pop	{r7, pc}
    2450:	00007180 	.word	0x00007180
    2454:	0000209b 	.word	0x0000209b

00002458 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    2458:	b590      	push	{r4, r7, lr}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	6039      	str	r1, [r7, #0]
    2460:	0011      	movs	r1, r2
    2462:	1dbb      	adds	r3, r7, #6
    2464:	1c02      	adds	r2, r0, #0
    2466:	801a      	strh	r2, [r3, #0]
    2468:	1d7b      	adds	r3, r7, #5
    246a:	1c0a      	adds	r2, r1, #0
    246c:	701a      	strb	r2, [r3, #0]
	switch (power) {
    246e:	1d7b      	adds	r3, r7, #5
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	3b04      	subs	r3, #4
    2474:	2b04      	cmp	r3, #4
    2476:	d859      	bhi.n	252c <_get_cycles_for_us_internal+0xd4>
    2478:	009a      	lsls	r2, r3, #2
    247a:	4b34      	ldr	r3, [pc, #208]	; (254c <_get_cycles_for_us_internal+0xf4>)
    247c:	18d3      	adds	r3, r2, r3
    247e:	681b      	ldr	r3, [r3, #0]
    2480:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2482:	1dbb      	adds	r3, r7, #6
    2484:	881c      	ldrh	r4, [r3, #0]
    2486:	683a      	ldr	r2, [r7, #0]
    2488:	4b31      	ldr	r3, [pc, #196]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    248a:	4932      	ldr	r1, [pc, #200]	; (2554 <_get_cycles_for_us_internal+0xfc>)
    248c:	0010      	movs	r0, r2
    248e:	4798      	blx	r3
    2490:	0003      	movs	r3, r0
    2492:	4363      	muls	r3, r4
    2494:	1e5a      	subs	r2, r3, #1
    2496:	4b2e      	ldr	r3, [pc, #184]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    2498:	210a      	movs	r1, #10
    249a:	0010      	movs	r0, r2
    249c:	4798      	blx	r3
    249e:	0003      	movs	r3, r0
    24a0:	3301      	adds	r3, #1
    24a2:	e04e      	b.n	2542 <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    24a4:	1dbb      	adds	r3, r7, #6
    24a6:	881c      	ldrh	r4, [r3, #0]
    24a8:	683a      	ldr	r2, [r7, #0]
    24aa:	4b29      	ldr	r3, [pc, #164]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24ac:	492a      	ldr	r1, [pc, #168]	; (2558 <_get_cycles_for_us_internal+0x100>)
    24ae:	0010      	movs	r0, r2
    24b0:	4798      	blx	r3
    24b2:	0003      	movs	r3, r0
    24b4:	4363      	muls	r3, r4
    24b6:	1e5a      	subs	r2, r3, #1
    24b8:	4b25      	ldr	r3, [pc, #148]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24ba:	2164      	movs	r1, #100	; 0x64
    24bc:	0010      	movs	r0, r2
    24be:	4798      	blx	r3
    24c0:	0003      	movs	r3, r0
    24c2:	3301      	adds	r3, #1
    24c4:	e03d      	b.n	2542 <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    24c6:	1dbb      	adds	r3, r7, #6
    24c8:	881c      	ldrh	r4, [r3, #0]
    24ca:	6838      	ldr	r0, [r7, #0]
    24cc:	4b20      	ldr	r3, [pc, #128]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24ce:	22fa      	movs	r2, #250	; 0xfa
    24d0:	0091      	lsls	r1, r2, #2
    24d2:	4798      	blx	r3
    24d4:	0003      	movs	r3, r0
    24d6:	4363      	muls	r3, r4
    24d8:	1e58      	subs	r0, r3, #1
    24da:	4b1d      	ldr	r3, [pc, #116]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24dc:	22fa      	movs	r2, #250	; 0xfa
    24de:	0091      	lsls	r1, r2, #2
    24e0:	4798      	blx	r3
    24e2:	0003      	movs	r3, r0
    24e4:	3301      	adds	r3, #1
    24e6:	e02c      	b.n	2542 <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    24e8:	1dbb      	adds	r3, r7, #6
    24ea:	881c      	ldrh	r4, [r3, #0]
    24ec:	683a      	ldr	r2, [r7, #0]
    24ee:	4b18      	ldr	r3, [pc, #96]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24f0:	2164      	movs	r1, #100	; 0x64
    24f2:	0010      	movs	r0, r2
    24f4:	4798      	blx	r3
    24f6:	0003      	movs	r3, r0
    24f8:	4363      	muls	r3, r4
    24fa:	1e5a      	subs	r2, r3, #1
    24fc:	4b14      	ldr	r3, [pc, #80]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    24fe:	4916      	ldr	r1, [pc, #88]	; (2558 <_get_cycles_for_us_internal+0x100>)
    2500:	0010      	movs	r0, r2
    2502:	4798      	blx	r3
    2504:	0003      	movs	r3, r0
    2506:	3301      	adds	r3, #1
    2508:	e01b      	b.n	2542 <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    250a:	1dbb      	adds	r3, r7, #6
    250c:	881c      	ldrh	r4, [r3, #0]
    250e:	683a      	ldr	r2, [r7, #0]
    2510:	4b0f      	ldr	r3, [pc, #60]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    2512:	210a      	movs	r1, #10
    2514:	0010      	movs	r0, r2
    2516:	4798      	blx	r3
    2518:	0003      	movs	r3, r0
    251a:	4363      	muls	r3, r4
    251c:	1e5a      	subs	r2, r3, #1
    251e:	4b0c      	ldr	r3, [pc, #48]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    2520:	490c      	ldr	r1, [pc, #48]	; (2554 <_get_cycles_for_us_internal+0xfc>)
    2522:	0010      	movs	r0, r2
    2524:	4798      	blx	r3
    2526:	0003      	movs	r3, r0
    2528:	3301      	adds	r3, #1
    252a:	e00a      	b.n	2542 <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    252c:	1dbb      	adds	r3, r7, #6
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	683a      	ldr	r2, [r7, #0]
    2532:	4353      	muls	r3, r2
    2534:	1e5a      	subs	r2, r3, #1
    2536:	4b06      	ldr	r3, [pc, #24]	; (2550 <_get_cycles_for_us_internal+0xf8>)
    2538:	4908      	ldr	r1, [pc, #32]	; (255c <_get_cycles_for_us_internal+0x104>)
    253a:	0010      	movs	r0, r2
    253c:	4798      	blx	r3
    253e:	0003      	movs	r3, r0
    2540:	3301      	adds	r3, #1
	}
}
    2542:	0018      	movs	r0, r3
    2544:	46bd      	mov	sp, r7
    2546:	b003      	add	sp, #12
    2548:	bd90      	pop	{r4, r7, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	000071c8 	.word	0x000071c8
    2550:	0000612d 	.word	0x0000612d
    2554:	000186a0 	.word	0x000186a0
    2558:	00002710 	.word	0x00002710
    255c:	000f4240 	.word	0x000f4240

00002560 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    2560:	b590      	push	{r4, r7, lr}
    2562:	b083      	sub	sp, #12
    2564:	af00      	add	r7, sp, #0
    2566:	6039      	str	r1, [r7, #0]
    2568:	0011      	movs	r1, r2
    256a:	1dbb      	adds	r3, r7, #6
    256c:	1c02      	adds	r2, r0, #0
    256e:	801a      	strh	r2, [r3, #0]
    2570:	1d7b      	adds	r3, r7, #5
    2572:	1c0a      	adds	r2, r1, #0
    2574:	701a      	strb	r2, [r3, #0]
	switch (power) {
    2576:	1d7b      	adds	r3, r7, #5
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	3b04      	subs	r3, #4
    257c:	2b04      	cmp	r3, #4
    257e:	d84b      	bhi.n	2618 <_get_cycles_for_ms_internal+0xb8>
    2580:	009a      	lsls	r2, r3, #2
    2582:	4b2d      	ldr	r3, [pc, #180]	; (2638 <_get_cycles_for_ms_internal+0xd8>)
    2584:	18d3      	adds	r3, r2, r3
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    258a:	1dbb      	adds	r3, r7, #6
    258c:	881c      	ldrh	r4, [r3, #0]
    258e:	683a      	ldr	r2, [r7, #0]
    2590:	4b2a      	ldr	r3, [pc, #168]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    2592:	492b      	ldr	r1, [pc, #172]	; (2640 <_get_cycles_for_ms_internal+0xe0>)
    2594:	0010      	movs	r0, r2
    2596:	4798      	blx	r3
    2598:	0003      	movs	r3, r0
    259a:	4363      	muls	r3, r4
    259c:	2264      	movs	r2, #100	; 0x64
    259e:	4353      	muls	r3, r2
    25a0:	e045      	b.n	262e <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    25a2:	1dbb      	adds	r3, r7, #6
    25a4:	881c      	ldrh	r4, [r3, #0]
    25a6:	683a      	ldr	r2, [r7, #0]
    25a8:	4b24      	ldr	r3, [pc, #144]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    25aa:	4926      	ldr	r1, [pc, #152]	; (2644 <_get_cycles_for_ms_internal+0xe4>)
    25ac:	0010      	movs	r0, r2
    25ae:	4798      	blx	r3
    25b0:	0003      	movs	r3, r0
    25b2:	4363      	muls	r3, r4
    25b4:	001a      	movs	r2, r3
    25b6:	0013      	movs	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	189b      	adds	r3, r3, r2
    25bc:	005b      	lsls	r3, r3, #1
    25be:	e036      	b.n	262e <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    25c0:	1dbb      	adds	r3, r7, #6
    25c2:	881c      	ldrh	r4, [r3, #0]
    25c4:	6838      	ldr	r0, [r7, #0]
    25c6:	4b1d      	ldr	r3, [pc, #116]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    25c8:	22fa      	movs	r2, #250	; 0xfa
    25ca:	0091      	lsls	r1, r2, #2
    25cc:	4798      	blx	r3
    25ce:	0003      	movs	r3, r0
    25d0:	4363      	muls	r3, r4
    25d2:	e02c      	b.n	262e <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    25d4:	1dbb      	adds	r3, r7, #6
    25d6:	881c      	ldrh	r4, [r3, #0]
    25d8:	683a      	ldr	r2, [r7, #0]
    25da:	4b18      	ldr	r3, [pc, #96]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    25dc:	2164      	movs	r1, #100	; 0x64
    25de:	0010      	movs	r0, r2
    25e0:	4798      	blx	r3
    25e2:	0003      	movs	r3, r0
    25e4:	4363      	muls	r3, r4
    25e6:	1e5a      	subs	r2, r3, #1
    25e8:	4b14      	ldr	r3, [pc, #80]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    25ea:	210a      	movs	r1, #10
    25ec:	0010      	movs	r0, r2
    25ee:	4798      	blx	r3
    25f0:	0003      	movs	r3, r0
    25f2:	3301      	adds	r3, #1
    25f4:	e01b      	b.n	262e <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    25f6:	1dbb      	adds	r3, r7, #6
    25f8:	881c      	ldrh	r4, [r3, #0]
    25fa:	683a      	ldr	r2, [r7, #0]
    25fc:	4b0f      	ldr	r3, [pc, #60]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    25fe:	210a      	movs	r1, #10
    2600:	0010      	movs	r0, r2
    2602:	4798      	blx	r3
    2604:	0003      	movs	r3, r0
    2606:	4363      	muls	r3, r4
    2608:	1e5a      	subs	r2, r3, #1
    260a:	4b0c      	ldr	r3, [pc, #48]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    260c:	2164      	movs	r1, #100	; 0x64
    260e:	0010      	movs	r0, r2
    2610:	4798      	blx	r3
    2612:	0003      	movs	r3, r0
    2614:	3301      	adds	r3, #1
    2616:	e00a      	b.n	262e <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    2618:	1dbb      	adds	r3, r7, #6
    261a:	881b      	ldrh	r3, [r3, #0]
    261c:	683a      	ldr	r2, [r7, #0]
    261e:	4353      	muls	r3, r2
    2620:	1e58      	subs	r0, r3, #1
    2622:	4b06      	ldr	r3, [pc, #24]	; (263c <_get_cycles_for_ms_internal+0xdc>)
    2624:	22fa      	movs	r2, #250	; 0xfa
    2626:	0091      	lsls	r1, r2, #2
    2628:	4798      	blx	r3
    262a:	0003      	movs	r3, r0
    262c:	3301      	adds	r3, #1
	}
}
    262e:	0018      	movs	r0, r3
    2630:	46bd      	mov	sp, r7
    2632:	b003      	add	sp, #12
    2634:	bd90      	pop	{r4, r7, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	000071dc 	.word	0x000071dc
    263c:	0000612d 	.word	0x0000612d
    2640:	000186a0 	.word	0x000186a0
    2644:	00002710 	.word	0x00002710

00002648 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2648:	b580      	push	{r7, lr}
    264a:	b082      	sub	sp, #8
    264c:	af00      	add	r7, sp, #0
    264e:	0002      	movs	r2, r0
    2650:	1dbb      	adds	r3, r7, #6
    2652:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    2654:	4905      	ldr	r1, [pc, #20]	; (266c <_get_cycles_for_ms+0x24>)
    2656:	1dbb      	adds	r3, r7, #6
    2658:	881b      	ldrh	r3, [r3, #0]
    265a:	2207      	movs	r2, #7
    265c:	0018      	movs	r0, r3
    265e:	4b04      	ldr	r3, [pc, #16]	; (2670 <_get_cycles_for_ms+0x28>)
    2660:	4798      	blx	r3
    2662:	0003      	movs	r3, r0
}
    2664:	0018      	movs	r0, r3
    2666:	46bd      	mov	sp, r7
    2668:	b002      	add	sp, #8
    266a:	bd80      	pop	{r7, pc}
    266c:	003d0900 	.word	0x003d0900
    2670:	00002561 	.word	0x00002561

00002674 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2674:	b580      	push	{r7, lr}
    2676:	b082      	sub	sp, #8
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    267c:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	685a      	ldr	r2, [r3, #4]
    2682:	683b      	ldr	r3, [r7, #0]
    2684:	005b      	lsls	r3, r3, #1
    2686:	211e      	movs	r1, #30
    2688:	400b      	ands	r3, r1
    268a:	431a      	orrs	r2, r3
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2690:	46c0      	nop			; (mov r8, r8)
    2692:	46bd      	mov	sp, r7
    2694:	b002      	add	sp, #8
    2696:	bd80      	pop	{r7, pc}

00002698 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2698:	b580      	push	{r7, lr}
    269a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    269c:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <_init_chip+0x30>)
    269e:	2100      	movs	r1, #0
    26a0:	0018      	movs	r0, r3
    26a2:	4b0a      	ldr	r3, [pc, #40]	; (26cc <_init_chip+0x34>)
    26a4:	4798      	blx	r3

	_set_performance_level(2);
    26a6:	2002      	movs	r0, #2
    26a8:	4b09      	ldr	r3, [pc, #36]	; (26d0 <_init_chip+0x38>)
    26aa:	4798      	blx	r3

	_osc32kctrl_init_sources();
    26ac:	4b09      	ldr	r3, [pc, #36]	; (26d4 <_init_chip+0x3c>)
    26ae:	4798      	blx	r3
	_oscctrl_init_sources();
    26b0:	4b09      	ldr	r3, [pc, #36]	; (26d8 <_init_chip+0x40>)
    26b2:	4798      	blx	r3
	_mclk_init();
    26b4:	4b09      	ldr	r3, [pc, #36]	; (26dc <_init_chip+0x44>)
    26b6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    26b8:	4b09      	ldr	r3, [pc, #36]	; (26e0 <_init_chip+0x48>)
    26ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	4b09      	ldr	r3, [pc, #36]	; (26e4 <_init_chip+0x4c>)
    26c0:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	46bd      	mov	sp, r7
    26c6:	bd80      	pop	{r7, pc}
    26c8:	41004000 	.word	0x41004000
    26cc:	00002675 	.word	0x00002675
    26d0:	00002a95 	.word	0x00002a95
    26d4:	00002869 	.word	0x00002869
    26d8:	00002969 	.word	0x00002969
    26dc:	000027d5 	.word	0x000027d5
    26e0:	000029b5 	.word	0x000029b5
    26e4:	00002749 	.word	0x00002749

000026e8 <hri_gclk_wait_for_sync>:
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b082      	sub	sp, #8
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	685b      	ldr	r3, [r3, #4]
    26f8:	683a      	ldr	r2, [r7, #0]
    26fa:	4013      	ands	r3, r2
    26fc:	d1fa      	bne.n	26f4 <hri_gclk_wait_for_sync+0xc>
}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	46bd      	mov	sp, r7
    2702:	b002      	add	sp, #8
    2704:	bd80      	pop	{r7, pc}
	...

00002708 <hri_gclk_write_GENCTRL_reg>:
{
    2708:	b580      	push	{r7, lr}
    270a:	b084      	sub	sp, #16
    270c:	af00      	add	r7, sp, #0
    270e:	60f8      	str	r0, [r7, #12]
    2710:	607a      	str	r2, [r7, #4]
    2712:	230b      	movs	r3, #11
    2714:	18fb      	adds	r3, r7, r3
    2716:	1c0a      	adds	r2, r1, #0
    2718:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    271a:	230b      	movs	r3, #11
    271c:	18fb      	adds	r3, r7, r3
    271e:	781a      	ldrb	r2, [r3, #0]
    2720:	68fb      	ldr	r3, [r7, #12]
    2722:	3208      	adds	r2, #8
    2724:	0092      	lsls	r2, r2, #2
    2726:	6879      	ldr	r1, [r7, #4]
    2728:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    272a:	4a05      	ldr	r2, [pc, #20]	; (2740 <hri_gclk_write_GENCTRL_reg+0x38>)
    272c:	68fb      	ldr	r3, [r7, #12]
    272e:	0011      	movs	r1, r2
    2730:	0018      	movs	r0, r3
    2732:	4b04      	ldr	r3, [pc, #16]	; (2744 <hri_gclk_write_GENCTRL_reg+0x3c>)
    2734:	4798      	blx	r3
}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	46bd      	mov	sp, r7
    273a:	b004      	add	sp, #16
    273c:	bd80      	pop	{r7, pc}
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	000007fd 	.word	0x000007fd
    2744:	000026e9 	.word	0x000026e9

00002748 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2748:	b580      	push	{r7, lr}
    274a:	b082      	sub	sp, #8
    274c:	af00      	add	r7, sp, #0
    274e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	2201      	movs	r2, #1
    2754:	4013      	ands	r3, r2
    2756:	d005      	beq.n	2764 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2758:	4a04      	ldr	r2, [pc, #16]	; (276c <_gclk_init_generators_by_fref+0x24>)
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <_gclk_init_generators_by_fref+0x28>)
    275c:	2100      	movs	r1, #0
    275e:	0018      	movs	r0, r3
    2760:	4b04      	ldr	r3, [pc, #16]	; (2774 <_gclk_init_generators_by_fref+0x2c>)
    2762:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	b002      	add	sp, #8
    276a:	bd80      	pop	{r7, pc}
    276c:	00010106 	.word	0x00010106
    2770:	40001800 	.word	0x40001800
    2774:	00002709 	.word	0x00002709

00002778 <hri_mclk_write_CPUDIV_reg>:
{
    2778:	b580      	push	{r7, lr}
    277a:	b082      	sub	sp, #8
    277c:	af00      	add	r7, sp, #0
    277e:	6078      	str	r0, [r7, #4]
    2780:	000a      	movs	r2, r1
    2782:	1cfb      	adds	r3, r7, #3
    2784:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	1cfa      	adds	r2, r7, #3
    278a:	7812      	ldrb	r2, [r2, #0]
    278c:	711a      	strb	r2, [r3, #4]
}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	46bd      	mov	sp, r7
    2792:	b002      	add	sp, #8
    2794:	bd80      	pop	{r7, pc}

00002796 <hri_mclk_write_LPDIV_reg>:
{
    2796:	b580      	push	{r7, lr}
    2798:	b082      	sub	sp, #8
    279a:	af00      	add	r7, sp, #0
    279c:	6078      	str	r0, [r7, #4]
    279e:	000a      	movs	r2, r1
    27a0:	1cfb      	adds	r3, r7, #3
    27a2:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->LPDIV.reg = data;
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	1cfa      	adds	r2, r7, #3
    27a8:	7812      	ldrb	r2, [r2, #0]
    27aa:	715a      	strb	r2, [r3, #5]
}
    27ac:	46c0      	nop			; (mov r8, r8)
    27ae:	46bd      	mov	sp, r7
    27b0:	b002      	add	sp, #8
    27b2:	bd80      	pop	{r7, pc}

000027b4 <hri_mclk_write_BUPDIV_reg>:
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b082      	sub	sp, #8
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
    27bc:	000a      	movs	r2, r1
    27be:	1cfb      	adds	r3, r7, #3
    27c0:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->BUPDIV.reg = data;
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	1cfa      	adds	r2, r7, #3
    27c6:	7812      	ldrb	r2, [r2, #0]
    27c8:	719a      	strb	r2, [r3, #6]
}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46bd      	mov	sp, r7
    27ce:	b002      	add	sp, #8
    27d0:	bd80      	pop	{r7, pc}
	...

000027d4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b082      	sub	sp, #8
    27d8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    27da:	4b0a      	ldr	r3, [pc, #40]	; (2804 <_mclk_init+0x30>)
    27dc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	2108      	movs	r1, #8
    27e2:	0018      	movs	r0, r3
    27e4:	4b08      	ldr	r3, [pc, #32]	; (2808 <_mclk_init+0x34>)
    27e6:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2104      	movs	r1, #4
    27ec:	0018      	movs	r0, r3
    27ee:	4b07      	ldr	r3, [pc, #28]	; (280c <_mclk_init+0x38>)
    27f0:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	2101      	movs	r1, #1
    27f6:	0018      	movs	r0, r3
    27f8:	4b05      	ldr	r3, [pc, #20]	; (2810 <_mclk_init+0x3c>)
    27fa:	4798      	blx	r3
}
    27fc:	46c0      	nop			; (mov r8, r8)
    27fe:	46bd      	mov	sp, r7
    2800:	b002      	add	sp, #8
    2802:	bd80      	pop	{r7, pc}
    2804:	40000400 	.word	0x40000400
    2808:	000027b5 	.word	0x000027b5
    280c:	00002797 	.word	0x00002797
    2810:	00002779 	.word	0x00002779

00002814 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2814:	b580      	push	{r7, lr}
    2816:	b082      	sub	sp, #8
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
    281c:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	683a      	ldr	r2, [r7, #0]
    2822:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2824:	46c0      	nop			; (mov r8, r8)
    2826:	46bd      	mov	sp, r7
    2828:	b002      	add	sp, #8
    282a:	bd80      	pop	{r7, pc}

0000282c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    282c:	b580      	push	{r7, lr}
    282e:	b084      	sub	sp, #16
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	69db      	ldr	r3, [r3, #28]
    2838:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	0a1b      	lsrs	r3, r3, #8
    283e:	221f      	movs	r2, #31
    2840:	4013      	ands	r3, r2
    2842:	60fb      	str	r3, [r7, #12]
	return tmp;
    2844:	68fb      	ldr	r3, [r7, #12]
}
    2846:	0018      	movs	r0, r3
    2848:	46bd      	mov	sp, r7
    284a:	b004      	add	sp, #16
    284c:	bd80      	pop	{r7, pc}

0000284e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    284e:	b580      	push	{r7, lr}
    2850:	b082      	sub	sp, #8
    2852:	af00      	add	r7, sp, #0
    2854:	6078      	str	r0, [r7, #4]
    2856:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	683a      	ldr	r2, [r7, #0]
    285c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	46bd      	mov	sp, r7
    2862:	b002      	add	sp, #8
    2864:	bd80      	pop	{r7, pc}
	...

00002868 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    286e:	4b10      	ldr	r3, [pc, #64]	; (28b0 <_osc32kctrl_init_sources+0x48>)
    2870:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    2872:	1cbb      	adds	r3, r7, #2
    2874:	2200      	movs	r2, #0
    2876:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	0018      	movs	r0, r3
    287c:	4b0d      	ldr	r3, [pc, #52]	; (28b4 <_osc32kctrl_init_sources+0x4c>)
    287e:	4798      	blx	r3
    2880:	0002      	movs	r2, r0
    2882:	1cbb      	adds	r3, r7, #2
    2884:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2886:	1cbb      	adds	r3, r7, #2
    2888:	881b      	ldrh	r3, [r3, #0]
    288a:	021b      	lsls	r3, r3, #8
    288c:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    288e:	23f8      	movs	r3, #248	; 0xf8
    2890:	015b      	lsls	r3, r3, #5
    2892:	401a      	ands	r2, r3
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	0011      	movs	r1, r2
    2898:	0018      	movs	r0, r3
    289a:	4b07      	ldr	r3, [pc, #28]	; (28b8 <_osc32kctrl_init_sources+0x50>)
    289c:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	2105      	movs	r1, #5
    28a2:	0018      	movs	r0, r3
    28a4:	4b05      	ldr	r3, [pc, #20]	; (28bc <_osc32kctrl_init_sources+0x54>)
    28a6:	4798      	blx	r3
	(void)calib;
}
    28a8:	46c0      	nop			; (mov r8, r8)
    28aa:	46bd      	mov	sp, r7
    28ac:	b002      	add	sp, #8
    28ae:	bd80      	pop	{r7, pc}
    28b0:	40001000 	.word	0x40001000
    28b4:	0000282d 	.word	0x0000282d
    28b8:	0000284f 	.word	0x0000284f
    28bc:	00002815 	.word	0x00002815

000028c0 <hri_oscctrl_wait_for_sync>:
typedef uint8_t  hri_oscctrl_dpllstatus_reg_t;
typedef uint8_t  hri_oscctrl_dpllsyncbusy_reg_t;
typedef uint8_t  hri_oscctrl_osc16mctrl_reg_t;

static inline void hri_oscctrl_wait_for_sync(const void *const hw, hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	af00      	add	r7, sp, #0
    28c6:	6078      	str	r0, [r7, #4]
    28c8:	000a      	movs	r2, r1
    28ca:	1cfb      	adds	r3, r7, #3
    28cc:	701a      	strb	r2, [r3, #0]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	2238      	movs	r2, #56	; 0x38
    28d4:	5c9b      	ldrb	r3, [r3, r2]
    28d6:	b2db      	uxtb	r3, r3
    28d8:	1cfa      	adds	r2, r7, #3
    28da:	7812      	ldrb	r2, [r2, #0]
    28dc:	4013      	ands	r3, r2
    28de:	b2db      	uxtb	r3, r3
    28e0:	2b00      	cmp	r3, #0
    28e2:	d1f5      	bne.n	28d0 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    28e4:	46c0      	nop			; (mov r8, r8)
    28e6:	46bd      	mov	sp, r7
    28e8:	b002      	add	sp, #8
    28ea:	bd80      	pop	{r7, pc}

000028ec <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    28ec:	b580      	push	{r7, lr}
    28ee:	b082      	sub	sp, #8
    28f0:	af00      	add	r7, sp, #0
    28f2:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	68db      	ldr	r3, [r3, #12]
    28f8:	091b      	lsrs	r3, r3, #4
    28fa:	2201      	movs	r2, #1
    28fc:	4013      	ands	r3, r2
    28fe:	1e5a      	subs	r2, r3, #1
    2900:	4193      	sbcs	r3, r2
    2902:	b2db      	uxtb	r3, r3
}
    2904:	0018      	movs	r0, r3
    2906:	46bd      	mov	sp, r7
    2908:	b002      	add	sp, #8
    290a:	bd80      	pop	{r7, pc}

0000290c <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    290c:	b580      	push	{r7, lr}
    290e:	b082      	sub	sp, #8
    2910:	af00      	add	r7, sp, #0
    2912:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	7d1b      	ldrb	r3, [r3, #20]
    2918:	b2db      	uxtb	r3, r3
    291a:	2280      	movs	r2, #128	; 0x80
    291c:	4252      	negs	r2, r2
    291e:	4313      	orrs	r3, r2
    2920:	b2da      	uxtb	r2, r3
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	210e      	movs	r1, #14
    292a:	0018      	movs	r0, r3
    292c:	4b02      	ldr	r3, [pc, #8]	; (2938 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit+0x2c>)
    292e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2930:	46c0      	nop			; (mov r8, r8)
    2932:	46bd      	mov	sp, r7
    2934:	b002      	add	sp, #8
    2936:	bd80      	pop	{r7, pc}
    2938:	000028c1 	.word	0x000028c1

0000293c <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    293c:	b580      	push	{r7, lr}
    293e:	b082      	sub	sp, #8
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
    2944:	000a      	movs	r2, r1
    2946:	1cfb      	adds	r3, r7, #3
    2948:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	1cfa      	adds	r2, r7, #3
    294e:	7812      	ldrb	r2, [r2, #0]
    2950:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	2102      	movs	r1, #2
    2956:	0018      	movs	r0, r3
    2958:	4b02      	ldr	r3, [pc, #8]	; (2964 <hri_oscctrl_write_OSC16MCTRL_reg+0x28>)
    295a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    295c:	46c0      	nop			; (mov r8, r8)
    295e:	46bd      	mov	sp, r7
    2960:	b002      	add	sp, #8
    2962:	bd80      	pop	{r7, pc}
    2964:	000028c1 	.word	0x000028c1

00002968 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2968:	b580      	push	{r7, lr}
    296a:	b082      	sub	sp, #8
    296c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    296e:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <_oscctrl_init_sources+0x3c>)
    2970:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	2182      	movs	r1, #130	; 0x82
    2976:	0018      	movs	r0, r3
    2978:	4b0b      	ldr	r3, [pc, #44]	; (29a8 <_oscctrl_init_sources+0x40>)
    297a:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    297c:	46c0      	nop			; (mov r8, r8)
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	0018      	movs	r0, r3
    2982:	4b0a      	ldr	r3, [pc, #40]	; (29ac <_oscctrl_init_sources+0x44>)
    2984:	4798      	blx	r3
    2986:	0003      	movs	r3, r0
    2988:	001a      	movs	r2, r3
    298a:	2301      	movs	r3, #1
    298c:	4053      	eors	r3, r2
    298e:	b2db      	uxtb	r3, r3
    2990:	2b00      	cmp	r3, #0
    2992:	d1f4      	bne.n	297e <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	0018      	movs	r0, r3
    2998:	4b05      	ldr	r3, [pc, #20]	; (29b0 <_oscctrl_init_sources+0x48>)
    299a:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46bd      	mov	sp, r7
    29a0:	b002      	add	sp, #8
    29a2:	bd80      	pop	{r7, pc}
    29a4:	40000c00 	.word	0x40000c00
    29a8:	0000293d 	.word	0x0000293d
    29ac:	000028ed 	.word	0x000028ed
    29b0:	0000290d 	.word	0x0000290d

000029b4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
	void *                     hw  = (void *)OSCCTRL;
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <_oscctrl_init_referenced_generators+0x18>)
    29bc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_dfllctrl_reg_t tmp = 0;
    29be:	1cbb      	adds	r3, r7, #2
    29c0:	2200      	movs	r2, #0
    29c2:	801a      	strh	r2, [r3, #0]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    29c4:	46c0      	nop			; (mov r8, r8)
    29c6:	46bd      	mov	sp, r7
    29c8:	b002      	add	sp, #8
    29ca:	bd80      	pop	{r7, pc}
    29cc:	40000c00 	.word	0x40000c00

000029d0 <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b082      	sub	sp, #8
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	799b      	ldrb	r3, [r3, #6]
    29dc:	b2db      	uxtb	r3, r3
}
    29de:	0018      	movs	r0, r3
    29e0:	46bd      	mov	sp, r7
    29e2:	b002      	add	sp, #8
    29e4:	bd80      	pop	{r7, pc}

000029e6 <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    29e6:	b580      	push	{r7, lr}
    29e8:	b082      	sub	sp, #8
    29ea:	af00      	add	r7, sp, #0
    29ec:	6078      	str	r0, [r7, #4]
    29ee:	000a      	movs	r2, r1
    29f0:	1cfb      	adds	r3, r7, #3
    29f2:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	1cfa      	adds	r2, r7, #3
    29f8:	7812      	ldrb	r2, [r2, #0]
    29fa:	719a      	strb	r2, [r3, #6]
}
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	46bd      	mov	sp, r7
    2a00:	b002      	add	sp, #8
    2a02:	bd80      	pop	{r7, pc}

00002a04 <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    2a04:	b580      	push	{r7, lr}
    2a06:	b084      	sub	sp, #16
    2a08:	af00      	add	r7, sp, #0
    2a0a:	6078      	str	r0, [r7, #4]
    2a0c:	000a      	movs	r2, r1
    2a0e:	1cfb      	adds	r3, r7, #3
    2a10:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    2a12:	230f      	movs	r3, #15
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	687a      	ldr	r2, [r7, #4]
    2a18:	7892      	ldrb	r2, [r2, #2]
    2a1a:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    2a1c:	230f      	movs	r3, #15
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	1cfa      	adds	r2, r7, #3
    2a22:	781b      	ldrb	r3, [r3, #0]
    2a24:	7812      	ldrb	r2, [r2, #0]
    2a26:	4013      	ands	r3, r2
    2a28:	b2da      	uxtb	r2, r3
    2a2a:	230f      	movs	r3, #15
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	2103      	movs	r1, #3
    2a30:	400a      	ands	r2, r1
    2a32:	701a      	strb	r2, [r3, #0]
	return tmp;
    2a34:	230f      	movs	r3, #15
    2a36:	18fb      	adds	r3, r7, r3
    2a38:	781b      	ldrb	r3, [r3, #0]
}
    2a3a:	0018      	movs	r0, r3
    2a3c:	46bd      	mov	sp, r7
    2a3e:	b004      	add	sp, #16
    2a40:	bd80      	pop	{r7, pc}

00002a42 <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    2a42:	b580      	push	{r7, lr}
    2a44:	b084      	sub	sp, #16
    2a46:	af00      	add	r7, sp, #0
    2a48:	6078      	str	r0, [r7, #4]
    2a4a:	000a      	movs	r2, r1
    2a4c:	1cfb      	adds	r3, r7, #3
    2a4e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    2a50:	230f      	movs	r3, #15
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	687a      	ldr	r2, [r7, #4]
    2a56:	7892      	ldrb	r2, [r2, #2]
    2a58:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    2a5a:	230f      	movs	r3, #15
    2a5c:	18fb      	adds	r3, r7, r3
    2a5e:	220f      	movs	r2, #15
    2a60:	18ba      	adds	r2, r7, r2
    2a62:	7812      	ldrb	r2, [r2, #0]
    2a64:	2103      	movs	r1, #3
    2a66:	438a      	bics	r2, r1
    2a68:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    2a6a:	1cfb      	adds	r3, r7, #3
    2a6c:	781b      	ldrb	r3, [r3, #0]
    2a6e:	2203      	movs	r2, #3
    2a70:	4013      	ands	r3, r2
    2a72:	b2d9      	uxtb	r1, r3
    2a74:	230f      	movs	r3, #15
    2a76:	18fb      	adds	r3, r7, r3
    2a78:	220f      	movs	r2, #15
    2a7a:	18ba      	adds	r2, r7, r2
    2a7c:	7812      	ldrb	r2, [r2, #0]
    2a7e:	430a      	orrs	r2, r1
    2a80:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	220f      	movs	r2, #15
    2a86:	18ba      	adds	r2, r7, r2
    2a88:	7812      	ldrb	r2, [r2, #0]
    2a8a:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	46bd      	mov	sp, r7
    2a90:	b004      	add	sp, #16
    2a92:	bd80      	pop	{r7, pc}

00002a94 <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	0002      	movs	r2, r0
    2a9c:	1dfb      	adds	r3, r7, #7
    2a9e:	701a      	strb	r2, [r3, #0]
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    2aa0:	2380      	movs	r3, #128	; 0x80
    2aa2:	05db      	lsls	r3, r3, #23
    2aa4:	2103      	movs	r1, #3
    2aa6:	0018      	movs	r0, r3
    2aa8:	4b10      	ldr	r3, [pc, #64]	; (2aec <_set_performance_level+0x58>)
    2aaa:	4798      	blx	r3
    2aac:	0003      	movs	r3, r0
    2aae:	001a      	movs	r2, r3
    2ab0:	1dfb      	adds	r3, r7, #7
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	4293      	cmp	r3, r2
    2ab6:	d015      	beq.n	2ae4 <_set_performance_level+0x50>
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    2ab8:	2380      	movs	r3, #128	; 0x80
    2aba:	05db      	lsls	r3, r3, #23
    2abc:	21ff      	movs	r1, #255	; 0xff
    2abe:	0018      	movs	r0, r3
    2ac0:	4b0b      	ldr	r3, [pc, #44]	; (2af0 <_set_performance_level+0x5c>)
    2ac2:	4798      	blx	r3
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    2ac4:	1dfb      	adds	r3, r7, #7
    2ac6:	781a      	ldrb	r2, [r3, #0]
    2ac8:	2380      	movs	r3, #128	; 0x80
    2aca:	05db      	lsls	r3, r3, #23
    2acc:	0011      	movs	r1, r2
    2ace:	0018      	movs	r0, r3
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <_set_performance_level+0x60>)
    2ad2:	4798      	blx	r3
		while (!hri_pm_read_INTFLAG_reg(PM))
    2ad4:	46c0      	nop			; (mov r8, r8)
    2ad6:	2380      	movs	r3, #128	; 0x80
    2ad8:	05db      	lsls	r3, r3, #23
    2ada:	0018      	movs	r0, r3
    2adc:	4b06      	ldr	r3, [pc, #24]	; (2af8 <_set_performance_level+0x64>)
    2ade:	4798      	blx	r3
    2ae0:	1e03      	subs	r3, r0, #0
    2ae2:	d0f8      	beq.n	2ad6 <_set_performance_level+0x42>
			;
	}
}
    2ae4:	46c0      	nop			; (mov r8, r8)
    2ae6:	46bd      	mov	sp, r7
    2ae8:	b002      	add	sp, #8
    2aea:	bd80      	pop	{r7, pc}
    2aec:	00002a05 	.word	0x00002a05
    2af0:	000029e7 	.word	0x000029e7
    2af4:	00002a43 	.word	0x00002a43
    2af8:	000029d1 	.word	0x000029d1

00002afc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
    2b04:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	691b      	ldr	r3, [r3, #16]
    2b0c:	683a      	ldr	r2, [r7, #0]
    2b0e:	4013      	ands	r3, r2
    2b10:	d1fa      	bne.n	2b08 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	46bd      	mov	sp, r7
    2b16:	b002      	add	sp, #8
    2b18:	bd80      	pop	{r7, pc}

00002b1a <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    2b1a:	b580      	push	{r7, lr}
    2b1c:	b082      	sub	sp, #8
    2b1e:	af00      	add	r7, sp, #0
    2b20:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	2280      	movs	r2, #128	; 0x80
    2b26:	0052      	lsls	r2, r2, #1
    2b28:	819a      	strh	r2, [r3, #12]
}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	46bd      	mov	sp, r7
    2b2e:	b002      	add	sp, #8
    2b30:	bd80      	pop	{r7, pc}

00002b32 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    2b32:	b580      	push	{r7, lr}
    2b34:	b082      	sub	sp, #8
    2b36:	af00      	add	r7, sp, #0
    2b38:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	899b      	ldrh	r3, [r3, #12]
    2b3e:	b29b      	uxth	r3, r3
}
    2b40:	0018      	movs	r0, r3
    2b42:	46bd      	mov	sp, r7
    2b44:	b002      	add	sp, #8
    2b46:	bd80      	pop	{r7, pc}

00002b48 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
{
	return ((Rtc *)hw)->MODE2.SYNCBUSY.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b082      	sub	sp, #8
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	881b      	ldrh	r3, [r3, #0]
    2b54:	b29b      	uxth	r3, r3
    2b56:	2201      	movs	r2, #1
    2b58:	4313      	orrs	r3, r2
    2b5a:	b29a      	uxth	r2, r3
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	2101      	movs	r1, #1
    2b64:	0018      	movs	r0, r3
    2b66:	4b03      	ldr	r3, [pc, #12]	; (2b74 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x2c>)
    2b68:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	46bd      	mov	sp, r7
    2b6e:	b002      	add	sp, #8
    2b70:	bd80      	pop	{r7, pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	00002afd 	.word	0x00002afd

00002b78 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	b084      	sub	sp, #16
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2b80:	4a0f      	ldr	r2, [pc, #60]	; (2bc0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x48>)
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	0011      	movs	r1, r2
    2b86:	0018      	movs	r0, r3
    2b88:	4b0e      	ldr	r3, [pc, #56]	; (2bc4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x4c>)
    2b8a:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2b8c:	230e      	movs	r3, #14
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	687a      	ldr	r2, [r7, #4]
    2b92:	8812      	ldrh	r2, [r2, #0]
    2b94:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    2b96:	230e      	movs	r3, #14
    2b98:	18fb      	adds	r3, r7, r3
    2b9a:	881b      	ldrh	r3, [r3, #0]
    2b9c:	085b      	lsrs	r3, r3, #1
    2b9e:	b29a      	uxth	r2, r3
    2ba0:	230e      	movs	r3, #14
    2ba2:	18fb      	adds	r3, r7, r3
    2ba4:	2101      	movs	r1, #1
    2ba6:	400a      	ands	r2, r1
    2ba8:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    2baa:	230e      	movs	r3, #14
    2bac:	18fb      	adds	r3, r7, r3
    2bae:	881b      	ldrh	r3, [r3, #0]
    2bb0:	1e5a      	subs	r2, r3, #1
    2bb2:	4193      	sbcs	r3, r2
    2bb4:	b2db      	uxtb	r3, r3
}
    2bb6:	0018      	movs	r0, r3
    2bb8:	46bd      	mov	sp, r7
    2bba:	b004      	add	sp, #16
    2bbc:	bd80      	pop	{r7, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	00008003 	.word	0x00008003
    2bc4:	00002afd 	.word	0x00002afd

00002bc8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b082      	sub	sp, #8
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	881b      	ldrh	r3, [r3, #0]
    2bd4:	b29b      	uxth	r3, r3
    2bd6:	2202      	movs	r2, #2
    2bd8:	4393      	bics	r3, r2
    2bda:	b29a      	uxth	r2, r3
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2be0:	4a04      	ldr	r2, [pc, #16]	; (2bf4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	0011      	movs	r1, r2
    2be6:	0018      	movs	r0, r3
    2be8:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x30>)
    2bea:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2bec:	46c0      	nop			; (mov r8, r8)
    2bee:	46bd      	mov	sp, r7
    2bf0:	b002      	add	sp, #8
    2bf2:	bd80      	pop	{r7, pc}
    2bf4:	00008003 	.word	0x00008003
    2bf8:	00002afd 	.word	0x00002afd

00002bfc <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b082      	sub	sp, #8
    2c00:	af00      	add	r7, sp, #0
    2c02:	6078      	str	r0, [r7, #4]
    2c04:	000a      	movs	r2, r1
    2c06:	1cbb      	adds	r3, r7, #2
    2c08:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	1cba      	adds	r2, r7, #2
    2c0e:	8812      	ldrh	r2, [r2, #0]
    2c10:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2c12:	4a05      	ldr	r2, [pc, #20]	; (2c28 <hri_rtcmode0_write_CTRLA_reg+0x2c>)
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	0011      	movs	r1, r2
    2c18:	0018      	movs	r0, r3
    2c1a:	4b04      	ldr	r3, [pc, #16]	; (2c2c <hri_rtcmode0_write_CTRLA_reg+0x30>)
    2c1c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	46bd      	mov	sp, r7
    2c22:	b002      	add	sp, #8
    2c24:	bd80      	pop	{r7, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	00008003 	.word	0x00008003
    2c2c:	00002afd 	.word	0x00002afd

00002c30 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2108      	movs	r1, #8
    2c3c:	0018      	movs	r0, r3
    2c3e:	4b04      	ldr	r3, [pc, #16]	; (2c50 <hri_rtcmode0_read_COUNT_reg+0x20>)
    2c40:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	699b      	ldr	r3, [r3, #24]
}
    2c46:	0018      	movs	r0, r3
    2c48:	46bd      	mov	sp, r7
    2c4a:	b002      	add	sp, #8
    2c4c:	bd80      	pop	{r7, pc}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	00002afd 	.word	0x00002afd

00002c54 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b082      	sub	sp, #8
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d005      	beq.n	2c6e <_calendar_init+0x1a>
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d001      	beq.n	2c6e <_calendar_init+0x1a>
    2c6a:	2301      	movs	r3, #1
    2c6c:	e000      	b.n	2c70 <_calendar_init+0x1c>
    2c6e:	2300      	movs	r3, #0
    2c70:	1c1a      	adds	r2, r3, #0
    2c72:	2301      	movs	r3, #1
    2c74:	4013      	ands	r3, r2
    2c76:	b2db      	uxtb	r3, r3
    2c78:	491b      	ldr	r1, [pc, #108]	; (2ce8 <_calendar_init+0x94>)
    2c7a:	222f      	movs	r2, #47	; 0x2f
    2c7c:	0018      	movs	r0, r3
    2c7e:	4b1b      	ldr	r3, [pc, #108]	; (2cec <_calendar_init+0x98>)
    2c80:	4798      	blx	r3

	_rtc_dev = dev;
    2c82:	4b1b      	ldr	r3, [pc, #108]	; (2cf0 <_calendar_init+0x9c>)
    2c84:	687a      	ldr	r2, [r7, #4]
    2c86:	601a      	str	r2, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	2101      	movs	r1, #1
    2c8e:	0018      	movs	r0, r3
    2c90:	4b18      	ldr	r3, [pc, #96]	; (2cf4 <_calendar_init+0xa0>)
    2c92:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	0018      	movs	r0, r3
    2c9a:	4b17      	ldr	r3, [pc, #92]	; (2cf8 <_calendar_init+0xa4>)
    2c9c:	4798      	blx	r3
    2c9e:	1e03      	subs	r3, r0, #0
    2ca0:	d00a      	beq.n	2cb8 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	0018      	movs	r0, r3
    2ca8:	4b14      	ldr	r3, [pc, #80]	; (2cfc <_calendar_init+0xa8>)
    2caa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	2102      	movs	r1, #2
    2cb2:	0018      	movs	r0, r3
    2cb4:	4b0f      	ldr	r3, [pc, #60]	; (2cf4 <_calendar_init+0xa0>)
    2cb6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	0018      	movs	r0, r3
    2cbe:	4b10      	ldr	r3, [pc, #64]	; (2d00 <_calendar_init+0xac>)
    2cc0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	2101      	movs	r1, #1
    2cc8:	0018      	movs	r0, r3
    2cca:	4b0a      	ldr	r3, [pc, #40]	; (2cf4 <_calendar_init+0xa0>)
    2ccc:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	681a      	ldr	r2, [r3, #0]
    2cd2:	2381      	movs	r3, #129	; 0x81
    2cd4:	021b      	lsls	r3, r3, #8
    2cd6:	0019      	movs	r1, r3
    2cd8:	0010      	movs	r0, r2
    2cda:	4b0a      	ldr	r3, [pc, #40]	; (2d04 <_calendar_init+0xb0>)
    2cdc:	4798      	blx	r3

	return ERR_NONE;
    2cde:	2300      	movs	r3, #0
}
    2ce0:	0018      	movs	r0, r3
    2ce2:	46bd      	mov	sp, r7
    2ce4:	b002      	add	sp, #8
    2ce6:	bd80      	pop	{r7, pc}
    2ce8:	000071f0 	.word	0x000071f0
    2cec:	0000209b 	.word	0x0000209b
    2cf0:	20000088 	.word	0x20000088
    2cf4:	00002afd 	.word	0x00002afd
    2cf8:	00002b79 	.word	0x00002b79
    2cfc:	00002bc9 	.word	0x00002bc9
    2d00:	00002b49 	.word	0x00002b49
    2d04:	00002bfd 	.word	0x00002bfd

00002d08 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	b082      	sub	sp, #8
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d005      	beq.n	2d22 <_calendar_get_counter+0x1a>
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d001      	beq.n	2d22 <_calendar_get_counter+0x1a>
    2d1e:	2301      	movs	r3, #1
    2d20:	e000      	b.n	2d24 <_calendar_get_counter+0x1c>
    2d22:	2300      	movs	r3, #0
    2d24:	1c1a      	adds	r2, r3, #0
    2d26:	2301      	movs	r3, #1
    2d28:	4013      	ands	r3, r2
    2d2a:	b2db      	uxtb	r3, r3
    2d2c:	4907      	ldr	r1, [pc, #28]	; (2d4c <_calendar_get_counter+0x44>)
    2d2e:	2287      	movs	r2, #135	; 0x87
    2d30:	0018      	movs	r0, r3
    2d32:	4b07      	ldr	r3, [pc, #28]	; (2d50 <_calendar_get_counter+0x48>)
    2d34:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	0018      	movs	r0, r3
    2d3c:	4b05      	ldr	r3, [pc, #20]	; (2d54 <_calendar_get_counter+0x4c>)
    2d3e:	4798      	blx	r3
    2d40:	0003      	movs	r3, r0
}
    2d42:	0018      	movs	r0, r3
    2d44:	46bd      	mov	sp, r7
    2d46:	b002      	add	sp, #8
    2d48:	bd80      	pop	{r7, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	000071f0 	.word	0x000071f0
    2d50:	0000209b 	.word	0x0000209b
    2d54:	00002c31 	.word	0x00002c31

00002d58 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2d58:	b590      	push	{r4, r7, lr}
    2d5a:	b085      	sub	sp, #20
    2d5c:	af00      	add	r7, sp, #0
    2d5e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2d60:	687b      	ldr	r3, [r7, #4]
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	220e      	movs	r2, #14
    2d66:	18bc      	adds	r4, r7, r2
    2d68:	0018      	movs	r0, r3
    2d6a:	4b0c      	ldr	r3, [pc, #48]	; (2d9c <_rtc_interrupt_handler+0x44>)
    2d6c:	4798      	blx	r3
    2d6e:	0003      	movs	r3, r0
    2d70:	8023      	strh	r3, [r4, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    2d72:	230e      	movs	r3, #14
    2d74:	18fb      	adds	r3, r7, r3
    2d76:	881a      	ldrh	r2, [r3, #0]
    2d78:	2380      	movs	r3, #128	; 0x80
    2d7a:	005b      	lsls	r3, r3, #1
    2d7c:	4013      	ands	r3, r2
    2d7e:	d009      	beq.n	2d94 <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	685b      	ldr	r3, [r3, #4]
    2d84:	687a      	ldr	r2, [r7, #4]
    2d86:	0010      	movs	r0, r2
    2d88:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	0018      	movs	r0, r3
    2d90:	4b03      	ldr	r3, [pc, #12]	; (2da0 <_rtc_interrupt_handler+0x48>)
    2d92:	4798      	blx	r3
	}
}
    2d94:	46c0      	nop			; (mov r8, r8)
    2d96:	46bd      	mov	sp, r7
    2d98:	b005      	add	sp, #20
    2d9a:	bd90      	pop	{r4, r7, pc}
    2d9c:	00002b33 	.word	0x00002b33
    2da0:	00002b1b 	.word	0x00002b1b

00002da4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    2da8:	4b03      	ldr	r3, [pc, #12]	; (2db8 <RTC_Handler+0x14>)
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	0018      	movs	r0, r3
    2dae:	4b03      	ldr	r3, [pc, #12]	; (2dbc <RTC_Handler+0x18>)
    2db0:	4798      	blx	r3
}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	46bd      	mov	sp, r7
    2db6:	bd80      	pop	{r7, pc}
    2db8:	20000088 	.word	0x20000088
    2dbc:	00002d59 	.word	0x00002d59

00002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b082      	sub	sp, #8
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	0002      	movs	r2, r0
    2dc8:	1dfb      	adds	r3, r7, #7
    2dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2dcc:	1dfb      	adds	r3, r7, #7
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	2b7f      	cmp	r3, #127	; 0x7f
    2dd2:	d809      	bhi.n	2de8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dd4:	4b06      	ldr	r3, [pc, #24]	; (2df0 <__NVIC_EnableIRQ+0x30>)
    2dd6:	1dfa      	adds	r2, r7, #7
    2dd8:	7812      	ldrb	r2, [r2, #0]
    2dda:	0011      	movs	r1, r2
    2ddc:	221f      	movs	r2, #31
    2dde:	400a      	ands	r2, r1
    2de0:	2101      	movs	r1, #1
    2de2:	4091      	lsls	r1, r2
    2de4:	000a      	movs	r2, r1
    2de6:	601a      	str	r2, [r3, #0]
  }
}
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	b002      	add	sp, #8
    2dee:	bd80      	pop	{r7, pc}
    2df0:	e000e100 	.word	0xe000e100

00002df4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2df4:	b580      	push	{r7, lr}
    2df6:	b082      	sub	sp, #8
    2df8:	af00      	add	r7, sp, #0
    2dfa:	0002      	movs	r2, r0
    2dfc:	1dfb      	adds	r3, r7, #7
    2dfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2e00:	1dfb      	adds	r3, r7, #7
    2e02:	781b      	ldrb	r3, [r3, #0]
    2e04:	2b7f      	cmp	r3, #127	; 0x7f
    2e06:	d80e      	bhi.n	2e26 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e08:	4909      	ldr	r1, [pc, #36]	; (2e30 <__NVIC_DisableIRQ+0x3c>)
    2e0a:	1dfb      	adds	r3, r7, #7
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	001a      	movs	r2, r3
    2e10:	231f      	movs	r3, #31
    2e12:	4013      	ands	r3, r2
    2e14:	2201      	movs	r2, #1
    2e16:	409a      	lsls	r2, r3
    2e18:	0013      	movs	r3, r2
    2e1a:	2280      	movs	r2, #128	; 0x80
    2e1c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2e1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e22:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	46bd      	mov	sp, r7
    2e2a:	b002      	add	sp, #8
    2e2c:	bd80      	pop	{r7, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	e000e100 	.word	0xe000e100

00002e34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2e34:	b580      	push	{r7, lr}
    2e36:	b082      	sub	sp, #8
    2e38:	af00      	add	r7, sp, #0
    2e3a:	0002      	movs	r2, r0
    2e3c:	1dfb      	adds	r3, r7, #7
    2e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2e40:	1dfb      	adds	r3, r7, #7
    2e42:	781b      	ldrb	r3, [r3, #0]
    2e44:	2b7f      	cmp	r3, #127	; 0x7f
    2e46:	d80a      	bhi.n	2e5e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e48:	4907      	ldr	r1, [pc, #28]	; (2e68 <__NVIC_ClearPendingIRQ+0x34>)
    2e4a:	1dfb      	adds	r3, r7, #7
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	001a      	movs	r2, r3
    2e50:	231f      	movs	r3, #31
    2e52:	4013      	ands	r3, r2
    2e54:	2201      	movs	r2, #1
    2e56:	409a      	lsls	r2, r3
    2e58:	23c0      	movs	r3, #192	; 0xc0
    2e5a:	005b      	lsls	r3, r3, #1
    2e5c:	50ca      	str	r2, [r1, r3]
  }
}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	46bd      	mov	sp, r7
    2e62:	b002      	add	sp, #8
    2e64:	bd80      	pop	{r7, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	e000e100 	.word	0xe000e100

00002e6c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2e6c:	b580      	push	{r7, lr}
    2e6e:	b082      	sub	sp, #8
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
    2e74:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	69db      	ldr	r3, [r3, #28]
    2e7c:	683a      	ldr	r2, [r7, #0]
    2e7e:	4013      	ands	r3, r2
    2e80:	d1fa      	bne.n	2e78 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	46bd      	mov	sp, r7
    2e86:	b002      	add	sp, #8
    2e88:	bd80      	pop	{r7, pc}

00002e8a <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2e8a:	b580      	push	{r7, lr}
    2e8c:	b082      	sub	sp, #8
    2e8e:	af00      	add	r7, sp, #0
    2e90:	6078      	str	r0, [r7, #4]
    2e92:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	69db      	ldr	r3, [r3, #28]
    2e98:	683a      	ldr	r2, [r7, #0]
    2e9a:	4013      	ands	r3, r2
    2e9c:	1e5a      	subs	r2, r3, #1
    2e9e:	4193      	sbcs	r3, r2
    2ea0:	b2db      	uxtb	r3, r3
}
    2ea2:	0018      	movs	r0, r3
    2ea4:	46bd      	mov	sp, r7
    2ea6:	b002      	add	sp, #8
    2ea8:	bd80      	pop	{r7, pc}

00002eaa <hri_sercomi2cs_wait_for_sync>:

static inline void hri_sercomi2cs_wait_for_sync(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    2eaa:	b580      	push	{r7, lr}
    2eac:	b082      	sub	sp, #8
    2eae:	af00      	add	r7, sp, #0
    2eb0:	6078      	str	r0, [r7, #4]
    2eb2:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    2eb4:	46c0      	nop			; (mov r8, r8)
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	69db      	ldr	r3, [r3, #28]
    2eba:	683a      	ldr	r2, [r7, #0]
    2ebc:	4013      	ands	r3, r2
    2ebe:	d1fa      	bne.n	2eb6 <hri_sercomi2cs_wait_for_sync+0xc>
	};
}
    2ec0:	46c0      	nop			; (mov r8, r8)
    2ec2:	46bd      	mov	sp, r7
    2ec4:	b002      	add	sp, #8
    2ec6:	bd80      	pop	{r7, pc}

00002ec8 <hri_sercomi2cs_is_syncing>:

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b082      	sub	sp, #8
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
    2ed0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	69db      	ldr	r3, [r3, #28]
    2ed6:	683a      	ldr	r2, [r7, #0]
    2ed8:	4013      	ands	r3, r2
    2eda:	1e5a      	subs	r2, r3, #1
    2edc:	4193      	sbcs	r3, r2
    2ede:	b2db      	uxtb	r3, r3
}
    2ee0:	0018      	movs	r0, r3
    2ee2:	46bd      	mov	sp, r7
    2ee4:	b002      	add	sp, #8
    2ee6:	bd80      	pop	{r7, pc}

00002ee8 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2ee8:	b580      	push	{r7, lr}
    2eea:	b082      	sub	sp, #8
    2eec:	af00      	add	r7, sp, #0
    2eee:	6078      	str	r0, [r7, #4]
    2ef0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	69db      	ldr	r3, [r3, #28]
    2ef8:	683a      	ldr	r2, [r7, #0]
    2efa:	4013      	ands	r3, r2
    2efc:	d1fa      	bne.n	2ef4 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	46bd      	mov	sp, r7
    2f02:	b002      	add	sp, #8
    2f04:	bd80      	pop	{r7, pc}

00002f06 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2f06:	b580      	push	{r7, lr}
    2f08:	b082      	sub	sp, #8
    2f0a:	af00      	add	r7, sp, #0
    2f0c:	6078      	str	r0, [r7, #4]
    2f0e:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	69db      	ldr	r3, [r3, #28]
    2f14:	683a      	ldr	r2, [r7, #0]
    2f16:	4013      	ands	r3, r2
    2f18:	1e5a      	subs	r2, r3, #1
    2f1a:	4193      	sbcs	r3, r2
    2f1c:	b2db      	uxtb	r3, r3
}
    2f1e:	0018      	movs	r0, r3
    2f20:	46bd      	mov	sp, r7
    2f22:	b002      	add	sp, #8
    2f24:	bd80      	pop	{r7, pc}

00002f26 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    2f26:	b580      	push	{r7, lr}
    2f28:	b082      	sub	sp, #8
    2f2a:	af00      	add	r7, sp, #0
    2f2c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2201      	movs	r2, #1
    2f32:	761a      	strb	r2, [r3, #24]
}
    2f34:	46c0      	nop			; (mov r8, r8)
    2f36:	46bd      	mov	sp, r7
    2f38:	b002      	add	sp, #8
    2f3a:	bd80      	pop	{r7, pc}

00002f3c <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b082      	sub	sp, #8
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	2202      	movs	r2, #2
    2f48:	761a      	strb	r2, [r3, #24]
}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	46bd      	mov	sp, r7
    2f4e:	b002      	add	sp, #8
    2f50:	bd80      	pop	{r7, pc}

00002f52 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    2f52:	b580      	push	{r7, lr}
    2f54:	b082      	sub	sp, #8
    2f56:	af00      	add	r7, sp, #0
    2f58:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	7e1b      	ldrb	r3, [r3, #24]
    2f5e:	b2db      	uxtb	r3, r3
}
    2f60:	0018      	movs	r0, r3
    2f62:	46bd      	mov	sp, r7
    2f64:	b002      	add	sp, #8
    2f66:	bd80      	pop	{r7, pc}

00002f68 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	7e1b      	ldrb	r3, [r3, #24]
    2f74:	b2db      	uxtb	r3, r3
    2f76:	001a      	movs	r2, r3
    2f78:	2301      	movs	r3, #1
    2f7a:	4013      	ands	r3, r2
    2f7c:	1e5a      	subs	r2, r3, #1
    2f7e:	4193      	sbcs	r3, r2
    2f80:	b2db      	uxtb	r3, r3
}
    2f82:	0018      	movs	r0, r3
    2f84:	46bd      	mov	sp, r7
    2f86:	b002      	add	sp, #8
    2f88:	bd80      	pop	{r7, pc}

00002f8a <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2f8a:	b580      	push	{r7, lr}
    2f8c:	b082      	sub	sp, #8
    2f8e:	af00      	add	r7, sp, #0
    2f90:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	7e1b      	ldrb	r3, [r3, #24]
    2f96:	b2db      	uxtb	r3, r3
    2f98:	085b      	lsrs	r3, r3, #1
    2f9a:	2201      	movs	r2, #1
    2f9c:	4013      	ands	r3, r2
    2f9e:	1e5a      	subs	r2, r3, #1
    2fa0:	4193      	sbcs	r3, r2
    2fa2:	b2db      	uxtb	r3, r3
}
    2fa4:	0018      	movs	r0, r3
    2fa6:	46bd      	mov	sp, r7
    2fa8:	b002      	add	sp, #8
    2faa:	bd80      	pop	{r7, pc}

00002fac <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b082      	sub	sp, #8
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	7e1b      	ldrb	r3, [r3, #24]
    2fb8:	b2db      	uxtb	r3, r3
    2fba:	089b      	lsrs	r3, r3, #2
    2fbc:	2201      	movs	r2, #1
    2fbe:	4013      	ands	r3, r2
    2fc0:	1e5a      	subs	r2, r3, #1
    2fc2:	4193      	sbcs	r3, r2
    2fc4:	b2db      	uxtb	r3, r3
}
    2fc6:	0018      	movs	r0, r3
    2fc8:	46bd      	mov	sp, r7
    2fca:	b002      	add	sp, #8
    2fcc:	bd80      	pop	{r7, pc}

00002fce <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2fce:	b580      	push	{r7, lr}
    2fd0:	b082      	sub	sp, #8
    2fd2:	af00      	add	r7, sp, #0
    2fd4:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	7e1b      	ldrb	r3, [r3, #24]
    2fda:	b2db      	uxtb	r3, r3
    2fdc:	09db      	lsrs	r3, r3, #7
    2fde:	2201      	movs	r2, #1
    2fe0:	4013      	ands	r3, r2
    2fe2:	1e5a      	subs	r2, r3, #1
    2fe4:	4193      	sbcs	r3, r2
    2fe6:	b2db      	uxtb	r3, r3
}
    2fe8:	0018      	movs	r0, r3
    2fea:	46bd      	mov	sp, r7
    2fec:	b002      	add	sp, #8
    2fee:	bd80      	pop	{r7, pc}

00002ff0 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	2280      	movs	r2, #128	; 0x80
    2ffc:	761a      	strb	r2, [r3, #24]
}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	46bd      	mov	sp, r7
    3002:	b002      	add	sp, #8
    3004:	bd80      	pop	{r7, pc}

00003006 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    3006:	b580      	push	{r7, lr}
    3008:	b082      	sub	sp, #8
    300a:	af00      	add	r7, sp, #0
    300c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	2201      	movs	r2, #1
    3012:	759a      	strb	r2, [r3, #22]
}
    3014:	46c0      	nop			; (mov r8, r8)
    3016:	46bd      	mov	sp, r7
    3018:	b002      	add	sp, #8
    301a:	bd80      	pop	{r7, pc}

0000301c <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    301c:	b580      	push	{r7, lr}
    301e:	b082      	sub	sp, #8
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	7d9b      	ldrb	r3, [r3, #22]
    3028:	b2db      	uxtb	r3, r3
    302a:	001a      	movs	r2, r3
    302c:	2301      	movs	r3, #1
    302e:	4013      	ands	r3, r2
    3030:	1e5a      	subs	r2, r3, #1
    3032:	4193      	sbcs	r3, r2
    3034:	b2db      	uxtb	r3, r3
}
    3036:	0018      	movs	r0, r3
    3038:	46bd      	mov	sp, r7
    303a:	b002      	add	sp, #8
    303c:	bd80      	pop	{r7, pc}

0000303e <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    303e:	b580      	push	{r7, lr}
    3040:	b082      	sub	sp, #8
    3042:	af00      	add	r7, sp, #0
    3044:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	2201      	movs	r2, #1
    304a:	751a      	strb	r2, [r3, #20]
}
    304c:	46c0      	nop			; (mov r8, r8)
    304e:	46bd      	mov	sp, r7
    3050:	b002      	add	sp, #8
    3052:	bd80      	pop	{r7, pc}

00003054 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    3054:	b580      	push	{r7, lr}
    3056:	b082      	sub	sp, #8
    3058:	af00      	add	r7, sp, #0
    305a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	2202      	movs	r2, #2
    3060:	759a      	strb	r2, [r3, #22]
}
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	46bd      	mov	sp, r7
    3066:	b002      	add	sp, #8
    3068:	bd80      	pop	{r7, pc}

0000306a <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    306a:	b580      	push	{r7, lr}
    306c:	b082      	sub	sp, #8
    306e:	af00      	add	r7, sp, #0
    3070:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	7d9b      	ldrb	r3, [r3, #22]
    3076:	b2db      	uxtb	r3, r3
    3078:	085b      	lsrs	r3, r3, #1
    307a:	2201      	movs	r2, #1
    307c:	4013      	ands	r3, r2
    307e:	1e5a      	subs	r2, r3, #1
    3080:	4193      	sbcs	r3, r2
    3082:	b2db      	uxtb	r3, r3
}
    3084:	0018      	movs	r0, r3
    3086:	46bd      	mov	sp, r7
    3088:	b002      	add	sp, #8
    308a:	bd80      	pop	{r7, pc}

0000308c <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2202      	movs	r2, #2
    3098:	751a      	strb	r2, [r3, #20]
}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	46bd      	mov	sp, r7
    309e:	b002      	add	sp, #8
    30a0:	bd80      	pop	{r7, pc}
	...

000030a4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    30a4:	b580      	push	{r7, lr}
    30a6:	b082      	sub	sp, #8
    30a8:	af00      	add	r7, sp, #0
    30aa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    30ac:	687b      	ldr	r3, [r7, #4]
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	2202      	movs	r2, #2
    30b2:	431a      	orrs	r2, r3
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	2103      	movs	r1, #3
    30bc:	0018      	movs	r0, r3
    30be:	4b03      	ldr	r3, [pc, #12]	; (30cc <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x28>)
    30c0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	46bd      	mov	sp, r7
    30c6:	b002      	add	sp, #8
    30c8:	bd80      	pop	{r7, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	00002e6d 	.word	0x00002e6d

000030d0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	2202      	movs	r2, #2
    30de:	4393      	bics	r3, r2
    30e0:	001a      	movs	r2, r3
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	2103      	movs	r1, #3
    30ea:	0018      	movs	r0, r3
    30ec:	4b02      	ldr	r3, [pc, #8]	; (30f8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    30ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30f0:	46c0      	nop			; (mov r8, r8)
    30f2:	46bd      	mov	sp, r7
    30f4:	b002      	add	sp, #8
    30f6:	bd80      	pop	{r7, pc}
    30f8:	00002e6d 	.word	0x00002e6d

000030fc <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b084      	sub	sp, #16
    3100:	af00      	add	r7, sp, #0
    3102:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	681b      	ldr	r3, [r3, #0]
    3108:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	0edb      	lsrs	r3, r3, #27
    310e:	2201      	movs	r2, #1
    3110:	4013      	ands	r3, r2
    3112:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3114:	68fb      	ldr	r3, [r7, #12]
    3116:	1e5a      	subs	r2, r3, #1
    3118:	4193      	sbcs	r3, r2
    311a:	b2db      	uxtb	r3, r3
}
    311c:	0018      	movs	r0, r3
    311e:	46bd      	mov	sp, r7
    3120:	b004      	add	sp, #16
    3122:	bd80      	pop	{r7, pc}

00003124 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    3124:	b580      	push	{r7, lr}
    3126:	b084      	sub	sp, #16
    3128:	af00      	add	r7, sp, #0
    312a:	6078      	str	r0, [r7, #4]
    312c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	2103      	movs	r1, #3
    3132:	0018      	movs	r0, r3
    3134:	4b06      	ldr	r3, [pc, #24]	; (3150 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    3136:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    313e:	68fb      	ldr	r3, [r7, #12]
    3140:	683a      	ldr	r2, [r7, #0]
    3142:	4013      	ands	r3, r2
    3144:	60fb      	str	r3, [r7, #12]
	return tmp;
    3146:	68fb      	ldr	r3, [r7, #12]
}
    3148:	0018      	movs	r0, r3
    314a:	46bd      	mov	sp, r7
    314c:	b004      	add	sp, #16
    314e:	bd80      	pop	{r7, pc}
    3150:	00002e6d 	.word	0x00002e6d

00003154 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
    315c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	683a      	ldr	r2, [r7, #0]
    3162:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	2103      	movs	r1, #3
    3168:	0018      	movs	r0, r3
    316a:	4b03      	ldr	r3, [pc, #12]	; (3178 <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    316c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	46bd      	mov	sp, r7
    3172:	b002      	add	sp, #8
    3174:	bd80      	pop	{r7, pc}
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	00002e6d 	.word	0x00002e6d

0000317c <hri_sercomi2cs_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cs_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	2202      	movs	r2, #2
    318a:	4393      	bics	r3, r2
    318c:	001a      	movs	r2, r3
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	2103      	movs	r1, #3
    3196:	0018      	movs	r0, r3
    3198:	4b02      	ldr	r3, [pc, #8]	; (31a4 <hri_sercomi2cs_clear_CTRLA_ENABLE_bit+0x28>)
    319a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    319c:	46c0      	nop			; (mov r8, r8)
    319e:	46bd      	mov	sp, r7
    31a0:	b002      	add	sp, #8
    31a2:	bd80      	pop	{r7, pc}
    31a4:	00002eab 	.word	0x00002eab

000031a8 <hri_sercomi2cs_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	b084      	sub	sp, #16
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    31b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_MASK);
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	2103      	movs	r1, #3
    31b6:	0018      	movs	r0, r3
    31b8:	4b06      	ldr	r3, [pc, #24]	; (31d4 <hri_sercomi2cs_get_CTRLA_reg+0x2c>)
    31ba:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    31c2:	68fb      	ldr	r3, [r7, #12]
    31c4:	683a      	ldr	r2, [r7, #0]
    31c6:	4013      	ands	r3, r2
    31c8:	60fb      	str	r3, [r7, #12]
	return tmp;
    31ca:	68fb      	ldr	r3, [r7, #12]
}
    31cc:	0018      	movs	r0, r3
    31ce:	46bd      	mov	sp, r7
    31d0:	b004      	add	sp, #16
    31d2:	bd80      	pop	{r7, pc}
    31d4:	00002eab 	.word	0x00002eab

000031d8 <hri_sercomi2cs_write_CTRLA_reg>:

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b082      	sub	sp, #8
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
    31e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	683a      	ldr	r2, [r7, #0]
    31e6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_MASK);
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2103      	movs	r1, #3
    31ec:	0018      	movs	r0, r3
    31ee:	4b03      	ldr	r3, [pc, #12]	; (31fc <hri_sercomi2cs_write_CTRLA_reg+0x24>)
    31f0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00002eab 	.word	0x00002eab

00003200 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	2202      	movs	r2, #2
    320e:	4393      	bics	r3, r2
    3210:	001a      	movs	r2, r3
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	2103      	movs	r1, #3
    321a:	0018      	movs	r0, r3
    321c:	4b02      	ldr	r3, [pc, #8]	; (3228 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    321e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3220:	46c0      	nop			; (mov r8, r8)
    3222:	46bd      	mov	sp, r7
    3224:	b002      	add	sp, #8
    3226:	bd80      	pop	{r7, pc}
    3228:	00002ee9 	.word	0x00002ee9

0000322c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
    3234:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	2103      	movs	r1, #3
    323a:	0018      	movs	r0, r3
    323c:	4b06      	ldr	r3, [pc, #24]	; (3258 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    323e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	681b      	ldr	r3, [r3, #0]
    3244:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	683a      	ldr	r2, [r7, #0]
    324a:	4013      	ands	r3, r2
    324c:	60fb      	str	r3, [r7, #12]
	return tmp;
    324e:	68fb      	ldr	r3, [r7, #12]
}
    3250:	0018      	movs	r0, r3
    3252:	46bd      	mov	sp, r7
    3254:	b004      	add	sp, #16
    3256:	bd80      	pop	{r7, pc}
    3258:	00002ee9 	.word	0x00002ee9

0000325c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    325c:	b580      	push	{r7, lr}
    325e:	b082      	sub	sp, #8
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    3264:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	683a      	ldr	r2, [r7, #0]
    326a:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	2103      	movs	r1, #3
    3270:	0018      	movs	r0, r3
    3272:	4b03      	ldr	r3, [pc, #12]	; (3280 <hri_sercomusart_write_CTRLA_reg+0x24>)
    3274:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	46bd      	mov	sp, r7
    327a:	b002      	add	sp, #8
    327c:	bd80      	pop	{r7, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00002ee9 	.word	0x00002ee9

00003284 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    3284:	b580      	push	{r7, lr}
    3286:	b082      	sub	sp, #8
    3288:	af00      	add	r7, sp, #0
    328a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	685b      	ldr	r3, [r3, #4]
    3290:	2280      	movs	r2, #128	; 0x80
    3292:	0052      	lsls	r2, r2, #1
    3294:	431a      	orrs	r2, r3
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	2104      	movs	r1, #4
    329e:	0018      	movs	r0, r3
    32a0:	4b02      	ldr	r3, [pc, #8]	; (32ac <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    32a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32a4:	46c0      	nop			; (mov r8, r8)
    32a6:	46bd      	mov	sp, r7
    32a8:	b002      	add	sp, #8
    32aa:	bd80      	pop	{r7, pc}
    32ac:	00002e6d 	.word	0x00002e6d

000032b0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b082      	sub	sp, #8
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	685b      	ldr	r3, [r3, #4]
    32bc:	4a06      	ldr	r2, [pc, #24]	; (32d8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    32be:	401a      	ands	r2, r3
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	2104      	movs	r1, #4
    32c8:	0018      	movs	r0, r3
    32ca:	4b04      	ldr	r3, [pc, #16]	; (32dc <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    32cc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	46bd      	mov	sp, r7
    32d2:	b002      	add	sp, #8
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	fffffeff 	.word	0xfffffeff
    32dc:	00002e6d 	.word	0x00002e6d

000032e0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af00      	add	r7, sp, #0
    32e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	685b      	ldr	r3, [r3, #4]
    32ec:	2280      	movs	r2, #128	; 0x80
    32ee:	02d2      	lsls	r2, r2, #11
    32f0:	431a      	orrs	r2, r3
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	2104      	movs	r1, #4
    32fa:	0018      	movs	r0, r3
    32fc:	4b02      	ldr	r3, [pc, #8]	; (3308 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    32fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3300:	46c0      	nop			; (mov r8, r8)
    3302:	46bd      	mov	sp, r7
    3304:	b002      	add	sp, #8
    3306:	bd80      	pop	{r7, pc}
    3308:	00002e6d 	.word	0x00002e6d

0000330c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    330c:	b580      	push	{r7, lr}
    330e:	b082      	sub	sp, #8
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	685b      	ldr	r3, [r3, #4]
    3318:	4a06      	ldr	r2, [pc, #24]	; (3334 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    331a:	401a      	ands	r2, r3
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	2104      	movs	r1, #4
    3324:	0018      	movs	r0, r3
    3326:	4b04      	ldr	r3, [pc, #16]	; (3338 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    3328:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	46bd      	mov	sp, r7
    332e:	b002      	add	sp, #8
    3330:	bd80      	pop	{r7, pc}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	fffbffff 	.word	0xfffbffff
    3338:	00002e6d 	.word	0x00002e6d

0000333c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    333c:	b580      	push	{r7, lr}
    333e:	b082      	sub	sp, #8
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
    3344:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	685a      	ldr	r2, [r3, #4]
    334a:	683b      	ldr	r3, [r7, #0]
    334c:	0419      	lsls	r1, r3, #16
    334e:	23c0      	movs	r3, #192	; 0xc0
    3350:	029b      	lsls	r3, r3, #10
    3352:	400b      	ands	r3, r1
    3354:	431a      	orrs	r2, r3
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	2104      	movs	r1, #4
    335e:	0018      	movs	r0, r3
    3360:	4b02      	ldr	r3, [pc, #8]	; (336c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    3362:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3364:	46c0      	nop			; (mov r8, r8)
    3366:	46bd      	mov	sp, r7
    3368:	b002      	add	sp, #8
    336a:	bd80      	pop	{r7, pc}
    336c:	00002e6d 	.word	0x00002e6d

00003370 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
    3378:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	683a      	ldr	r2, [r7, #0]
    337e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	2104      	movs	r1, #4
    3384:	0018      	movs	r0, r3
    3386:	4b03      	ldr	r3, [pc, #12]	; (3394 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    3388:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	46bd      	mov	sp, r7
    338e:	b002      	add	sp, #8
    3390:	bd80      	pop	{r7, pc}
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	00002e6d 	.word	0x00002e6d

00003398 <hri_sercomi2cs_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
    3398:	b580      	push	{r7, lr}
    339a:	b082      	sub	sp, #8
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
    33a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	683a      	ldr	r2, [r7, #0]
    33a6:	605a      	str	r2, [r3, #4]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33a8:	46c0      	nop			; (mov r8, r8)
    33aa:	46bd      	mov	sp, r7
    33ac:	b002      	add	sp, #8
    33ae:	bd80      	pop	{r7, pc}

000033b0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
    33b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	683a      	ldr	r2, [r7, #0]
    33be:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	2107      	movs	r1, #7
    33c4:	0018      	movs	r0, r3
    33c6:	4b03      	ldr	r3, [pc, #12]	; (33d4 <hri_sercomusart_write_CTRLB_reg+0x24>)
    33c8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	46bd      	mov	sp, r7
    33ce:	b002      	add	sp, #8
    33d0:	bd80      	pop	{r7, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	00002ee9 	.word	0x00002ee9

000033d8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    33d8:	b580      	push	{r7, lr}
    33da:	b082      	sub	sp, #8
    33dc:	af00      	add	r7, sp, #0
    33de:	6078      	str	r0, [r7, #4]
    33e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	683a      	ldr	r2, [r7, #0]
    33e6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    33e8:	46c0      	nop			; (mov r8, r8)
    33ea:	46bd      	mov	sp, r7
    33ec:	b002      	add	sp, #8
    33ee:	bd80      	pop	{r7, pc}

000033f0 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	000a      	movs	r2, r1
    33fa:	1cbb      	adds	r3, r7, #2
    33fc:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	1cba      	adds	r2, r7, #2
    3402:	8812      	ldrh	r2, [r2, #0]
    3404:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	46bd      	mov	sp, r7
    340a:	b002      	add	sp, #8
    340c:	bd80      	pop	{r7, pc}

0000340e <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    340e:	b580      	push	{r7, lr}
    3410:	b082      	sub	sp, #8
    3412:	af00      	add	r7, sp, #0
    3414:	6078      	str	r0, [r7, #4]
    3416:	000a      	movs	r2, r1
    3418:	1cfb      	adds	r3, r7, #3
    341a:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	1cfa      	adds	r2, r7, #3
    3420:	7812      	ldrb	r2, [r2, #0]
    3422:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3424:	46c0      	nop			; (mov r8, r8)
    3426:	46bd      	mov	sp, r7
    3428:	b002      	add	sp, #8
    342a:	bd80      	pop	{r7, pc}

0000342c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    342c:	b580      	push	{r7, lr}
    342e:	b084      	sub	sp, #16
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
    3434:	000a      	movs	r2, r1
    3436:	1cfb      	adds	r3, r7, #3
    3438:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    343e:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3440:	68fb      	ldr	r3, [r7, #12]
    3442:	4a0b      	ldr	r2, [pc, #44]	; (3470 <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    3444:	4013      	ands	r3, r2
    3446:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    3448:	1cfb      	adds	r3, r7, #3
    344a:	781b      	ldrb	r3, [r3, #0]
    344c:	039b      	lsls	r3, r3, #14
    344e:	001a      	movs	r2, r3
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	4313      	orrs	r3, r2
    3454:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	68fa      	ldr	r2, [r7, #12]
    345a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	2104      	movs	r1, #4
    3460:	0018      	movs	r0, r3
    3462:	4b04      	ldr	r3, [pc, #16]	; (3474 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    3464:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	46bd      	mov	sp, r7
    346a:	b004      	add	sp, #16
    346c:	bd80      	pop	{r7, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	ffffbfff 	.word	0xffffbfff
    3474:	00002e6d 	.word	0x00002e6d

00003478 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
    3480:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3482:	687b      	ldr	r3, [r7, #4]
    3484:	683a      	ldr	r2, [r7, #0]
    3486:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	2104      	movs	r1, #4
    348c:	0018      	movs	r0, r3
    348e:	4b03      	ldr	r3, [pc, #12]	; (349c <hri_sercomi2cm_write_ADDR_reg+0x24>)
    3490:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	46bd      	mov	sp, r7
    3496:	b002      	add	sp, #8
    3498:	bd80      	pop	{r7, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00002e6d 	.word	0x00002e6d

000034a0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	2104      	movs	r1, #4
    34ac:	0018      	movs	r0, r3
    34ae:	4b04      	ldr	r3, [pc, #16]	; (34c0 <hri_sercomi2cm_read_ADDR_reg+0x20>)
    34b0:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    34b6:	0018      	movs	r0, r3
    34b8:	46bd      	mov	sp, r7
    34ba:	b002      	add	sp, #8
    34bc:	bd80      	pop	{r7, pc}
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	00002e6d 	.word	0x00002e6d

000034c4 <hri_sercomi2cs_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b082      	sub	sp, #8
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    34cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	683a      	ldr	r2, [r7, #0]
    34d2:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	46bd      	mov	sp, r7
    34d8:	b002      	add	sp, #8
    34da:	bd80      	pop	{r7, pc}

000034dc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b082      	sub	sp, #8
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	000a      	movs	r2, r1
    34e6:	1cfb      	adds	r3, r7, #3
    34e8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	1cfa      	adds	r2, r7, #3
    34ee:	2128      	movs	r1, #40	; 0x28
    34f0:	7812      	ldrb	r2, [r2, #0]
    34f2:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	2104      	movs	r1, #4
    34f8:	0018      	movs	r0, r3
    34fa:	4b03      	ldr	r3, [pc, #12]	; (3508 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    34fc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	46bd      	mov	sp, r7
    3502:	b002      	add	sp, #8
    3504:	bd80      	pop	{r7, pc}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	00002e6d 	.word	0x00002e6d

0000350c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	2104      	movs	r1, #4
    3518:	0018      	movs	r0, r3
    351a:	4b05      	ldr	r3, [pc, #20]	; (3530 <hri_sercomi2cm_read_DATA_reg+0x24>)
    351c:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	2228      	movs	r2, #40	; 0x28
    3522:	5c9b      	ldrb	r3, [r3, r2]
    3524:	b2db      	uxtb	r3, r3
}
    3526:	0018      	movs	r0, r3
    3528:	46bd      	mov	sp, r7
    352a:	b002      	add	sp, #8
    352c:	bd80      	pop	{r7, pc}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	00002e6d 	.word	0x00002e6d

00003534 <hri_sercomi2cs_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
    3534:	b580      	push	{r7, lr}
    3536:	b082      	sub	sp, #8
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
    353c:	000a      	movs	r2, r1
    353e:	1cfb      	adds	r3, r7, #3
    3540:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	1cfa      	adds	r2, r7, #3
    3546:	2128      	movs	r1, #40	; 0x28
    3548:	7812      	ldrb	r2, [r2, #0]
    354a:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    354c:	46c0      	nop			; (mov r8, r8)
    354e:	46bd      	mov	sp, r7
    3550:	b002      	add	sp, #8
    3552:	bd80      	pop	{r7, pc}

00003554 <hri_sercomi2cs_read_DATA_reg>:
	((Sercom *)hw)->I2CS.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CS.DATA.reg;
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	2228      	movs	r2, #40	; 0x28
    3560:	5c9b      	ldrb	r3, [r3, r2]
    3562:	b2db      	uxtb	r3, r3
}
    3564:	0018      	movs	r0, r3
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}

0000356c <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    356c:	b580      	push	{r7, lr}
    356e:	b082      	sub	sp, #8
    3570:	af00      	add	r7, sp, #0
    3572:	6078      	str	r0, [r7, #4]
    3574:	000a      	movs	r2, r1
    3576:	1cbb      	adds	r3, r7, #2
    3578:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	1cba      	adds	r2, r7, #2
    357e:	8812      	ldrh	r2, [r2, #0]
    3580:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	46bd      	mov	sp, r7
    3586:	b002      	add	sp, #8
    3588:	bd80      	pop	{r7, pc}

0000358a <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    358a:	b580      	push	{r7, lr}
    358c:	b082      	sub	sp, #8
    358e:	af00      	add	r7, sp, #0
    3590:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3596:	b29b      	uxth	r3, r3
}
    3598:	0018      	movs	r0, r3
    359a:	46bd      	mov	sp, r7
    359c:	b002      	add	sp, #8
    359e:	bd80      	pop	{r7, pc}

000035a0 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b082      	sub	sp, #8
    35a4:	af00      	add	r7, sp, #0
    35a6:	6078      	str	r0, [r7, #4]
    35a8:	000a      	movs	r2, r1
    35aa:	1cfb      	adds	r3, r7, #3
    35ac:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	1cfa      	adds	r2, r7, #3
    35b2:	2130      	movs	r1, #48	; 0x30
    35b4:	7812      	ldrb	r2, [r2, #0]
    35b6:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    35b8:	46c0      	nop			; (mov r8, r8)
    35ba:	46bd      	mov	sp, r7
    35bc:	b002      	add	sp, #8
    35be:	bd80      	pop	{r7, pc}

000035c0 <hri_sercomi2cs_get_STATUS_DIR_bit>:
	((Sercom *)hw)->I2CS.STATUS.reg = SERCOM_I2CS_STATUS_RXNACK;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cs_get_STATUS_DIR_bit(const void *const hw)
{
    35c0:	b580      	push	{r7, lr}
    35c2:	b082      	sub	sp, #8
    35c4:	af00      	add	r7, sp, #0
    35c6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR) >> SERCOM_I2CS_STATUS_DIR_Pos;
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	8b5b      	ldrh	r3, [r3, #26]
    35cc:	b29b      	uxth	r3, r3
    35ce:	08db      	lsrs	r3, r3, #3
    35d0:	2201      	movs	r2, #1
    35d2:	4013      	ands	r3, r2
    35d4:	1e5a      	subs	r2, r3, #1
    35d6:	4193      	sbcs	r3, r2
    35d8:	b2db      	uxtb	r3, r3
}
    35da:	0018      	movs	r0, r3
    35dc:	46bd      	mov	sp, r7
    35de:	b002      	add	sp, #8
    35e0:	bd80      	pop	{r7, pc}

000035e2 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    35e2:	b580      	push	{r7, lr}
    35e4:	b082      	sub	sp, #8
    35e6:	af00      	add	r7, sp, #0
    35e8:	6078      	str	r0, [r7, #4]
    35ea:	000a      	movs	r2, r1
    35ec:	1cbb      	adds	r3, r7, #2
    35ee:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	1cba      	adds	r2, r7, #2
    35f4:	8812      	ldrh	r2, [r2, #0]
    35f6:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    35f8:	46c0      	nop			; (mov r8, r8)
    35fa:	46bd      	mov	sp, r7
    35fc:	b002      	add	sp, #8
    35fe:	bd80      	pop	{r7, pc}

00003600 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    3600:	b580      	push	{r7, lr}
    3602:	b082      	sub	sp, #8
    3604:	af00      	add	r7, sp, #0
    3606:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	8b5b      	ldrh	r3, [r3, #26]
    360c:	b29b      	uxth	r3, r3
}
    360e:	0018      	movs	r0, r3
    3610:	46bd      	mov	sp, r7
    3612:	b002      	add	sp, #8
    3614:	bd80      	pop	{r7, pc}
	...

00003618 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    3618:	b580      	push	{r7, lr}
    361a:	b082      	sub	sp, #8
    361c:	af00      	add	r7, sp, #0
    361e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	2104      	movs	r1, #4
    3624:	0018      	movs	r0, r3
    3626:	4b07      	ldr	r3, [pc, #28]	; (3644 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x2c>)
    3628:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	8b5b      	ldrh	r3, [r3, #26]
    362e:	b29b      	uxth	r3, r3
    3630:	091b      	lsrs	r3, r3, #4
    3632:	b29b      	uxth	r3, r3
    3634:	2203      	movs	r2, #3
    3636:	4013      	ands	r3, r2
    3638:	b29b      	uxth	r3, r3
}
    363a:	0018      	movs	r0, r3
    363c:	46bd      	mov	sp, r7
    363e:	b002      	add	sp, #8
    3640:	bd80      	pop	{r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	00002e6d 	.word	0x00002e6d

00003648 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    364e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	2104      	movs	r1, #4
    3654:	0018      	movs	r0, r3
    3656:	4b04      	ldr	r3, [pc, #16]	; (3668 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    3658:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	8b5b      	ldrh	r3, [r3, #26]
    365e:	b29b      	uxth	r3, r3
}
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b002      	add	sp, #8
    3666:	bd80      	pop	{r7, pc}
    3668:	00002e6d 	.word	0x00002e6d

0000366c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
    3674:	000a      	movs	r2, r1
    3676:	1cbb      	adds	r3, r7, #2
    3678:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	1cba      	adds	r2, r7, #2
    367e:	8812      	ldrh	r2, [r2, #0]
    3680:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	2104      	movs	r1, #4
    3686:	0018      	movs	r0, r3
    3688:	4b02      	ldr	r3, [pc, #8]	; (3694 <hri_sercomi2cm_clear_STATUS_reg+0x28>)
    368a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    368c:	46c0      	nop			; (mov r8, r8)
    368e:	46bd      	mov	sp, r7
    3690:	b002      	add	sp, #8
    3692:	bd80      	pop	{r7, pc}
    3694:	00002e6d 	.word	0x00002e6d

00003698 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    3698:	b580      	push	{r7, lr}
    369a:	b084      	sub	sp, #16
    369c:	af00      	add	r7, sp, #0
    369e:	6078      	str	r0, [r7, #4]
    36a0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	1e5a      	subs	r2, r3, #1
    36a6:	4193      	sbcs	r3, r2
    36a8:	b2db      	uxtb	r3, r3
    36aa:	491c      	ldr	r1, [pc, #112]	; (371c <_usart_async_init+0x84>)
    36ac:	22c6      	movs	r2, #198	; 0xc6
    36ae:	0018      	movs	r0, r3
    36b0:	4b1b      	ldr	r3, [pc, #108]	; (3720 <_usart_async_init+0x88>)
    36b2:	4798      	blx	r3

	init_status = _usart_init(hw);
    36b4:	683b      	ldr	r3, [r7, #0]
    36b6:	0018      	movs	r0, r3
    36b8:	4b1a      	ldr	r3, [pc, #104]	; (3724 <_usart_async_init+0x8c>)
    36ba:	4798      	blx	r3
    36bc:	0003      	movs	r3, r0
    36be:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    36c0:	68fb      	ldr	r3, [r7, #12]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d001      	beq.n	36ca <_usart_async_init+0x32>
		return init_status;
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	e024      	b.n	3714 <_usart_async_init+0x7c>
	}
	device->hw = hw;
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	683a      	ldr	r2, [r7, #0]
    36ce:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    36d0:	687a      	ldr	r2, [r7, #4]
    36d2:	683b      	ldr	r3, [r7, #0]
    36d4:	0011      	movs	r1, r2
    36d6:	0018      	movs	r0, r3
    36d8:	4b13      	ldr	r3, [pc, #76]	; (3728 <_usart_async_init+0x90>)
    36da:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36dc:	683b      	ldr	r3, [r7, #0]
    36de:	0018      	movs	r0, r3
    36e0:	4b12      	ldr	r3, [pc, #72]	; (372c <_usart_async_init+0x94>)
    36e2:	4798      	blx	r3
    36e4:	0003      	movs	r3, r0
    36e6:	b25b      	sxtb	r3, r3
    36e8:	0018      	movs	r0, r3
    36ea:	4b11      	ldr	r3, [pc, #68]	; (3730 <_usart_async_init+0x98>)
    36ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    36ee:	683b      	ldr	r3, [r7, #0]
    36f0:	0018      	movs	r0, r3
    36f2:	4b0e      	ldr	r3, [pc, #56]	; (372c <_usart_async_init+0x94>)
    36f4:	4798      	blx	r3
    36f6:	0003      	movs	r3, r0
    36f8:	b25b      	sxtb	r3, r3
    36fa:	0018      	movs	r0, r3
    36fc:	4b0d      	ldr	r3, [pc, #52]	; (3734 <_usart_async_init+0x9c>)
    36fe:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3700:	683b      	ldr	r3, [r7, #0]
    3702:	0018      	movs	r0, r3
    3704:	4b09      	ldr	r3, [pc, #36]	; (372c <_usart_async_init+0x94>)
    3706:	4798      	blx	r3
    3708:	0003      	movs	r3, r0
    370a:	b25b      	sxtb	r3, r3
    370c:	0018      	movs	r0, r3
    370e:	4b0a      	ldr	r3, [pc, #40]	; (3738 <_usart_async_init+0xa0>)
    3710:	4798      	blx	r3

	return ERR_NONE;
    3712:	2300      	movs	r3, #0
}
    3714:	0018      	movs	r0, r3
    3716:	46bd      	mov	sp, r7
    3718:	b004      	add	sp, #16
    371a:	bd80      	pop	{r7, pc}
    371c:	00007208 	.word	0x00007208
    3720:	0000209b 	.word	0x0000209b
    3724:	000039b5 	.word	0x000039b5
    3728:	00003979 	.word	0x00003979
    372c:	00003ec1 	.word	0x00003ec1
    3730:	00002df5 	.word	0x00002df5
    3734:	00002e35 	.word	0x00002e35
    3738:	00002dc1 	.word	0x00002dc1

0000373c <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    373c:	b580      	push	{r7, lr}
    373e:	b082      	sub	sp, #8
    3740:	af00      	add	r7, sp, #0
    3742:	6078      	str	r0, [r7, #4]
    3744:	000a      	movs	r2, r1
    3746:	1cfb      	adds	r3, r7, #3
    3748:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	699a      	ldr	r2, [r3, #24]
    374e:	1cfb      	adds	r3, r7, #3
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	b29b      	uxth	r3, r3
    3754:	0019      	movs	r1, r3
    3756:	0010      	movs	r0, r2
    3758:	4b02      	ldr	r3, [pc, #8]	; (3764 <_usart_async_write_byte+0x28>)
    375a:	4798      	blx	r3
}
    375c:	46c0      	nop			; (mov r8, r8)
    375e:	46bd      	mov	sp, r7
    3760:	b002      	add	sp, #8
    3762:	bd80      	pop	{r7, pc}
    3764:	0000356d 	.word	0x0000356d

00003768 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    3768:	b580      	push	{r7, lr}
    376a:	b082      	sub	sp, #8
    376c:	af00      	add	r7, sp, #0
    376e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	699b      	ldr	r3, [r3, #24]
    3774:	0018      	movs	r0, r3
    3776:	4b03      	ldr	r3, [pc, #12]	; (3784 <_usart_async_enable_byte_sent_irq+0x1c>)
    3778:	4798      	blx	r3
}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	46bd      	mov	sp, r7
    377e:	b002      	add	sp, #8
    3780:	bd80      	pop	{r7, pc}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	00003007 	.word	0x00003007

00003788 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    3788:	b580      	push	{r7, lr}
    378a:	b082      	sub	sp, #8
    378c:	af00      	add	r7, sp, #0
    378e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	699b      	ldr	r3, [r3, #24]
    3794:	0018      	movs	r0, r3
    3796:	4b03      	ldr	r3, [pc, #12]	; (37a4 <_usart_async_enable_tx_done_irq+0x1c>)
    3798:	4798      	blx	r3
}
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	46bd      	mov	sp, r7
    379e:	b002      	add	sp, #8
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	00003055 	.word	0x00003055

000037a8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b082      	sub	sp, #8
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	4a08      	ldr	r2, [pc, #32]	; (37d4 <_sercom_get_hardware_index+0x2c>)
    37b4:	4293      	cmp	r3, r2
    37b6:	d101      	bne.n	37bc <_sercom_get_hardware_index+0x14>
		return 5;
    37b8:	2305      	movs	r3, #5
    37ba:	e006      	b.n	37ca <_sercom_get_hardware_index+0x22>
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	22be      	movs	r2, #190	; 0xbe
    37c0:	0612      	lsls	r2, r2, #24
    37c2:	4694      	mov	ip, r2
    37c4:	4463      	add	r3, ip
    37c6:	0a9b      	lsrs	r3, r3, #10
    37c8:	b2db      	uxtb	r3, r3
}
    37ca:	0018      	movs	r0, r3
    37cc:	46bd      	mov	sp, r7
    37ce:	b002      	add	sp, #8
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	43000400 	.word	0x43000400

000037d8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b085      	sub	sp, #20
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	699b      	ldr	r3, [r3, #24]
    37e4:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    37e6:	68fb      	ldr	r3, [r7, #12]
    37e8:	0018      	movs	r0, r3
    37ea:	4b35      	ldr	r3, [pc, #212]	; (38c0 <_sercom_usart_interrupt_handler+0xe8>)
    37ec:	4798      	blx	r3
    37ee:	1e03      	subs	r3, r0, #0
    37f0:	d00f      	beq.n	3812 <_sercom_usart_interrupt_handler+0x3a>
    37f2:	68fb      	ldr	r3, [r7, #12]
    37f4:	0018      	movs	r0, r3
    37f6:	4b33      	ldr	r3, [pc, #204]	; (38c4 <_sercom_usart_interrupt_handler+0xec>)
    37f8:	4798      	blx	r3
    37fa:	1e03      	subs	r3, r0, #0
    37fc:	d009      	beq.n	3812 <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	0018      	movs	r0, r3
    3802:	4b31      	ldr	r3, [pc, #196]	; (38c8 <_sercom_usart_interrupt_handler+0xf0>)
    3804:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	681b      	ldr	r3, [r3, #0]
    380a:	687a      	ldr	r2, [r7, #4]
    380c:	0010      	movs	r0, r2
    380e:	4798      	blx	r3
    3810:	e053      	b.n	38ba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    3812:	68fb      	ldr	r3, [r7, #12]
    3814:	0018      	movs	r0, r3
    3816:	4b2d      	ldr	r3, [pc, #180]	; (38cc <_sercom_usart_interrupt_handler+0xf4>)
    3818:	4798      	blx	r3
    381a:	1e03      	subs	r3, r0, #0
    381c:	d00f      	beq.n	383e <_sercom_usart_interrupt_handler+0x66>
    381e:	68fb      	ldr	r3, [r7, #12]
    3820:	0018      	movs	r0, r3
    3822:	4b2b      	ldr	r3, [pc, #172]	; (38d0 <_sercom_usart_interrupt_handler+0xf8>)
    3824:	4798      	blx	r3
    3826:	1e03      	subs	r3, r0, #0
    3828:	d009      	beq.n	383e <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    382a:	68fb      	ldr	r3, [r7, #12]
    382c:	0018      	movs	r0, r3
    382e:	4b29      	ldr	r3, [pc, #164]	; (38d4 <_sercom_usart_interrupt_handler+0xfc>)
    3830:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	689b      	ldr	r3, [r3, #8]
    3836:	687a      	ldr	r2, [r7, #4]
    3838:	0010      	movs	r0, r2
    383a:	4798      	blx	r3
    383c:	e03d      	b.n	38ba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	0018      	movs	r0, r3
    3842:	4b25      	ldr	r3, [pc, #148]	; (38d8 <_sercom_usart_interrupt_handler+0x100>)
    3844:	4798      	blx	r3
    3846:	1e03      	subs	r3, r0, #0
    3848:	d01b      	beq.n	3882 <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    384a:	68fb      	ldr	r3, [r7, #12]
    384c:	0018      	movs	r0, r3
    384e:	4b23      	ldr	r3, [pc, #140]	; (38dc <_sercom_usart_interrupt_handler+0x104>)
    3850:	4798      	blx	r3
    3852:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    3854:	001a      	movs	r2, r3
    3856:	2337      	movs	r3, #55	; 0x37
    3858:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    385a:	d005      	beq.n	3868 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    385c:	68fb      	ldr	r3, [r7, #12]
    385e:	213f      	movs	r1, #63	; 0x3f
    3860:	0018      	movs	r0, r3
    3862:	4b1f      	ldr	r3, [pc, #124]	; (38e0 <_sercom_usart_interrupt_handler+0x108>)
    3864:	4798      	blx	r3
			return;
    3866:	e028      	b.n	38ba <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	685c      	ldr	r4, [r3, #4]
    386c:	68fb      	ldr	r3, [r7, #12]
    386e:	0018      	movs	r0, r3
    3870:	4b1c      	ldr	r3, [pc, #112]	; (38e4 <_sercom_usart_interrupt_handler+0x10c>)
    3872:	4798      	blx	r3
    3874:	0003      	movs	r3, r0
    3876:	b2da      	uxtb	r2, r3
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	0011      	movs	r1, r2
    387c:	0018      	movs	r0, r3
    387e:	47a0      	blx	r4
    3880:	e01b      	b.n	38ba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	0018      	movs	r0, r3
    3886:	4b18      	ldr	r3, [pc, #96]	; (38e8 <_sercom_usart_interrupt_handler+0x110>)
    3888:	4798      	blx	r3
    388a:	1e03      	subs	r3, r0, #0
    388c:	d015      	beq.n	38ba <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    388e:	68fb      	ldr	r3, [r7, #12]
    3890:	0018      	movs	r0, r3
    3892:	4b16      	ldr	r3, [pc, #88]	; (38ec <_sercom_usart_interrupt_handler+0x114>)
    3894:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	68db      	ldr	r3, [r3, #12]
    389a:	687a      	ldr	r2, [r7, #4]
    389c:	0010      	movs	r0, r2
    389e:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    38a0:	68fb      	ldr	r3, [r7, #12]
    38a2:	0018      	movs	r0, r3
    38a4:	4b0d      	ldr	r3, [pc, #52]	; (38dc <_sercom_usart_interrupt_handler+0x104>)
    38a6:	4798      	blx	r3
    38a8:	0003      	movs	r3, r0
    38aa:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    38ac:	68bb      	ldr	r3, [r7, #8]
    38ae:	b29a      	uxth	r2, r3
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	0011      	movs	r1, r2
    38b4:	0018      	movs	r0, r3
    38b6:	4b0a      	ldr	r3, [pc, #40]	; (38e0 <_sercom_usart_interrupt_handler+0x108>)
    38b8:	4798      	blx	r3
	}
}
    38ba:	46bd      	mov	sp, r7
    38bc:	b005      	add	sp, #20
    38be:	bd90      	pop	{r4, r7, pc}
    38c0:	00002f69 	.word	0x00002f69
    38c4:	0000301d 	.word	0x0000301d
    38c8:	0000303f 	.word	0x0000303f
    38cc:	00002f8b 	.word	0x00002f8b
    38d0:	0000306b 	.word	0x0000306b
    38d4:	0000308d 	.word	0x0000308d
    38d8:	00002fad 	.word	0x00002fad
    38dc:	00003601 	.word	0x00003601
    38e0:	000035e3 	.word	0x000035e3
    38e4:	0000358b 	.word	0x0000358b
    38e8:	00002fcf 	.word	0x00002fcf
    38ec:	00002ff1 	.word	0x00002ff1

000038f0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    38f8:	230e      	movs	r3, #14
    38fa:	18fc      	adds	r4, r7, r3
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	0018      	movs	r0, r3
    3900:	4b18      	ldr	r3, [pc, #96]	; (3964 <_get_sercom_index+0x74>)
    3902:	4798      	blx	r3
    3904:	0003      	movs	r3, r0
    3906:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3908:	230f      	movs	r3, #15
    390a:	18fb      	adds	r3, r7, r3
    390c:	2200      	movs	r2, #0
    390e:	701a      	strb	r2, [r3, #0]
    3910:	e018      	b.n	3944 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    3912:	230f      	movs	r3, #15
    3914:	18fb      	adds	r3, r7, r3
    3916:	781a      	ldrb	r2, [r3, #0]
    3918:	4913      	ldr	r1, [pc, #76]	; (3968 <_get_sercom_index+0x78>)
    391a:	0013      	movs	r3, r2
    391c:	009b      	lsls	r3, r3, #2
    391e:	189b      	adds	r3, r3, r2
    3920:	009b      	lsls	r3, r3, #2
    3922:	5c5b      	ldrb	r3, [r3, r1]
    3924:	220e      	movs	r2, #14
    3926:	18ba      	adds	r2, r7, r2
    3928:	7812      	ldrb	r2, [r2, #0]
    392a:	429a      	cmp	r2, r3
    392c:	d103      	bne.n	3936 <_get_sercom_index+0x46>
			return i;
    392e:	230f      	movs	r3, #15
    3930:	18fb      	adds	r3, r7, r3
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	e012      	b.n	395c <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3936:	230f      	movs	r3, #15
    3938:	18fb      	adds	r3, r7, r3
    393a:	781a      	ldrb	r2, [r3, #0]
    393c:	230f      	movs	r3, #15
    393e:	18fb      	adds	r3, r7, r3
    3940:	3201      	adds	r2, #1
    3942:	701a      	strb	r2, [r3, #0]
    3944:	230f      	movs	r3, #15
    3946:	18fb      	adds	r3, r7, r3
    3948:	781b      	ldrb	r3, [r3, #0]
    394a:	2b00      	cmp	r3, #0
    394c:	d0e1      	beq.n	3912 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    394e:	4a07      	ldr	r2, [pc, #28]	; (396c <_get_sercom_index+0x7c>)
    3950:	4b07      	ldr	r3, [pc, #28]	; (3970 <_get_sercom_index+0x80>)
    3952:	0019      	movs	r1, r3
    3954:	2000      	movs	r0, #0
    3956:	4b07      	ldr	r3, [pc, #28]	; (3974 <_get_sercom_index+0x84>)
    3958:	4798      	blx	r3
	return 0;
    395a:	2300      	movs	r3, #0
}
    395c:	0018      	movs	r0, r3
    395e:	46bd      	mov	sp, r7
    3960:	b005      	add	sp, #20
    3962:	bd90      	pop	{r4, r7, pc}
    3964:	000037a9 	.word	0x000037a9
    3968:	20000000 	.word	0x20000000
    396c:	00000263 	.word	0x00000263
    3970:	00007208 	.word	0x00007208
    3974:	0000209b 	.word	0x0000209b

00003978 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    3978:	b580      	push	{r7, lr}
    397a:	b082      	sub	sp, #8
    397c:	af00      	add	r7, sp, #0
    397e:	6078      	str	r0, [r7, #4]
    3980:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    3982:	687a      	ldr	r2, [r7, #4]
    3984:	2384      	movs	r3, #132	; 0x84
    3986:	05db      	lsls	r3, r3, #23
    3988:	429a      	cmp	r2, r3
    398a:	d102      	bne.n	3992 <_sercom_init_irq_param+0x1a>
		_sercom0_dev = (struct _usart_async_device *)dev;
    398c:	4b06      	ldr	r3, [pc, #24]	; (39a8 <_sercom_init_irq_param+0x30>)
    398e:	683a      	ldr	r2, [r7, #0]
    3990:	601a      	str	r2, [r3, #0]
	}

	if (hw == SERCOM1) {
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	4a05      	ldr	r2, [pc, #20]	; (39ac <_sercom_init_irq_param+0x34>)
    3996:	4293      	cmp	r3, r2
    3998:	d102      	bne.n	39a0 <_sercom_init_irq_param+0x28>
		_sercom1_dev = (struct _i2c_s_async_device *)dev;
    399a:	4b05      	ldr	r3, [pc, #20]	; (39b0 <_sercom_init_irq_param+0x38>)
    399c:	683a      	ldr	r2, [r7, #0]
    399e:	601a      	str	r2, [r3, #0]
	}
}
    39a0:	46c0      	nop			; (mov r8, r8)
    39a2:	46bd      	mov	sp, r7
    39a4:	b002      	add	sp, #8
    39a6:	bd80      	pop	{r7, pc}
    39a8:	2000008c 	.word	0x2000008c
    39ac:	42000400 	.word	0x42000400
    39b0:	20000090 	.word	0x20000090

000039b4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    39b4:	b590      	push	{r4, r7, lr}
    39b6:	b085      	sub	sp, #20
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    39bc:	230f      	movs	r3, #15
    39be:	18fc      	adds	r4, r7, r3
    39c0:	687b      	ldr	r3, [r7, #4]
    39c2:	0018      	movs	r0, r3
    39c4:	4b6f      	ldr	r3, [pc, #444]	; (3b84 <_usart_init+0x1d0>)
    39c6:	4798      	blx	r3
    39c8:	0003      	movs	r3, r0
    39ca:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	2101      	movs	r1, #1
    39d0:	0018      	movs	r0, r3
    39d2:	4b6d      	ldr	r3, [pc, #436]	; (3b88 <_usart_init+0x1d4>)
    39d4:	4798      	blx	r3
    39d6:	0003      	movs	r3, r0
    39d8:	001a      	movs	r2, r3
    39da:	2301      	movs	r3, #1
    39dc:	4053      	eors	r3, r2
    39de:	b2db      	uxtb	r3, r3
    39e0:	2b00      	cmp	r3, #0
    39e2:	d025      	beq.n	3a30 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    39e4:	230f      	movs	r3, #15
    39e6:	18fb      	adds	r3, r7, r3
    39e8:	781a      	ldrb	r2, [r3, #0]
    39ea:	4968      	ldr	r1, [pc, #416]	; (3b8c <_usart_init+0x1d8>)
    39ec:	0013      	movs	r3, r2
    39ee:	009b      	lsls	r3, r3, #2
    39f0:	189b      	adds	r3, r3, r2
    39f2:	009b      	lsls	r3, r3, #2
    39f4:	18cb      	adds	r3, r1, r3
    39f6:	3304      	adds	r3, #4
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	221c      	movs	r2, #28
    39fc:	4013      	ands	r3, r2
    39fe:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	2102      	movs	r1, #2
    3a04:	0018      	movs	r0, r3
    3a06:	4b62      	ldr	r3, [pc, #392]	; (3b90 <_usart_init+0x1dc>)
    3a08:	4798      	blx	r3
    3a0a:	1e03      	subs	r3, r0, #0
    3a0c:	d008      	beq.n	3a20 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	0018      	movs	r0, r3
    3a12:	4b60      	ldr	r3, [pc, #384]	; (3b94 <_usart_init+0x1e0>)
    3a14:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	2102      	movs	r1, #2
    3a1a:	0018      	movs	r0, r3
    3a1c:	4b5e      	ldr	r3, [pc, #376]	; (3b98 <_usart_init+0x1e4>)
    3a1e:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3a20:	68bb      	ldr	r3, [r7, #8]
    3a22:	2201      	movs	r2, #1
    3a24:	431a      	orrs	r2, r3
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	0011      	movs	r1, r2
    3a2a:	0018      	movs	r0, r3
    3a2c:	4b5b      	ldr	r3, [pc, #364]	; (3b9c <_usart_init+0x1e8>)
    3a2e:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	2101      	movs	r1, #1
    3a34:	0018      	movs	r0, r3
    3a36:	4b58      	ldr	r3, [pc, #352]	; (3b98 <_usart_init+0x1e4>)
    3a38:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3a3a:	230f      	movs	r3, #15
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	781a      	ldrb	r2, [r3, #0]
    3a40:	4952      	ldr	r1, [pc, #328]	; (3b8c <_usart_init+0x1d8>)
    3a42:	0013      	movs	r3, r2
    3a44:	009b      	lsls	r3, r3, #2
    3a46:	189b      	adds	r3, r3, r2
    3a48:	009b      	lsls	r3, r3, #2
    3a4a:	18cb      	adds	r3, r1, r3
    3a4c:	3304      	adds	r3, #4
    3a4e:	681a      	ldr	r2, [r3, #0]
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	0011      	movs	r1, r2
    3a54:	0018      	movs	r0, r3
    3a56:	4b51      	ldr	r3, [pc, #324]	; (3b9c <_usart_init+0x1e8>)
    3a58:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3a5a:	230f      	movs	r3, #15
    3a5c:	18fb      	adds	r3, r7, r3
    3a5e:	781a      	ldrb	r2, [r3, #0]
    3a60:	494a      	ldr	r1, [pc, #296]	; (3b8c <_usart_init+0x1d8>)
    3a62:	0013      	movs	r3, r2
    3a64:	009b      	lsls	r3, r3, #2
    3a66:	189b      	adds	r3, r3, r2
    3a68:	009b      	lsls	r3, r3, #2
    3a6a:	18cb      	adds	r3, r1, r3
    3a6c:	3308      	adds	r3, #8
    3a6e:	681a      	ldr	r2, [r3, #0]
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	0011      	movs	r1, r2
    3a74:	0018      	movs	r0, r3
    3a76:	4b4a      	ldr	r3, [pc, #296]	; (3ba0 <_usart_init+0x1ec>)
    3a78:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3a7a:	230f      	movs	r3, #15
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	781a      	ldrb	r2, [r3, #0]
    3a80:	4942      	ldr	r1, [pc, #264]	; (3b8c <_usart_init+0x1d8>)
    3a82:	0013      	movs	r3, r2
    3a84:	009b      	lsls	r3, r3, #2
    3a86:	189b      	adds	r3, r3, r2
    3a88:	009b      	lsls	r3, r3, #2
    3a8a:	18cb      	adds	r3, r1, r3
    3a8c:	3304      	adds	r3, #4
    3a8e:	681a      	ldr	r2, [r3, #0]
    3a90:	2380      	movs	r3, #128	; 0x80
    3a92:	019b      	lsls	r3, r3, #6
    3a94:	4013      	ands	r3, r2
    3a96:	d10e      	bne.n	3ab6 <_usart_init+0x102>
    3a98:	230f      	movs	r3, #15
    3a9a:	18fb      	adds	r3, r7, r3
    3a9c:	781a      	ldrb	r2, [r3, #0]
    3a9e:	493b      	ldr	r1, [pc, #236]	; (3b8c <_usart_init+0x1d8>)
    3aa0:	0013      	movs	r3, r2
    3aa2:	009b      	lsls	r3, r3, #2
    3aa4:	189b      	adds	r3, r3, r2
    3aa6:	009b      	lsls	r3, r3, #2
    3aa8:	18cb      	adds	r3, r1, r3
    3aaa:	3304      	adds	r3, #4
    3aac:	681a      	ldr	r2, [r3, #0]
    3aae:	23c0      	movs	r3, #192	; 0xc0
    3ab0:	01db      	lsls	r3, r3, #7
    3ab2:	4013      	ands	r3, r2
    3ab4:	d030      	beq.n	3b18 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3ab6:	230f      	movs	r3, #15
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	781a      	ldrb	r2, [r3, #0]
    3abc:	4933      	ldr	r1, [pc, #204]	; (3b8c <_usart_init+0x1d8>)
    3abe:	0013      	movs	r3, r2
    3ac0:	009b      	lsls	r3, r3, #2
    3ac2:	189b      	adds	r3, r3, r2
    3ac4:	009b      	lsls	r3, r3, #2
    3ac6:	18cb      	adds	r3, r1, r3
    3ac8:	330c      	adds	r3, #12
    3aca:	881b      	ldrh	r3, [r3, #0]
    3acc:	04db      	lsls	r3, r3, #19
    3ace:	0cdb      	lsrs	r3, r3, #19
    3ad0:	b299      	uxth	r1, r3
    3ad2:	687a      	ldr	r2, [r7, #4]
    3ad4:	8993      	ldrh	r3, [r2, #12]
    3ad6:	04c9      	lsls	r1, r1, #19
    3ad8:	0cc8      	lsrs	r0, r1, #19
    3ada:	0b5b      	lsrs	r3, r3, #13
    3adc:	035b      	lsls	r3, r3, #13
    3ade:	1c19      	adds	r1, r3, #0
    3ae0:	1c03      	adds	r3, r0, #0
    3ae2:	430b      	orrs	r3, r1
    3ae4:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3ae6:	230f      	movs	r3, #15
    3ae8:	18fb      	adds	r3, r7, r3
    3aea:	781a      	ldrb	r2, [r3, #0]
    3aec:	4927      	ldr	r1, [pc, #156]	; (3b8c <_usart_init+0x1d8>)
    3aee:	0013      	movs	r3, r2
    3af0:	009b      	lsls	r3, r3, #2
    3af2:	189b      	adds	r3, r3, r2
    3af4:	009b      	lsls	r3, r3, #2
    3af6:	18cb      	adds	r3, r1, r3
    3af8:	330e      	adds	r3, #14
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	1c1a      	adds	r2, r3, #0
    3afe:	2307      	movs	r3, #7
    3b00:	4013      	ands	r3, r2
    3b02:	b2d9      	uxtb	r1, r3
    3b04:	687a      	ldr	r2, [r7, #4]
    3b06:	8993      	ldrh	r3, [r2, #12]
    3b08:	0348      	lsls	r0, r1, #13
    3b0a:	04db      	lsls	r3, r3, #19
    3b0c:	0cdb      	lsrs	r3, r3, #19
    3b0e:	1c19      	adds	r1, r3, #0
    3b10:	1c03      	adds	r3, r0, #0
    3b12:	430b      	orrs	r3, r1
    3b14:	8193      	strh	r3, [r2, #12]
    3b16:	e00f      	b.n	3b38 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3b18:	230f      	movs	r3, #15
    3b1a:	18fb      	adds	r3, r7, r3
    3b1c:	781a      	ldrb	r2, [r3, #0]
    3b1e:	491b      	ldr	r1, [pc, #108]	; (3b8c <_usart_init+0x1d8>)
    3b20:	0013      	movs	r3, r2
    3b22:	009b      	lsls	r3, r3, #2
    3b24:	189b      	adds	r3, r3, r2
    3b26:	009b      	lsls	r3, r3, #2
    3b28:	18cb      	adds	r3, r1, r3
    3b2a:	330c      	adds	r3, #12
    3b2c:	881a      	ldrh	r2, [r3, #0]
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	0011      	movs	r1, r2
    3b32:	0018      	movs	r0, r3
    3b34:	4b1b      	ldr	r3, [pc, #108]	; (3ba4 <_usart_init+0x1f0>)
    3b36:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3b38:	230f      	movs	r3, #15
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781a      	ldrb	r2, [r3, #0]
    3b3e:	4913      	ldr	r1, [pc, #76]	; (3b8c <_usart_init+0x1d8>)
    3b40:	0013      	movs	r3, r2
    3b42:	009b      	lsls	r3, r3, #2
    3b44:	189b      	adds	r3, r3, r2
    3b46:	009b      	lsls	r3, r3, #2
    3b48:	18cb      	adds	r3, r1, r3
    3b4a:	330f      	adds	r3, #15
    3b4c:	781a      	ldrb	r2, [r3, #0]
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	0011      	movs	r1, r2
    3b52:	0018      	movs	r0, r3
    3b54:	4b14      	ldr	r3, [pc, #80]	; (3ba8 <_usart_init+0x1f4>)
    3b56:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3b58:	230f      	movs	r3, #15
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781a      	ldrb	r2, [r3, #0]
    3b5e:	490b      	ldr	r1, [pc, #44]	; (3b8c <_usart_init+0x1d8>)
    3b60:	0013      	movs	r3, r2
    3b62:	009b      	lsls	r3, r3, #2
    3b64:	189b      	adds	r3, r3, r2
    3b66:	009b      	lsls	r3, r3, #2
    3b68:	18cb      	adds	r3, r1, r3
    3b6a:	3310      	adds	r3, #16
    3b6c:	781a      	ldrb	r2, [r3, #0]
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	0011      	movs	r1, r2
    3b72:	0018      	movs	r0, r3
    3b74:	4b0d      	ldr	r3, [pc, #52]	; (3bac <_usart_init+0x1f8>)
    3b76:	4798      	blx	r3

	return ERR_NONE;
    3b78:	2300      	movs	r3, #0
}
    3b7a:	0018      	movs	r0, r3
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b005      	add	sp, #20
    3b80:	bd90      	pop	{r4, r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	000038f1 	.word	0x000038f1
    3b88:	00002f07 	.word	0x00002f07
    3b8c:	20000000 	.word	0x20000000
    3b90:	0000322d 	.word	0x0000322d
    3b94:	00003201 	.word	0x00003201
    3b98:	00002ee9 	.word	0x00002ee9
    3b9c:	0000325d 	.word	0x0000325d
    3ba0:	000033b1 	.word	0x000033b1
    3ba4:	000033f1 	.word	0x000033f1
    3ba8:	0000340f 	.word	0x0000340f
    3bac:	000035a1 	.word	0x000035a1

00003bb0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    3bb0:	b590      	push	{r4, r7, lr}
    3bb2:	b085      	sub	sp, #20
    3bb4:	af00      	add	r7, sp, #0
    3bb6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3bb8:	230e      	movs	r3, #14
    3bba:	18fc      	adds	r4, r7, r3
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	0018      	movs	r0, r3
    3bc0:	4b19      	ldr	r3, [pc, #100]	; (3c28 <_get_i2cm_index+0x78>)
    3bc2:	4798      	blx	r3
    3bc4:	0003      	movs	r3, r0
    3bc6:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3bc8:	230f      	movs	r3, #15
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	2200      	movs	r2, #0
    3bce:	701a      	strb	r2, [r3, #0]
    3bd0:	e019      	b.n	3c06 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    3bd2:	230f      	movs	r3, #15
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	781a      	ldrb	r2, [r3, #0]
    3bd8:	4914      	ldr	r1, [pc, #80]	; (3c2c <_get_i2cm_index+0x7c>)
    3bda:	0013      	movs	r3, r2
    3bdc:	005b      	lsls	r3, r3, #1
    3bde:	189b      	adds	r3, r3, r2
    3be0:	00db      	lsls	r3, r3, #3
    3be2:	5c5b      	ldrb	r3, [r3, r1]
    3be4:	220e      	movs	r2, #14
    3be6:	18ba      	adds	r2, r7, r2
    3be8:	7812      	ldrb	r2, [r2, #0]
    3bea:	429a      	cmp	r2, r3
    3bec:	d104      	bne.n	3bf8 <_get_i2cm_index+0x48>
			return i;
    3bee:	230f      	movs	r3, #15
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	781b      	ldrb	r3, [r3, #0]
    3bf4:	b25b      	sxtb	r3, r3
    3bf6:	e013      	b.n	3c20 <_get_i2cm_index+0x70>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3bf8:	230f      	movs	r3, #15
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	781a      	ldrb	r2, [r3, #0]
    3bfe:	230f      	movs	r3, #15
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	3201      	adds	r2, #1
    3c04:	701a      	strb	r2, [r3, #0]
    3c06:	230f      	movs	r3, #15
    3c08:	18fb      	adds	r3, r7, r3
    3c0a:	781b      	ldrb	r3, [r3, #0]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d0e0      	beq.n	3bd2 <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    3c10:	4a07      	ldr	r2, [pc, #28]	; (3c30 <_get_i2cm_index+0x80>)
    3c12:	4b08      	ldr	r3, [pc, #32]	; (3c34 <_get_i2cm_index+0x84>)
    3c14:	0019      	movs	r1, r3
    3c16:	2000      	movs	r0, #0
    3c18:	4b07      	ldr	r3, [pc, #28]	; (3c38 <_get_i2cm_index+0x88>)
    3c1a:	4798      	blx	r3
	return -1;
    3c1c:	2301      	movs	r3, #1
    3c1e:	425b      	negs	r3, r3
}
    3c20:	0018      	movs	r0, r3
    3c22:	46bd      	mov	sp, r7
    3c24:	b005      	add	sp, #20
    3c26:	bd90      	pop	{r4, r7, pc}
    3c28:	000037a9 	.word	0x000037a9
    3c2c:	20000014 	.word	0x20000014
    3c30:	000003c9 	.word	0x000003c9
    3c34:	00007208 	.word	0x00007208
    3c38:	0000209b 	.word	0x0000209b

00003c3c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b082      	sub	sp, #8
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	2103      	movs	r1, #3
    3c48:	0018      	movs	r0, r3
    3c4a:	4b03      	ldr	r3, [pc, #12]	; (3c58 <_sercom_i2c_send_stop+0x1c>)
    3c4c:	4798      	blx	r3
}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	46bd      	mov	sp, r7
    3c52:	b002      	add	sp, #8
    3c54:	bd80      	pop	{r7, pc}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	0000333d 	.word	0x0000333d

00003c5c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    3c5c:	b590      	push	{r4, r7, lr}
    3c5e:	b087      	sub	sp, #28
    3c60:	af00      	add	r7, sp, #0
    3c62:	60f8      	str	r0, [r7, #12]
    3c64:	60b9      	str	r1, [r7, #8]
    3c66:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    3c68:	68fb      	ldr	r3, [r7, #12]
    3c6a:	0018      	movs	r0, r3
    3c6c:	4b87      	ldr	r3, [pc, #540]	; (3e8c <_sercom_i2c_sync_analyse_flags+0x230>)
    3c6e:	4798      	blx	r3
    3c70:	0003      	movs	r3, r0
    3c72:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    3c74:	2312      	movs	r3, #18
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	68fb      	ldr	r3, [r7, #12]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b84      	ldr	r3, [pc, #528]	; (3e90 <_sercom_i2c_sync_analyse_flags+0x234>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    3c84:	68bb      	ldr	r3, [r7, #8]
    3c86:	2201      	movs	r2, #1
    3c88:	4013      	ands	r3, r2
    3c8a:	d100      	bne.n	3c8e <_sercom_i2c_sync_analyse_flags+0x32>
    3c8c:	e0a3      	b.n	3dd6 <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    3c8e:	2312      	movs	r3, #18
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	881b      	ldrh	r3, [r3, #0]
    3c94:	2202      	movs	r2, #2
    3c96:	4013      	ands	r3, r2
    3c98:	d020      	beq.n	3cdc <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    3c9a:	68fb      	ldr	r3, [r7, #12]
    3c9c:	0018      	movs	r0, r3
    3c9e:	4b7d      	ldr	r3, [pc, #500]	; (3e94 <_sercom_i2c_sync_analyse_flags+0x238>)
    3ca0:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	885b      	ldrh	r3, [r3, #2]
    3ca6:	b29b      	uxth	r3, r3
    3ca8:	2280      	movs	r2, #128	; 0x80
    3caa:	0152      	lsls	r2, r2, #5
    3cac:	4313      	orrs	r3, r2
    3cae:	b29a      	uxth	r2, r3
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	885b      	ldrh	r3, [r3, #2]
    3cb8:	b29b      	uxth	r3, r3
    3cba:	4a77      	ldr	r2, [pc, #476]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3cbc:	4013      	ands	r3, r2
    3cbe:	b29a      	uxth	r2, r3
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3cc4:	2312      	movs	r3, #18
    3cc6:	18fb      	adds	r3, r7, r3
    3cc8:	881b      	ldrh	r3, [r3, #0]
    3cca:	2201      	movs	r2, #1
    3ccc:	4013      	ands	r3, r2
    3cce:	d002      	beq.n	3cd6 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    3cd0:	2305      	movs	r3, #5
    3cd2:	425b      	negs	r3, r3
    3cd4:	e0d6      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    3cd6:	2304      	movs	r3, #4
    3cd8:	425b      	negs	r3, r3
    3cda:	e0d3      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3cdc:	2312      	movs	r3, #18
    3cde:	18fb      	adds	r3, r7, r3
    3ce0:	881b      	ldrh	r3, [r3, #0]
    3ce2:	2204      	movs	r2, #4
    3ce4:	4013      	ands	r3, r2
    3ce6:	d021      	beq.n	3d2c <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	685b      	ldr	r3, [r3, #4]
    3cec:	2b00      	cmp	r3, #0
    3cee:	dd08      	ble.n	3d02 <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	885b      	ldrh	r3, [r3, #2]
    3cf4:	b29b      	uxth	r3, r3
    3cf6:	2280      	movs	r2, #128	; 0x80
    3cf8:	0152      	lsls	r2, r2, #5
    3cfa:	4313      	orrs	r3, r2
    3cfc:	b29a      	uxth	r2, r3
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	885b      	ldrh	r3, [r3, #2]
    3d06:	b29b      	uxth	r3, r3
    3d08:	b21b      	sxth	r3, r3
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	da03      	bge.n	3d16 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    3d0e:	68fb      	ldr	r3, [r7, #12]
    3d10:	0018      	movs	r0, r3
    3d12:	4b62      	ldr	r3, [pc, #392]	; (3e9c <_sercom_i2c_sync_analyse_flags+0x240>)
    3d14:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	885b      	ldrh	r3, [r3, #2]
    3d1a:	b29b      	uxth	r3, r3
    3d1c:	4a5e      	ldr	r2, [pc, #376]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3d1e:	4013      	ands	r3, r2
    3d20:	b29a      	uxth	r2, r3
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    3d26:	2302      	movs	r3, #2
    3d28:	425b      	negs	r3, r3
    3d2a:	e0ab      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	885b      	ldrh	r3, [r3, #2]
    3d30:	b29b      	uxth	r3, r3
    3d32:	001a      	movs	r2, r3
    3d34:	2380      	movs	r3, #128	; 0x80
    3d36:	00db      	lsls	r3, r3, #3
    3d38:	4013      	ands	r3, r2
    3d3a:	d021      	beq.n	3d80 <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3d3c:	687b      	ldr	r3, [r7, #4]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	121b      	asrs	r3, r3, #8
    3d42:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3d44:	001a      	movs	r2, r3
    3d46:	2306      	movs	r3, #6
    3d48:	401a      	ands	r2, r3
    3d4a:	0014      	movs	r4, r2
    3d4c:	68fb      	ldr	r3, [r7, #12]
    3d4e:	0018      	movs	r0, r3
    3d50:	4b53      	ldr	r3, [pc, #332]	; (3ea0 <_sercom_i2c_sync_analyse_flags+0x244>)
    3d52:	4798      	blx	r3
    3d54:	0002      	movs	r2, r0
    3d56:	2380      	movs	r3, #128	; 0x80
    3d58:	01db      	lsls	r3, r3, #7
    3d5a:	4013      	ands	r3, r2
    3d5c:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    3d5e:	22f1      	movs	r2, #241	; 0xf1
    3d60:	431a      	orrs	r2, r3
    3d62:	68fb      	ldr	r3, [r7, #12]
    3d64:	0011      	movs	r1, r2
    3d66:	0018      	movs	r0, r3
    3d68:	4b4e      	ldr	r3, [pc, #312]	; (3ea4 <_sercom_i2c_sync_analyse_flags+0x248>)
    3d6a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	885b      	ldrh	r3, [r3, #2]
    3d70:	b29b      	uxth	r3, r3
    3d72:	4a4d      	ldr	r2, [pc, #308]	; (3ea8 <_sercom_i2c_sync_analyse_flags+0x24c>)
    3d74:	4013      	ands	r3, r2
    3d76:	b29a      	uxth	r2, r3
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    3d7c:	2300      	movs	r3, #0
    3d7e:	e081      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	685b      	ldr	r3, [r3, #4]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d112      	bne.n	3dae <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	885b      	ldrh	r3, [r3, #2]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	b21b      	sxth	r3, r3
    3d90:	2b00      	cmp	r3, #0
    3d92:	da03      	bge.n	3d9c <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    3d94:	68fb      	ldr	r3, [r7, #12]
    3d96:	0018      	movs	r0, r3
    3d98:	4b40      	ldr	r3, [pc, #256]	; (3e9c <_sercom_i2c_sync_analyse_flags+0x240>)
    3d9a:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	885b      	ldrh	r3, [r3, #2]
    3da0:	b29b      	uxth	r3, r3
    3da2:	4a3d      	ldr	r2, [pc, #244]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3da4:	4013      	ands	r3, r2
    3da6:	b29a      	uxth	r2, r3
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	805a      	strh	r2, [r3, #2]
    3dac:	e011      	b.n	3dd2 <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	689b      	ldr	r3, [r3, #8]
    3db2:	781a      	ldrb	r2, [r3, #0]
    3db4:	68fb      	ldr	r3, [r7, #12]
    3db6:	0011      	movs	r1, r2
    3db8:	0018      	movs	r0, r3
    3dba:	4b3c      	ldr	r3, [pc, #240]	; (3eac <_sercom_i2c_sync_analyse_flags+0x250>)
    3dbc:	4798      	blx	r3
				msg->buffer++;
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	689b      	ldr	r3, [r3, #8]
    3dc2:	1c5a      	adds	r2, r3, #1
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	609a      	str	r2, [r3, #8]
				msg->len--;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	685b      	ldr	r3, [r3, #4]
    3dcc:	1e5a      	subs	r2, r3, #1
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    3dd2:	2300      	movs	r3, #0
    3dd4:	e056      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    3dd6:	68bb      	ldr	r3, [r7, #8]
    3dd8:	2202      	movs	r2, #2
    3dda:	4013      	ands	r3, r2
    3ddc:	d051      	beq.n	3e82 <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	685b      	ldr	r3, [r3, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d046      	beq.n	3e74 <_sercom_i2c_sync_analyse_flags+0x218>
    3de6:	2312      	movs	r3, #18
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	881b      	ldrh	r3, [r3, #0]
    3dec:	2204      	movs	r2, #4
    3dee:	4013      	ands	r3, r2
    3df0:	d140      	bne.n	3e74 <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	685b      	ldr	r3, [r3, #4]
    3df6:	1e5a      	subs	r2, r3, #1
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	685b      	ldr	r3, [r3, #4]
    3e00:	2b00      	cmp	r3, #0
    3e02:	d102      	bne.n	3e0a <_sercom_i2c_sync_analyse_flags+0x1ae>
    3e04:	697b      	ldr	r3, [r7, #20]
    3e06:	2b00      	cmp	r3, #0
    3e08:	d006      	beq.n	3e18 <_sercom_i2c_sync_analyse_flags+0x1bc>
    3e0a:	687b      	ldr	r3, [r7, #4]
    3e0c:	685b      	ldr	r3, [r3, #4]
    3e0e:	2b01      	cmp	r3, #1
    3e10:	d106      	bne.n	3e20 <_sercom_i2c_sync_analyse_flags+0x1c4>
    3e12:	697b      	ldr	r3, [r7, #20]
    3e14:	2b00      	cmp	r3, #0
    3e16:	d003      	beq.n	3e20 <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    3e18:	68fb      	ldr	r3, [r7, #12]
    3e1a:	0018      	movs	r0, r3
    3e1c:	4b24      	ldr	r3, [pc, #144]	; (3eb0 <_sercom_i2c_sync_analyse_flags+0x254>)
    3e1e:	4798      	blx	r3
			}

			if (msg->len == 0) {
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	685b      	ldr	r3, [r3, #4]
    3e24:	2b00      	cmp	r3, #0
    3e26:	d115      	bne.n	3e54 <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	885b      	ldrh	r3, [r3, #2]
    3e2c:	b29b      	uxth	r3, r3
    3e2e:	b21b      	sxth	r3, r3
    3e30:	2b00      	cmp	r3, #0
    3e32:	da07      	bge.n	3e44 <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    3e34:	68fb      	ldr	r3, [r7, #12]
    3e36:	0018      	movs	r0, r3
    3e38:	4b1e      	ldr	r3, [pc, #120]	; (3eb4 <_sercom_i2c_sync_analyse_flags+0x258>)
    3e3a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    3e3c:	68fb      	ldr	r3, [r7, #12]
    3e3e:	0018      	movs	r0, r3
    3e40:	4b16      	ldr	r3, [pc, #88]	; (3e9c <_sercom_i2c_sync_analyse_flags+0x240>)
    3e42:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	885b      	ldrh	r3, [r3, #2]
    3e48:	b29b      	uxth	r3, r3
    3e4a:	4a13      	ldr	r2, [pc, #76]	; (3e98 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3e4c:	4013      	ands	r3, r2
    3e4e:	b29a      	uxth	r2, r3
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	689c      	ldr	r4, [r3, #8]
    3e58:	1c62      	adds	r2, r4, #1
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	609a      	str	r2, [r3, #8]
    3e5e:	68fb      	ldr	r3, [r7, #12]
    3e60:	0018      	movs	r0, r3
    3e62:	4b15      	ldr	r3, [pc, #84]	; (3eb8 <_sercom_i2c_sync_analyse_flags+0x25c>)
    3e64:	4798      	blx	r3
    3e66:	0003      	movs	r3, r0
    3e68:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	0018      	movs	r0, r3
    3e6e:	4b13      	ldr	r3, [pc, #76]	; (3ebc <_sercom_i2c_sync_analyse_flags+0x260>)
    3e70:	4798      	blx	r3
    3e72:	e006      	b.n	3e82 <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    3e74:	68fb      	ldr	r3, [r7, #12]
    3e76:	0018      	movs	r0, r3
    3e78:	4b10      	ldr	r3, [pc, #64]	; (3ebc <_sercom_i2c_sync_analyse_flags+0x260>)
    3e7a:	4798      	blx	r3
			return I2C_NACK;
    3e7c:	2302      	movs	r3, #2
    3e7e:	425b      	negs	r3, r3
    3e80:	e000      	b.n	3e84 <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    3e82:	2300      	movs	r3, #0
}
    3e84:	0018      	movs	r0, r3
    3e86:	46bd      	mov	sp, r7
    3e88:	b007      	add	sp, #28
    3e8a:	bd90      	pop	{r4, r7, pc}
    3e8c:	000030fd 	.word	0x000030fd
    3e90:	00003649 	.word	0x00003649
    3e94:	00002f27 	.word	0x00002f27
    3e98:	fffffeff 	.word	0xfffffeff
    3e9c:	00003c3d 	.word	0x00003c3d
    3ea0:	000034a1 	.word	0x000034a1
    3ea4:	00003479 	.word	0x00003479
    3ea8:	fffffbff 	.word	0xfffffbff
    3eac:	000034dd 	.word	0x000034dd
    3eb0:	000032e1 	.word	0x000032e1
    3eb4:	000032b1 	.word	0x000032b1
    3eb8:	0000350d 	.word	0x0000350d
    3ebc:	00002f3d 	.word	0x00002f3d

00003ec0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b082      	sub	sp, #8
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	0018      	movs	r0, r3
    3ecc:	4b04      	ldr	r3, [pc, #16]	; (3ee0 <_sercom_get_irq_num+0x20>)
    3ece:	4798      	blx	r3
    3ed0:	0003      	movs	r3, r0
    3ed2:	3308      	adds	r3, #8
    3ed4:	b2db      	uxtb	r3, r3
}
    3ed6:	0018      	movs	r0, r3
    3ed8:	46bd      	mov	sp, r7
    3eda:	b002      	add	sp, #8
    3edc:	bd80      	pop	{r7, pc}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	000037a9 	.word	0x000037a9

00003ee4 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b082      	sub	sp, #8
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    3eec:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	1e5a      	subs	r2, r3, #1
    3ef2:	4193      	sbcs	r3, r2
    3ef4:	b2d8      	uxtb	r0, r3
    3ef6:	23a7      	movs	r3, #167	; 0xa7
    3ef8:	00da      	lsls	r2, r3, #3
    3efa:	4b09      	ldr	r3, [pc, #36]	; (3f20 <_i2c_m_sync_init+0x3c>)
    3efc:	0019      	movs	r1, r3
    3efe:	4b09      	ldr	r3, [pc, #36]	; (3f24 <_i2c_m_sync_init+0x40>)
    3f00:	4798      	blx	r3

	i2c_dev->hw = hw;
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	683a      	ldr	r2, [r7, #0]
    3f06:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	683a      	ldr	r2, [r7, #0]
    3f0c:	0011      	movs	r1, r2
    3f0e:	0018      	movs	r0, r3
    3f10:	4b05      	ldr	r3, [pc, #20]	; (3f28 <_i2c_m_sync_init+0x44>)
    3f12:	4798      	blx	r3
    3f14:	0003      	movs	r3, r0
}
    3f16:	0018      	movs	r0, r3
    3f18:	46bd      	mov	sp, r7
    3f1a:	b002      	add	sp, #8
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00007208 	.word	0x00007208
    3f24:	0000209b 	.word	0x0000209b
    3f28:	000042d5 	.word	0x000042d5

00003f2c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	1e5a      	subs	r2, r3, #1
    3f38:	4193      	sbcs	r3, r2
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	4a07      	ldr	r2, [pc, #28]	; (3f5c <_i2c_m_sync_enable+0x30>)
    3f3e:	4908      	ldr	r1, [pc, #32]	; (3f60 <_i2c_m_sync_enable+0x34>)
    3f40:	0018      	movs	r0, r3
    3f42:	4b08      	ldr	r3, [pc, #32]	; (3f64 <_i2c_m_sync_enable+0x38>)
    3f44:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	691b      	ldr	r3, [r3, #16]
    3f4a:	0018      	movs	r0, r3
    3f4c:	4b06      	ldr	r3, [pc, #24]	; (3f68 <_i2c_m_sync_enable+0x3c>)
    3f4e:	4798      	blx	r3
    3f50:	0003      	movs	r3, r0
}
    3f52:	0018      	movs	r0, r3
    3f54:	46bd      	mov	sp, r7
    3f56:	b002      	add	sp, #8
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00000555 	.word	0x00000555
    3f60:	00007208 	.word	0x00007208
    3f64:	0000209b 	.word	0x0000209b
    3f68:	00004245 	.word	0x00004245

00003f6c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b084      	sub	sp, #16
    3f70:	af00      	add	r7, sp, #0
    3f72:	6078      	str	r0, [r7, #4]
    3f74:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    3f76:	4b12      	ldr	r3, [pc, #72]	; (3fc0 <_sercom_i2c_sync_wait_bus+0x54>)
    3f78:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	691b      	ldr	r3, [r3, #16]
    3f7e:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    3f80:	68bb      	ldr	r3, [r7, #8]
    3f82:	0018      	movs	r0, r3
    3f84:	4b0f      	ldr	r3, [pc, #60]	; (3fc4 <_sercom_i2c_sync_wait_bus+0x58>)
    3f86:	4798      	blx	r3
    3f88:	0003      	movs	r3, r0
    3f8a:	001a      	movs	r2, r3
    3f8c:	683b      	ldr	r3, [r7, #0]
    3f8e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    3f90:	68fb      	ldr	r3, [r7, #12]
    3f92:	1e5a      	subs	r2, r3, #1
    3f94:	60fa      	str	r2, [r7, #12]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d102      	bne.n	3fa0 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    3f9a:	2305      	movs	r3, #5
    3f9c:	425b      	negs	r3, r3
    3f9e:	e00a      	b.n	3fb6 <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    3fa0:	683b      	ldr	r3, [r7, #0]
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	2201      	movs	r2, #1
    3fa6:	4013      	ands	r3, r2
    3fa8:	d104      	bne.n	3fb4 <_sercom_i2c_sync_wait_bus+0x48>
    3faa:	683b      	ldr	r3, [r7, #0]
    3fac:	681b      	ldr	r3, [r3, #0]
    3fae:	2202      	movs	r2, #2
    3fb0:	4013      	ands	r3, r2
    3fb2:	d0e5      	beq.n	3f80 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    3fb4:	2300      	movs	r3, #0
}
    3fb6:	0018      	movs	r0, r3
    3fb8:	46bd      	mov	sp, r7
    3fba:	b004      	add	sp, #16
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	0000ffff 	.word	0x0000ffff
    3fc4:	00002f53 	.word	0x00002f53

00003fc8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    3fc8:	b590      	push	{r4, r7, lr}
    3fca:	b087      	sub	sp, #28
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	691b      	ldr	r3, [r3, #16]
    3fd4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    3fda:	697b      	ldr	r3, [r7, #20]
    3fdc:	0018      	movs	r0, r3
    3fde:	4b3f      	ldr	r3, [pc, #252]	; (40dc <_sercom_i2c_sync_send_address+0x114>)
    3fe0:	4798      	blx	r3
    3fe2:	0003      	movs	r3, r0
    3fe4:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	1e5a      	subs	r2, r3, #1
    3fea:	4193      	sbcs	r3, r2
    3fec:	b2db      	uxtb	r3, r3
    3fee:	4a3c      	ldr	r2, [pc, #240]	; (40e0 <_sercom_i2c_sync_send_address+0x118>)
    3ff0:	493c      	ldr	r1, [pc, #240]	; (40e4 <_sercom_i2c_sync_send_address+0x11c>)
    3ff2:	0018      	movs	r0, r3
    3ff4:	4b3c      	ldr	r3, [pc, #240]	; (40e8 <_sercom_i2c_sync_send_address+0x120>)
    3ff6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    3ff8:	693b      	ldr	r3, [r7, #16]
    3ffa:	685b      	ldr	r3, [r3, #4]
    3ffc:	2b01      	cmp	r3, #1
    3ffe:	d107      	bne.n	4010 <_sercom_i2c_sync_send_address+0x48>
    4000:	68fb      	ldr	r3, [r7, #12]
    4002:	2b00      	cmp	r3, #0
    4004:	d004      	beq.n	4010 <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    4006:	697b      	ldr	r3, [r7, #20]
    4008:	0018      	movs	r0, r3
    400a:	4b38      	ldr	r3, [pc, #224]	; (40ec <_sercom_i2c_sync_send_address+0x124>)
    400c:	4798      	blx	r3
    400e:	e003      	b.n	4018 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    4010:	697b      	ldr	r3, [r7, #20]
    4012:	0018      	movs	r0, r3
    4014:	4b36      	ldr	r3, [pc, #216]	; (40f0 <_sercom_i2c_sync_send_address+0x128>)
    4016:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    4018:	693b      	ldr	r3, [r7, #16]
    401a:	881b      	ldrh	r3, [r3, #0]
    401c:	001a      	movs	r2, r3
    401e:	2380      	movs	r3, #128	; 0x80
    4020:	00db      	lsls	r3, r3, #3
    4022:	4013      	ands	r3, r2
    4024:	d028      	beq.n	4078 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    4026:	693b      	ldr	r3, [r7, #16]
    4028:	885b      	ldrh	r3, [r3, #2]
    402a:	b29b      	uxth	r3, r3
    402c:	001a      	movs	r2, r3
    402e:	2301      	movs	r3, #1
    4030:	4013      	ands	r3, r2
    4032:	d008      	beq.n	4046 <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    4034:	693b      	ldr	r3, [r7, #16]
    4036:	885b      	ldrh	r3, [r3, #2]
    4038:	b29b      	uxth	r3, r3
    403a:	2280      	movs	r2, #128	; 0x80
    403c:	00d2      	lsls	r2, r2, #3
    403e:	4313      	orrs	r3, r2
    4040:	b29a      	uxth	r2, r3
    4042:	693b      	ldr	r3, [r7, #16]
    4044:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    4046:	693b      	ldr	r3, [r7, #16]
    4048:	881b      	ldrh	r3, [r3, #0]
    404a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    404c:	001a      	movs	r2, r3
    404e:	4b29      	ldr	r3, [pc, #164]	; (40f4 <_sercom_i2c_sync_send_address+0x12c>)
    4050:	401a      	ands	r2, r3
    4052:	0014      	movs	r4, r2
    4054:	697b      	ldr	r3, [r7, #20]
    4056:	0018      	movs	r0, r3
    4058:	4b27      	ldr	r3, [pc, #156]	; (40f8 <_sercom_i2c_sync_send_address+0x130>)
    405a:	4798      	blx	r3
    405c:	0002      	movs	r2, r0
    405e:	2380      	movs	r3, #128	; 0x80
    4060:	01db      	lsls	r3, r3, #7
    4062:	4013      	ands	r3, r2
    4064:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    4066:	2280      	movs	r2, #128	; 0x80
    4068:	0212      	lsls	r2, r2, #8
    406a:	431a      	orrs	r2, r3
    406c:	697b      	ldr	r3, [r7, #20]
    406e:	0011      	movs	r1, r2
    4070:	0018      	movs	r0, r3
    4072:	4b22      	ldr	r3, [pc, #136]	; (40fc <_sercom_i2c_sync_send_address+0x134>)
    4074:	4798      	blx	r3
    4076:	e01e      	b.n	40b6 <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    4078:	693b      	ldr	r3, [r7, #16]
    407a:	881b      	ldrh	r3, [r3, #0]
    407c:	005b      	lsls	r3, r3, #1
    407e:	22ff      	movs	r2, #255	; 0xff
    4080:	4013      	ands	r3, r2
    4082:	693a      	ldr	r2, [r7, #16]
    4084:	8852      	ldrh	r2, [r2, #2]
    4086:	b292      	uxth	r2, r2
    4088:	0011      	movs	r1, r2
    408a:	2201      	movs	r2, #1
    408c:	400a      	ands	r2, r1
    408e:	1e51      	subs	r1, r2, #1
    4090:	418a      	sbcs	r2, r1
    4092:	b2d2      	uxtb	r2, r2
    4094:	4313      	orrs	r3, r2
    4096:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4098:	697b      	ldr	r3, [r7, #20]
    409a:	0018      	movs	r0, r3
    409c:	4b16      	ldr	r3, [pc, #88]	; (40f8 <_sercom_i2c_sync_send_address+0x130>)
    409e:	4798      	blx	r3
    40a0:	0002      	movs	r2, r0
    40a2:	2380      	movs	r3, #128	; 0x80
    40a4:	01db      	lsls	r3, r3, #7
    40a6:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    40a8:	0022      	movs	r2, r4
    40aa:	431a      	orrs	r2, r3
    40ac:	697b      	ldr	r3, [r7, #20]
    40ae:	0011      	movs	r1, r2
    40b0:	0018      	movs	r0, r3
    40b2:	4b12      	ldr	r3, [pc, #72]	; (40fc <_sercom_i2c_sync_send_address+0x134>)
    40b4:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    40b6:	2308      	movs	r3, #8
    40b8:	18fa      	adds	r2, r7, r3
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	0011      	movs	r1, r2
    40be:	0018      	movs	r0, r3
    40c0:	4b0f      	ldr	r3, [pc, #60]	; (4100 <_sercom_i2c_sync_send_address+0x138>)
    40c2:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    40c4:	68b9      	ldr	r1, [r7, #8]
    40c6:	693a      	ldr	r2, [r7, #16]
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	0018      	movs	r0, r3
    40cc:	4b0d      	ldr	r3, [pc, #52]	; (4104 <_sercom_i2c_sync_send_address+0x13c>)
    40ce:	4798      	blx	r3
    40d0:	0003      	movs	r3, r0
}
    40d2:	0018      	movs	r0, r3
    40d4:	46bd      	mov	sp, r7
    40d6:	b007      	add	sp, #28
    40d8:	bd90      	pop	{r4, r7, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	000030fd 	.word	0x000030fd
    40e0:	000005c5 	.word	0x000005c5
    40e4:	00007208 	.word	0x00007208
    40e8:	0000209b 	.word	0x0000209b
    40ec:	000032e1 	.word	0x000032e1
    40f0:	0000330d 	.word	0x0000330d
    40f4:	000007fe 	.word	0x000007fe
    40f8:	000034a1 	.word	0x000034a1
    40fc:	00003479 	.word	0x00003479
    4100:	00003f6d 	.word	0x00003f6d
    4104:	00003c5d 	.word	0x00003c5d

00004108 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    4108:	b590      	push	{r4, r7, lr}
    410a:	b087      	sub	sp, #28
    410c:	af00      	add	r7, sp, #0
    410e:	6078      	str	r0, [r7, #4]
    4110:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	691b      	ldr	r3, [r3, #16]
    4116:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	1e5a      	subs	r2, r3, #1
    411c:	4193      	sbcs	r3, r2
    411e:	b2d8      	uxtb	r0, r3
    4120:	23be      	movs	r3, #190	; 0xbe
    4122:	00da      	lsls	r2, r3, #3
    4124:	4b3d      	ldr	r3, [pc, #244]	; (421c <_i2c_m_sync_transfer+0x114>)
    4126:	0019      	movs	r1, r3
    4128:	4b3d      	ldr	r3, [pc, #244]	; (4220 <_i2c_m_sync_transfer+0x118>)
    412a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	691b      	ldr	r3, [r3, #16]
    4130:	1e5a      	subs	r2, r3, #1
    4132:	4193      	sbcs	r3, r2
    4134:	b2db      	uxtb	r3, r3
    4136:	4a3b      	ldr	r2, [pc, #236]	; (4224 <_i2c_m_sync_transfer+0x11c>)
    4138:	4938      	ldr	r1, [pc, #224]	; (421c <_i2c_m_sync_transfer+0x114>)
    413a:	0018      	movs	r0, r3
    413c:	4b38      	ldr	r3, [pc, #224]	; (4220 <_i2c_m_sync_transfer+0x118>)
    413e:	4798      	blx	r3
	ASSERT(msg);
    4140:	683b      	ldr	r3, [r7, #0]
    4142:	1e5a      	subs	r2, r3, #1
    4144:	4193      	sbcs	r3, r2
    4146:	b2db      	uxtb	r3, r3
    4148:	4a37      	ldr	r2, [pc, #220]	; (4228 <_i2c_m_sync_transfer+0x120>)
    414a:	4934      	ldr	r1, [pc, #208]	; (421c <_i2c_m_sync_transfer+0x114>)
    414c:	0018      	movs	r0, r3
    414e:	4b34      	ldr	r3, [pc, #208]	; (4220 <_i2c_m_sync_transfer+0x118>)
    4150:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	885b      	ldrh	r3, [r3, #2]
    4156:	b29b      	uxth	r3, r3
    4158:	001a      	movs	r2, r3
    415a:	2380      	movs	r3, #128	; 0x80
    415c:	005b      	lsls	r3, r3, #1
    415e:	4013      	ands	r3, r2
    4160:	d002      	beq.n	4168 <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    4162:	2306      	movs	r3, #6
    4164:	425b      	negs	r3, r3
    4166:	e054      	b.n	4212 <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	885b      	ldrh	r3, [r3, #2]
    416c:	b29b      	uxth	r3, r3
    416e:	2280      	movs	r2, #128	; 0x80
    4170:	0052      	lsls	r2, r2, #1
    4172:	4313      	orrs	r3, r2
    4174:	b29a      	uxth	r2, r3
    4176:	683b      	ldr	r3, [r7, #0]
    4178:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	683a      	ldr	r2, [r7, #0]
    417e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4180:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    4182:	693b      	ldr	r3, [r7, #16]
    4184:	0018      	movs	r0, r3
    4186:	4b29      	ldr	r3, [pc, #164]	; (422c <_i2c_m_sync_transfer+0x124>)
    4188:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	0018      	movs	r0, r3
    418e:	4b28      	ldr	r3, [pc, #160]	; (4230 <_i2c_m_sync_transfer+0x128>)
    4190:	4798      	blx	r3
    4192:	0003      	movs	r3, r0
    4194:	617b      	str	r3, [r7, #20]

	if (ret) {
    4196:	697b      	ldr	r3, [r7, #20]
    4198:	2b00      	cmp	r3, #0
    419a:	d031      	beq.n	4200 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	885b      	ldrh	r3, [r3, #2]
    41a0:	b29b      	uxth	r3, r3
    41a2:	4a24      	ldr	r2, [pc, #144]	; (4234 <_i2c_m_sync_transfer+0x12c>)
    41a4:	4013      	ands	r3, r2
    41a6:	b29a      	uxth	r2, r3
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	805a      	strh	r2, [r3, #2]

		return ret;
    41ac:	697b      	ldr	r3, [r7, #20]
    41ae:	e030      	b.n	4212 <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    41b0:	230c      	movs	r3, #12
    41b2:	18fa      	adds	r2, r7, r3
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	0011      	movs	r1, r2
    41b8:	0018      	movs	r0, r3
    41ba:	4b1f      	ldr	r3, [pc, #124]	; (4238 <_i2c_m_sync_transfer+0x130>)
    41bc:	4798      	blx	r3
    41be:	0003      	movs	r3, r0
    41c0:	617b      	str	r3, [r7, #20]

		if (ret) {
    41c2:	697b      	ldr	r3, [r7, #20]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d013      	beq.n	41f0 <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    41c8:	683b      	ldr	r3, [r7, #0]
    41ca:	885b      	ldrh	r3, [r3, #2]
    41cc:	b29b      	uxth	r3, r3
    41ce:	b21b      	sxth	r3, r3
    41d0:	2b00      	cmp	r3, #0
    41d2:	da03      	bge.n	41dc <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    41d4:	693b      	ldr	r3, [r7, #16]
    41d6:	0018      	movs	r0, r3
    41d8:	4b18      	ldr	r3, [pc, #96]	; (423c <_i2c_m_sync_transfer+0x134>)
    41da:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	885b      	ldrh	r3, [r3, #2]
    41e0:	b29b      	uxth	r3, r3
    41e2:	4a14      	ldr	r2, [pc, #80]	; (4234 <_i2c_m_sync_transfer+0x12c>)
    41e4:	4013      	ands	r3, r2
    41e6:	b29a      	uxth	r2, r3
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	805a      	strh	r2, [r3, #2]

			return ret;
    41ec:	697b      	ldr	r3, [r7, #20]
    41ee:	e010      	b.n	4212 <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    41f0:	68f9      	ldr	r1, [r7, #12]
    41f2:	687a      	ldr	r2, [r7, #4]
    41f4:	693b      	ldr	r3, [r7, #16]
    41f6:	0018      	movs	r0, r3
    41f8:	4b11      	ldr	r3, [pc, #68]	; (4240 <_i2c_m_sync_transfer+0x138>)
    41fa:	4798      	blx	r3
    41fc:	0003      	movs	r3, r0
    41fe:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	885b      	ldrh	r3, [r3, #2]
    4204:	b29b      	uxth	r3, r3
    4206:	001a      	movs	r2, r3
    4208:	2380      	movs	r3, #128	; 0x80
    420a:	005b      	lsls	r3, r3, #1
    420c:	4013      	ands	r3, r2
    420e:	d1cf      	bne.n	41b0 <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    4210:	697b      	ldr	r3, [r7, #20]
}
    4212:	0018      	movs	r0, r3
    4214:	46bd      	mov	sp, r7
    4216:	b007      	add	sp, #28
    4218:	bd90      	pop	{r4, r7, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	00007208 	.word	0x00007208
    4220:	0000209b 	.word	0x0000209b
    4224:	000005f1 	.word	0x000005f1
    4228:	000005f2 	.word	0x000005f2
    422c:	00003285 	.word	0x00003285
    4230:	00003fc9 	.word	0x00003fc9
    4234:	fffffeff 	.word	0xfffffeff
    4238:	00003f6d 	.word	0x00003f6d
    423c:	00003c3d 	.word	0x00003c3d
    4240:	00003c5d 	.word	0x00003c5d

00004244 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    4244:	b580      	push	{r7, lr}
    4246:	b084      	sub	sp, #16
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    424c:	4b1a      	ldr	r3, [pc, #104]	; (42b8 <_i2c_m_enable_implementation+0x74>)
    424e:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    4250:	2304      	movs	r3, #4
    4252:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	1e5a      	subs	r2, r3, #1
    4258:	4193      	sbcs	r3, r2
    425a:	b2db      	uxtb	r3, r3
    425c:	4a17      	ldr	r2, [pc, #92]	; (42bc <_i2c_m_enable_implementation+0x78>)
    425e:	4918      	ldr	r1, [pc, #96]	; (42c0 <_i2c_m_enable_implementation+0x7c>)
    4260:	0018      	movs	r0, r3
    4262:	4b18      	ldr	r3, [pc, #96]	; (42c4 <_i2c_m_enable_implementation+0x80>)
    4264:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	0018      	movs	r0, r3
    426a:	4b17      	ldr	r3, [pc, #92]	; (42c8 <_i2c_m_enable_implementation+0x84>)
    426c:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    426e:	e016      	b.n	429e <_i2c_m_enable_implementation+0x5a>
		timeout--;
    4270:	68fb      	ldr	r3, [r7, #12]
    4272:	3b01      	subs	r3, #1
    4274:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    4276:	68fb      	ldr	r3, [r7, #12]
    4278:	2b00      	cmp	r3, #0
    427a:	dc10      	bgt.n	429e <_i2c_m_enable_implementation+0x5a>
			if (--timeout_attempt)
    427c:	68bb      	ldr	r3, [r7, #8]
    427e:	3b01      	subs	r3, #1
    4280:	60bb      	str	r3, [r7, #8]
    4282:	68bb      	ldr	r3, [r7, #8]
    4284:	2b00      	cmp	r3, #0
    4286:	d007      	beq.n	4298 <_i2c_m_enable_implementation+0x54>
				timeout = 65535;
    4288:	4b0b      	ldr	r3, [pc, #44]	; (42b8 <_i2c_m_enable_implementation+0x74>)
    428a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	2110      	movs	r1, #16
    4290:	0018      	movs	r0, r3
    4292:	4b0e      	ldr	r3, [pc, #56]	; (42cc <_i2c_m_enable_implementation+0x88>)
    4294:	4798      	blx	r3
    4296:	e002      	b.n	429e <_i2c_m_enable_implementation+0x5a>
				return I2C_ERR_BUSY;
    4298:	2306      	movs	r3, #6
    429a:	425b      	negs	r3, r3
    429c:	e007      	b.n	42ae <_i2c_m_enable_implementation+0x6a>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	0018      	movs	r0, r3
    42a2:	4b0b      	ldr	r3, [pc, #44]	; (42d0 <_i2c_m_enable_implementation+0x8c>)
    42a4:	4798      	blx	r3
    42a6:	0003      	movs	r3, r0
    42a8:	2b01      	cmp	r3, #1
    42aa:	d1e1      	bne.n	4270 <_i2c_m_enable_implementation+0x2c>
		}
	}
	return ERR_NONE;
    42ac:	2300      	movs	r3, #0
}
    42ae:	0018      	movs	r0, r3
    42b0:	46bd      	mov	sp, r7
    42b2:	b004      	add	sp, #16
    42b4:	bd80      	pop	{r7, pc}
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	0000ffff 	.word	0x0000ffff
    42bc:	00000625 	.word	0x00000625
    42c0:	00007208 	.word	0x00007208
    42c4:	0000209b 	.word	0x0000209b
    42c8:	000030a5 	.word	0x000030a5
    42cc:	0000366d 	.word	0x0000366d
    42d0:	00003619 	.word	0x00003619

000042d4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b084      	sub	sp, #16
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    42de:	683b      	ldr	r3, [r7, #0]
    42e0:	0018      	movs	r0, r3
    42e2:	4b4f      	ldr	r3, [pc, #316]	; (4420 <_i2c_m_sync_init_impl+0x14c>)
    42e4:	4798      	blx	r3
    42e6:	0003      	movs	r3, r0
    42e8:	001a      	movs	r2, r3
    42ea:	230f      	movs	r3, #15
    42ec:	18fb      	adds	r3, r7, r3
    42ee:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    42f0:	683b      	ldr	r3, [r7, #0]
    42f2:	2101      	movs	r1, #1
    42f4:	0018      	movs	r0, r3
    42f6:	4b4b      	ldr	r3, [pc, #300]	; (4424 <_i2c_m_sync_init_impl+0x150>)
    42f8:	4798      	blx	r3
    42fa:	0003      	movs	r3, r0
    42fc:	001a      	movs	r2, r3
    42fe:	2301      	movs	r3, #1
    4300:	4053      	eors	r3, r2
    4302:	b2db      	uxtb	r3, r3
    4304:	2b00      	cmp	r3, #0
    4306:	d025      	beq.n	4354 <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    4308:	230f      	movs	r3, #15
    430a:	18fb      	adds	r3, r7, r3
    430c:	781a      	ldrb	r2, [r3, #0]
    430e:	4946      	ldr	r1, [pc, #280]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    4310:	0013      	movs	r3, r2
    4312:	005b      	lsls	r3, r3, #1
    4314:	189b      	adds	r3, r3, r2
    4316:	00db      	lsls	r3, r3, #3
    4318:	18cb      	adds	r3, r1, r3
    431a:	3304      	adds	r3, #4
    431c:	681b      	ldr	r3, [r3, #0]
    431e:	221c      	movs	r2, #28
    4320:	4013      	ands	r3, r2
    4322:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    4324:	683b      	ldr	r3, [r7, #0]
    4326:	2102      	movs	r1, #2
    4328:	0018      	movs	r0, r3
    432a:	4b40      	ldr	r3, [pc, #256]	; (442c <_i2c_m_sync_init_impl+0x158>)
    432c:	4798      	blx	r3
    432e:	1e03      	subs	r3, r0, #0
    4330:	d008      	beq.n	4344 <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    4332:	683b      	ldr	r3, [r7, #0]
    4334:	0018      	movs	r0, r3
    4336:	4b3e      	ldr	r3, [pc, #248]	; (4430 <_i2c_m_sync_init_impl+0x15c>)
    4338:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    433a:	683b      	ldr	r3, [r7, #0]
    433c:	2102      	movs	r1, #2
    433e:	0018      	movs	r0, r3
    4340:	4b3c      	ldr	r3, [pc, #240]	; (4434 <_i2c_m_sync_init_impl+0x160>)
    4342:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    4344:	68bb      	ldr	r3, [r7, #8]
    4346:	2201      	movs	r2, #1
    4348:	431a      	orrs	r2, r3
    434a:	683b      	ldr	r3, [r7, #0]
    434c:	0011      	movs	r1, r2
    434e:	0018      	movs	r0, r3
    4350:	4b39      	ldr	r3, [pc, #228]	; (4438 <_i2c_m_sync_init_impl+0x164>)
    4352:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    4354:	683b      	ldr	r3, [r7, #0]
    4356:	2101      	movs	r1, #1
    4358:	0018      	movs	r0, r3
    435a:	4b36      	ldr	r3, [pc, #216]	; (4434 <_i2c_m_sync_init_impl+0x160>)
    435c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    435e:	230f      	movs	r3, #15
    4360:	18fb      	adds	r3, r7, r3
    4362:	781a      	ldrb	r2, [r3, #0]
    4364:	4930      	ldr	r1, [pc, #192]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    4366:	0013      	movs	r3, r2
    4368:	005b      	lsls	r3, r3, #1
    436a:	189b      	adds	r3, r3, r2
    436c:	00db      	lsls	r3, r3, #3
    436e:	18cb      	adds	r3, r1, r3
    4370:	3304      	adds	r3, #4
    4372:	681a      	ldr	r2, [r3, #0]
    4374:	683b      	ldr	r3, [r7, #0]
    4376:	0011      	movs	r1, r2
    4378:	0018      	movs	r0, r3
    437a:	4b2f      	ldr	r3, [pc, #188]	; (4438 <_i2c_m_sync_init_impl+0x164>)
    437c:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    437e:	230f      	movs	r3, #15
    4380:	18fb      	adds	r3, r7, r3
    4382:	781a      	ldrb	r2, [r3, #0]
    4384:	4928      	ldr	r1, [pc, #160]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    4386:	0013      	movs	r3, r2
    4388:	005b      	lsls	r3, r3, #1
    438a:	189b      	adds	r3, r3, r2
    438c:	00db      	lsls	r3, r3, #3
    438e:	18cb      	adds	r3, r1, r3
    4390:	3308      	adds	r3, #8
    4392:	681a      	ldr	r2, [r3, #0]
    4394:	683b      	ldr	r3, [r7, #0]
    4396:	0011      	movs	r1, r2
    4398:	0018      	movs	r0, r3
    439a:	4b28      	ldr	r3, [pc, #160]	; (443c <_i2c_m_sync_init_impl+0x168>)
    439c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    439e:	230f      	movs	r3, #15
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	781a      	ldrb	r2, [r3, #0]
    43a4:	4920      	ldr	r1, [pc, #128]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    43a6:	0013      	movs	r3, r2
    43a8:	005b      	lsls	r3, r3, #1
    43aa:	189b      	adds	r3, r3, r2
    43ac:	00db      	lsls	r3, r3, #3
    43ae:	18cb      	adds	r3, r1, r3
    43b0:	330c      	adds	r3, #12
    43b2:	681a      	ldr	r2, [r3, #0]
    43b4:	683b      	ldr	r3, [r7, #0]
    43b6:	0011      	movs	r1, r2
    43b8:	0018      	movs	r0, r3
    43ba:	4b21      	ldr	r3, [pc, #132]	; (4440 <_i2c_m_sync_init_impl+0x16c>)
    43bc:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    43be:	230f      	movs	r3, #15
    43c0:	18fb      	adds	r3, r7, r3
    43c2:	781a      	ldrb	r2, [r3, #0]
    43c4:	4918      	ldr	r1, [pc, #96]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    43c6:	0013      	movs	r3, r2
    43c8:	005b      	lsls	r3, r3, #1
    43ca:	189b      	adds	r3, r3, r2
    43cc:	00db      	lsls	r3, r3, #3
    43ce:	18cb      	adds	r3, r1, r3
    43d0:	3304      	adds	r3, #4
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	0e1b      	lsrs	r3, r3, #24
    43d6:	b29b      	uxth	r3, r3
    43d8:	2203      	movs	r2, #3
    43da:	4013      	ands	r3, r2
    43dc:	b29a      	uxth	r2, r3
    43de:	687b      	ldr	r3, [r7, #4]
    43e0:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	899b      	ldrh	r3, [r3, #12]
    43e6:	2201      	movs	r2, #1
    43e8:	429a      	cmp	r2, r3
    43ea:	419b      	sbcs	r3, r3
    43ec:	425b      	negs	r3, r3
    43ee:	b2da      	uxtb	r2, r3
    43f0:	683b      	ldr	r3, [r7, #0]
    43f2:	0011      	movs	r1, r2
    43f4:	0018      	movs	r0, r3
    43f6:	4b13      	ldr	r3, [pc, #76]	; (4444 <_i2c_m_sync_init_impl+0x170>)
    43f8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    43fa:	230f      	movs	r3, #15
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	781a      	ldrb	r2, [r3, #0]
    4400:	4909      	ldr	r1, [pc, #36]	; (4428 <_i2c_m_sync_init_impl+0x154>)
    4402:	0013      	movs	r3, r2
    4404:	005b      	lsls	r3, r3, #1
    4406:	189b      	adds	r3, r3, r2
    4408:	00db      	lsls	r3, r3, #3
    440a:	18cb      	adds	r3, r1, r3
    440c:	3312      	adds	r3, #18
    440e:	881a      	ldrh	r2, [r3, #0]
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    4414:	2300      	movs	r3, #0
}
    4416:	0018      	movs	r0, r3
    4418:	46bd      	mov	sp, r7
    441a:	b004      	add	sp, #16
    441c:	bd80      	pop	{r7, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	00003bb1 	.word	0x00003bb1
    4424:	00002e8b 	.word	0x00002e8b
    4428:	20000014 	.word	0x20000014
    442c:	00003125 	.word	0x00003125
    4430:	000030d1 	.word	0x000030d1
    4434:	00002e6d 	.word	0x00002e6d
    4438:	00003155 	.word	0x00003155
    443c:	00003371 	.word	0x00003371
    4440:	000033d9 	.word	0x000033d9
    4444:	0000342d 	.word	0x0000342d

00004448 <_i2c_s_async_init>:

/**
 * \brief Initialize asynchronous I2C slave
 */
int32_t _i2c_s_async_init(struct _i2c_s_async_device *const device, void *const hw)
{
    4448:	b580      	push	{r7, lr}
    444a:	b084      	sub	sp, #16
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
    4450:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	1e5a      	subs	r2, r3, #1
    4456:	4193      	sbcs	r3, r2
    4458:	b2db      	uxtb	r3, r3
    445a:	4a1c      	ldr	r2, [pc, #112]	; (44cc <_i2c_s_async_init+0x84>)
    445c:	491c      	ldr	r1, [pc, #112]	; (44d0 <_i2c_s_async_init+0x88>)
    445e:	0018      	movs	r0, r3
    4460:	4b1c      	ldr	r3, [pc, #112]	; (44d4 <_i2c_s_async_init+0x8c>)
    4462:	4798      	blx	r3

	init_status = _i2c_s_init(hw);
    4464:	683b      	ldr	r3, [r7, #0]
    4466:	0018      	movs	r0, r3
    4468:	4b1b      	ldr	r3, [pc, #108]	; (44d8 <_i2c_s_async_init+0x90>)
    446a:	4798      	blx	r3
    446c:	0003      	movs	r3, r0
    446e:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	2b00      	cmp	r3, #0
    4474:	d001      	beq.n	447a <_i2c_s_async_init+0x32>
		return init_status;
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	e024      	b.n	44c4 <_i2c_s_async_init+0x7c>
	}

	device->hw = hw;
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	683a      	ldr	r2, [r7, #0]
    447e:	601a      	str	r2, [r3, #0]
	_sercom_init_irq_param(hw, (void *)device);
    4480:	687a      	ldr	r2, [r7, #4]
    4482:	683b      	ldr	r3, [r7, #0]
    4484:	0011      	movs	r1, r2
    4486:	0018      	movs	r0, r3
    4488:	4b14      	ldr	r3, [pc, #80]	; (44dc <_i2c_s_async_init+0x94>)
    448a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    448c:	683b      	ldr	r3, [r7, #0]
    448e:	0018      	movs	r0, r3
    4490:	4b13      	ldr	r3, [pc, #76]	; (44e0 <_i2c_s_async_init+0x98>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	b25b      	sxtb	r3, r3
    4498:	0018      	movs	r0, r3
    449a:	4b12      	ldr	r3, [pc, #72]	; (44e4 <_i2c_s_async_init+0x9c>)
    449c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	0018      	movs	r0, r3
    44a2:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <_i2c_s_async_init+0x98>)
    44a4:	4798      	blx	r3
    44a6:	0003      	movs	r3, r0
    44a8:	b25b      	sxtb	r3, r3
    44aa:	0018      	movs	r0, r3
    44ac:	4b0e      	ldr	r3, [pc, #56]	; (44e8 <_i2c_s_async_init+0xa0>)
    44ae:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    44b0:	683b      	ldr	r3, [r7, #0]
    44b2:	0018      	movs	r0, r3
    44b4:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <_i2c_s_async_init+0x98>)
    44b6:	4798      	blx	r3
    44b8:	0003      	movs	r3, r0
    44ba:	b25b      	sxtb	r3, r3
    44bc:	0018      	movs	r0, r3
    44be:	4b0b      	ldr	r3, [pc, #44]	; (44ec <_i2c_s_async_init+0xa4>)
    44c0:	4798      	blx	r3

	return ERR_NONE;
    44c2:	2300      	movs	r3, #0
}
    44c4:	0018      	movs	r0, r3
    44c6:	46bd      	mov	sp, r7
    44c8:	b004      	add	sp, #16
    44ca:	bd80      	pop	{r7, pc}
    44cc:	000006d2 	.word	0x000006d2
    44d0:	00007208 	.word	0x00007208
    44d4:	0000209b 	.word	0x0000209b
    44d8:	000045f1 	.word	0x000045f1
    44dc:	00003979 	.word	0x00003979
    44e0:	00003ec1 	.word	0x00003ec1
    44e4:	00002df5 	.word	0x00002df5
    44e8:	00002e35 	.word	0x00002e35
    44ec:	00002dc1 	.word	0x00002dc1

000044f0 <_i2c_s_async_write_byte>:

/**
 * \brief Write a byte to the given I2C instance
 */
void _i2c_s_async_write_byte(struct _i2c_s_async_device *const device, const uint8_t data)
{
    44f0:	b580      	push	{r7, lr}
    44f2:	b082      	sub	sp, #8
    44f4:	af00      	add	r7, sp, #0
    44f6:	6078      	str	r0, [r7, #4]
    44f8:	000a      	movs	r2, r1
    44fa:	1cfb      	adds	r3, r7, #3
    44fc:	701a      	strb	r2, [r3, #0]
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	681a      	ldr	r2, [r3, #0]
    4502:	1cfb      	adds	r3, r7, #3
    4504:	781b      	ldrb	r3, [r3, #0]
    4506:	0019      	movs	r1, r3
    4508:	0010      	movs	r0, r2
    450a:	4b03      	ldr	r3, [pc, #12]	; (4518 <_i2c_s_async_write_byte+0x28>)
    450c:	4798      	blx	r3
}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	46bd      	mov	sp, r7
    4512:	b002      	add	sp, #8
    4514:	bd80      	pop	{r7, pc}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	00003535 	.word	0x00003535

0000451c <_sercom_i2c_s_irq_handler>:
 * \internal Sercom i2c slave interrupt handler
 *
 * \param[in] p The pointer to i2c slave device
 */
static void _sercom_i2c_s_irq_handler(struct _i2c_s_async_device *device)
{
    451c:	b590      	push	{r4, r7, lr}
    451e:	b085      	sub	sp, #20
    4520:	af00      	add	r7, sp, #0
    4522:	6078      	str	r0, [r7, #4]
	void *   hw    = device->hw;
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	60fb      	str	r3, [r7, #12]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	0018      	movs	r0, r3
    452e:	4b28      	ldr	r3, [pc, #160]	; (45d0 <_sercom_i2c_s_irq_handler+0xb4>)
    4530:	4798      	blx	r3
    4532:	0003      	movs	r3, r0
    4534:	60bb      	str	r3, [r7, #8]

	if (flags & SERCOM_I2CS_INTFLAG_ERROR) {
    4536:	68bb      	ldr	r3, [r7, #8]
    4538:	2280      	movs	r2, #128	; 0x80
    453a:	4013      	ands	r3, r2
    453c:	d00f      	beq.n	455e <_sercom_i2c_s_irq_handler+0x42>
		ASSERT(device->cb.error);
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	685b      	ldr	r3, [r3, #4]
    4542:	1e5a      	subs	r2, r3, #1
    4544:	4193      	sbcs	r3, r2
    4546:	b2db      	uxtb	r3, r3
    4548:	4a22      	ldr	r2, [pc, #136]	; (45d4 <_sercom_i2c_s_irq_handler+0xb8>)
    454a:	4923      	ldr	r1, [pc, #140]	; (45d8 <_sercom_i2c_s_irq_handler+0xbc>)
    454c:	0018      	movs	r0, r3
    454e:	4b23      	ldr	r3, [pc, #140]	; (45dc <_sercom_i2c_s_irq_handler+0xc0>)
    4550:	4798      	blx	r3
		device->cb.error(device);
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	685b      	ldr	r3, [r3, #4]
    4556:	687a      	ldr	r2, [r7, #4]
    4558:	0010      	movs	r0, r2
    455a:	4798      	blx	r3
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
		hri_sercomi2cs_clear_STATUS_reg(hw, 0);
#endif
	}
}
    455c:	e034      	b.n	45c8 <_sercom_i2c_s_irq_handler+0xac>
	} else if (flags & SERCOM_I2CS_INTFLAG_DRDY) {
    455e:	68bb      	ldr	r3, [r7, #8]
    4560:	2204      	movs	r2, #4
    4562:	4013      	ands	r3, r2
    4564:	d030      	beq.n	45c8 <_sercom_i2c_s_irq_handler+0xac>
		if (!hri_sercomi2cs_get_STATUS_DIR_bit(hw)) {
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	0018      	movs	r0, r3
    456a:	4b1d      	ldr	r3, [pc, #116]	; (45e0 <_sercom_i2c_s_irq_handler+0xc4>)
    456c:	4798      	blx	r3
    456e:	0003      	movs	r3, r0
    4570:	001a      	movs	r2, r3
    4572:	2301      	movs	r3, #1
    4574:	4053      	eors	r3, r2
    4576:	b2db      	uxtb	r3, r3
    4578:	2b00      	cmp	r3, #0
    457a:	d016      	beq.n	45aa <_sercom_i2c_s_irq_handler+0x8e>
			ASSERT(device->cb.rx_done);
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	68db      	ldr	r3, [r3, #12]
    4580:	1e5a      	subs	r2, r3, #1
    4582:	4193      	sbcs	r3, r2
    4584:	b2db      	uxtb	r3, r3
    4586:	4a17      	ldr	r2, [pc, #92]	; (45e4 <_sercom_i2c_s_irq_handler+0xc8>)
    4588:	4913      	ldr	r1, [pc, #76]	; (45d8 <_sercom_i2c_s_irq_handler+0xbc>)
    458a:	0018      	movs	r0, r3
    458c:	4b13      	ldr	r3, [pc, #76]	; (45dc <_sercom_i2c_s_irq_handler+0xc0>)
    458e:	4798      	blx	r3
			device->cb.rx_done(device, hri_sercomi2cs_read_DATA_reg(hw));
    4590:	687b      	ldr	r3, [r7, #4]
    4592:	68dc      	ldr	r4, [r3, #12]
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	0018      	movs	r0, r3
    4598:	4b13      	ldr	r3, [pc, #76]	; (45e8 <_sercom_i2c_s_irq_handler+0xcc>)
    459a:	4798      	blx	r3
    459c:	0003      	movs	r3, r0
    459e:	001a      	movs	r2, r3
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	0011      	movs	r1, r2
    45a4:	0018      	movs	r0, r3
    45a6:	47a0      	blx	r4
}
    45a8:	e00e      	b.n	45c8 <_sercom_i2c_s_irq_handler+0xac>
			ASSERT(device->cb.tx);
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	689b      	ldr	r3, [r3, #8]
    45ae:	1e5a      	subs	r2, r3, #1
    45b0:	4193      	sbcs	r3, r2
    45b2:	b2db      	uxtb	r3, r3
    45b4:	4a0d      	ldr	r2, [pc, #52]	; (45ec <_sercom_i2c_s_irq_handler+0xd0>)
    45b6:	4908      	ldr	r1, [pc, #32]	; (45d8 <_sercom_i2c_s_irq_handler+0xbc>)
    45b8:	0018      	movs	r0, r3
    45ba:	4b08      	ldr	r3, [pc, #32]	; (45dc <_sercom_i2c_s_irq_handler+0xc0>)
    45bc:	4798      	blx	r3
			device->cb.tx(device);
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	689b      	ldr	r3, [r3, #8]
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	0010      	movs	r0, r2
    45c6:	4798      	blx	r3
}
    45c8:	46c0      	nop			; (mov r8, r8)
    45ca:	46bd      	mov	sp, r7
    45cc:	b005      	add	sp, #20
    45ce:	bd90      	pop	{r4, r7, pc}
    45d0:	00002f53 	.word	0x00002f53
    45d4:	000007a7 	.word	0x000007a7
    45d8:	00007208 	.word	0x00007208
    45dc:	0000209b 	.word	0x0000209b
    45e0:	000035c1 	.word	0x000035c1
    45e4:	000007ab 	.word	0x000007ab
    45e8:	00003555 	.word	0x00003555
    45ec:	000007ae 	.word	0x000007ae

000045f0 <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
    45f0:	b590      	push	{r4, r7, lr}
    45f2:	b085      	sub	sp, #20
    45f4:	af00      	add	r7, sp, #0
    45f6:	6078      	str	r0, [r7, #4]
	int8_t i = _get_i2c_s_index(hw);
    45f8:	230f      	movs	r3, #15
    45fa:	18fc      	adds	r4, r7, r3
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	0018      	movs	r0, r3
    4600:	4b38      	ldr	r3, [pc, #224]	; (46e4 <_i2c_s_init+0xf4>)
    4602:	4798      	blx	r3
    4604:	0003      	movs	r3, r0
    4606:	7023      	strb	r3, [r4, #0]
	if (i == -1) {
    4608:	230f      	movs	r3, #15
    460a:	18fb      	adds	r3, r7, r3
    460c:	781b      	ldrb	r3, [r3, #0]
    460e:	b25b      	sxtb	r3, r3
    4610:	3301      	adds	r3, #1
    4612:	d102      	bne.n	461a <_i2c_s_init+0x2a>
		return ERR_INVALID_ARG;
    4614:	230d      	movs	r3, #13
    4616:	425b      	negs	r3, r3
    4618:	e05f      	b.n	46da <_i2c_s_init+0xea>
	}

	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	2101      	movs	r1, #1
    461e:	0018      	movs	r0, r3
    4620:	4b31      	ldr	r3, [pc, #196]	; (46e8 <_i2c_s_init+0xf8>)
    4622:	4798      	blx	r3
    4624:	0003      	movs	r3, r0
    4626:	001a      	movs	r2, r3
    4628:	2301      	movs	r3, #1
    462a:	4053      	eors	r3, r2
    462c:	b2db      	uxtb	r3, r3
    462e:	2b00      	cmp	r3, #0
    4630:	d023      	beq.n	467a <_i2c_s_init+0x8a>
		uint32_t mode = _i2css[i].ctrl_a & SERCOM_I2CS_CTRLA_MODE_Msk;
    4632:	230f      	movs	r3, #15
    4634:	18fb      	adds	r3, r7, r3
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	b25b      	sxtb	r3, r3
    463a:	4a2c      	ldr	r2, [pc, #176]	; (46ec <_i2c_s_init+0xfc>)
    463c:	011b      	lsls	r3, r3, #4
    463e:	18d3      	adds	r3, r2, r3
    4640:	3304      	adds	r3, #4
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	221c      	movs	r2, #28
    4646:	4013      	ands	r3, r2
    4648:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	2102      	movs	r1, #2
    464e:	0018      	movs	r0, r3
    4650:	4b27      	ldr	r3, [pc, #156]	; (46f0 <_i2c_s_init+0x100>)
    4652:	4798      	blx	r3
    4654:	1e03      	subs	r3, r0, #0
    4656:	d008      	beq.n	466a <_i2c_s_init+0x7a>
			hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	0018      	movs	r0, r3
    465c:	4b25      	ldr	r3, [pc, #148]	; (46f4 <_i2c_s_init+0x104>)
    465e:	4798      	blx	r3
			hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_ENABLE);
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	2102      	movs	r1, #2
    4664:	0018      	movs	r0, r3
    4666:	4b24      	ldr	r3, [pc, #144]	; (46f8 <_i2c_s_init+0x108>)
    4668:	4798      	blx	r3
		}
		hri_sercomi2cs_write_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_SWRST | mode);
    466a:	68bb      	ldr	r3, [r7, #8]
    466c:	2201      	movs	r2, #1
    466e:	431a      	orrs	r2, r3
    4670:	687b      	ldr	r3, [r7, #4]
    4672:	0011      	movs	r1, r2
    4674:	0018      	movs	r0, r3
    4676:	4b21      	ldr	r3, [pc, #132]	; (46fc <_i2c_s_init+0x10c>)
    4678:	4798      	blx	r3
	}
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST);
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	2101      	movs	r1, #1
    467e:	0018      	movs	r0, r3
    4680:	4b1d      	ldr	r3, [pc, #116]	; (46f8 <_i2c_s_init+0x108>)
    4682:	4798      	blx	r3

	hri_sercomi2cs_write_CTRLA_reg(hw, _i2css[i].ctrl_a);
    4684:	230f      	movs	r3, #15
    4686:	18fb      	adds	r3, r7, r3
    4688:	781b      	ldrb	r3, [r3, #0]
    468a:	b25b      	sxtb	r3, r3
    468c:	4a17      	ldr	r2, [pc, #92]	; (46ec <_i2c_s_init+0xfc>)
    468e:	011b      	lsls	r3, r3, #4
    4690:	18d3      	adds	r3, r2, r3
    4692:	3304      	adds	r3, #4
    4694:	681a      	ldr	r2, [r3, #0]
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	0011      	movs	r1, r2
    469a:	0018      	movs	r0, r3
    469c:	4b17      	ldr	r3, [pc, #92]	; (46fc <_i2c_s_init+0x10c>)
    469e:	4798      	blx	r3
	hri_sercomi2cs_write_CTRLB_reg(hw, _i2css[i].ctrl_b);
    46a0:	230f      	movs	r3, #15
    46a2:	18fb      	adds	r3, r7, r3
    46a4:	781b      	ldrb	r3, [r3, #0]
    46a6:	b25b      	sxtb	r3, r3
    46a8:	4a10      	ldr	r2, [pc, #64]	; (46ec <_i2c_s_init+0xfc>)
    46aa:	011b      	lsls	r3, r3, #4
    46ac:	18d3      	adds	r3, r2, r3
    46ae:	3308      	adds	r3, #8
    46b0:	681a      	ldr	r2, [r3, #0]
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	0011      	movs	r1, r2
    46b6:	0018      	movs	r0, r3
    46b8:	4b11      	ldr	r3, [pc, #68]	; (4700 <_i2c_s_init+0x110>)
    46ba:	4798      	blx	r3
	hri_sercomi2cs_write_ADDR_reg(hw, _i2css[i].address);
    46bc:	230f      	movs	r3, #15
    46be:	18fb      	adds	r3, r7, r3
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	b25b      	sxtb	r3, r3
    46c4:	4a09      	ldr	r2, [pc, #36]	; (46ec <_i2c_s_init+0xfc>)
    46c6:	011b      	lsls	r3, r3, #4
    46c8:	18d3      	adds	r3, r2, r3
    46ca:	330c      	adds	r3, #12
    46cc:	681a      	ldr	r2, [r3, #0]
    46ce:	687b      	ldr	r3, [r7, #4]
    46d0:	0011      	movs	r1, r2
    46d2:	0018      	movs	r0, r3
    46d4:	4b0b      	ldr	r3, [pc, #44]	; (4704 <_i2c_s_init+0x114>)
    46d6:	4798      	blx	r3

	return ERR_NONE;
    46d8:	2300      	movs	r3, #0
}
    46da:	0018      	movs	r0, r3
    46dc:	46bd      	mov	sp, r7
    46de:	b005      	add	sp, #20
    46e0:	bd90      	pop	{r4, r7, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00004709 	.word	0x00004709
    46e8:	00002ec9 	.word	0x00002ec9
    46ec:	2000002c 	.word	0x2000002c
    46f0:	000031a9 	.word	0x000031a9
    46f4:	0000317d 	.word	0x0000317d
    46f8:	00002eab 	.word	0x00002eab
    46fc:	000031d9 	.word	0x000031d9
    4700:	00003399 	.word	0x00003399
    4704:	000034c5 	.word	0x000034c5

00004708 <_get_i2c_s_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
    4708:	b590      	push	{r4, r7, lr}
    470a:	b085      	sub	sp, #20
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4710:	230e      	movs	r3, #14
    4712:	18fc      	adds	r4, r7, r3
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	0018      	movs	r0, r3
    4718:	4b18      	ldr	r3, [pc, #96]	; (477c <_get_i2c_s_index+0x74>)
    471a:	4798      	blx	r3
    471c:	0003      	movs	r3, r0
    471e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    4720:	230f      	movs	r3, #15
    4722:	18fb      	adds	r3, r7, r3
    4724:	2200      	movs	r2, #0
    4726:	701a      	strb	r2, [r3, #0]
    4728:	e016      	b.n	4758 <_get_i2c_s_index+0x50>
		if (_i2css[i].number == sercom_offset) {
    472a:	230f      	movs	r3, #15
    472c:	18fb      	adds	r3, r7, r3
    472e:	781a      	ldrb	r2, [r3, #0]
    4730:	4b13      	ldr	r3, [pc, #76]	; (4780 <_get_i2c_s_index+0x78>)
    4732:	0112      	lsls	r2, r2, #4
    4734:	5cd3      	ldrb	r3, [r2, r3]
    4736:	220e      	movs	r2, #14
    4738:	18ba      	adds	r2, r7, r2
    473a:	7812      	ldrb	r2, [r2, #0]
    473c:	429a      	cmp	r2, r3
    473e:	d104      	bne.n	474a <_get_i2c_s_index+0x42>
			return i;
    4740:	230f      	movs	r3, #15
    4742:	18fb      	adds	r3, r7, r3
    4744:	781b      	ldrb	r3, [r3, #0]
    4746:	b25b      	sxtb	r3, r3
    4748:	e013      	b.n	4772 <_get_i2c_s_index+0x6a>
	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
    474a:	230f      	movs	r3, #15
    474c:	18fb      	adds	r3, r7, r3
    474e:	781a      	ldrb	r2, [r3, #0]
    4750:	230f      	movs	r3, #15
    4752:	18fb      	adds	r3, r7, r3
    4754:	3201      	adds	r2, #1
    4756:	701a      	strb	r2, [r3, #0]
    4758:	230f      	movs	r3, #15
    475a:	18fb      	adds	r3, r7, r3
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	2b00      	cmp	r3, #0
    4760:	d0e3      	beq.n	472a <_get_i2c_s_index+0x22>
		}
	}

	ASSERT(false);
    4762:	4a08      	ldr	r2, [pc, #32]	; (4784 <_get_i2c_s_index+0x7c>)
    4764:	4b08      	ldr	r3, [pc, #32]	; (4788 <_get_i2c_s_index+0x80>)
    4766:	0019      	movs	r1, r3
    4768:	2000      	movs	r0, #0
    476a:	4b08      	ldr	r3, [pc, #32]	; (478c <_get_i2c_s_index+0x84>)
    476c:	4798      	blx	r3
	return -1;
    476e:	2301      	movs	r3, #1
    4770:	425b      	negs	r3, r3
}
    4772:	0018      	movs	r0, r3
    4774:	46bd      	mov	sp, r7
    4776:	b005      	add	sp, #20
    4778:	bd90      	pop	{r4, r7, pc}
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	000037a9 	.word	0x000037a9
    4780:	2000002c 	.word	0x2000002c
    4784:	000007eb 	.word	0x000007eb
    4788:	00007208 	.word	0x00007208
    478c:	0000209b 	.word	0x0000209b

00004790 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    4790:	b580      	push	{r7, lr}
    4792:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    4794:	4b03      	ldr	r3, [pc, #12]	; (47a4 <SERCOM0_Handler+0x14>)
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	0018      	movs	r0, r3
    479a:	4b03      	ldr	r3, [pc, #12]	; (47a8 <SERCOM0_Handler+0x18>)
    479c:	4798      	blx	r3
}
    479e:	46c0      	nop			; (mov r8, r8)
    47a0:	46bd      	mov	sp, r7
    47a2:	bd80      	pop	{r7, pc}
    47a4:	2000008c 	.word	0x2000008c
    47a8:	000037d9 	.word	0x000037d9

000047ac <SERCOM1_Handler>:

void SERCOM1_Handler(void)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	af00      	add	r7, sp, #0
	_sercom_i2c_s_irq_handler(_sercom1_dev);
    47b0:	4b03      	ldr	r3, [pc, #12]	; (47c0 <SERCOM1_Handler+0x14>)
    47b2:	681b      	ldr	r3, [r3, #0]
    47b4:	0018      	movs	r0, r3
    47b6:	4b03      	ldr	r3, [pc, #12]	; (47c4 <SERCOM1_Handler+0x18>)
    47b8:	4798      	blx	r3
}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	20000090 	.word	0x20000090
    47c4:	0000451d 	.word	0x0000451d

000047c8 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b082      	sub	sp, #8
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    47d0:	4b04      	ldr	r3, [pc, #16]	; (47e4 <_system_time_init+0x1c>)
    47d2:	4a05      	ldr	r2, [pc, #20]	; (47e8 <_system_time_init+0x20>)
    47d4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    47d6:	4b03      	ldr	r3, [pc, #12]	; (47e4 <_system_time_init+0x1c>)
    47d8:	2205      	movs	r2, #5
    47da:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    47dc:	46c0      	nop			; (mov r8, r8)
    47de:	46bd      	mov	sp, r7
    47e0:	b002      	add	sp, #8
    47e2:	bd80      	pop	{r7, pc}
    47e4:	e000e010 	.word	0xe000e010
    47e8:	00ffffff 	.word	0x00ffffff

000047ec <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	0018      	movs	r0, r3
    47f8:	4b02      	ldr	r3, [pc, #8]	; (4804 <_delay_init+0x18>)
    47fa:	4798      	blx	r3
}
    47fc:	46c0      	nop			; (mov r8, r8)
    47fe:	46bd      	mov	sp, r7
    4800:	b002      	add	sp, #8
    4802:	bd80      	pop	{r7, pc}
    4804:	000047c9 	.word	0x000047c9

00004808 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4808:	b580      	push	{r7, lr}
    480a:	b084      	sub	sp, #16
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
    4810:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4812:	683b      	ldr	r3, [r7, #0]
    4814:	0e1a      	lsrs	r2, r3, #24
    4816:	230f      	movs	r3, #15
    4818:	18fb      	adds	r3, r7, r3
    481a:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    481c:	683b      	ldr	r3, [r7, #0]
    481e:	60bb      	str	r3, [r7, #8]

	while (n--) {
    4820:	e011      	b.n	4846 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    4822:	4b16      	ldr	r3, [pc, #88]	; (487c <_delay_cycles+0x74>)
    4824:	4a16      	ldr	r2, [pc, #88]	; (4880 <_delay_cycles+0x78>)
    4826:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4828:	4b14      	ldr	r3, [pc, #80]	; (487c <_delay_cycles+0x74>)
    482a:	4a15      	ldr	r2, [pc, #84]	; (4880 <_delay_cycles+0x78>)
    482c:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	4b12      	ldr	r3, [pc, #72]	; (487c <_delay_cycles+0x74>)
    4832:	681a      	ldr	r2, [r3, #0]
    4834:	2380      	movs	r3, #128	; 0x80
    4836:	025b      	lsls	r3, r3, #9
    4838:	4013      	ands	r3, r2
    483a:	d0f9      	beq.n	4830 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    483c:	68bb      	ldr	r3, [r7, #8]
    483e:	4a11      	ldr	r2, [pc, #68]	; (4884 <_delay_cycles+0x7c>)
    4840:	4694      	mov	ip, r2
    4842:	4463      	add	r3, ip
    4844:	60bb      	str	r3, [r7, #8]
	while (n--) {
    4846:	230f      	movs	r3, #15
    4848:	18fb      	adds	r3, r7, r3
    484a:	781b      	ldrb	r3, [r3, #0]
    484c:	220f      	movs	r2, #15
    484e:	18ba      	adds	r2, r7, r2
    4850:	1e59      	subs	r1, r3, #1
    4852:	7011      	strb	r1, [r2, #0]
    4854:	2b00      	cmp	r3, #0
    4856:	d1e4      	bne.n	4822 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    4858:	4b08      	ldr	r3, [pc, #32]	; (487c <_delay_cycles+0x74>)
    485a:	68ba      	ldr	r2, [r7, #8]
    485c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    485e:	4b07      	ldr	r3, [pc, #28]	; (487c <_delay_cycles+0x74>)
    4860:	68ba      	ldr	r2, [r7, #8]
    4862:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4864:	46c0      	nop			; (mov r8, r8)
    4866:	4b05      	ldr	r3, [pc, #20]	; (487c <_delay_cycles+0x74>)
    4868:	681a      	ldr	r2, [r3, #0]
    486a:	2380      	movs	r3, #128	; 0x80
    486c:	025b      	lsls	r3, r3, #9
    486e:	4013      	ands	r3, r2
    4870:	d0f9      	beq.n	4866 <_delay_cycles+0x5e>
		;
}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	46bd      	mov	sp, r7
    4876:	b004      	add	sp, #16
    4878:	bd80      	pop	{r7, pc}
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	e000e010 	.word	0xe000e010
    4880:	00ffffff 	.word	0x00ffffff
    4884:	ff000001 	.word	0xff000001

00004888 <__NVIC_EnableIRQ>:
{
    4888:	b580      	push	{r7, lr}
    488a:	b082      	sub	sp, #8
    488c:	af00      	add	r7, sp, #0
    488e:	0002      	movs	r2, r0
    4890:	1dfb      	adds	r3, r7, #7
    4892:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4894:	1dfb      	adds	r3, r7, #7
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b7f      	cmp	r3, #127	; 0x7f
    489a:	d809      	bhi.n	48b0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    489c:	4b06      	ldr	r3, [pc, #24]	; (48b8 <__NVIC_EnableIRQ+0x30>)
    489e:	1dfa      	adds	r2, r7, #7
    48a0:	7812      	ldrb	r2, [r2, #0]
    48a2:	0011      	movs	r1, r2
    48a4:	221f      	movs	r2, #31
    48a6:	400a      	ands	r2, r1
    48a8:	2101      	movs	r1, #1
    48aa:	4091      	lsls	r1, r2
    48ac:	000a      	movs	r2, r1
    48ae:	601a      	str	r2, [r3, #0]
}
    48b0:	46c0      	nop			; (mov r8, r8)
    48b2:	46bd      	mov	sp, r7
    48b4:	b002      	add	sp, #8
    48b6:	bd80      	pop	{r7, pc}
    48b8:	e000e100 	.word	0xe000e100

000048bc <__NVIC_DisableIRQ>:
{
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	0002      	movs	r2, r0
    48c4:	1dfb      	adds	r3, r7, #7
    48c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    48c8:	1dfb      	adds	r3, r7, #7
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b7f      	cmp	r3, #127	; 0x7f
    48ce:	d80e      	bhi.n	48ee <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48d0:	4909      	ldr	r1, [pc, #36]	; (48f8 <__NVIC_DisableIRQ+0x3c>)
    48d2:	1dfb      	adds	r3, r7, #7
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	001a      	movs	r2, r3
    48d8:	231f      	movs	r3, #31
    48da:	4013      	ands	r3, r2
    48dc:	2201      	movs	r2, #1
    48de:	409a      	lsls	r2, r3
    48e0:	0013      	movs	r3, r2
    48e2:	2280      	movs	r2, #128	; 0x80
    48e4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    48e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ea:	f3bf 8f6f 	isb	sy
}
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	46bd      	mov	sp, r7
    48f2:	b002      	add	sp, #8
    48f4:	bd80      	pop	{r7, pc}
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	e000e100 	.word	0xe000e100

000048fc <__NVIC_ClearPendingIRQ>:
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b082      	sub	sp, #8
    4900:	af00      	add	r7, sp, #0
    4902:	0002      	movs	r2, r0
    4904:	1dfb      	adds	r3, r7, #7
    4906:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4908:	1dfb      	adds	r3, r7, #7
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	2b7f      	cmp	r3, #127	; 0x7f
    490e:	d80a      	bhi.n	4926 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4910:	4907      	ldr	r1, [pc, #28]	; (4930 <__NVIC_ClearPendingIRQ+0x34>)
    4912:	1dfb      	adds	r3, r7, #7
    4914:	781b      	ldrb	r3, [r3, #0]
    4916:	001a      	movs	r2, r3
    4918:	231f      	movs	r3, #31
    491a:	4013      	ands	r3, r2
    491c:	2201      	movs	r2, #1
    491e:	409a      	lsls	r2, r3
    4920:	23c0      	movs	r3, #192	; 0xc0
    4922:	005b      	lsls	r3, r3, #1
    4924:	50ca      	str	r2, [r1, r3]
}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	46bd      	mov	sp, r7
    492a:	b002      	add	sp, #8
    492c:	bd80      	pop	{r7, pc}
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	e000e100 	.word	0xe000e100

00004934 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    4934:	b580      	push	{r7, lr}
    4936:	b082      	sub	sp, #8
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
    493c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    493e:	46c0      	nop			; (mov r8, r8)
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	691b      	ldr	r3, [r3, #16]
    4944:	683a      	ldr	r2, [r7, #0]
    4946:	4013      	ands	r3, r2
    4948:	d1fa      	bne.n	4940 <hri_tc_wait_for_sync+0xc>
	};
}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	46bd      	mov	sp, r7
    494e:	b002      	add	sp, #8
    4950:	bd80      	pop	{r7, pc}

00004952 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    4952:	b580      	push	{r7, lr}
    4954:	b082      	sub	sp, #8
    4956:	af00      	add	r7, sp, #0
    4958:	6078      	str	r0, [r7, #4]
    495a:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	691b      	ldr	r3, [r3, #16]
    4960:	683a      	ldr	r2, [r7, #0]
    4962:	4013      	ands	r3, r2
    4964:	1e5a      	subs	r2, r3, #1
    4966:	4193      	sbcs	r3, r2
    4968:	b2db      	uxtb	r3, r3
}
    496a:	0018      	movs	r0, r3
    496c:	46bd      	mov	sp, r7
    496e:	b002      	add	sp, #8
    4970:	bd80      	pop	{r7, pc}

00004972 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    4972:	b580      	push	{r7, lr}
    4974:	b082      	sub	sp, #8
    4976:	af00      	add	r7, sp, #0
    4978:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    497a:	687b      	ldr	r3, [r7, #4]
    497c:	7a9b      	ldrb	r3, [r3, #10]
    497e:	b2db      	uxtb	r3, r3
    4980:	001a      	movs	r2, r3
    4982:	2301      	movs	r3, #1
    4984:	4013      	ands	r3, r2
    4986:	1e5a      	subs	r2, r3, #1
    4988:	4193      	sbcs	r3, r2
    498a:	b2db      	uxtb	r3, r3
}
    498c:	0018      	movs	r0, r3
    498e:	46bd      	mov	sp, r7
    4990:	b002      	add	sp, #8
    4992:	bd80      	pop	{r7, pc}

00004994 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2201      	movs	r2, #1
    49a0:	729a      	strb	r2, [r3, #10]
}
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	46bd      	mov	sp, r7
    49a6:	b002      	add	sp, #8
    49a8:	bd80      	pop	{r7, pc}

000049aa <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    49aa:	b580      	push	{r7, lr}
    49ac:	b082      	sub	sp, #8
    49ae:	af00      	add	r7, sp, #0
    49b0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	2201      	movs	r2, #1
    49b6:	725a      	strb	r2, [r3, #9]
}
    49b8:	46c0      	nop			; (mov r8, r8)
    49ba:	46bd      	mov	sp, r7
    49bc:	b002      	add	sp, #8
    49be:	bd80      	pop	{r7, pc}

000049c0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	b082      	sub	sp, #8
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	2202      	movs	r2, #2
    49ce:	4393      	bics	r3, r2
    49d0:	001a      	movs	r2, r3
    49d2:	687b      	ldr	r3, [r7, #4]
    49d4:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    49d6:	687b      	ldr	r3, [r7, #4]
    49d8:	2103      	movs	r1, #3
    49da:	0018      	movs	r0, r3
    49dc:	4b02      	ldr	r3, [pc, #8]	; (49e8 <hri_tc_clear_CTRLA_ENABLE_bit+0x28>)
    49de:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    49e0:	46c0      	nop			; (mov r8, r8)
    49e2:	46bd      	mov	sp, r7
    49e4:	b002      	add	sp, #8
    49e6:	bd80      	pop	{r7, pc}
    49e8:	00004935 	.word	0x00004935

000049ec <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b084      	sub	sp, #16
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
    49f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	2103      	movs	r1, #3
    49fa:	0018      	movs	r0, r3
    49fc:	4b06      	ldr	r3, [pc, #24]	; (4a18 <hri_tc_get_CTRLA_reg+0x2c>)
    49fe:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4a06:	68fb      	ldr	r3, [r7, #12]
    4a08:	683a      	ldr	r2, [r7, #0]
    4a0a:	4013      	ands	r3, r2
    4a0c:	60fb      	str	r3, [r7, #12]
	return tmp;
    4a0e:	68fb      	ldr	r3, [r7, #12]
}
    4a10:	0018      	movs	r0, r3
    4a12:	46bd      	mov	sp, r7
    4a14:	b004      	add	sp, #16
    4a16:	bd80      	pop	{r7, pc}
    4a18:	00004935 	.word	0x00004935

00004a1c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b082      	sub	sp, #8
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
    4a24:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	683a      	ldr	r2, [r7, #0]
    4a2a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	2103      	movs	r1, #3
    4a30:	0018      	movs	r0, r3
    4a32:	4b03      	ldr	r3, [pc, #12]	; (4a40 <hri_tc_write_CTRLA_reg+0x24>)
    4a34:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	46bd      	mov	sp, r7
    4a3a:	b002      	add	sp, #8
    4a3c:	bd80      	pop	{r7, pc}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	00004935 	.word	0x00004935

00004a44 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    4a44:	b580      	push	{r7, lr}
    4a46:	b082      	sub	sp, #8
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
    4a4c:	000a      	movs	r2, r1
    4a4e:	1cbb      	adds	r3, r7, #2
    4a50:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	1cba      	adds	r2, r7, #2
    4a56:	8812      	ldrh	r2, [r2, #0]
    4a58:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	46bd      	mov	sp, r7
    4a5e:	b002      	add	sp, #8
    4a60:	bd80      	pop	{r7, pc}

00004a62 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    4a62:	b580      	push	{r7, lr}
    4a64:	b082      	sub	sp, #8
    4a66:	af00      	add	r7, sp, #0
    4a68:	6078      	str	r0, [r7, #4]
    4a6a:	000a      	movs	r2, r1
    4a6c:	1cfb      	adds	r3, r7, #3
    4a6e:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	1cfa      	adds	r2, r7, #3
    4a74:	7812      	ldrb	r2, [r2, #0]
    4a76:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a78:	46c0      	nop			; (mov r8, r8)
    4a7a:	46bd      	mov	sp, r7
    4a7c:	b002      	add	sp, #8
    4a7e:	bd80      	pop	{r7, pc}

00004a80 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    4a80:	b580      	push	{r7, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
    4a88:	000a      	movs	r2, r1
    4a8a:	1cfb      	adds	r3, r7, #3
    4a8c:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    4a8e:	687b      	ldr	r3, [r7, #4]
    4a90:	1cfa      	adds	r2, r7, #3
    4a92:	7812      	ldrb	r2, [r2, #0]
    4a94:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	46bd      	mov	sp, r7
    4a9a:	b002      	add	sp, #8
    4a9c:	bd80      	pop	{r7, pc}
	...

00004aa0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b082      	sub	sp, #8
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	6078      	str	r0, [r7, #4]
    4aa8:	000a      	movs	r2, r1
    4aaa:	1cfb      	adds	r3, r7, #3
    4aac:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	1cfa      	adds	r2, r7, #3
    4ab2:	7812      	ldrb	r2, [r2, #0]
    4ab4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	2120      	movs	r1, #32
    4aba:	0018      	movs	r0, r3
    4abc:	4b02      	ldr	r3, [pc, #8]	; (4ac8 <hri_tccount8_write_PER_reg+0x28>)
    4abe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4ac0:	46c0      	nop			; (mov r8, r8)
    4ac2:	46bd      	mov	sp, r7
    4ac4:	b002      	add	sp, #8
    4ac6:	bd80      	pop	{r7, pc}
    4ac8:	00004935 	.word	0x00004935

00004acc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    4acc:	b580      	push	{r7, lr}
    4ace:	b082      	sub	sp, #8
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
    4ad4:	0008      	movs	r0, r1
    4ad6:	0011      	movs	r1, r2
    4ad8:	1cfb      	adds	r3, r7, #3
    4ada:	1c02      	adds	r2, r0, #0
    4adc:	701a      	strb	r2, [r3, #0]
    4ade:	1cbb      	adds	r3, r7, #2
    4ae0:	1c0a      	adds	r2, r1, #0
    4ae2:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    4ae4:	1cfb      	adds	r3, r7, #3
    4ae6:	781b      	ldrb	r3, [r3, #0]
    4ae8:	687a      	ldr	r2, [r7, #4]
    4aea:	18d3      	adds	r3, r2, r3
    4aec:	1cba      	adds	r2, r7, #2
    4aee:	7812      	ldrb	r2, [r2, #0]
    4af0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	21c0      	movs	r1, #192	; 0xc0
    4af6:	0018      	movs	r0, r3
    4af8:	4b02      	ldr	r3, [pc, #8]	; (4b04 <hri_tccount8_write_CC_reg+0x38>)
    4afa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4afc:	46c0      	nop			; (mov r8, r8)
    4afe:	46bd      	mov	sp, r7
    4b00:	b002      	add	sp, #8
    4b02:	bd80      	pop	{r7, pc}
    4b04:	00004935 	.word	0x00004935

00004b08 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    4b08:	b580      	push	{r7, lr}
    4b0a:	b082      	sub	sp, #8
    4b0c:	af00      	add	r7, sp, #0
    4b0e:	6078      	str	r0, [r7, #4]
    4b10:	0008      	movs	r0, r1
    4b12:	0011      	movs	r1, r2
    4b14:	1cfb      	adds	r3, r7, #3
    4b16:	1c02      	adds	r2, r0, #0
    4b18:	701a      	strb	r2, [r3, #0]
    4b1a:	003b      	movs	r3, r7
    4b1c:	1c0a      	adds	r2, r1, #0
    4b1e:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4b20:	1cfb      	adds	r3, r7, #3
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	687a      	ldr	r2, [r7, #4]
    4b26:	330c      	adds	r3, #12
    4b28:	005b      	lsls	r3, r3, #1
    4b2a:	18d3      	adds	r3, r2, r3
    4b2c:	3304      	adds	r3, #4
    4b2e:	003a      	movs	r2, r7
    4b30:	8812      	ldrh	r2, [r2, #0]
    4b32:	801a      	strh	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	21c0      	movs	r1, #192	; 0xc0
    4b38:	0018      	movs	r0, r3
    4b3a:	4b03      	ldr	r3, [pc, #12]	; (4b48 <hri_tccount16_write_CC_reg+0x40>)
    4b3c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4b3e:	46c0      	nop			; (mov r8, r8)
    4b40:	46bd      	mov	sp, r7
    4b42:	b002      	add	sp, #8
    4b44:	bd80      	pop	{r7, pc}
    4b46:	46c0      	nop			; (mov r8, r8)
    4b48:	00004935 	.word	0x00004935

00004b4c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b084      	sub	sp, #16
    4b50:	af00      	add	r7, sp, #0
    4b52:	60f8      	str	r0, [r7, #12]
    4b54:	607a      	str	r2, [r7, #4]
    4b56:	230b      	movs	r3, #11
    4b58:	18fb      	adds	r3, r7, r3
    4b5a:	1c0a      	adds	r2, r1, #0
    4b5c:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4b5e:	230b      	movs	r3, #11
    4b60:	18fb      	adds	r3, r7, r3
    4b62:	781b      	ldrb	r3, [r3, #0]
    4b64:	68fa      	ldr	r2, [r7, #12]
    4b66:	3306      	adds	r3, #6
    4b68:	009b      	lsls	r3, r3, #2
    4b6a:	18d3      	adds	r3, r2, r3
    4b6c:	3304      	adds	r3, #4
    4b6e:	687a      	ldr	r2, [r7, #4]
    4b70:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    4b72:	68fb      	ldr	r3, [r7, #12]
    4b74:	21c0      	movs	r1, #192	; 0xc0
    4b76:	0018      	movs	r0, r3
    4b78:	4b02      	ldr	r3, [pc, #8]	; (4b84 <hri_tccount32_write_CC_reg+0x38>)
    4b7a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    4b7c:	46c0      	nop			; (mov r8, r8)
    4b7e:	46bd      	mov	sp, r7
    4b80:	b004      	add	sp, #16
    4b82:	bd80      	pop	{r7, pc}
    4b84:	00004935 	.word	0x00004935

00004b88 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    4b88:	b590      	push	{r4, r7, lr}
    4b8a:	b085      	sub	sp, #20
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	6078      	str	r0, [r7, #4]
    4b90:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    4b92:	230f      	movs	r3, #15
    4b94:	18fc      	adds	r4, r7, r3
    4b96:	683b      	ldr	r3, [r7, #0]
    4b98:	0018      	movs	r0, r3
    4b9a:	4bab      	ldr	r3, [pc, #684]	; (4e48 <_timer_init+0x2c0>)
    4b9c:	4798      	blx	r3
    4b9e:	0003      	movs	r3, r0
    4ba0:	7023      	strb	r3, [r4, #0]

	device->hw = hw;
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	683a      	ldr	r2, [r7, #0]
    4ba6:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4ba8:	4ba8      	ldr	r3, [pc, #672]	; (4e4c <_timer_init+0x2c4>)
    4baa:	228d      	movs	r2, #141	; 0x8d
    4bac:	0019      	movs	r1, r3
    4bae:	2001      	movs	r0, #1
    4bb0:	4ba7      	ldr	r3, [pc, #668]	; (4e50 <_timer_init+0x2c8>)
    4bb2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    4bb4:	683b      	ldr	r3, [r7, #0]
    4bb6:	2101      	movs	r1, #1
    4bb8:	0018      	movs	r0, r3
    4bba:	4ba6      	ldr	r3, [pc, #664]	; (4e54 <_timer_init+0x2cc>)
    4bbc:	4798      	blx	r3
    4bbe:	0003      	movs	r3, r0
    4bc0:	001a      	movs	r2, r3
    4bc2:	2301      	movs	r3, #1
    4bc4:	4053      	eors	r3, r2
    4bc6:	b2db      	uxtb	r3, r3
    4bc8:	2b00      	cmp	r3, #0
    4bca:	d014      	beq.n	4bf6 <_timer_init+0x6e>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4bcc:	683b      	ldr	r3, [r7, #0]
    4bce:	2102      	movs	r1, #2
    4bd0:	0018      	movs	r0, r3
    4bd2:	4ba1      	ldr	r3, [pc, #644]	; (4e58 <_timer_init+0x2d0>)
    4bd4:	4798      	blx	r3
    4bd6:	1e03      	subs	r3, r0, #0
    4bd8:	d008      	beq.n	4bec <_timer_init+0x64>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    4bda:	683b      	ldr	r3, [r7, #0]
    4bdc:	0018      	movs	r0, r3
    4bde:	4b9f      	ldr	r3, [pc, #636]	; (4e5c <_timer_init+0x2d4>)
    4be0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    4be2:	683b      	ldr	r3, [r7, #0]
    4be4:	2102      	movs	r1, #2
    4be6:	0018      	movs	r0, r3
    4be8:	4b9d      	ldr	r3, [pc, #628]	; (4e60 <_timer_init+0x2d8>)
    4bea:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    4bec:	683b      	ldr	r3, [r7, #0]
    4bee:	2101      	movs	r1, #1
    4bf0:	0018      	movs	r0, r3
    4bf2:	4b9c      	ldr	r3, [pc, #624]	; (4e64 <_timer_init+0x2dc>)
    4bf4:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    4bf6:	683b      	ldr	r3, [r7, #0]
    4bf8:	2101      	movs	r1, #1
    4bfa:	0018      	movs	r0, r3
    4bfc:	4b98      	ldr	r3, [pc, #608]	; (4e60 <_timer_init+0x2d8>)
    4bfe:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4c00:	230f      	movs	r3, #15
    4c02:	18fb      	adds	r3, r7, r3
    4c04:	2200      	movs	r2, #0
    4c06:	569a      	ldrsb	r2, [r3, r2]
    4c08:	4997      	ldr	r1, [pc, #604]	; (4e68 <_timer_init+0x2e0>)
    4c0a:	0013      	movs	r3, r2
    4c0c:	009b      	lsls	r3, r3, #2
    4c0e:	189b      	adds	r3, r3, r2
    4c10:	009b      	lsls	r3, r3, #2
    4c12:	18cb      	adds	r3, r1, r3
    4c14:	3304      	adds	r3, #4
    4c16:	681a      	ldr	r2, [r3, #0]
    4c18:	683b      	ldr	r3, [r7, #0]
    4c1a:	0011      	movs	r1, r2
    4c1c:	0018      	movs	r0, r3
    4c1e:	4b91      	ldr	r3, [pc, #580]	; (4e64 <_timer_init+0x2dc>)
    4c20:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4c22:	230f      	movs	r3, #15
    4c24:	18fb      	adds	r3, r7, r3
    4c26:	2200      	movs	r2, #0
    4c28:	569a      	ldrsb	r2, [r3, r2]
    4c2a:	498f      	ldr	r1, [pc, #572]	; (4e68 <_timer_init+0x2e0>)
    4c2c:	0013      	movs	r3, r2
    4c2e:	009b      	lsls	r3, r3, #2
    4c30:	189b      	adds	r3, r3, r2
    4c32:	009b      	lsls	r3, r3, #2
    4c34:	18cb      	adds	r3, r1, r3
    4c36:	330a      	adds	r3, #10
    4c38:	781a      	ldrb	r2, [r3, #0]
    4c3a:	683b      	ldr	r3, [r7, #0]
    4c3c:	0011      	movs	r1, r2
    4c3e:	0018      	movs	r0, r3
    4c40:	4b8a      	ldr	r3, [pc, #552]	; (4e6c <_timer_init+0x2e4>)
    4c42:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4c44:	230f      	movs	r3, #15
    4c46:	18fb      	adds	r3, r7, r3
    4c48:	2200      	movs	r2, #0
    4c4a:	569a      	ldrsb	r2, [r3, r2]
    4c4c:	4986      	ldr	r1, [pc, #536]	; (4e68 <_timer_init+0x2e0>)
    4c4e:	0013      	movs	r3, r2
    4c50:	009b      	lsls	r3, r3, #2
    4c52:	189b      	adds	r3, r3, r2
    4c54:	009b      	lsls	r3, r3, #2
    4c56:	18cb      	adds	r3, r1, r3
    4c58:	3308      	adds	r3, #8
    4c5a:	881a      	ldrh	r2, [r3, #0]
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	0011      	movs	r1, r2
    4c60:	0018      	movs	r0, r3
    4c62:	4b83      	ldr	r3, [pc, #524]	; (4e70 <_timer_init+0x2e8>)
    4c64:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    4c66:	683b      	ldr	r3, [r7, #0]
    4c68:	2101      	movs	r1, #1
    4c6a:	0018      	movs	r0, r3
    4c6c:	4b81      	ldr	r3, [pc, #516]	; (4e74 <_timer_init+0x2ec>)
    4c6e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4c70:	230f      	movs	r3, #15
    4c72:	18fb      	adds	r3, r7, r3
    4c74:	2200      	movs	r2, #0
    4c76:	569a      	ldrsb	r2, [r3, r2]
    4c78:	497b      	ldr	r1, [pc, #492]	; (4e68 <_timer_init+0x2e0>)
    4c7a:	0013      	movs	r3, r2
    4c7c:	009b      	lsls	r3, r3, #2
    4c7e:	189b      	adds	r3, r3, r2
    4c80:	009b      	lsls	r3, r3, #2
    4c82:	18cb      	adds	r3, r1, r3
    4c84:	3304      	adds	r3, #4
    4c86:	681b      	ldr	r3, [r3, #0]
    4c88:	220c      	movs	r2, #12
    4c8a:	4013      	ands	r3, r2
    4c8c:	2b08      	cmp	r3, #8
    4c8e:	d122      	bne.n	4cd6 <_timer_init+0x14e>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4c90:	230f      	movs	r3, #15
    4c92:	18fb      	adds	r3, r7, r3
    4c94:	2200      	movs	r2, #0
    4c96:	569a      	ldrsb	r2, [r3, r2]
    4c98:	4973      	ldr	r1, [pc, #460]	; (4e68 <_timer_init+0x2e0>)
    4c9a:	0013      	movs	r3, r2
    4c9c:	009b      	lsls	r3, r3, #2
    4c9e:	189b      	adds	r3, r3, r2
    4ca0:	009b      	lsls	r3, r3, #2
    4ca2:	18cb      	adds	r3, r1, r3
    4ca4:	330c      	adds	r3, #12
    4ca6:	681a      	ldr	r2, [r3, #0]
    4ca8:	683b      	ldr	r3, [r7, #0]
    4caa:	2100      	movs	r1, #0
    4cac:	0018      	movs	r0, r3
    4cae:	4b72      	ldr	r3, [pc, #456]	; (4e78 <_timer_init+0x2f0>)
    4cb0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4cb2:	230f      	movs	r3, #15
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	2200      	movs	r2, #0
    4cb8:	569a      	ldrsb	r2, [r3, r2]
    4cba:	496b      	ldr	r1, [pc, #428]	; (4e68 <_timer_init+0x2e0>)
    4cbc:	0013      	movs	r3, r2
    4cbe:	009b      	lsls	r3, r3, #2
    4cc0:	189b      	adds	r3, r3, r2
    4cc2:	009b      	lsls	r3, r3, #2
    4cc4:	18cb      	adds	r3, r1, r3
    4cc6:	3310      	adds	r3, #16
    4cc8:	681a      	ldr	r2, [r3, #0]
    4cca:	683b      	ldr	r3, [r7, #0]
    4ccc:	2101      	movs	r1, #1
    4cce:	0018      	movs	r0, r3
    4cd0:	4b69      	ldr	r3, [pc, #420]	; (4e78 <_timer_init+0x2f0>)
    4cd2:	4798      	blx	r3
    4cd4:	e078      	b.n	4dc8 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4cd6:	230f      	movs	r3, #15
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	2200      	movs	r2, #0
    4cdc:	569a      	ldrsb	r2, [r3, r2]
    4cde:	4962      	ldr	r1, [pc, #392]	; (4e68 <_timer_init+0x2e0>)
    4ce0:	0013      	movs	r3, r2
    4ce2:	009b      	lsls	r3, r3, #2
    4ce4:	189b      	adds	r3, r3, r2
    4ce6:	009b      	lsls	r3, r3, #2
    4ce8:	18cb      	adds	r3, r1, r3
    4cea:	3304      	adds	r3, #4
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	220c      	movs	r2, #12
    4cf0:	4013      	ands	r3, r2
    4cf2:	d124      	bne.n	4d3e <_timer_init+0x1b6>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4cf4:	230f      	movs	r3, #15
    4cf6:	18fb      	adds	r3, r7, r3
    4cf8:	2200      	movs	r2, #0
    4cfa:	569a      	ldrsb	r2, [r3, r2]
    4cfc:	495a      	ldr	r1, [pc, #360]	; (4e68 <_timer_init+0x2e0>)
    4cfe:	0013      	movs	r3, r2
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	189b      	adds	r3, r3, r2
    4d04:	009b      	lsls	r3, r3, #2
    4d06:	18cb      	adds	r3, r1, r3
    4d08:	330c      	adds	r3, #12
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	b29a      	uxth	r2, r3
    4d0e:	683b      	ldr	r3, [r7, #0]
    4d10:	2100      	movs	r1, #0
    4d12:	0018      	movs	r0, r3
    4d14:	4b59      	ldr	r3, [pc, #356]	; (4e7c <_timer_init+0x2f4>)
    4d16:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4d18:	230f      	movs	r3, #15
    4d1a:	18fb      	adds	r3, r7, r3
    4d1c:	2200      	movs	r2, #0
    4d1e:	569a      	ldrsb	r2, [r3, r2]
    4d20:	4951      	ldr	r1, [pc, #324]	; (4e68 <_timer_init+0x2e0>)
    4d22:	0013      	movs	r3, r2
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	189b      	adds	r3, r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	18cb      	adds	r3, r1, r3
    4d2c:	3310      	adds	r3, #16
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	b29a      	uxth	r2, r3
    4d32:	683b      	ldr	r3, [r7, #0]
    4d34:	2101      	movs	r1, #1
    4d36:	0018      	movs	r0, r3
    4d38:	4b50      	ldr	r3, [pc, #320]	; (4e7c <_timer_init+0x2f4>)
    4d3a:	4798      	blx	r3
    4d3c:	e044      	b.n	4dc8 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4d3e:	230f      	movs	r3, #15
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	2200      	movs	r2, #0
    4d44:	569a      	ldrsb	r2, [r3, r2]
    4d46:	4948      	ldr	r1, [pc, #288]	; (4e68 <_timer_init+0x2e0>)
    4d48:	0013      	movs	r3, r2
    4d4a:	009b      	lsls	r3, r3, #2
    4d4c:	189b      	adds	r3, r3, r2
    4d4e:	009b      	lsls	r3, r3, #2
    4d50:	18cb      	adds	r3, r1, r3
    4d52:	3304      	adds	r3, #4
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	220c      	movs	r2, #12
    4d58:	4013      	ands	r3, r2
    4d5a:	2b04      	cmp	r3, #4
    4d5c:	d134      	bne.n	4dc8 <_timer_init+0x240>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4d5e:	230f      	movs	r3, #15
    4d60:	18fb      	adds	r3, r7, r3
    4d62:	2200      	movs	r2, #0
    4d64:	569a      	ldrsb	r2, [r3, r2]
    4d66:	4940      	ldr	r1, [pc, #256]	; (4e68 <_timer_init+0x2e0>)
    4d68:	0013      	movs	r3, r2
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	189b      	adds	r3, r3, r2
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	18cb      	adds	r3, r1, r3
    4d72:	330c      	adds	r3, #12
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	b2da      	uxtb	r2, r3
    4d78:	683b      	ldr	r3, [r7, #0]
    4d7a:	2100      	movs	r1, #0
    4d7c:	0018      	movs	r0, r3
    4d7e:	4b40      	ldr	r3, [pc, #256]	; (4e80 <_timer_init+0x2f8>)
    4d80:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    4d82:	230f      	movs	r3, #15
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	2200      	movs	r2, #0
    4d88:	569a      	ldrsb	r2, [r3, r2]
    4d8a:	4937      	ldr	r1, [pc, #220]	; (4e68 <_timer_init+0x2e0>)
    4d8c:	0013      	movs	r3, r2
    4d8e:	009b      	lsls	r3, r3, #2
    4d90:	189b      	adds	r3, r3, r2
    4d92:	009b      	lsls	r3, r3, #2
    4d94:	18cb      	adds	r3, r1, r3
    4d96:	3310      	adds	r3, #16
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	b2da      	uxtb	r2, r3
    4d9c:	683b      	ldr	r3, [r7, #0]
    4d9e:	2101      	movs	r1, #1
    4da0:	0018      	movs	r0, r3
    4da2:	4b37      	ldr	r3, [pc, #220]	; (4e80 <_timer_init+0x2f8>)
    4da4:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    4da6:	230f      	movs	r3, #15
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	2200      	movs	r2, #0
    4dac:	569a      	ldrsb	r2, [r3, r2]
    4dae:	492e      	ldr	r1, [pc, #184]	; (4e68 <_timer_init+0x2e0>)
    4db0:	0013      	movs	r3, r2
    4db2:	009b      	lsls	r3, r3, #2
    4db4:	189b      	adds	r3, r3, r2
    4db6:	009b      	lsls	r3, r3, #2
    4db8:	18cb      	adds	r3, r1, r3
    4dba:	330b      	adds	r3, #11
    4dbc:	781a      	ldrb	r2, [r3, #0]
    4dbe:	683b      	ldr	r3, [r7, #0]
    4dc0:	0011      	movs	r1, r2
    4dc2:	0018      	movs	r0, r3
    4dc4:	4b2f      	ldr	r3, [pc, #188]	; (4e84 <_timer_init+0x2fc>)
    4dc6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    4dc8:	683b      	ldr	r3, [r7, #0]
    4dca:	0018      	movs	r0, r3
    4dcc:	4b2e      	ldr	r3, [pc, #184]	; (4e88 <_timer_init+0x300>)
    4dce:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    4dd0:	687a      	ldr	r2, [r7, #4]
    4dd2:	683b      	ldr	r3, [r7, #0]
    4dd4:	0011      	movs	r1, r2
    4dd6:	0018      	movs	r0, r3
    4dd8:	4b2c      	ldr	r3, [pc, #176]	; (4e8c <_timer_init+0x304>)
    4dda:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4ddc:	230f      	movs	r3, #15
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	2200      	movs	r2, #0
    4de2:	569a      	ldrsb	r2, [r3, r2]
    4de4:	4920      	ldr	r1, [pc, #128]	; (4e68 <_timer_init+0x2e0>)
    4de6:	0013      	movs	r3, r2
    4de8:	009b      	lsls	r3, r3, #2
    4dea:	189b      	adds	r3, r3, r2
    4dec:	009b      	lsls	r3, r3, #2
    4dee:	18cb      	adds	r3, r1, r3
    4df0:	3301      	adds	r3, #1
    4df2:	781b      	ldrb	r3, [r3, #0]
    4df4:	b25b      	sxtb	r3, r3
    4df6:	0018      	movs	r0, r3
    4df8:	4b25      	ldr	r3, [pc, #148]	; (4e90 <_timer_init+0x308>)
    4dfa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4dfc:	230f      	movs	r3, #15
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	2200      	movs	r2, #0
    4e02:	569a      	ldrsb	r2, [r3, r2]
    4e04:	4918      	ldr	r1, [pc, #96]	; (4e68 <_timer_init+0x2e0>)
    4e06:	0013      	movs	r3, r2
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	189b      	adds	r3, r3, r2
    4e0c:	009b      	lsls	r3, r3, #2
    4e0e:	18cb      	adds	r3, r1, r3
    4e10:	3301      	adds	r3, #1
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	b25b      	sxtb	r3, r3
    4e16:	0018      	movs	r0, r3
    4e18:	4b1e      	ldr	r3, [pc, #120]	; (4e94 <_timer_init+0x30c>)
    4e1a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    4e1c:	230f      	movs	r3, #15
    4e1e:	18fb      	adds	r3, r7, r3
    4e20:	2200      	movs	r2, #0
    4e22:	569a      	ldrsb	r2, [r3, r2]
    4e24:	4910      	ldr	r1, [pc, #64]	; (4e68 <_timer_init+0x2e0>)
    4e26:	0013      	movs	r3, r2
    4e28:	009b      	lsls	r3, r3, #2
    4e2a:	189b      	adds	r3, r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	18cb      	adds	r3, r1, r3
    4e30:	3301      	adds	r3, #1
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	b25b      	sxtb	r3, r3
    4e36:	0018      	movs	r0, r3
    4e38:	4b17      	ldr	r3, [pc, #92]	; (4e98 <_timer_init+0x310>)
    4e3a:	4798      	blx	r3

	return ERR_NONE;
    4e3c:	2300      	movs	r3, #0
}
    4e3e:	0018      	movs	r0, r3
    4e40:	46bd      	mov	sp, r7
    4e42:	b005      	add	sp, #20
    4e44:	bd90      	pop	{r4, r7, pc}
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	00004f01 	.word	0x00004f01
    4e4c:	00007238 	.word	0x00007238
    4e50:	0000209b 	.word	0x0000209b
    4e54:	00004953 	.word	0x00004953
    4e58:	000049ed 	.word	0x000049ed
    4e5c:	000049c1 	.word	0x000049c1
    4e60:	00004935 	.word	0x00004935
    4e64:	00004a1d 	.word	0x00004a1d
    4e68:	2000003c 	.word	0x2000003c
    4e6c:	00004a81 	.word	0x00004a81
    4e70:	00004a45 	.word	0x00004a45
    4e74:	00004a63 	.word	0x00004a63
    4e78:	00004b4d 	.word	0x00004b4d
    4e7c:	00004b09 	.word	0x00004b09
    4e80:	00004acd 	.word	0x00004acd
    4e84:	00004aa1 	.word	0x00004aa1
    4e88:	000049ab 	.word	0x000049ab
    4e8c:	00004f8d 	.word	0x00004f8d
    4e90:	000048bd 	.word	0x000048bd
    4e94:	000048fd 	.word	0x000048fd
    4e98:	00004889 	.word	0x00004889

00004e9c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    4e9c:	b580      	push	{r7, lr}
    4e9e:	af00      	add	r7, sp, #0
	return NULL;
    4ea0:	2300      	movs	r3, #0
}
    4ea2:	0018      	movs	r0, r3
    4ea4:	46bd      	mov	sp, r7
    4ea6:	bd80      	pop	{r7, pc}

00004ea8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4ea8:	b580      	push	{r7, lr}
    4eaa:	b084      	sub	sp, #16
    4eac:	af00      	add	r7, sp, #0
    4eae:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	68db      	ldr	r3, [r3, #12]
    4eb4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4eb6:	68fb      	ldr	r3, [r7, #12]
    4eb8:	0018      	movs	r0, r3
    4eba:	4b08      	ldr	r3, [pc, #32]	; (4edc <tc_interrupt_handler+0x34>)
    4ebc:	4798      	blx	r3
    4ebe:	1e03      	subs	r3, r0, #0
    4ec0:	d008      	beq.n	4ed4 <tc_interrupt_handler+0x2c>
		hri_tc_clear_interrupt_OVF_bit(hw);
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	0018      	movs	r0, r3
    4ec6:	4b06      	ldr	r3, [pc, #24]	; (4ee0 <tc_interrupt_handler+0x38>)
    4ec8:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	687a      	ldr	r2, [r7, #4]
    4ed0:	0010      	movs	r0, r2
    4ed2:	4798      	blx	r3
	}
}
    4ed4:	46c0      	nop			; (mov r8, r8)
    4ed6:	46bd      	mov	sp, r7
    4ed8:	b004      	add	sp, #16
    4eda:	bd80      	pop	{r7, pc}
    4edc:	00004973 	.word	0x00004973
    4ee0:	00004995 	.word	0x00004995

00004ee4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    4ee8:	4b03      	ldr	r3, [pc, #12]	; (4ef8 <TC0_Handler+0x14>)
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	0018      	movs	r0, r3
    4eee:	4b03      	ldr	r3, [pc, #12]	; (4efc <TC0_Handler+0x18>)
    4ef0:	4798      	blx	r3
}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	46bd      	mov	sp, r7
    4ef6:	bd80      	pop	{r7, pc}
    4ef8:	20000094 	.word	0x20000094
    4efc:	00004ea9 	.word	0x00004ea9

00004f00 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    4f00:	b590      	push	{r4, r7, lr}
    4f02:	b085      	sub	sp, #20
    4f04:	af00      	add	r7, sp, #0
    4f06:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    4f08:	230e      	movs	r3, #14
    4f0a:	18fc      	adds	r4, r7, r3
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	0018      	movs	r0, r3
    4f10:	4b1a      	ldr	r3, [pc, #104]	; (4f7c <get_tc_index+0x7c>)
    4f12:	4798      	blx	r3
    4f14:	0003      	movs	r3, r0
    4f16:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4f18:	230f      	movs	r3, #15
    4f1a:	18fb      	adds	r3, r7, r3
    4f1c:	2200      	movs	r2, #0
    4f1e:	701a      	strb	r2, [r3, #0]
    4f20:	e019      	b.n	4f56 <get_tc_index+0x56>
		if (_tcs[i].number == index) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781a      	ldrb	r2, [r3, #0]
    4f28:	4915      	ldr	r1, [pc, #84]	; (4f80 <get_tc_index+0x80>)
    4f2a:	0013      	movs	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	189b      	adds	r3, r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	5c5b      	ldrb	r3, [r3, r1]
    4f34:	220e      	movs	r2, #14
    4f36:	18ba      	adds	r2, r7, r2
    4f38:	7812      	ldrb	r2, [r2, #0]
    4f3a:	429a      	cmp	r2, r3
    4f3c:	d104      	bne.n	4f48 <get_tc_index+0x48>
			return i;
    4f3e:	230f      	movs	r3, #15
    4f40:	18fb      	adds	r3, r7, r3
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	b25b      	sxtb	r3, r3
    4f46:	e014      	b.n	4f72 <get_tc_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4f48:	230f      	movs	r3, #15
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	781a      	ldrb	r2, [r3, #0]
    4f4e:	230f      	movs	r3, #15
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	3201      	adds	r2, #1
    4f54:	701a      	strb	r2, [r3, #0]
    4f56:	230f      	movs	r3, #15
    4f58:	18fb      	adds	r3, r7, r3
    4f5a:	781b      	ldrb	r3, [r3, #0]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d0e0      	beq.n	4f22 <get_tc_index+0x22>
		}
	}

	ASSERT(false);
    4f60:	239e      	movs	r3, #158	; 0x9e
    4f62:	005a      	lsls	r2, r3, #1
    4f64:	4b07      	ldr	r3, [pc, #28]	; (4f84 <get_tc_index+0x84>)
    4f66:	0019      	movs	r1, r3
    4f68:	2000      	movs	r0, #0
    4f6a:	4b07      	ldr	r3, [pc, #28]	; (4f88 <get_tc_index+0x88>)
    4f6c:	4798      	blx	r3
	return -1;
    4f6e:	2301      	movs	r3, #1
    4f70:	425b      	negs	r3, r3
}
    4f72:	0018      	movs	r0, r3
    4f74:	46bd      	mov	sp, r7
    4f76:	b005      	add	sp, #20
    4f78:	bd90      	pop	{r4, r7, pc}
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	00004fb5 	.word	0x00004fb5
    4f80:	2000003c 	.word	0x2000003c
    4f84:	00007238 	.word	0x00007238
    4f88:	0000209b 	.word	0x0000209b

00004f8c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b082      	sub	sp, #8
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
    4f94:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	4a04      	ldr	r2, [pc, #16]	; (4fac <_tc_init_irq_param+0x20>)
    4f9a:	4293      	cmp	r3, r2
    4f9c:	d102      	bne.n	4fa4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    4f9e:	4b04      	ldr	r3, [pc, #16]	; (4fb0 <_tc_init_irq_param+0x24>)
    4fa0:	683a      	ldr	r2, [r7, #0]
    4fa2:	601a      	str	r2, [r3, #0]
	}
}
    4fa4:	46c0      	nop			; (mov r8, r8)
    4fa6:	46bd      	mov	sp, r7
    4fa8:	b002      	add	sp, #8
    4faa:	bd80      	pop	{r7, pc}
    4fac:	42002000 	.word	0x42002000
    4fb0:	20000094 	.word	0x20000094

00004fb4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b082      	sub	sp, #8
    4fb8:	af00      	add	r7, sp, #0
    4fba:	6078      	str	r0, [r7, #4]
	if ((uint32_t)TC4 == (uint32_t)hw) {
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	4a07      	ldr	r2, [pc, #28]	; (4fdc <_get_hardware_offset+0x28>)
    4fc0:	4293      	cmp	r3, r2
    4fc2:	d101      	bne.n	4fc8 <_get_hardware_offset+0x14>
		return 4;
    4fc4:	2304      	movs	r3, #4
    4fc6:	e005      	b.n	4fd4 <_get_hardware_offset+0x20>
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	4a05      	ldr	r2, [pc, #20]	; (4fe0 <_get_hardware_offset+0x2c>)
    4fcc:	4694      	mov	ip, r2
    4fce:	4463      	add	r3, ip
    4fd0:	0a9b      	lsrs	r3, r3, #10
    4fd2:	b2db      	uxtb	r3, r3
}
    4fd4:	0018      	movs	r0, r3
    4fd6:	46bd      	mov	sp, r7
    4fd8:	b002      	add	sp, #8
    4fda:	bd80      	pop	{r7, pc}
    4fdc:	43000800 	.word	0x43000800
    4fe0:	bdffe000 	.word	0xbdffe000

00004fe4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
    4fea:	6078      	str	r0, [r7, #4]
    4fec:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	689b      	ldr	r3, [r3, #8]
    4ff4:	683a      	ldr	r2, [r7, #0]
    4ff6:	4013      	ands	r3, r2
    4ff8:	d1fa      	bne.n	4ff0 <hri_wdt_wait_for_sync+0xc>
	};
}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	46bd      	mov	sp, r7
    4ffe:	b002      	add	sp, #8
    5000:	bd80      	pop	{r7, pc}
	...

00005004 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5004:	b580      	push	{r7, lr}
    5006:	b084      	sub	sp, #16
    5008:	af00      	add	r7, sp, #0
    500a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	210e      	movs	r1, #14
    5010:	0018      	movs	r0, r3
    5012:	4b0d      	ldr	r3, [pc, #52]	; (5048 <hri_wdt_get_CTRLA_ENABLE_bit+0x44>)
    5014:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5016:	230f      	movs	r3, #15
    5018:	18fb      	adds	r3, r7, r3
    501a:	687a      	ldr	r2, [r7, #4]
    501c:	7812      	ldrb	r2, [r2, #0]
    501e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    5020:	230f      	movs	r3, #15
    5022:	18fb      	adds	r3, r7, r3
    5024:	781b      	ldrb	r3, [r3, #0]
    5026:	085b      	lsrs	r3, r3, #1
    5028:	b2da      	uxtb	r2, r3
    502a:	230f      	movs	r3, #15
    502c:	18fb      	adds	r3, r7, r3
    502e:	2101      	movs	r1, #1
    5030:	400a      	ands	r2, r1
    5032:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    5034:	230f      	movs	r3, #15
    5036:	18fb      	adds	r3, r7, r3
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	1e5a      	subs	r2, r3, #1
    503c:	4193      	sbcs	r3, r2
    503e:	b2db      	uxtb	r3, r3
}
    5040:	0018      	movs	r0, r3
    5042:	46bd      	mov	sp, r7
    5044:	b004      	add	sp, #16
    5046:	bd80      	pop	{r7, pc}
    5048:	00004fe5 	.word	0x00004fe5

0000504c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    504c:	b580      	push	{r7, lr}
    504e:	b082      	sub	sp, #8
    5050:	af00      	add	r7, sp, #0
    5052:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	b2db      	uxtb	r3, r3
    505a:	2204      	movs	r2, #4
    505c:	4393      	bics	r3, r2
    505e:	b2da      	uxtb	r2, r3
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	210e      	movs	r1, #14
    5068:	0018      	movs	r0, r3
    506a:	4b03      	ldr	r3, [pc, #12]	; (5078 <hri_wdt_clear_CTRLA_WEN_bit+0x2c>)
    506c:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	46bd      	mov	sp, r7
    5072:	b002      	add	sp, #8
    5074:	bd80      	pop	{r7, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	00004fe5 	.word	0x00004fe5

0000507c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    507c:	b580      	push	{r7, lr}
    507e:	b084      	sub	sp, #16
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	210e      	movs	r1, #14
    5088:	0018      	movs	r0, r3
    508a:	4b0c      	ldr	r3, [pc, #48]	; (50bc <hri_wdt_get_CTRLA_ALWAYSON_bit+0x40>)
    508c:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    508e:	230f      	movs	r3, #15
    5090:	18fb      	adds	r3, r7, r3
    5092:	687a      	ldr	r2, [r7, #4]
    5094:	7812      	ldrb	r2, [r2, #0]
    5096:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    5098:	230f      	movs	r3, #15
    509a:	18fb      	adds	r3, r7, r3
    509c:	220f      	movs	r2, #15
    509e:	18ba      	adds	r2, r7, r2
    50a0:	7812      	ldrb	r2, [r2, #0]
    50a2:	09d2      	lsrs	r2, r2, #7
    50a4:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
    50a6:	230f      	movs	r3, #15
    50a8:	18fb      	adds	r3, r7, r3
    50aa:	781b      	ldrb	r3, [r3, #0]
    50ac:	1e5a      	subs	r2, r3, #1
    50ae:	4193      	sbcs	r3, r2
    50b0:	b2db      	uxtb	r3, r3
}
    50b2:	0018      	movs	r0, r3
    50b4:	46bd      	mov	sp, r7
    50b6:	b004      	add	sp, #16
    50b8:	bd80      	pop	{r7, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	00004fe5 	.word	0x00004fe5

000050c0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	b084      	sub	sp, #16
    50c4:	af00      	add	r7, sp, #0
    50c6:	6078      	str	r0, [r7, #4]
    50c8:	000a      	movs	r2, r1
    50ca:	1cfb      	adds	r3, r7, #3
    50cc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    50ce:	230f      	movs	r3, #15
    50d0:	18fb      	adds	r3, r7, r3
    50d2:	687a      	ldr	r2, [r7, #4]
    50d4:	7852      	ldrb	r2, [r2, #1]
    50d6:	701a      	strb	r2, [r3, #0]
	tmp &= ~WDT_CONFIG_PER_Msk;
    50d8:	230f      	movs	r3, #15
    50da:	18fb      	adds	r3, r7, r3
    50dc:	220f      	movs	r2, #15
    50de:	18ba      	adds	r2, r7, r2
    50e0:	7812      	ldrb	r2, [r2, #0]
    50e2:	210f      	movs	r1, #15
    50e4:	438a      	bics	r2, r1
    50e6:	701a      	strb	r2, [r3, #0]
	tmp |= WDT_CONFIG_PER(data);
    50e8:	1cfb      	adds	r3, r7, #3
    50ea:	781b      	ldrb	r3, [r3, #0]
    50ec:	220f      	movs	r2, #15
    50ee:	4013      	ands	r3, r2
    50f0:	b2d9      	uxtb	r1, r3
    50f2:	230f      	movs	r3, #15
    50f4:	18fb      	adds	r3, r7, r3
    50f6:	220f      	movs	r2, #15
    50f8:	18ba      	adds	r2, r7, r2
    50fa:	7812      	ldrb	r2, [r2, #0]
    50fc:	430a      	orrs	r2, r1
    50fe:	701a      	strb	r2, [r3, #0]
	((Wdt *)hw)->CONFIG.reg = tmp;
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	220f      	movs	r2, #15
    5104:	18ba      	adds	r2, r7, r2
    5106:	7812      	ldrb	r2, [r2, #0]
    5108:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	46bd      	mov	sp, r7
    510e:	b004      	add	sp, #16
    5110:	bd80      	pop	{r7, pc}

00005112 <hri_wdt_read_CONFIG_PER_bf>:
	((Wdt *)hw)->CONFIG.reg ^= WDT_CONFIG_PER(mask);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline hri_wdt_config_reg_t hri_wdt_read_CONFIG_PER_bf(const void *const hw)
{
    5112:	b580      	push	{r7, lr}
    5114:	b084      	sub	sp, #16
    5116:	af00      	add	r7, sp, #0
    5118:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Wdt *)hw)->CONFIG.reg;
    511a:	230f      	movs	r3, #15
    511c:	18fb      	adds	r3, r7, r3
    511e:	687a      	ldr	r2, [r7, #4]
    5120:	7852      	ldrb	r2, [r2, #1]
    5122:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & WDT_CONFIG_PER_Msk) >> WDT_CONFIG_PER_Pos;
    5124:	230f      	movs	r3, #15
    5126:	18fb      	adds	r3, r7, r3
    5128:	220f      	movs	r2, #15
    512a:	18ba      	adds	r2, r7, r2
    512c:	7812      	ldrb	r2, [r2, #0]
    512e:	210f      	movs	r1, #15
    5130:	400a      	ands	r2, r1
    5132:	701a      	strb	r2, [r3, #0]
	return tmp;
    5134:	230f      	movs	r3, #15
    5136:	18fb      	adds	r3, r7, r3
    5138:	781b      	ldrb	r3, [r3, #0]
}
    513a:	0018      	movs	r0, r3
    513c:	46bd      	mov	sp, r7
    513e:	b004      	add	sp, #16
    5140:	bd80      	pop	{r7, pc}
	...

00005144 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    5144:	b580      	push	{r7, lr}
    5146:	b082      	sub	sp, #8
    5148:	af00      	add	r7, sp, #0
    514a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	2b00      	cmp	r3, #0
    5150:	d005      	beq.n	515e <_wdt_init+0x1a>
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	681b      	ldr	r3, [r3, #0]
    5156:	2b00      	cmp	r3, #0
    5158:	d001      	beq.n	515e <_wdt_init+0x1a>
    515a:	2301      	movs	r3, #1
    515c:	e000      	b.n	5160 <_wdt_init+0x1c>
    515e:	2300      	movs	r3, #0
    5160:	1c1a      	adds	r2, r3, #0
    5162:	2301      	movs	r3, #1
    5164:	4013      	ands	r3, r2
    5166:	b2db      	uxtb	r3, r3
    5168:	4912      	ldr	r1, [pc, #72]	; (51b4 <_wdt_init+0x70>)
    516a:	2250      	movs	r2, #80	; 0x50
    516c:	0018      	movs	r0, r3
    516e:	4b12      	ldr	r3, [pc, #72]	; (51b8 <_wdt_init+0x74>)
    5170:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	681b      	ldr	r3, [r3, #0]
    5176:	0018      	movs	r0, r3
    5178:	4b10      	ldr	r3, [pc, #64]	; (51bc <_wdt_init+0x78>)
    517a:	4798      	blx	r3
    517c:	1e03      	subs	r3, r0, #0
    517e:	d106      	bne.n	518e <_wdt_init+0x4a>
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	681b      	ldr	r3, [r3, #0]
    5184:	0018      	movs	r0, r3
    5186:	4b0e      	ldr	r3, [pc, #56]	; (51c0 <_wdt_init+0x7c>)
    5188:	4798      	blx	r3
    518a:	1e03      	subs	r3, r0, #0
    518c:	d002      	beq.n	5194 <_wdt_init+0x50>
		return ERR_DENIED;
    518e:	2311      	movs	r3, #17
    5190:	425b      	negs	r3, r3
    5192:	e00b      	b.n	51ac <_wdt_init+0x68>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	681b      	ldr	r3, [r3, #0]
    5198:	0018      	movs	r0, r3
    519a:	4b0a      	ldr	r3, [pc, #40]	; (51c4 <_wdt_init+0x80>)
    519c:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	681b      	ldr	r3, [r3, #0]
    51a2:	2100      	movs	r1, #0
    51a4:	0018      	movs	r0, r3
    51a6:	4b08      	ldr	r3, [pc, #32]	; (51c8 <_wdt_init+0x84>)
    51a8:	4798      	blx	r3
	}

	return ERR_NONE;
    51aa:	2300      	movs	r3, #0
}
    51ac:	0018      	movs	r0, r3
    51ae:	46bd      	mov	sp, r7
    51b0:	b002      	add	sp, #8
    51b2:	bd80      	pop	{r7, pc}
    51b4:	0000724c 	.word	0x0000724c
    51b8:	0000209b 	.word	0x0000209b
    51bc:	0000507d 	.word	0x0000507d
    51c0:	00005005 	.word	0x00005005
    51c4:	0000504d 	.word	0x0000504d
    51c8:	000050c1 	.word	0x000050c1

000051cc <_wdt_get_timeout_period>:

/**
 * \brief get timeout period for WDT instance
 */
uint32_t _wdt_get_timeout_period(const struct wdt_dev *const dev, const uint32_t clk_rate)
{
    51cc:	b590      	push	{r4, r7, lr}
    51ce:	b087      	sub	sp, #28
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
    51d4:	6039      	str	r1, [r7, #0]
	uint32_t period_cycles;
	uint32_t timeout_period;
	uint8_t  timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	2b00      	cmp	r3, #0
    51da:	d005      	beq.n	51e8 <_wdt_get_timeout_period+0x1c>
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d001      	beq.n	51e8 <_wdt_get_timeout_period+0x1c>
    51e4:	2301      	movs	r3, #1
    51e6:	e000      	b.n	51ea <_wdt_get_timeout_period+0x1e>
    51e8:	2300      	movs	r3, #0
    51ea:	1c1a      	adds	r2, r3, #0
    51ec:	2301      	movs	r3, #1
    51ee:	4013      	ands	r3, r2
    51f0:	b2db      	uxtb	r3, r3
    51f2:	492a      	ldr	r1, [pc, #168]	; (529c <_wdt_get_timeout_period+0xd0>)
    51f4:	22c1      	movs	r2, #193	; 0xc1
    51f6:	0018      	movs	r0, r3
    51f8:	4b29      	ldr	r3, [pc, #164]	; (52a0 <_wdt_get_timeout_period+0xd4>)
    51fa:	4798      	blx	r3

	/* get the register value */
	timeout_period_reg = hri_wdt_read_CONFIG_PER_bf(dev->hw);
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	2213      	movs	r2, #19
    5202:	18bc      	adds	r4, r7, r2
    5204:	0018      	movs	r0, r3
    5206:	4b27      	ldr	r3, [pc, #156]	; (52a4 <_wdt_get_timeout_period+0xd8>)
    5208:	4798      	blx	r3
    520a:	0003      	movs	r3, r0
    520c:	7023      	strb	r3, [r4, #0]
	/* convert register value to period cycles(clock cycles) */
	switch (timeout_period_reg) {
    520e:	2313      	movs	r3, #19
    5210:	18fb      	adds	r3, r7, r3
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	2b0b      	cmp	r3, #11
    5216:	d82f      	bhi.n	5278 <_wdt_get_timeout_period+0xac>
    5218:	009a      	lsls	r2, r3, #2
    521a:	4b23      	ldr	r3, [pc, #140]	; (52a8 <_wdt_get_timeout_period+0xdc>)
    521c:	18d3      	adds	r3, r2, r3
    521e:	681b      	ldr	r3, [r3, #0]
    5220:	469f      	mov	pc, r3
	case WDT_PERIOD_8CYCLE:
		period_cycles = WDT_CLK_8CYCLE;
    5222:	2308      	movs	r3, #8
    5224:	617b      	str	r3, [r7, #20]
		break;
    5226:	e02a      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_16CYCLE:
		period_cycles = WDT_CLK_16CYCLE;
    5228:	2310      	movs	r3, #16
    522a:	617b      	str	r3, [r7, #20]
		break;
    522c:	e027      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_32CYCLE:
		period_cycles = WDT_CLK_32CYCLE;
    522e:	2320      	movs	r3, #32
    5230:	617b      	str	r3, [r7, #20]
		break;
    5232:	e024      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_64CYCLE:
		period_cycles = WDT_CLK_64CYCLE;
    5234:	2340      	movs	r3, #64	; 0x40
    5236:	617b      	str	r3, [r7, #20]
		break;
    5238:	e021      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_128CYCLE:
		period_cycles = WDT_CLK_128CYCLE;
    523a:	2380      	movs	r3, #128	; 0x80
    523c:	617b      	str	r3, [r7, #20]
		break;
    523e:	e01e      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_256CYCLE:
		period_cycles = WDT_CLK_256CYCLE;
    5240:	2380      	movs	r3, #128	; 0x80
    5242:	005b      	lsls	r3, r3, #1
    5244:	617b      	str	r3, [r7, #20]
		break;
    5246:	e01a      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_512CYCLE:
		period_cycles = WDT_CLK_512CYCLE;
    5248:	2380      	movs	r3, #128	; 0x80
    524a:	009b      	lsls	r3, r3, #2
    524c:	617b      	str	r3, [r7, #20]
		break;
    524e:	e016      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_1024CYCLE:
		period_cycles = WDT_CLK_1024CYCLE;
    5250:	2380      	movs	r3, #128	; 0x80
    5252:	00db      	lsls	r3, r3, #3
    5254:	617b      	str	r3, [r7, #20]
		break;
    5256:	e012      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_2048CYCLE:
		period_cycles = WDT_CLK_2048CYCLE;
    5258:	2380      	movs	r3, #128	; 0x80
    525a:	011b      	lsls	r3, r3, #4
    525c:	617b      	str	r3, [r7, #20]
		break;
    525e:	e00e      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_4096CYCLE:
		period_cycles = WDT_CLK_4096CYCLE;
    5260:	2380      	movs	r3, #128	; 0x80
    5262:	015b      	lsls	r3, r3, #5
    5264:	617b      	str	r3, [r7, #20]
		break;
    5266:	e00a      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_8192CYCLE:
		period_cycles = WDT_CLK_8192CYCLE;
    5268:	2380      	movs	r3, #128	; 0x80
    526a:	019b      	lsls	r3, r3, #6
    526c:	617b      	str	r3, [r7, #20]
		break;
    526e:	e006      	b.n	527e <_wdt_get_timeout_period+0xb2>
	case WDT_PERIOD_16384CYCLE:
		period_cycles = WDT_CLK_16384CYCLE;
    5270:	2380      	movs	r3, #128	; 0x80
    5272:	01db      	lsls	r3, r3, #7
    5274:	617b      	str	r3, [r7, #20]
		break;
    5276:	e002      	b.n	527e <_wdt_get_timeout_period+0xb2>
	default:
		return (uint32_t)-1;
    5278:	2301      	movs	r3, #1
    527a:	425b      	negs	r3, r3
    527c:	e00a      	b.n	5294 <_wdt_get_timeout_period+0xc8>
	}

	/* convert period cycles(clock cycles) to timeout period(ms) */
	timeout_period = period_cycles * 1000 / clk_rate;
    527e:	697b      	ldr	r3, [r7, #20]
    5280:	22fa      	movs	r2, #250	; 0xfa
    5282:	0092      	lsls	r2, r2, #2
    5284:	435a      	muls	r2, r3
    5286:	4b09      	ldr	r3, [pc, #36]	; (52ac <_wdt_get_timeout_period+0xe0>)
    5288:	6839      	ldr	r1, [r7, #0]
    528a:	0010      	movs	r0, r2
    528c:	4798      	blx	r3
    528e:	0003      	movs	r3, r0
    5290:	60fb      	str	r3, [r7, #12]

	return timeout_period;
    5292:	68fb      	ldr	r3, [r7, #12]
}
    5294:	0018      	movs	r0, r3
    5296:	46bd      	mov	sp, r7
    5298:	b007      	add	sp, #28
    529a:	bd90      	pop	{r4, r7, pc}
    529c:	0000724c 	.word	0x0000724c
    52a0:	0000209b 	.word	0x0000209b
    52a4:	00005113 	.word	0x00005113
    52a8:	00007264 	.word	0x00007264
    52ac:	0000612d 	.word	0x0000612d

000052b0 <main>:
	BLOCK_1_ERROR,
	BLOCK_2_ERROR,
};

int main(void)
{
    52b0:	b580      	push	{r7, lr}
    52b2:	af00      	add	r7, sp, #0
	
	atmel_start_init();
    52b4:	4b02      	ldr	r3, [pc, #8]	; (52c0 <main+0x10>)
    52b6:	4798      	blx	r3
	
	temperature_sensors_init();
    52b8:	4b02      	ldr	r3, [pc, #8]	; (52c4 <main+0x14>)
    52ba:	4798      	blx	r3

	while (1) {
    52bc:	e7fe      	b.n	52bc <main+0xc>
    52be:	46c0      	nop			; (mov r8, r8)
    52c0:	00000115 	.word	0x00000115
    52c4:	000060ed 	.word	0x000060ed

000052c8 <list_get_head>:
{
    52c8:	b580      	push	{r7, lr}
    52ca:	b082      	sub	sp, #8
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	681b      	ldr	r3, [r3, #0]
}
    52d4:	0018      	movs	r0, r3
    52d6:	46bd      	mov	sp, r7
    52d8:	b002      	add	sp, #8
    52da:	bd80      	pop	{r7, pc}

000052dc <list_get_next_element>:
{
    52dc:	b580      	push	{r7, lr}
    52de:	b082      	sub	sp, #8
    52e0:	af00      	add	r7, sp, #0
    52e2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d002      	beq.n	52f0 <list_get_next_element+0x14>
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	e000      	b.n	52f2 <list_get_next_element+0x16>
    52f0:	2300      	movs	r3, #0
}
    52f2:	0018      	movs	r0, r3
    52f4:	46bd      	mov	sp, r7
    52f6:	b002      	add	sp, #8
    52f8:	bd80      	pop	{r7, pc}
	...

000052fc <sleepmgr_init>:

/**
 * \brief Initialize sleep manager
 */
void sleepmgr_init(void)
{
    52fc:	b580      	push	{r7, lr}
    52fe:	af00      	add	r7, sp, #0
	event_subscribe(&sleepmgr_event, EVENT_PREPARE_TO_SLEEP_ID, sleepmgr_event_callback);
    5300:	4a0a      	ldr	r2, [pc, #40]	; (532c <sleepmgr_init+0x30>)
    5302:	4b0b      	ldr	r3, [pc, #44]	; (5330 <sleepmgr_init+0x34>)
    5304:	2101      	movs	r1, #1
    5306:	0018      	movs	r0, r3
    5308:	4b0a      	ldr	r3, [pc, #40]	; (5334 <sleepmgr_init+0x38>)
    530a:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_IS_READY_TO_SLEEP_ID, sleepmgr_event_callback);
    530c:	4a07      	ldr	r2, [pc, #28]	; (532c <sleepmgr_init+0x30>)
    530e:	4b08      	ldr	r3, [pc, #32]	; (5330 <sleepmgr_init+0x34>)
    5310:	2100      	movs	r1, #0
    5312:	0018      	movs	r0, r3
    5314:	4b07      	ldr	r3, [pc, #28]	; (5334 <sleepmgr_init+0x38>)
    5316:	4798      	blx	r3
	event_subscribe(&sleepmgr_event, EVENT_WOKEN_UP_ID, sleepmgr_event_callback);
    5318:	4a04      	ldr	r2, [pc, #16]	; (532c <sleepmgr_init+0x30>)
    531a:	4b05      	ldr	r3, [pc, #20]	; (5330 <sleepmgr_init+0x34>)
    531c:	2102      	movs	r1, #2
    531e:	0018      	movs	r0, r3
    5320:	4b04      	ldr	r3, [pc, #16]	; (5334 <sleepmgr_init+0x38>)
    5322:	4798      	blx	r3
}
    5324:	46c0      	nop			; (mov r8, r8)
    5326:	46bd      	mov	sp, r7
    5328:	bd80      	pop	{r7, pc}
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	00005379 	.word	0x00005379
    5330:	20000098 	.word	0x20000098
    5334:	000020c9 	.word	0x000020c9

00005338 <sleepmgr_register_ready_to_sleep_callback>:

/**
 * \brief Register sleep callback
 */
void sleepmgr_register_ready_to_sleep_callback(struct sleepmgr_ready_to_sleep_cb *const cb)
{
    5338:	b580      	push	{r7, lr}
    533a:	b082      	sub	sp, #8
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
	ASSERT(cb);
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	1e5a      	subs	r2, r3, #1
    5344:	4193      	sbcs	r3, r2
    5346:	b2db      	uxtb	r3, r3
    5348:	4907      	ldr	r1, [pc, #28]	; (5368 <sleepmgr_register_ready_to_sleep_callback+0x30>)
    534a:	2240      	movs	r2, #64	; 0x40
    534c:	0018      	movs	r0, r3
    534e:	4b07      	ldr	r3, [pc, #28]	; (536c <sleepmgr_register_ready_to_sleep_callback+0x34>)
    5350:	4798      	blx	r3

	list_insert_as_head(&ready_to_sleep_cbs, cb);
    5352:	687a      	ldr	r2, [r7, #4]
    5354:	4b06      	ldr	r3, [pc, #24]	; (5370 <sleepmgr_register_ready_to_sleep_callback+0x38>)
    5356:	0011      	movs	r1, r2
    5358:	0018      	movs	r0, r3
    535a:	4b06      	ldr	r3, [pc, #24]	; (5374 <sleepmgr_register_ready_to_sleep_callback+0x3c>)
    535c:	4798      	blx	r3
}
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	46bd      	mov	sp, r7
    5362:	b002      	add	sp, #8
    5364:	bd80      	pop	{r7, pc}
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	00007294 	.word	0x00007294
    536c:	0000209b 	.word	0x0000209b
    5370:	200000a4 	.word	0x200000a4
    5374:	00002221 	.word	0x00002221

00005378 <sleepmgr_event_callback>:
 *
 * \param[in] id The event ID to process
 * \param[in] data Not used
 */
static void sleepmgr_event_callback(event_id_t id, event_data_t data)
{
    5378:	b580      	push	{r7, lr}
    537a:	b088      	sub	sp, #32
    537c:	af00      	add	r7, sp, #0
    537e:	0002      	movs	r2, r0
    5380:	6039      	str	r1, [r7, #0]
    5382:	1dfb      	adds	r3, r7, #7
    5384:	701a      	strb	r2, [r3, #0]
	if (EVENT_IS_READY_TO_SLEEP_ID == id) {
    5386:	1dfb      	adds	r3, r7, #7
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	2b00      	cmp	r3, #0
    538c:	d12d      	bne.n	53ea <sleepmgr_event_callback+0x72>
		struct sleepmgr_ready_to_sleep_cb *cur;
		struct sleepmgr_ready_to_sleep *   ret_val = (struct sleepmgr_ready_to_sleep *)data;
    538e:	683b      	ldr	r3, [r7, #0]
    5390:	613b      	str	r3, [r7, #16]
		struct sleepmgr_ready_to_sleep     ready;

		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    5392:	4b32      	ldr	r3, [pc, #200]	; (545c <sleepmgr_event_callback+0xe4>)
    5394:	0018      	movs	r0, r3
    5396:	4b32      	ldr	r3, [pc, #200]	; (5460 <sleepmgr_event_callback+0xe8>)
    5398:	4798      	blx	r3
    539a:	0003      	movs	r3, r0
    539c:	61fb      	str	r3, [r7, #28]
    539e:	e020      	b.n	53e2 <sleepmgr_event_callback+0x6a>
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
			ready.mode  = ret_val->mode;
    53a0:	693b      	ldr	r3, [r7, #16]
    53a2:	785a      	ldrb	r2, [r3, #1]
    53a4:	230c      	movs	r3, #12
    53a6:	18fb      	adds	r3, r7, r3
    53a8:	705a      	strb	r2, [r3, #1]
			ready.ready = true;
    53aa:	230c      	movs	r3, #12
    53ac:	18fb      	adds	r3, r7, r3
    53ae:	2201      	movs	r2, #1
    53b0:	701a      	strb	r2, [r3, #0]
			cur->cb(&ready);
    53b2:	69fb      	ldr	r3, [r7, #28]
    53b4:	685b      	ldr	r3, [r3, #4]
    53b6:	220c      	movs	r2, #12
    53b8:	18ba      	adds	r2, r7, r2
    53ba:	0010      	movs	r0, r2
    53bc:	4798      	blx	r3
			ret_val->ready &= ready.ready;
    53be:	693b      	ldr	r3, [r7, #16]
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	001a      	movs	r2, r3
    53c4:	230c      	movs	r3, #12
    53c6:	18fb      	adds	r3, r7, r3
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	4013      	ands	r3, r2
    53cc:	1e5a      	subs	r2, r3, #1
    53ce:	4193      	sbcs	r3, r2
    53d0:	b2da      	uxtb	r2, r3
    53d2:	693b      	ldr	r3, [r7, #16]
    53d4:	701a      	strb	r2, [r3, #0]
		     cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_next_element(cur)) {
    53d6:	69fb      	ldr	r3, [r7, #28]
    53d8:	0018      	movs	r0, r3
    53da:	4b22      	ldr	r3, [pc, #136]	; (5464 <sleepmgr_event_callback+0xec>)
    53dc:	4798      	blx	r3
    53de:	0003      	movs	r3, r0
    53e0:	61fb      	str	r3, [r7, #28]
		for (cur = (struct sleepmgr_ready_to_sleep_cb *)list_get_head(&ready_to_sleep_cbs); cur;
    53e2:	69fb      	ldr	r3, [r7, #28]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1db      	bne.n	53a0 <sleepmgr_event_callback+0x28>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
			cur->cb(data);
		}
	}
}
    53e8:	e034      	b.n	5454 <sleepmgr_event_callback+0xdc>
	} else if (EVENT_WOKEN_UP_ID == id) {
    53ea:	1dfb      	adds	r3, r7, #7
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b02      	cmp	r3, #2
    53f0:	d116      	bne.n	5420 <sleepmgr_event_callback+0xa8>
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    53f2:	4b1d      	ldr	r3, [pc, #116]	; (5468 <sleepmgr_event_callback+0xf0>)
    53f4:	0018      	movs	r0, r3
    53f6:	4b1a      	ldr	r3, [pc, #104]	; (5460 <sleepmgr_event_callback+0xe8>)
    53f8:	4798      	blx	r3
    53fa:	0003      	movs	r3, r0
    53fc:	61bb      	str	r3, [r7, #24]
    53fe:	e00b      	b.n	5418 <sleepmgr_event_callback+0xa0>
			cur->cb((const enum sleepmgr_wakeup_source)data);
    5400:	69bb      	ldr	r3, [r7, #24]
    5402:	685b      	ldr	r3, [r3, #4]
    5404:	683a      	ldr	r2, [r7, #0]
    5406:	b2d2      	uxtb	r2, r2
    5408:	0010      	movs	r0, r2
    540a:	4798      	blx	r3
		     cur = (struct sleepmgr_wake_up_cb *)list_get_next_element(cur)) {
    540c:	69bb      	ldr	r3, [r7, #24]
    540e:	0018      	movs	r0, r3
    5410:	4b14      	ldr	r3, [pc, #80]	; (5464 <sleepmgr_event_callback+0xec>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	61bb      	str	r3, [r7, #24]
		for (cur = (struct sleepmgr_wake_up_cb *)list_get_head(&wake_up_cbs); cur;
    5418:	69bb      	ldr	r3, [r7, #24]
    541a:	2b00      	cmp	r3, #0
    541c:	d1f0      	bne.n	5400 <sleepmgr_event_callback+0x88>
}
    541e:	e019      	b.n	5454 <sleepmgr_event_callback+0xdc>
	} else if (EVENT_PREPARE_TO_SLEEP_ID == id) {
    5420:	1dfb      	adds	r3, r7, #7
    5422:	781b      	ldrb	r3, [r3, #0]
    5424:	2b01      	cmp	r3, #1
    5426:	d115      	bne.n	5454 <sleepmgr_event_callback+0xdc>
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    5428:	4b10      	ldr	r3, [pc, #64]	; (546c <sleepmgr_event_callback+0xf4>)
    542a:	0018      	movs	r0, r3
    542c:	4b0c      	ldr	r3, [pc, #48]	; (5460 <sleepmgr_event_callback+0xe8>)
    542e:	4798      	blx	r3
    5430:	0003      	movs	r3, r0
    5432:	617b      	str	r3, [r7, #20]
    5434:	e00b      	b.n	544e <sleepmgr_event_callback+0xd6>
			cur->cb(data);
    5436:	697b      	ldr	r3, [r7, #20]
    5438:	685b      	ldr	r3, [r3, #4]
    543a:	683a      	ldr	r2, [r7, #0]
    543c:	b2d2      	uxtb	r2, r2
    543e:	0010      	movs	r0, r2
    5440:	4798      	blx	r3
		     cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_next_element(cur)) {
    5442:	697b      	ldr	r3, [r7, #20]
    5444:	0018      	movs	r0, r3
    5446:	4b07      	ldr	r3, [pc, #28]	; (5464 <sleepmgr_event_callback+0xec>)
    5448:	4798      	blx	r3
    544a:	0003      	movs	r3, r0
    544c:	617b      	str	r3, [r7, #20]
		for (cur = (struct sleepmgr_prepare_to_sleep_cb *)list_get_head(&prepare_to_sleep_cbs); cur;
    544e:	697b      	ldr	r3, [r7, #20]
    5450:	2b00      	cmp	r3, #0
    5452:	d1f0      	bne.n	5436 <sleepmgr_event_callback+0xbe>
}
    5454:	46c0      	nop			; (mov r8, r8)
    5456:	46bd      	mov	sp, r7
    5458:	b008      	add	sp, #32
    545a:	bd80      	pop	{r7, pc}
    545c:	200000a4 	.word	0x200000a4
    5460:	000052c9 	.word	0x000052c9
    5464:	000052dd 	.word	0x000052dd
    5468:	200000ac 	.word	0x200000ac
    546c:	200000a8 	.word	0x200000a8

00005470 <sleep_cb>:
#include "sleep_manager_main.h"

static struct sleepmgr_ready_to_sleep_cb sleepmgr_cb;

static void sleep_cb(struct sleepmgr_ready_to_sleep *const ready)
{
    5470:	b580      	push	{r7, lr}
    5472:	b082      	sub	sp, #8
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
	ready->ready = false;
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	2200      	movs	r2, #0
    547c:	701a      	strb	r2, [r3, #0]
}
    547e:	46c0      	nop			; (mov r8, r8)
    5480:	46bd      	mov	sp, r7
    5482:	b002      	add	sp, #8
    5484:	bd80      	pop	{r7, pc}
	...

00005488 <sleep_manager_init>:

void sleep_manager_init(void)
{
    5488:	b580      	push	{r7, lr}
    548a:	af00      	add	r7, sp, #0
	sleepmgr_init();
    548c:	4b05      	ldr	r3, [pc, #20]	; (54a4 <sleep_manager_init+0x1c>)
    548e:	4798      	blx	r3

	sleepmgr_cb.cb = sleep_cb;
    5490:	4b05      	ldr	r3, [pc, #20]	; (54a8 <sleep_manager_init+0x20>)
    5492:	4a06      	ldr	r2, [pc, #24]	; (54ac <sleep_manager_init+0x24>)
    5494:	605a      	str	r2, [r3, #4]
	sleepmgr_register_ready_to_sleep_callback(&sleepmgr_cb);
    5496:	4b04      	ldr	r3, [pc, #16]	; (54a8 <sleep_manager_init+0x20>)
    5498:	0018      	movs	r0, r3
    549a:	4b05      	ldr	r3, [pc, #20]	; (54b0 <sleep_manager_init+0x28>)
    549c:	4798      	blx	r3
}
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	46bd      	mov	sp, r7
    54a2:	bd80      	pop	{r7, pc}
    54a4:	000052fd 	.word	0x000052fd
    54a8:	200000b0 	.word	0x200000b0
    54ac:	00005471 	.word	0x00005471
    54b0:	00005339 	.word	0x00005339

000054b4 <mcp980X_construct>:


static const struct temperature_sensor_interface mcp980x_interface = {mcp980x_read, mcp980x_config};

struct temperature_sensor *mcp980X_construct(struct temperature_sensor *const me, void *const io,const uint8_t resolution)
{
    54b4:	b580      	push	{r7, lr}
    54b6:	b086      	sub	sp, #24
    54b8:	af00      	add	r7, sp, #0
    54ba:	60f8      	str	r0, [r7, #12]
    54bc:	60b9      	str	r1, [r7, #8]
    54be:	1dfb      	adds	r3, r7, #7
    54c0:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr;
	struct mcp980x *     mcp98 = (struct mcp980x *)me;
    54c2:	68fb      	ldr	r3, [r7, #12]
    54c4:	617b      	str	r3, [r7, #20]

	temperature_sensor_construct(me, io, &mcp980x_interface);
    54c6:	4a0a      	ldr	r2, [pc, #40]	; (54f0 <mcp980X_construct+0x3c>)
    54c8:	68b9      	ldr	r1, [r7, #8]
    54ca:	68fb      	ldr	r3, [r7, #12]
    54cc:	0018      	movs	r0, r3
    54ce:	4b09      	ldr	r3, [pc, #36]	; (54f4 <mcp980X_construct+0x40>)
    54d0:	4798      	blx	r3
	descr            = (struct i2c_m_sync_desc *)(me->io);
    54d2:	68fb      	ldr	r3, [r7, #12]
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	613b      	str	r3, [r7, #16]
	
	i2c_m_sync_set_slaveaddr(descr, CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    54d8:	2380      	movs	r3, #128	; 0x80
    54da:	011a      	lsls	r2, r3, #4
    54dc:	693b      	ldr	r3, [r7, #16]
    54de:	2118      	movs	r1, #24
    54e0:	0018      	movs	r0, r3
    54e2:	4b05      	ldr	r3, [pc, #20]	; (54f8 <mcp980X_construct+0x44>)
    54e4:	4798      	blx	r3

	return me;
    54e6:	68fb      	ldr	r3, [r7, #12]
}
    54e8:	0018      	movs	r0, r3
    54ea:	46bd      	mov	sp, r7
    54ec:	b006      	add	sp, #24
    54ee:	bd80      	pop	{r7, pc}
    54f0:	000072b8 	.word	0x000072b8
    54f4:	00005e61 	.word	0x00005e61
    54f8:	000016ed 	.word	0x000016ed

000054fc <mcp980x_read>:

/**
 * \brief Read temperature from the given sensor
 */
float mcp980x_read(const struct temperature_sensor *const me)
{
    54fc:	b590      	push	{r4, r7, lr}
    54fe:	b089      	sub	sp, #36	; 0x24
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2]; 
	buffer[0]=MCP980X_TEMP_REG;
    5504:	230c      	movs	r3, #12
    5506:	18fb      	adds	r3, r7, r3
    5508:	2205      	movs	r2, #5
    550a:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	681b      	ldr	r3, [r3, #0]
    5510:	61bb      	str	r3, [r7, #24]
	  
	int x = 0;
    5512:	2300      	movs	r3, #0
    5514:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(descr,CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    5516:	2380      	movs	r3, #128	; 0x80
    5518:	011a      	lsls	r2, r3, #4
    551a:	69bb      	ldr	r3, [r7, #24]
    551c:	2118      	movs	r1, #24
    551e:	0018      	movs	r0, r3
    5520:	4b20      	ldr	r3, [pc, #128]	; (55a4 <mcp980x_read+0xa8>)
    5522:	4798      	blx	r3
	
	x = io_write(&descr->io, buffer, 1);
    5524:	69bb      	ldr	r3, [r7, #24]
    5526:	3314      	adds	r3, #20
    5528:	220c      	movs	r2, #12
    552a:	18b9      	adds	r1, r7, r2
    552c:	2201      	movs	r2, #1
    552e:	0018      	movs	r0, r3
    5530:	4b1d      	ldr	r3, [pc, #116]	; (55a8 <mcp980x_read+0xac>)
    5532:	4798      	blx	r3
    5534:	0003      	movs	r3, r0
    5536:	617b      	str	r3, [r7, #20]
	x = io_read(&descr->io, buffer, 2);
    5538:	69bb      	ldr	r3, [r7, #24]
    553a:	3314      	adds	r3, #20
    553c:	220c      	movs	r2, #12
    553e:	18b9      	adds	r1, r7, r2
    5540:	2202      	movs	r2, #2
    5542:	0018      	movs	r0, r3
    5544:	4b19      	ldr	r3, [pc, #100]	; (55ac <mcp980x_read+0xb0>)
    5546:	4798      	blx	r3
    5548:	0003      	movs	r3, r0
    554a:	617b      	str	r3, [r7, #20]
	
	int temp = ((buffer[0] & 0x1F) * 256 + buffer[1]);
    554c:	230c      	movs	r3, #12
    554e:	18fb      	adds	r3, r7, r3
    5550:	781b      	ldrb	r3, [r3, #0]
    5552:	001a      	movs	r2, r3
    5554:	231f      	movs	r3, #31
    5556:	4013      	ands	r3, r2
    5558:	021b      	lsls	r3, r3, #8
    555a:	220c      	movs	r2, #12
    555c:	18ba      	adds	r2, r7, r2
    555e:	7852      	ldrb	r2, [r2, #1]
    5560:	189b      	adds	r3, r3, r2
    5562:	61fb      	str	r3, [r7, #28]
	if(temp > 4095)
    5564:	69fb      	ldr	r3, [r7, #28]
    5566:	4a12      	ldr	r2, [pc, #72]	; (55b0 <mcp980x_read+0xb4>)
    5568:	4293      	cmp	r3, r2
    556a:	dd04      	ble.n	5576 <mcp980x_read+0x7a>
	{
		temp -= 8192;
    556c:	69fb      	ldr	r3, [r7, #28]
    556e:	4a11      	ldr	r2, [pc, #68]	; (55b4 <mcp980x_read+0xb8>)
    5570:	4694      	mov	ip, r2
    5572:	4463      	add	r3, ip
    5574:	61fb      	str	r3, [r7, #28]
	}
	float cTemp = temp * 0.0625;
    5576:	4b10      	ldr	r3, [pc, #64]	; (55b8 <mcp980x_read+0xbc>)
    5578:	69f8      	ldr	r0, [r7, #28]
    557a:	4798      	blx	r3
    557c:	4c0f      	ldr	r4, [pc, #60]	; (55bc <mcp980x_read+0xc0>)
    557e:	2200      	movs	r2, #0
    5580:	4b0f      	ldr	r3, [pc, #60]	; (55c0 <mcp980x_read+0xc4>)
    5582:	47a0      	blx	r4
    5584:	0003      	movs	r3, r0
    5586:	000c      	movs	r4, r1
    5588:	0019      	movs	r1, r3
    558a:	0022      	movs	r2, r4
    558c:	4b0d      	ldr	r3, [pc, #52]	; (55c4 <mcp980x_read+0xc8>)
    558e:	0008      	movs	r0, r1
    5590:	0011      	movs	r1, r2
    5592:	4798      	blx	r3
    5594:	1c03      	adds	r3, r0, #0
    5596:	613b      	str	r3, [r7, #16]
	
	return cTemp; 
    5598:	693b      	ldr	r3, [r7, #16]
}
    559a:	1c18      	adds	r0, r3, #0
    559c:	46bd      	mov	sp, r7
    559e:	b009      	add	sp, #36	; 0x24
    55a0:	bd90      	pop	{r4, r7, pc}
    55a2:	46c0      	nop			; (mov r8, r8)
    55a4:	000016ed 	.word	0x000016ed
    55a8:	00001a89 	.word	0x00001a89
    55ac:	00001add 	.word	0x00001add
    55b0:	00000fff 	.word	0x00000fff
    55b4:	ffffe000 	.word	0xffffe000
    55b8:	00006d9d 	.word	0x00006d9d
    55bc:	0000689d 	.word	0x0000689d
    55c0:	3fb00000 	.word	0x3fb00000
    55c4:	00006e21 	.word	0x00006e21

000055c8 <mcp980x_config>:

/**
 *  \brief setup sensor by tempereture sensor settings !!!DONT WORK  !!!! RETURN BAD VALUES !!!!!!
 */
int16_t mcp980x_config(const struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{ 
    55c8:	b580      	push	{r7, lr}
    55ca:	b082      	sub	sp, #8
    55cc:	af00      	add	r7, sp, #0
    55ce:	6078      	str	r0, [r7, #4]
    55d0:	6039      	str	r1, [r7, #0]
	if(_mcp980x_set_setup(me,temp_set)==MCP980X_ERROR){
    55d2:	683a      	ldr	r2, [r7, #0]
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	0011      	movs	r1, r2
    55d8:	0018      	movs	r0, r3
    55da:	4b1e      	ldr	r3, [pc, #120]	; (5654 <mcp980x_config+0x8c>)
    55dc:	4798      	blx	r3
    55de:	0003      	movs	r3, r0
    55e0:	3301      	adds	r3, #1
    55e2:	d102      	bne.n	55ea <mcp980x_config+0x22>
		return MCP980X_ERROR;
    55e4:	2301      	movs	r3, #1
    55e6:	425b      	negs	r3, r3
    55e8:	e030      	b.n	564c <mcp980x_config+0x84>
	}
	if(_mcp980x_set_tupper(me,temp_set)==MCP980X_ERROR){
    55ea:	683a      	ldr	r2, [r7, #0]
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	0011      	movs	r1, r2
    55f0:	0018      	movs	r0, r3
    55f2:	4b19      	ldr	r3, [pc, #100]	; (5658 <mcp980x_config+0x90>)
    55f4:	4798      	blx	r3
    55f6:	0003      	movs	r3, r0
    55f8:	3301      	adds	r3, #1
    55fa:	d102      	bne.n	5602 <mcp980x_config+0x3a>
		return MCP980X_ERROR;
    55fc:	2301      	movs	r3, #1
    55fe:	425b      	negs	r3, r3
    5600:	e024      	b.n	564c <mcp980x_config+0x84>
	}
	
	if(_mcp980x_set_lower(me,temp_set)==MCP980X_ERROR) {
    5602:	683a      	ldr	r2, [r7, #0]
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	0011      	movs	r1, r2
    5608:	0018      	movs	r0, r3
    560a:	4b14      	ldr	r3, [pc, #80]	; (565c <mcp980x_config+0x94>)
    560c:	4798      	blx	r3
    560e:	0003      	movs	r3, r0
    5610:	3301      	adds	r3, #1
    5612:	d102      	bne.n	561a <mcp980x_config+0x52>
		return MCP980X_ERROR; 
    5614:	2301      	movs	r3, #1
    5616:	425b      	negs	r3, r3
    5618:	e018      	b.n	564c <mcp980x_config+0x84>
	}
	if(_mcp980x_set_critical(me,temp_set)==MCP980X_ERROR){
    561a:	683a      	ldr	r2, [r7, #0]
    561c:	687b      	ldr	r3, [r7, #4]
    561e:	0011      	movs	r1, r2
    5620:	0018      	movs	r0, r3
    5622:	4b0f      	ldr	r3, [pc, #60]	; (5660 <mcp980x_config+0x98>)
    5624:	4798      	blx	r3
    5626:	0003      	movs	r3, r0
    5628:	3301      	adds	r3, #1
    562a:	d102      	bne.n	5632 <mcp980x_config+0x6a>
		return MCP980X_ERROR; 
    562c:	2301      	movs	r3, #1
    562e:	425b      	negs	r3, r3
    5630:	e00c      	b.n	564c <mcp980x_config+0x84>
	} 
	if(_mcp980x_set_resolution(me,temp_set)==MCP980X_ERROR){
    5632:	683a      	ldr	r2, [r7, #0]
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	0011      	movs	r1, r2
    5638:	0018      	movs	r0, r3
    563a:	4b0a      	ldr	r3, [pc, #40]	; (5664 <mcp980x_config+0x9c>)
    563c:	4798      	blx	r3
    563e:	0003      	movs	r3, r0
    5640:	3301      	adds	r3, #1
    5642:	d102      	bne.n	564a <mcp980x_config+0x82>
		return MCP980X_ERROR; 
    5644:	2301      	movs	r3, #1
    5646:	425b      	negs	r3, r3
    5648:	e000      	b.n	564c <mcp980x_config+0x84>
	} 	
return MCP980X_ERROR_NONE; 
    564a:	2300      	movs	r3, #0
}
    564c:	0018      	movs	r0, r3
    564e:	46bd      	mov	sp, r7
    5650:	b002      	add	sp, #8
    5652:	bd80      	pop	{r7, pc}
    5654:	00005669 	.word	0x00005669
    5658:	0000582d 	.word	0x0000582d
    565c:	00005a09 	.word	0x00005a09
    5660:	00005be5 	.word	0x00005be5
    5664:	00005dc1 	.word	0x00005dc1

00005668 <_mcp980x_set_setup>:

int16_t _mcp980x_set_setup(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{
    5668:	b580      	push	{r7, lr}
    566a:	b086      	sub	sp, #24
    566c:	af00      	add	r7, sp, #0
    566e:	6078      	str	r0, [r7, #4]
    5670:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(&descr->io, 0x18, I2C_M_SEVEN); 
    5678:	697b      	ldr	r3, [r7, #20]
    567a:	3314      	adds	r3, #20
    567c:	0018      	movs	r0, r3
    567e:	2380      	movs	r3, #128	; 0x80
    5680:	011b      	lsls	r3, r3, #4
    5682:	001a      	movs	r2, r3
    5684:	2118      	movs	r1, #24
    5686:	4b64      	ldr	r3, [pc, #400]	; (5818 <_mcp980x_set_setup+0x1b0>)
    5688:	4798      	blx	r3
	
	uint8_t buffer_setup[3];
	uint8_t buffer_read[2];
	
	memset(buffer_read,0,sizeof(buffer_read));
    568a:	230c      	movs	r3, #12
    568c:	18fb      	adds	r3, r7, r3
    568e:	2202      	movs	r2, #2
    5690:	2100      	movs	r1, #0
    5692:	0018      	movs	r0, r3
    5694:	4b61      	ldr	r3, [pc, #388]	; (581c <_mcp980x_set_setup+0x1b4>)
    5696:	4798      	blx	r3
	 
	buffer_setup[0]=MCP980X_SETUP_REG; 
    5698:	2310      	movs	r3, #16
    569a:	18fb      	adds	r3, r7, r3
    569c:	2201      	movs	r2, #1
    569e:	701a      	strb	r2, [r3, #0]
	
	buffer_setup[1] = temp_set->mcp980x->mcp980x_hysteresis << 1; 
    56a0:	683b      	ldr	r3, [r7, #0]
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	7b5b      	ldrb	r3, [r3, #13]
    56a6:	18db      	adds	r3, r3, r3
    56a8:	b2da      	uxtb	r2, r3
    56aa:	2310      	movs	r3, #16
    56ac:	18fb      	adds	r3, r7, r3
    56ae:	705a      	strb	r2, [r3, #1]
	
	if (temp_set->mcp980x->shutdown)
    56b0:	683b      	ldr	r3, [r7, #0]
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	7bdb      	ldrb	r3, [r3, #15]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d007      	beq.n	56ca <_mcp980x_set_setup+0x62>
	{
		buffer_setup[1] +=1;
    56ba:	2310      	movs	r3, #16
    56bc:	18fb      	adds	r3, r7, r3
    56be:	785b      	ldrb	r3, [r3, #1]
    56c0:	3301      	adds	r3, #1
    56c2:	b2da      	uxtb	r2, r3
    56c4:	2310      	movs	r3, #16
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	705a      	strb	r2, [r3, #1]
	}
	if (temp_set->mcp980x->ctr_loc)
    56ca:	683b      	ldr	r3, [r7, #0]
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	7c1b      	ldrb	r3, [r3, #16]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d009      	beq.n	56e8 <_mcp980x_set_setup+0x80>
	{
		buffer_setup[2]|=0b10000000; 
    56d4:	2310      	movs	r3, #16
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	789b      	ldrb	r3, [r3, #2]
    56da:	2280      	movs	r2, #128	; 0x80
    56dc:	4252      	negs	r2, r2
    56de:	4313      	orrs	r3, r2
    56e0:	b2da      	uxtb	r2, r3
    56e2:	2310      	movs	r3, #16
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->win_loc)
    56e8:	683b      	ldr	r3, [r7, #0]
    56ea:	681b      	ldr	r3, [r3, #0]
    56ec:	7c5b      	ldrb	r3, [r3, #17]
    56ee:	2b00      	cmp	r3, #0
    56f0:	d008      	beq.n	5704 <_mcp980x_set_setup+0x9c>
	{
		buffer_setup[2]|=0b01000000; 		
    56f2:	2310      	movs	r3, #16
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	789b      	ldrb	r3, [r3, #2]
    56f8:	2240      	movs	r2, #64	; 0x40
    56fa:	4313      	orrs	r3, r2
    56fc:	b2da      	uxtb	r2, r3
    56fe:	2310      	movs	r3, #16
    5700:	18fb      	adds	r3, r7, r3
    5702:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->int_crl)
    5704:	683b      	ldr	r3, [r7, #0]
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	7c9b      	ldrb	r3, [r3, #18]
    570a:	2b00      	cmp	r3, #0
    570c:	d008      	beq.n	5720 <_mcp980x_set_setup+0xb8>
	{
		buffer_setup[2]|=0b00100000; 	
    570e:	2310      	movs	r3, #16
    5710:	18fb      	adds	r3, r7, r3
    5712:	789b      	ldrb	r3, [r3, #2]
    5714:	2220      	movs	r2, #32
    5716:	4313      	orrs	r3, r2
    5718:	b2da      	uxtb	r2, r3
    571a:	2310      	movs	r3, #16
    571c:	18fb      	adds	r3, r7, r3
    571e:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_stat)
    5720:	683b      	ldr	r3, [r7, #0]
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	7cdb      	ldrb	r3, [r3, #19]
    5726:	2b00      	cmp	r3, #0
    5728:	d008      	beq.n	573c <_mcp980x_set_setup+0xd4>
	{
		buffer_setup[2]|=0b00010000; 	
    572a:	2310      	movs	r3, #16
    572c:	18fb      	adds	r3, r7, r3
    572e:	789b      	ldrb	r3, [r3, #2]
    5730:	2210      	movs	r2, #16
    5732:	4313      	orrs	r3, r2
    5734:	b2da      	uxtb	r2, r3
    5736:	2310      	movs	r3, #16
    5738:	18fb      	adds	r3, r7, r3
    573a:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_cnt)
    573c:	683b      	ldr	r3, [r7, #0]
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	7ddb      	ldrb	r3, [r3, #23]
    5742:	2b00      	cmp	r3, #0
    5744:	d008      	beq.n	5758 <_mcp980x_set_setup+0xf0>
	{
		buffer_setup[2]|=0b00001000; 	
    5746:	2310      	movs	r3, #16
    5748:	18fb      	adds	r3, r7, r3
    574a:	789b      	ldrb	r3, [r3, #2]
    574c:	2208      	movs	r2, #8
    574e:	4313      	orrs	r3, r2
    5750:	b2da      	uxtb	r2, r3
    5752:	2310      	movs	r3, #16
    5754:	18fb      	adds	r3, r7, r3
    5756:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_sel)
    5758:	683b      	ldr	r3, [r7, #0]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	7d1b      	ldrb	r3, [r3, #20]
    575e:	2b00      	cmp	r3, #0
    5760:	d008      	beq.n	5774 <_mcp980x_set_setup+0x10c>
	{
		buffer_setup[2]|=0b00000100; 	
    5762:	2310      	movs	r3, #16
    5764:	18fb      	adds	r3, r7, r3
    5766:	789b      	ldrb	r3, [r3, #2]
    5768:	2204      	movs	r2, #4
    576a:	4313      	orrs	r3, r2
    576c:	b2da      	uxtb	r2, r3
    576e:	2310      	movs	r3, #16
    5770:	18fb      	adds	r3, r7, r3
    5772:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_pol)
    5774:	683b      	ldr	r3, [r7, #0]
    5776:	681b      	ldr	r3, [r3, #0]
    5778:	7d5b      	ldrb	r3, [r3, #21]
    577a:	2b00      	cmp	r3, #0
    577c:	d008      	beq.n	5790 <_mcp980x_set_setup+0x128>
	{
		buffer_setup[2]|=0b00000010; 	
    577e:	2310      	movs	r3, #16
    5780:	18fb      	adds	r3, r7, r3
    5782:	789b      	ldrb	r3, [r3, #2]
    5784:	2202      	movs	r2, #2
    5786:	4313      	orrs	r3, r2
    5788:	b2da      	uxtb	r2, r3
    578a:	2310      	movs	r3, #16
    578c:	18fb      	adds	r3, r7, r3
    578e:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_mod)
    5790:	683b      	ldr	r3, [r7, #0]
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	7d9b      	ldrb	r3, [r3, #22]
    5796:	2b00      	cmp	r3, #0
    5798:	d008      	beq.n	57ac <_mcp980x_set_setup+0x144>
	{
		buffer_setup[2]|=0b00000001; 	
    579a:	2310      	movs	r3, #16
    579c:	18fb      	adds	r3, r7, r3
    579e:	789b      	ldrb	r3, [r3, #2]
    57a0:	2201      	movs	r2, #1
    57a2:	4313      	orrs	r3, r2
    57a4:	b2da      	uxtb	r2, r3
    57a6:	2310      	movs	r3, #16
    57a8:	18fb      	adds	r3, r7, r3
    57aa:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_setup, 3);
    57ac:	697b      	ldr	r3, [r7, #20]
    57ae:	3314      	adds	r3, #20
    57b0:	2210      	movs	r2, #16
    57b2:	18b9      	adds	r1, r7, r2
    57b4:	2203      	movs	r2, #3
    57b6:	0018      	movs	r0, r3
    57b8:	4b19      	ldr	r3, [pc, #100]	; (5820 <_mcp980x_set_setup+0x1b8>)
    57ba:	4798      	blx	r3
	delay_ms(1000); 
    57bc:	23fa      	movs	r3, #250	; 0xfa
    57be:	009b      	lsls	r3, r3, #2
    57c0:	0018      	movs	r0, r3
    57c2:	4b18      	ldr	r3, [pc, #96]	; (5824 <_mcp980x_set_setup+0x1bc>)
    57c4:	4798      	blx	r3
	io_write(&descr->io, buffer_setup, 1);
    57c6:	697b      	ldr	r3, [r7, #20]
    57c8:	3314      	adds	r3, #20
    57ca:	2210      	movs	r2, #16
    57cc:	18b9      	adds	r1, r7, r2
    57ce:	2201      	movs	r2, #1
    57d0:	0018      	movs	r0, r3
    57d2:	4b13      	ldr	r3, [pc, #76]	; (5820 <_mcp980x_set_setup+0x1b8>)
    57d4:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    57d6:	697b      	ldr	r3, [r7, #20]
    57d8:	3314      	adds	r3, #20
    57da:	220c      	movs	r2, #12
    57dc:	18b9      	adds	r1, r7, r2
    57de:	2202      	movs	r2, #2
    57e0:	0018      	movs	r0, r3
    57e2:	4b11      	ldr	r3, [pc, #68]	; (5828 <_mcp980x_set_setup+0x1c0>)
    57e4:	4798      	blx	r3
	
	if (buffer_setup[1]!=buffer_read[0] || buffer_setup[2]!=buffer_read[1])
    57e6:	2310      	movs	r3, #16
    57e8:	18fb      	adds	r3, r7, r3
    57ea:	785a      	ldrb	r2, [r3, #1]
    57ec:	230c      	movs	r3, #12
    57ee:	18fb      	adds	r3, r7, r3
    57f0:	781b      	ldrb	r3, [r3, #0]
    57f2:	429a      	cmp	r2, r3
    57f4:	d107      	bne.n	5806 <_mcp980x_set_setup+0x19e>
    57f6:	2310      	movs	r3, #16
    57f8:	18fb      	adds	r3, r7, r3
    57fa:	789a      	ldrb	r2, [r3, #2]
    57fc:	230c      	movs	r3, #12
    57fe:	18fb      	adds	r3, r7, r3
    5800:	785b      	ldrb	r3, [r3, #1]
    5802:	429a      	cmp	r2, r3
    5804:	d002      	beq.n	580c <_mcp980x_set_setup+0x1a4>
	{
		return MCP980X_ERROR;
    5806:	2301      	movs	r3, #1
    5808:	425b      	negs	r3, r3
    580a:	e000      	b.n	580e <_mcp980x_set_setup+0x1a6>
	}
	return MCP980X_ERROR_NONE; 
    580c:	2300      	movs	r3, #0
}
    580e:	0018      	movs	r0, r3
    5810:	46bd      	mov	sp, r7
    5812:	b006      	add	sp, #24
    5814:	bd80      	pop	{r7, pc}
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	000016ed 	.word	0x000016ed
    581c:	00006fb9 	.word	0x00006fb9
    5820:	00001a89 	.word	0x00001a89
    5824:	00001565 	.word	0x00001565
    5828:	00001add 	.word	0x00001add

0000582c <_mcp980x_set_tupper>:

int16_t _mcp980x_set_tupper(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    582c:	b590      	push	{r4, r7, lr}
    582e:	b089      	sub	sp, #36	; 0x24
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
    5834:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	681b      	ldr	r3, [r3, #0]
    583a:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_upper [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_upper,0,sizeof(buffer_temp_upper));
    583c:	230c      	movs	r3, #12
    583e:	18fb      	adds	r3, r7, r3
    5840:	2203      	movs	r2, #3
    5842:	2100      	movs	r1, #0
    5844:	0018      	movs	r0, r3
    5846:	4b68      	ldr	r3, [pc, #416]	; (59e8 <_mcp980x_set_tupper+0x1bc>)
    5848:	4798      	blx	r3
	
	buffer_temp_upper[0]=MCP980X_ALERT_TUPPER_REG; 
    584a:	230c      	movs	r3, #12
    584c:	18fb      	adds	r3, r7, r3
    584e:	2202      	movs	r2, #2
    5850:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->tupper;
    5852:	683b      	ldr	r3, [r7, #0]
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	681a      	ldr	r2, [r3, #0]
    5858:	231e      	movs	r3, #30
    585a:	18fc      	adds	r4, r7, r3
    585c:	4b63      	ldr	r3, [pc, #396]	; (59ec <_mcp980x_set_tupper+0x1c0>)
    585e:	1c10      	adds	r0, r2, #0
    5860:	4798      	blx	r3
    5862:	0003      	movs	r3, r0
    5864:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->tupper;
    5866:	683b      	ldr	r3, [r7, #0]
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    586e:	231e      	movs	r3, #30
    5870:	18fb      	adds	r3, r7, r3
    5872:	2200      	movs	r2, #0
    5874:	5e9b      	ldrsh	r3, [r3, r2]
    5876:	2b00      	cmp	r3, #0
    5878:	da17      	bge.n	58aa <_mcp980x_set_tupper+0x7e>
	{
		buffer_temp_upper[1]|=0b0010000;
    587a:	230c      	movs	r3, #12
    587c:	18fb      	adds	r3, r7, r3
    587e:	785b      	ldrb	r3, [r3, #1]
    5880:	2210      	movs	r2, #16
    5882:	4313      	orrs	r3, r2
    5884:	b2da      	uxtb	r2, r3
    5886:	230c      	movs	r3, #12
    5888:	18fb      	adds	r3, r7, r3
    588a:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    588c:	231e      	movs	r3, #30
    588e:	18fb      	adds	r3, r7, r3
    5890:	881b      	ldrh	r3, [r3, #0]
    5892:	425b      	negs	r3, r3
    5894:	b29a      	uxth	r2, r3
    5896:	231e      	movs	r3, #30
    5898:	18fb      	adds	r3, r7, r3
    589a:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    589c:	683b      	ldr	r3, [r7, #0]
    589e:	681b      	ldr	r3, [r3, #0]
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	2280      	movs	r2, #128	; 0x80
    58a4:	0612      	lsls	r2, r2, #24
    58a6:	4053      	eors	r3, r2
    58a8:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_upper[1] = temp_int >> 4;     //move to fit in register   
    58aa:	231e      	movs	r3, #30
    58ac:	18fb      	adds	r3, r7, r3
    58ae:	2200      	movs	r2, #0
    58b0:	5e9b      	ldrsh	r3, [r3, r2]
    58b2:	111b      	asrs	r3, r3, #4
    58b4:	b21b      	sxth	r3, r3
    58b6:	b2da      	uxtb	r2, r3
    58b8:	230c      	movs	r3, #12
    58ba:	18fb      	adds	r3, r7, r3
    58bc:	705a      	strb	r2, [r3, #1]
	buffer_temp_upper[2] = temp_int << 4;       //move to fit in register   
    58be:	231e      	movs	r3, #30
    58c0:	18fb      	adds	r3, r7, r3
    58c2:	881b      	ldrh	r3, [r3, #0]
    58c4:	b2db      	uxtb	r3, r3
    58c6:	011b      	lsls	r3, r3, #4
    58c8:	b2da      	uxtb	r2, r3
    58ca:	230c      	movs	r3, #12
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    58d0:	4b46      	ldr	r3, [pc, #280]	; (59ec <_mcp980x_set_tupper+0x1c0>)
    58d2:	69b8      	ldr	r0, [r7, #24]
    58d4:	4798      	blx	r3
    58d6:	0002      	movs	r2, r0
    58d8:	4b45      	ldr	r3, [pc, #276]	; (59f0 <_mcp980x_set_tupper+0x1c4>)
    58da:	0010      	movs	r0, r2
    58dc:	4798      	blx	r3
    58de:	1c02      	adds	r2, r0, #0
    58e0:	4b44      	ldr	r3, [pc, #272]	; (59f4 <_mcp980x_set_tupper+0x1c8>)
    58e2:	1c11      	adds	r1, r2, #0
    58e4:	69b8      	ldr	r0, [r7, #24]
    58e6:	4798      	blx	r3
    58e8:	1c03      	adds	r3, r0, #0
    58ea:	1c1a      	adds	r2, r3, #0
    58ec:	4b42      	ldr	r3, [pc, #264]	; (59f8 <_mcp980x_set_tupper+0x1cc>)
    58ee:	4943      	ldr	r1, [pc, #268]	; (59fc <_mcp980x_set_tupper+0x1d0>)
    58f0:	1c10      	adds	r0, r2, #0
    58f2:	4798      	blx	r3
    58f4:	1c03      	adds	r3, r0, #0
    58f6:	1c1a      	adds	r2, r3, #0
    58f8:	231e      	movs	r3, #30
    58fa:	18fc      	adds	r4, r7, r3
    58fc:	4b3b      	ldr	r3, [pc, #236]	; (59ec <_mcp980x_set_tupper+0x1c0>)
    58fe:	1c10      	adds	r0, r2, #0
    5900:	4798      	blx	r3
    5902:	0003      	movs	r3, r0
    5904:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    5906:	231e      	movs	r3, #30
    5908:	18fb      	adds	r3, r7, r3
    590a:	2200      	movs	r2, #0
    590c:	5e9b      	ldrsh	r3, [r3, r2]
    590e:	2b56      	cmp	r3, #86	; 0x56
    5910:	dc0f      	bgt.n	5932 <_mcp980x_set_tupper+0x106>
    5912:	231e      	movs	r3, #30
    5914:	18fb      	adds	r3, r7, r3
    5916:	2200      	movs	r2, #0
    5918:	5e9b      	ldrsh	r3, [r3, r2]
    591a:	2b3e      	cmp	r3, #62	; 0x3e
    591c:	dd09      	ble.n	5932 <_mcp980x_set_tupper+0x106>
	{
		buffer_temp_upper[2]|=0b00001100;
    591e:	230c      	movs	r3, #12
    5920:	18fb      	adds	r3, r7, r3
    5922:	789b      	ldrb	r3, [r3, #2]
    5924:	220c      	movs	r2, #12
    5926:	4313      	orrs	r3, r2
    5928:	b2da      	uxtb	r2, r3
    592a:	230c      	movs	r3, #12
    592c:	18fb      	adds	r3, r7, r3
    592e:	709a      	strb	r2, [r3, #2]
    5930:	e02a      	b.n	5988 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    5932:	231e      	movs	r3, #30
    5934:	18fb      	adds	r3, r7, r3
    5936:	2200      	movs	r2, #0
    5938:	5e9b      	ldrsh	r3, [r3, r2]
    593a:	2b3d      	cmp	r3, #61	; 0x3d
    593c:	dc0f      	bgt.n	595e <_mcp980x_set_tupper+0x132>
    593e:	231e      	movs	r3, #30
    5940:	18fb      	adds	r3, r7, r3
    5942:	2200      	movs	r2, #0
    5944:	5e9b      	ldrsh	r3, [r3, r2]
    5946:	2b30      	cmp	r3, #48	; 0x30
    5948:	dd09      	ble.n	595e <_mcp980x_set_tupper+0x132>
	{
		buffer_temp_upper[2]|=0b00001000;
    594a:	230c      	movs	r3, #12
    594c:	18fb      	adds	r3, r7, r3
    594e:	789b      	ldrb	r3, [r3, #2]
    5950:	2208      	movs	r2, #8
    5952:	4313      	orrs	r3, r2
    5954:	b2da      	uxtb	r2, r3
    5956:	230c      	movs	r3, #12
    5958:	18fb      	adds	r3, r7, r3
    595a:	709a      	strb	r2, [r3, #2]
    595c:	e014      	b.n	5988 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    595e:	231e      	movs	r3, #30
    5960:	18fb      	adds	r3, r7, r3
    5962:	2200      	movs	r2, #0
    5964:	5e9b      	ldrsh	r3, [r3, r2]
    5966:	2b2f      	cmp	r3, #47	; 0x2f
    5968:	dc0e      	bgt.n	5988 <_mcp980x_set_tupper+0x15c>
    596a:	231e      	movs	r3, #30
    596c:	18fb      	adds	r3, r7, r3
    596e:	2200      	movs	r2, #0
    5970:	5e9b      	ldrsh	r3, [r3, r2]
    5972:	2b0d      	cmp	r3, #13
    5974:	dd08      	ble.n	5988 <_mcp980x_set_tupper+0x15c>
	{
		buffer_temp_upper[2]|=0b00000100;
    5976:	230c      	movs	r3, #12
    5978:	18fb      	adds	r3, r7, r3
    597a:	789b      	ldrb	r3, [r3, #2]
    597c:	2204      	movs	r2, #4
    597e:	4313      	orrs	r3, r2
    5980:	b2da      	uxtb	r2, r3
    5982:	230c      	movs	r3, #12
    5984:	18fb      	adds	r3, r7, r3
    5986:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_upper, 3);
    5988:	697b      	ldr	r3, [r7, #20]
    598a:	3314      	adds	r3, #20
    598c:	220c      	movs	r2, #12
    598e:	18b9      	adds	r1, r7, r2
    5990:	2203      	movs	r2, #3
    5992:	0018      	movs	r0, r3
    5994:	4b1a      	ldr	r3, [pc, #104]	; (5a00 <_mcp980x_set_tupper+0x1d4>)
    5996:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_upper, 1);
    5998:	697b      	ldr	r3, [r7, #20]
    599a:	3314      	adds	r3, #20
    599c:	220c      	movs	r2, #12
    599e:	18b9      	adds	r1, r7, r2
    59a0:	2201      	movs	r2, #1
    59a2:	0018      	movs	r0, r3
    59a4:	4b16      	ldr	r3, [pc, #88]	; (5a00 <_mcp980x_set_tupper+0x1d4>)
    59a6:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    59a8:	697b      	ldr	r3, [r7, #20]
    59aa:	3314      	adds	r3, #20
    59ac:	2210      	movs	r2, #16
    59ae:	18b9      	adds	r1, r7, r2
    59b0:	2202      	movs	r2, #2
    59b2:	0018      	movs	r0, r3
    59b4:	4b13      	ldr	r3, [pc, #76]	; (5a04 <_mcp980x_set_tupper+0x1d8>)
    59b6:	4798      	blx	r3
	if (buffer_temp_upper[1]!=buffer_read[0] || buffer_temp_upper[2]!=buffer_read[1])
    59b8:	230c      	movs	r3, #12
    59ba:	18fb      	adds	r3, r7, r3
    59bc:	785a      	ldrb	r2, [r3, #1]
    59be:	2310      	movs	r3, #16
    59c0:	18fb      	adds	r3, r7, r3
    59c2:	781b      	ldrb	r3, [r3, #0]
    59c4:	429a      	cmp	r2, r3
    59c6:	d107      	bne.n	59d8 <_mcp980x_set_tupper+0x1ac>
    59c8:	230c      	movs	r3, #12
    59ca:	18fb      	adds	r3, r7, r3
    59cc:	789a      	ldrb	r2, [r3, #2]
    59ce:	2310      	movs	r3, #16
    59d0:	18fb      	adds	r3, r7, r3
    59d2:	785b      	ldrb	r3, [r3, #1]
    59d4:	429a      	cmp	r2, r3
    59d6:	d002      	beq.n	59de <_mcp980x_set_tupper+0x1b2>
	{
		return MCP980X_ERROR;
    59d8:	2301      	movs	r3, #1
    59da:	425b      	negs	r3, r3
    59dc:	e000      	b.n	59e0 <_mcp980x_set_tupper+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    59de:	2300      	movs	r3, #0
}
    59e0:	0018      	movs	r0, r3
    59e2:	46bd      	mov	sp, r7
    59e4:	b009      	add	sp, #36	; 0x24
    59e6:	bd90      	pop	{r4, r7, pc}
    59e8:	00006fb9 	.word	0x00006fb9
    59ec:	000067bd 	.word	0x000067bd
    59f0:	000067fd 	.word	0x000067fd
    59f4:	00006485 	.word	0x00006485
    59f8:	00006245 	.word	0x00006245
    59fc:	42c80000 	.word	0x42c80000
    5a00:	00001a89 	.word	0x00001a89
    5a04:	00001add 	.word	0x00001add

00005a08 <_mcp980x_set_lower>:

int16_t _mcp980x_set_lower(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    5a08:	b590      	push	{r4, r7, lr}
    5a0a:	b089      	sub	sp, #36	; 0x24
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
    5a10:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5a12:	687b      	ldr	r3, [r7, #4]
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_lower [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_lower,0,sizeof(buffer_temp_lower));
    5a18:	230c      	movs	r3, #12
    5a1a:	18fb      	adds	r3, r7, r3
    5a1c:	2203      	movs	r2, #3
    5a1e:	2100      	movs	r1, #0
    5a20:	0018      	movs	r0, r3
    5a22:	4b68      	ldr	r3, [pc, #416]	; (5bc4 <_mcp980x_set_lower+0x1bc>)
    5a24:	4798      	blx	r3
	
	buffer_temp_lower[0]=MCP980X_ALERT_TLOWER_REG; 
    5a26:	230c      	movs	r3, #12
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	2203      	movs	r2, #3
    5a2c:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->lower;
    5a2e:	683b      	ldr	r3, [r7, #0]
    5a30:	681b      	ldr	r3, [r3, #0]
    5a32:	685a      	ldr	r2, [r3, #4]
    5a34:	231e      	movs	r3, #30
    5a36:	18fc      	adds	r4, r7, r3
    5a38:	4b63      	ldr	r3, [pc, #396]	; (5bc8 <_mcp980x_set_lower+0x1c0>)
    5a3a:	1c10      	adds	r0, r2, #0
    5a3c:	4798      	blx	r3
    5a3e:	0003      	movs	r3, r0
    5a40:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->lower;
    5a42:	683b      	ldr	r3, [r7, #0]
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	685b      	ldr	r3, [r3, #4]
    5a48:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    5a4a:	231e      	movs	r3, #30
    5a4c:	18fb      	adds	r3, r7, r3
    5a4e:	2200      	movs	r2, #0
    5a50:	5e9b      	ldrsh	r3, [r3, r2]
    5a52:	2b00      	cmp	r3, #0
    5a54:	da17      	bge.n	5a86 <_mcp980x_set_lower+0x7e>
	{
		buffer_temp_lower[1]|=0b0010000;
    5a56:	230c      	movs	r3, #12
    5a58:	18fb      	adds	r3, r7, r3
    5a5a:	785b      	ldrb	r3, [r3, #1]
    5a5c:	2210      	movs	r2, #16
    5a5e:	4313      	orrs	r3, r2
    5a60:	b2da      	uxtb	r2, r3
    5a62:	230c      	movs	r3, #12
    5a64:	18fb      	adds	r3, r7, r3
    5a66:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    5a68:	231e      	movs	r3, #30
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	881b      	ldrh	r3, [r3, #0]
    5a6e:	425b      	negs	r3, r3
    5a70:	b29a      	uxth	r2, r3
    5a72:	231e      	movs	r3, #30
    5a74:	18fb      	adds	r3, r7, r3
    5a76:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    5a78:	683b      	ldr	r3, [r7, #0]
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	681b      	ldr	r3, [r3, #0]
    5a7e:	2280      	movs	r2, #128	; 0x80
    5a80:	0612      	lsls	r2, r2, #24
    5a82:	4053      	eors	r3, r2
    5a84:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_lower[1] = temp_int >> 4;     //move to fit in register   
    5a86:	231e      	movs	r3, #30
    5a88:	18fb      	adds	r3, r7, r3
    5a8a:	2200      	movs	r2, #0
    5a8c:	5e9b      	ldrsh	r3, [r3, r2]
    5a8e:	111b      	asrs	r3, r3, #4
    5a90:	b21b      	sxth	r3, r3
    5a92:	b2da      	uxtb	r2, r3
    5a94:	230c      	movs	r3, #12
    5a96:	18fb      	adds	r3, r7, r3
    5a98:	705a      	strb	r2, [r3, #1]
	buffer_temp_lower[2] = temp_int << 4;       //move to fit in register   
    5a9a:	231e      	movs	r3, #30
    5a9c:	18fb      	adds	r3, r7, r3
    5a9e:	881b      	ldrh	r3, [r3, #0]
    5aa0:	b2db      	uxtb	r3, r3
    5aa2:	011b      	lsls	r3, r3, #4
    5aa4:	b2da      	uxtb	r2, r3
    5aa6:	230c      	movs	r3, #12
    5aa8:	18fb      	adds	r3, r7, r3
    5aaa:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    5aac:	4b46      	ldr	r3, [pc, #280]	; (5bc8 <_mcp980x_set_lower+0x1c0>)
    5aae:	69b8      	ldr	r0, [r7, #24]
    5ab0:	4798      	blx	r3
    5ab2:	0002      	movs	r2, r0
    5ab4:	4b45      	ldr	r3, [pc, #276]	; (5bcc <_mcp980x_set_lower+0x1c4>)
    5ab6:	0010      	movs	r0, r2
    5ab8:	4798      	blx	r3
    5aba:	1c02      	adds	r2, r0, #0
    5abc:	4b44      	ldr	r3, [pc, #272]	; (5bd0 <_mcp980x_set_lower+0x1c8>)
    5abe:	1c11      	adds	r1, r2, #0
    5ac0:	69b8      	ldr	r0, [r7, #24]
    5ac2:	4798      	blx	r3
    5ac4:	1c03      	adds	r3, r0, #0
    5ac6:	1c1a      	adds	r2, r3, #0
    5ac8:	4b42      	ldr	r3, [pc, #264]	; (5bd4 <_mcp980x_set_lower+0x1cc>)
    5aca:	4943      	ldr	r1, [pc, #268]	; (5bd8 <_mcp980x_set_lower+0x1d0>)
    5acc:	1c10      	adds	r0, r2, #0
    5ace:	4798      	blx	r3
    5ad0:	1c03      	adds	r3, r0, #0
    5ad2:	1c1a      	adds	r2, r3, #0
    5ad4:	231e      	movs	r3, #30
    5ad6:	18fc      	adds	r4, r7, r3
    5ad8:	4b3b      	ldr	r3, [pc, #236]	; (5bc8 <_mcp980x_set_lower+0x1c0>)
    5ada:	1c10      	adds	r0, r2, #0
    5adc:	4798      	blx	r3
    5ade:	0003      	movs	r3, r0
    5ae0:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    5ae2:	231e      	movs	r3, #30
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	2200      	movs	r2, #0
    5ae8:	5e9b      	ldrsh	r3, [r3, r2]
    5aea:	2b56      	cmp	r3, #86	; 0x56
    5aec:	dc0f      	bgt.n	5b0e <_mcp980x_set_lower+0x106>
    5aee:	231e      	movs	r3, #30
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	2200      	movs	r2, #0
    5af4:	5e9b      	ldrsh	r3, [r3, r2]
    5af6:	2b3e      	cmp	r3, #62	; 0x3e
    5af8:	dd09      	ble.n	5b0e <_mcp980x_set_lower+0x106>
	{
		buffer_temp_lower[2]|=0b00001100;
    5afa:	230c      	movs	r3, #12
    5afc:	18fb      	adds	r3, r7, r3
    5afe:	789b      	ldrb	r3, [r3, #2]
    5b00:	220c      	movs	r2, #12
    5b02:	4313      	orrs	r3, r2
    5b04:	b2da      	uxtb	r2, r3
    5b06:	230c      	movs	r3, #12
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	709a      	strb	r2, [r3, #2]
    5b0c:	e02a      	b.n	5b64 <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    5b0e:	231e      	movs	r3, #30
    5b10:	18fb      	adds	r3, r7, r3
    5b12:	2200      	movs	r2, #0
    5b14:	5e9b      	ldrsh	r3, [r3, r2]
    5b16:	2b3d      	cmp	r3, #61	; 0x3d
    5b18:	dc0f      	bgt.n	5b3a <_mcp980x_set_lower+0x132>
    5b1a:	231e      	movs	r3, #30
    5b1c:	18fb      	adds	r3, r7, r3
    5b1e:	2200      	movs	r2, #0
    5b20:	5e9b      	ldrsh	r3, [r3, r2]
    5b22:	2b30      	cmp	r3, #48	; 0x30
    5b24:	dd09      	ble.n	5b3a <_mcp980x_set_lower+0x132>
	{
		buffer_temp_lower[2]|=0b00001000;
    5b26:	230c      	movs	r3, #12
    5b28:	18fb      	adds	r3, r7, r3
    5b2a:	789b      	ldrb	r3, [r3, #2]
    5b2c:	2208      	movs	r2, #8
    5b2e:	4313      	orrs	r3, r2
    5b30:	b2da      	uxtb	r2, r3
    5b32:	230c      	movs	r3, #12
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	709a      	strb	r2, [r3, #2]
    5b38:	e014      	b.n	5b64 <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    5b3a:	231e      	movs	r3, #30
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	2200      	movs	r2, #0
    5b40:	5e9b      	ldrsh	r3, [r3, r2]
    5b42:	2b2f      	cmp	r3, #47	; 0x2f
    5b44:	dc0e      	bgt.n	5b64 <_mcp980x_set_lower+0x15c>
    5b46:	231e      	movs	r3, #30
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	2200      	movs	r2, #0
    5b4c:	5e9b      	ldrsh	r3, [r3, r2]
    5b4e:	2b0d      	cmp	r3, #13
    5b50:	dd08      	ble.n	5b64 <_mcp980x_set_lower+0x15c>
	{
		buffer_temp_lower[2]|=0b00000100;
    5b52:	230c      	movs	r3, #12
    5b54:	18fb      	adds	r3, r7, r3
    5b56:	789b      	ldrb	r3, [r3, #2]
    5b58:	2204      	movs	r2, #4
    5b5a:	4313      	orrs	r3, r2
    5b5c:	b2da      	uxtb	r2, r3
    5b5e:	230c      	movs	r3, #12
    5b60:	18fb      	adds	r3, r7, r3
    5b62:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_lower, 3);
    5b64:	697b      	ldr	r3, [r7, #20]
    5b66:	3314      	adds	r3, #20
    5b68:	220c      	movs	r2, #12
    5b6a:	18b9      	adds	r1, r7, r2
    5b6c:	2203      	movs	r2, #3
    5b6e:	0018      	movs	r0, r3
    5b70:	4b1a      	ldr	r3, [pc, #104]	; (5bdc <_mcp980x_set_lower+0x1d4>)
    5b72:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_lower, 1);
    5b74:	697b      	ldr	r3, [r7, #20]
    5b76:	3314      	adds	r3, #20
    5b78:	220c      	movs	r2, #12
    5b7a:	18b9      	adds	r1, r7, r2
    5b7c:	2201      	movs	r2, #1
    5b7e:	0018      	movs	r0, r3
    5b80:	4b16      	ldr	r3, [pc, #88]	; (5bdc <_mcp980x_set_lower+0x1d4>)
    5b82:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    5b84:	697b      	ldr	r3, [r7, #20]
    5b86:	3314      	adds	r3, #20
    5b88:	2210      	movs	r2, #16
    5b8a:	18b9      	adds	r1, r7, r2
    5b8c:	2202      	movs	r2, #2
    5b8e:	0018      	movs	r0, r3
    5b90:	4b13      	ldr	r3, [pc, #76]	; (5be0 <_mcp980x_set_lower+0x1d8>)
    5b92:	4798      	blx	r3
	if (buffer_temp_lower[1]!=buffer_read[0] || buffer_temp_lower[2]!=buffer_read[1])
    5b94:	230c      	movs	r3, #12
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	785a      	ldrb	r2, [r3, #1]
    5b9a:	2310      	movs	r3, #16
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	429a      	cmp	r2, r3
    5ba2:	d107      	bne.n	5bb4 <_mcp980x_set_lower+0x1ac>
    5ba4:	230c      	movs	r3, #12
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	789a      	ldrb	r2, [r3, #2]
    5baa:	2310      	movs	r3, #16
    5bac:	18fb      	adds	r3, r7, r3
    5bae:	785b      	ldrb	r3, [r3, #1]
    5bb0:	429a      	cmp	r2, r3
    5bb2:	d002      	beq.n	5bba <_mcp980x_set_lower+0x1b2>
	{
		return MCP980X_ERROR;
    5bb4:	2301      	movs	r3, #1
    5bb6:	425b      	negs	r3, r3
    5bb8:	e000      	b.n	5bbc <_mcp980x_set_lower+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    5bba:	2300      	movs	r3, #0
}
    5bbc:	0018      	movs	r0, r3
    5bbe:	46bd      	mov	sp, r7
    5bc0:	b009      	add	sp, #36	; 0x24
    5bc2:	bd90      	pop	{r4, r7, pc}
    5bc4:	00006fb9 	.word	0x00006fb9
    5bc8:	000067bd 	.word	0x000067bd
    5bcc:	000067fd 	.word	0x000067fd
    5bd0:	00006485 	.word	0x00006485
    5bd4:	00006245 	.word	0x00006245
    5bd8:	42c80000 	.word	0x42c80000
    5bdc:	00001a89 	.word	0x00001a89
    5be0:	00001add 	.word	0x00001add

00005be4 <_mcp980x_set_critical>:

int16_t _mcp980x_set_critical(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    5be4:	b590      	push	{r4, r7, lr}
    5be6:	b089      	sub	sp, #36	; 0x24
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
    5bec:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_critical [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_critical,0,sizeof(buffer_temp_critical));
    5bf4:	230c      	movs	r3, #12
    5bf6:	18fb      	adds	r3, r7, r3
    5bf8:	2203      	movs	r2, #3
    5bfa:	2100      	movs	r1, #0
    5bfc:	0018      	movs	r0, r3
    5bfe:	4b68      	ldr	r3, [pc, #416]	; (5da0 <_mcp980x_set_critical+0x1bc>)
    5c00:	4798      	blx	r3
	
	buffer_temp_critical[0]=MCP980X_ALERT_TLOWER_REG; 
    5c02:	230c      	movs	r3, #12
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	2203      	movs	r2, #3
    5c08:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->critical;
    5c0a:	683b      	ldr	r3, [r7, #0]
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	689a      	ldr	r2, [r3, #8]
    5c10:	231e      	movs	r3, #30
    5c12:	18fc      	adds	r4, r7, r3
    5c14:	4b63      	ldr	r3, [pc, #396]	; (5da4 <_mcp980x_set_critical+0x1c0>)
    5c16:	1c10      	adds	r0, r2, #0
    5c18:	4798      	blx	r3
    5c1a:	0003      	movs	r3, r0
    5c1c:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->critical;
    5c1e:	683b      	ldr	r3, [r7, #0]
    5c20:	681b      	ldr	r3, [r3, #0]
    5c22:	689b      	ldr	r3, [r3, #8]
    5c24:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    5c26:	231e      	movs	r3, #30
    5c28:	18fb      	adds	r3, r7, r3
    5c2a:	2200      	movs	r2, #0
    5c2c:	5e9b      	ldrsh	r3, [r3, r2]
    5c2e:	2b00      	cmp	r3, #0
    5c30:	da17      	bge.n	5c62 <_mcp980x_set_critical+0x7e>
	{
		buffer_temp_critical[1]|=0b0010000;
    5c32:	230c      	movs	r3, #12
    5c34:	18fb      	adds	r3, r7, r3
    5c36:	785b      	ldrb	r3, [r3, #1]
    5c38:	2210      	movs	r2, #16
    5c3a:	4313      	orrs	r3, r2
    5c3c:	b2da      	uxtb	r2, r3
    5c3e:	230c      	movs	r3, #12
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    5c44:	231e      	movs	r3, #30
    5c46:	18fb      	adds	r3, r7, r3
    5c48:	881b      	ldrh	r3, [r3, #0]
    5c4a:	425b      	negs	r3, r3
    5c4c:	b29a      	uxth	r2, r3
    5c4e:	231e      	movs	r3, #30
    5c50:	18fb      	adds	r3, r7, r3
    5c52:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    5c54:	683b      	ldr	r3, [r7, #0]
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	2280      	movs	r2, #128	; 0x80
    5c5c:	0612      	lsls	r2, r2, #24
    5c5e:	4053      	eors	r3, r2
    5c60:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_critical[1] = temp_int >> 4;     //move to fit in register   
    5c62:	231e      	movs	r3, #30
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	2200      	movs	r2, #0
    5c68:	5e9b      	ldrsh	r3, [r3, r2]
    5c6a:	111b      	asrs	r3, r3, #4
    5c6c:	b21b      	sxth	r3, r3
    5c6e:	b2da      	uxtb	r2, r3
    5c70:	230c      	movs	r3, #12
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	705a      	strb	r2, [r3, #1]
	buffer_temp_critical[2] = temp_int << 4;       //move to fit in register   
    5c76:	231e      	movs	r3, #30
    5c78:	18fb      	adds	r3, r7, r3
    5c7a:	881b      	ldrh	r3, [r3, #0]
    5c7c:	b2db      	uxtb	r3, r3
    5c7e:	011b      	lsls	r3, r3, #4
    5c80:	b2da      	uxtb	r2, r3
    5c82:	230c      	movs	r3, #12
    5c84:	18fb      	adds	r3, r7, r3
    5c86:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    5c88:	4b46      	ldr	r3, [pc, #280]	; (5da4 <_mcp980x_set_critical+0x1c0>)
    5c8a:	69b8      	ldr	r0, [r7, #24]
    5c8c:	4798      	blx	r3
    5c8e:	0002      	movs	r2, r0
    5c90:	4b45      	ldr	r3, [pc, #276]	; (5da8 <_mcp980x_set_critical+0x1c4>)
    5c92:	0010      	movs	r0, r2
    5c94:	4798      	blx	r3
    5c96:	1c02      	adds	r2, r0, #0
    5c98:	4b44      	ldr	r3, [pc, #272]	; (5dac <_mcp980x_set_critical+0x1c8>)
    5c9a:	1c11      	adds	r1, r2, #0
    5c9c:	69b8      	ldr	r0, [r7, #24]
    5c9e:	4798      	blx	r3
    5ca0:	1c03      	adds	r3, r0, #0
    5ca2:	1c1a      	adds	r2, r3, #0
    5ca4:	4b42      	ldr	r3, [pc, #264]	; (5db0 <_mcp980x_set_critical+0x1cc>)
    5ca6:	4943      	ldr	r1, [pc, #268]	; (5db4 <_mcp980x_set_critical+0x1d0>)
    5ca8:	1c10      	adds	r0, r2, #0
    5caa:	4798      	blx	r3
    5cac:	1c03      	adds	r3, r0, #0
    5cae:	1c1a      	adds	r2, r3, #0
    5cb0:	231e      	movs	r3, #30
    5cb2:	18fc      	adds	r4, r7, r3
    5cb4:	4b3b      	ldr	r3, [pc, #236]	; (5da4 <_mcp980x_set_critical+0x1c0>)
    5cb6:	1c10      	adds	r0, r2, #0
    5cb8:	4798      	blx	r3
    5cba:	0003      	movs	r3, r0
    5cbc:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    5cbe:	231e      	movs	r3, #30
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	2200      	movs	r2, #0
    5cc4:	5e9b      	ldrsh	r3, [r3, r2]
    5cc6:	2b56      	cmp	r3, #86	; 0x56
    5cc8:	dc0f      	bgt.n	5cea <_mcp980x_set_critical+0x106>
    5cca:	231e      	movs	r3, #30
    5ccc:	18fb      	adds	r3, r7, r3
    5cce:	2200      	movs	r2, #0
    5cd0:	5e9b      	ldrsh	r3, [r3, r2]
    5cd2:	2b3e      	cmp	r3, #62	; 0x3e
    5cd4:	dd09      	ble.n	5cea <_mcp980x_set_critical+0x106>
	{
		buffer_temp_critical[2]|=0b00001100;
    5cd6:	230c      	movs	r3, #12
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	789b      	ldrb	r3, [r3, #2]
    5cdc:	220c      	movs	r2, #12
    5cde:	4313      	orrs	r3, r2
    5ce0:	b2da      	uxtb	r2, r3
    5ce2:	230c      	movs	r3, #12
    5ce4:	18fb      	adds	r3, r7, r3
    5ce6:	709a      	strb	r2, [r3, #2]
    5ce8:	e02a      	b.n	5d40 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    5cea:	231e      	movs	r3, #30
    5cec:	18fb      	adds	r3, r7, r3
    5cee:	2200      	movs	r2, #0
    5cf0:	5e9b      	ldrsh	r3, [r3, r2]
    5cf2:	2b3d      	cmp	r3, #61	; 0x3d
    5cf4:	dc0f      	bgt.n	5d16 <_mcp980x_set_critical+0x132>
    5cf6:	231e      	movs	r3, #30
    5cf8:	18fb      	adds	r3, r7, r3
    5cfa:	2200      	movs	r2, #0
    5cfc:	5e9b      	ldrsh	r3, [r3, r2]
    5cfe:	2b30      	cmp	r3, #48	; 0x30
    5d00:	dd09      	ble.n	5d16 <_mcp980x_set_critical+0x132>
	{
		buffer_temp_critical[2]|=0b00001000;
    5d02:	230c      	movs	r3, #12
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	789b      	ldrb	r3, [r3, #2]
    5d08:	2208      	movs	r2, #8
    5d0a:	4313      	orrs	r3, r2
    5d0c:	b2da      	uxtb	r2, r3
    5d0e:	230c      	movs	r3, #12
    5d10:	18fb      	adds	r3, r7, r3
    5d12:	709a      	strb	r2, [r3, #2]
    5d14:	e014      	b.n	5d40 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    5d16:	231e      	movs	r3, #30
    5d18:	18fb      	adds	r3, r7, r3
    5d1a:	2200      	movs	r2, #0
    5d1c:	5e9b      	ldrsh	r3, [r3, r2]
    5d1e:	2b2f      	cmp	r3, #47	; 0x2f
    5d20:	dc0e      	bgt.n	5d40 <_mcp980x_set_critical+0x15c>
    5d22:	231e      	movs	r3, #30
    5d24:	18fb      	adds	r3, r7, r3
    5d26:	2200      	movs	r2, #0
    5d28:	5e9b      	ldrsh	r3, [r3, r2]
    5d2a:	2b0d      	cmp	r3, #13
    5d2c:	dd08      	ble.n	5d40 <_mcp980x_set_critical+0x15c>
	{
		buffer_temp_critical[2]|=0b00000100;
    5d2e:	230c      	movs	r3, #12
    5d30:	18fb      	adds	r3, r7, r3
    5d32:	789b      	ldrb	r3, [r3, #2]
    5d34:	2204      	movs	r2, #4
    5d36:	4313      	orrs	r3, r2
    5d38:	b2da      	uxtb	r2, r3
    5d3a:	230c      	movs	r3, #12
    5d3c:	18fb      	adds	r3, r7, r3
    5d3e:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_critical, 3);
    5d40:	697b      	ldr	r3, [r7, #20]
    5d42:	3314      	adds	r3, #20
    5d44:	220c      	movs	r2, #12
    5d46:	18b9      	adds	r1, r7, r2
    5d48:	2203      	movs	r2, #3
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b1a      	ldr	r3, [pc, #104]	; (5db8 <_mcp980x_set_critical+0x1d4>)
    5d4e:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_critical, 1);
    5d50:	697b      	ldr	r3, [r7, #20]
    5d52:	3314      	adds	r3, #20
    5d54:	220c      	movs	r2, #12
    5d56:	18b9      	adds	r1, r7, r2
    5d58:	2201      	movs	r2, #1
    5d5a:	0018      	movs	r0, r3
    5d5c:	4b16      	ldr	r3, [pc, #88]	; (5db8 <_mcp980x_set_critical+0x1d4>)
    5d5e:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    5d60:	697b      	ldr	r3, [r7, #20]
    5d62:	3314      	adds	r3, #20
    5d64:	2210      	movs	r2, #16
    5d66:	18b9      	adds	r1, r7, r2
    5d68:	2202      	movs	r2, #2
    5d6a:	0018      	movs	r0, r3
    5d6c:	4b13      	ldr	r3, [pc, #76]	; (5dbc <_mcp980x_set_critical+0x1d8>)
    5d6e:	4798      	blx	r3
	if (buffer_temp_critical[1]!=buffer_read[0] || buffer_temp_critical[2]!=buffer_read[1])
    5d70:	230c      	movs	r3, #12
    5d72:	18fb      	adds	r3, r7, r3
    5d74:	785a      	ldrb	r2, [r3, #1]
    5d76:	2310      	movs	r3, #16
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	429a      	cmp	r2, r3
    5d7e:	d107      	bne.n	5d90 <_mcp980x_set_critical+0x1ac>
    5d80:	230c      	movs	r3, #12
    5d82:	18fb      	adds	r3, r7, r3
    5d84:	789a      	ldrb	r2, [r3, #2]
    5d86:	2310      	movs	r3, #16
    5d88:	18fb      	adds	r3, r7, r3
    5d8a:	785b      	ldrb	r3, [r3, #1]
    5d8c:	429a      	cmp	r2, r3
    5d8e:	d002      	beq.n	5d96 <_mcp980x_set_critical+0x1b2>
	{
		return MCP980X_ERROR;
    5d90:	2301      	movs	r3, #1
    5d92:	425b      	negs	r3, r3
    5d94:	e000      	b.n	5d98 <_mcp980x_set_critical+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    5d96:	2300      	movs	r3, #0
}
    5d98:	0018      	movs	r0, r3
    5d9a:	46bd      	mov	sp, r7
    5d9c:	b009      	add	sp, #36	; 0x24
    5d9e:	bd90      	pop	{r4, r7, pc}
    5da0:	00006fb9 	.word	0x00006fb9
    5da4:	000067bd 	.word	0x000067bd
    5da8:	000067fd 	.word	0x000067fd
    5dac:	00006485 	.word	0x00006485
    5db0:	00006245 	.word	0x00006245
    5db4:	42c80000 	.word	0x42c80000
    5db8:	00001a89 	.word	0x00001a89
    5dbc:	00001add 	.word	0x00001add

00005dc0 <_mcp980x_set_resolution>:

int16_t _mcp980x_set_resolution(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set){
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b086      	sub	sp, #24
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	6078      	str	r0, [r7, #4]
    5dc8:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	681b      	ldr	r3, [r3, #0]
    5dce:	617b      	str	r3, [r7, #20]
	
	uint8_t buffer_read[2]; 
	uint8_t buffer_resolution[3]; 
	

	memset(buffer_resolution,0,sizeof(buffer_resolution));
    5dd0:	230c      	movs	r3, #12
    5dd2:	18fb      	adds	r3, r7, r3
    5dd4:	2203      	movs	r2, #3
    5dd6:	2100      	movs	r1, #0
    5dd8:	0018      	movs	r0, r3
    5dda:	4b1e      	ldr	r3, [pc, #120]	; (5e54 <_mcp980x_set_resolution+0x94>)
    5ddc:	4798      	blx	r3

	buffer_resolution[0] = MCP980X_RESOLUTION_REG; 
    5dde:	230c      	movs	r3, #12
    5de0:	18fb      	adds	r3, r7, r3
    5de2:	2208      	movs	r2, #8
    5de4:	701a      	strb	r2, [r3, #0]
	buffer_resolution[2] = temp_set->mcp980x->mcp980x_resolution;
    5de6:	683b      	ldr	r3, [r7, #0]
    5de8:	681b      	ldr	r3, [r3, #0]
    5dea:	7b9a      	ldrb	r2, [r3, #14]
    5dec:	230c      	movs	r3, #12
    5dee:	18fb      	adds	r3, r7, r3
    5df0:	709a      	strb	r2, [r3, #2]
	 
	io_write(&descr->io, buffer_resolution, 3);
    5df2:	697b      	ldr	r3, [r7, #20]
    5df4:	3314      	adds	r3, #20
    5df6:	220c      	movs	r2, #12
    5df8:	18b9      	adds	r1, r7, r2
    5dfa:	2203      	movs	r2, #3
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b16      	ldr	r3, [pc, #88]	; (5e58 <_mcp980x_set_resolution+0x98>)
    5e00:	4798      	blx	r3
	
	io_write(&descr->io, buffer_resolution, 1);
    5e02:	697b      	ldr	r3, [r7, #20]
    5e04:	3314      	adds	r3, #20
    5e06:	220c      	movs	r2, #12
    5e08:	18b9      	adds	r1, r7, r2
    5e0a:	2201      	movs	r2, #1
    5e0c:	0018      	movs	r0, r3
    5e0e:	4b12      	ldr	r3, [pc, #72]	; (5e58 <_mcp980x_set_resolution+0x98>)
    5e10:	4798      	blx	r3
	io_read(&descr->io, buffer_resolution, 2);
    5e12:	697b      	ldr	r3, [r7, #20]
    5e14:	3314      	adds	r3, #20
    5e16:	220c      	movs	r2, #12
    5e18:	18b9      	adds	r1, r7, r2
    5e1a:	2202      	movs	r2, #2
    5e1c:	0018      	movs	r0, r3
    5e1e:	4b0f      	ldr	r3, [pc, #60]	; (5e5c <_mcp980x_set_resolution+0x9c>)
    5e20:	4798      	blx	r3
	if (buffer_resolution[1]!=buffer_read[0] || buffer_resolution[2]!=buffer_read[1])
    5e22:	230c      	movs	r3, #12
    5e24:	18fb      	adds	r3, r7, r3
    5e26:	785a      	ldrb	r2, [r3, #1]
    5e28:	2310      	movs	r3, #16
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	429a      	cmp	r2, r3
    5e30:	d107      	bne.n	5e42 <_mcp980x_set_resolution+0x82>
    5e32:	230c      	movs	r3, #12
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	789a      	ldrb	r2, [r3, #2]
    5e38:	2310      	movs	r3, #16
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	785b      	ldrb	r3, [r3, #1]
    5e3e:	429a      	cmp	r2, r3
    5e40:	d002      	beq.n	5e48 <_mcp980x_set_resolution+0x88>
	{
		return MCP980X_ERROR;
    5e42:	2301      	movs	r3, #1
    5e44:	425b      	negs	r3, r3
    5e46:	e000      	b.n	5e4a <_mcp980x_set_resolution+0x8a>
	}
	return MCP980X_ERROR_NONE; 
    5e48:	2300      	movs	r3, #0
    5e4a:	0018      	movs	r0, r3
    5e4c:	46bd      	mov	sp, r7
    5e4e:	b006      	add	sp, #24
    5e50:	bd80      	pop	{r7, pc}
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	00006fb9 	.word	0x00006fb9
    5e58:	00001a89 	.word	0x00001a89
    5e5c:	00001add 	.word	0x00001add

00005e60 <temperature_sensor_construct>:
/**
 * \brief Construct abstract temperature sensor
 */
struct temperature_sensor *temperature_sensor_construct(struct temperature_sensor *const me, void *const io,
                                                        const struct temperature_sensor_interface *const interface)
{
    5e60:	b580      	push	{r7, lr}
    5e62:	b084      	sub	sp, #16
    5e64:	af00      	add	r7, sp, #0
    5e66:	60f8      	str	r0, [r7, #12]
    5e68:	60b9      	str	r1, [r7, #8]
    5e6a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    5e6c:	68fb      	ldr	r3, [r7, #12]
    5e6e:	68ba      	ldr	r2, [r7, #8]
    5e70:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    5e72:	68fb      	ldr	r3, [r7, #12]
    5e74:	687a      	ldr	r2, [r7, #4]
    5e76:	605a      	str	r2, [r3, #4]

	return me;
    5e78:	68fb      	ldr	r3, [r7, #12]
}
    5e7a:	0018      	movs	r0, r3
    5e7c:	46bd      	mov	sp, r7
    5e7e:	b004      	add	sp, #16
    5e80:	bd80      	pop	{r7, pc}

00005e82 <temperature_sensor_read>:

/**
 * \brief Read temperature from the given sensor
 */
float temperature_sensor_read(const struct temperature_sensor *const me)
{
    5e82:	b580      	push	{r7, lr}
    5e84:	b082      	sub	sp, #8
    5e86:	af00      	add	r7, sp, #0
    5e88:	6078      	str	r0, [r7, #4]
	return me->interface->read(me);
    5e8a:	687b      	ldr	r3, [r7, #4]
    5e8c:	685b      	ldr	r3, [r3, #4]
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	687a      	ldr	r2, [r7, #4]
    5e92:	0010      	movs	r0, r2
    5e94:	4798      	blx	r3
    5e96:	1c03      	adds	r3, r0, #0
}
    5e98:	1c18      	adds	r0, r3, #0
    5e9a:	46bd      	mov	sp, r7
    5e9c:	b002      	add	sp, #8
    5e9e:	bd80      	pop	{r7, pc}

00005ea0 <hri_port_set_OUT_reg>:
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b084      	sub	sp, #16
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	60f8      	str	r0, [r7, #12]
    5ea8:	607a      	str	r2, [r7, #4]
    5eaa:	230b      	movs	r3, #11
    5eac:	18fb      	adds	r3, r7, r3
    5eae:	1c0a      	adds	r2, r1, #0
    5eb0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5eb2:	230b      	movs	r3, #11
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	781b      	ldrb	r3, [r3, #0]
    5eb8:	68fa      	ldr	r2, [r7, #12]
    5eba:	01db      	lsls	r3, r3, #7
    5ebc:	18d3      	adds	r3, r2, r3
    5ebe:	3318      	adds	r3, #24
    5ec0:	687a      	ldr	r2, [r7, #4]
    5ec2:	601a      	str	r2, [r3, #0]
}
    5ec4:	46c0      	nop			; (mov r8, r8)
    5ec6:	46bd      	mov	sp, r7
    5ec8:	b004      	add	sp, #16
    5eca:	bd80      	pop	{r7, pc}

00005ecc <hri_port_clear_OUT_reg>:
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b084      	sub	sp, #16
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	60f8      	str	r0, [r7, #12]
    5ed4:	607a      	str	r2, [r7, #4]
    5ed6:	230b      	movs	r3, #11
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	1c0a      	adds	r2, r1, #0
    5edc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ede:	230b      	movs	r3, #11
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	781b      	ldrb	r3, [r3, #0]
    5ee4:	68fa      	ldr	r2, [r7, #12]
    5ee6:	01db      	lsls	r3, r3, #7
    5ee8:	18d3      	adds	r3, r2, r3
    5eea:	3314      	adds	r3, #20
    5eec:	687a      	ldr	r2, [r7, #4]
    5eee:	601a      	str	r2, [r3, #0]
}
    5ef0:	46c0      	nop			; (mov r8, r8)
    5ef2:	46bd      	mov	sp, r7
    5ef4:	b004      	add	sp, #16
    5ef6:	bd80      	pop	{r7, pc}

00005ef8 <_gpio_set_level>:
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	b082      	sub	sp, #8
    5efc:	af00      	add	r7, sp, #0
    5efe:	6039      	str	r1, [r7, #0]
    5f00:	0011      	movs	r1, r2
    5f02:	1dfb      	adds	r3, r7, #7
    5f04:	1c02      	adds	r2, r0, #0
    5f06:	701a      	strb	r2, [r3, #0]
    5f08:	1dbb      	adds	r3, r7, #6
    5f0a:	1c0a      	adds	r2, r1, #0
    5f0c:	701a      	strb	r2, [r3, #0]
	if (level) {
    5f0e:	1dbb      	adds	r3, r7, #6
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d008      	beq.n	5f28 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    5f16:	683a      	ldr	r2, [r7, #0]
    5f18:	1dfb      	adds	r3, r7, #7
    5f1a:	7819      	ldrb	r1, [r3, #0]
    5f1c:	23c0      	movs	r3, #192	; 0xc0
    5f1e:	05db      	lsls	r3, r3, #23
    5f20:	0018      	movs	r0, r3
    5f22:	4b07      	ldr	r3, [pc, #28]	; (5f40 <_gpio_set_level+0x48>)
    5f24:	4798      	blx	r3
}
    5f26:	e007      	b.n	5f38 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    5f28:	683a      	ldr	r2, [r7, #0]
    5f2a:	1dfb      	adds	r3, r7, #7
    5f2c:	7819      	ldrb	r1, [r3, #0]
    5f2e:	23c0      	movs	r3, #192	; 0xc0
    5f30:	05db      	lsls	r3, r3, #23
    5f32:	0018      	movs	r0, r3
    5f34:	4b03      	ldr	r3, [pc, #12]	; (5f44 <_gpio_set_level+0x4c>)
    5f36:	4798      	blx	r3
}
    5f38:	46c0      	nop			; (mov r8, r8)
    5f3a:	46bd      	mov	sp, r7
    5f3c:	b002      	add	sp, #8
    5f3e:	bd80      	pop	{r7, pc}
    5f40:	00005ea1 	.word	0x00005ea1
    5f44:	00005ecd 	.word	0x00005ecd

00005f48 <gpio_set_pin_level>:
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	0002      	movs	r2, r0
    5f50:	1dfb      	adds	r3, r7, #7
    5f52:	701a      	strb	r2, [r3, #0]
    5f54:	1dbb      	adds	r3, r7, #6
    5f56:	1c0a      	adds	r2, r1, #0
    5f58:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    5f5a:	1dfb      	adds	r3, r7, #7
    5f5c:	781b      	ldrb	r3, [r3, #0]
    5f5e:	095b      	lsrs	r3, r3, #5
    5f60:	b2d8      	uxtb	r0, r3
    5f62:	1dfb      	adds	r3, r7, #7
    5f64:	781b      	ldrb	r3, [r3, #0]
    5f66:	221f      	movs	r2, #31
    5f68:	4013      	ands	r3, r2
    5f6a:	2201      	movs	r2, #1
    5f6c:	409a      	lsls	r2, r3
    5f6e:	0011      	movs	r1, r2
    5f70:	1dbb      	adds	r3, r7, #6
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	001a      	movs	r2, r3
    5f76:	4b03      	ldr	r3, [pc, #12]	; (5f84 <gpio_set_pin_level+0x3c>)
    5f78:	4798      	blx	r3
}
    5f7a:	46c0      	nop			; (mov r8, r8)
    5f7c:	46bd      	mov	sp, r7
    5f7e:	b002      	add	sp, #8
    5f80:	bd80      	pop	{r7, pc}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	00005ef9 	.word	0x00005ef9

00005f88 <i2c_m_scan>:
static struct mcp980x    TEMPERATURE_SENSOR_descr_mcp; 

struct temperature_sensor *TEMPERATURE_SENSOR;
struct temperature_sensor *TEMPERATURE_mcp980x;

int8_t i2c_m_scan(struct i2c_m_sync_desc *const i2c, uint8_t *buffer){
    5f88:	b580      	push	{r7, lr}
    5f8a:	b08a      	sub	sp, #40	; 0x28
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	
	int32_t ret;
	uint8_t address_counter = 0;
    5f92:	2327      	movs	r3, #39	; 0x27
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	2200      	movs	r2, #0
    5f98:	701a      	strb	r2, [r3, #0]
	uint8_t address = 0;
    5f9a:	2326      	movs	r3, #38	; 0x26
    5f9c:	18fb      	adds	r3, r7, r3
    5f9e:	2200      	movs	r2, #0
    5fa0:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf [2] = {0x00, 0x00};
    5fa2:	2318      	movs	r3, #24
    5fa4:	18fb      	adds	r3, r7, r3
    5fa6:	2200      	movs	r2, #0
    5fa8:	701a      	strb	r2, [r3, #0]
    5faa:	2318      	movs	r3, #24
    5fac:	18fb      	adds	r3, r7, r3
    5fae:	2200      	movs	r2, #0
    5fb0:	705a      	strb	r2, [r3, #1]
	
	struct i2c_m_sync_desc *descr = i2c;
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	623b      	str	r3, [r7, #32]

	struct _i2c_m_msg msg;
	msg.len    = 1;
    5fb6:	230c      	movs	r3, #12
    5fb8:	18fb      	adds	r3, r7, r3
    5fba:	2201      	movs	r2, #1
    5fbc:	605a      	str	r2, [r3, #4]
	msg.flags  = 0;
    5fbe:	230c      	movs	r3, #12
    5fc0:	18fb      	adds	r3, r7, r3
    5fc2:	2200      	movs	r2, #0
    5fc4:	805a      	strh	r2, [r3, #2]
	msg.buffer = &data_buf;
    5fc6:	230c      	movs	r3, #12
    5fc8:	18fb      	adds	r3, r7, r3
    5fca:	2218      	movs	r2, #24
    5fcc:	18ba      	adds	r2, r7, r2
    5fce:	609a      	str	r2, [r3, #8]
	
	memset(buffer, 250, sizeof(buffer));
    5fd0:	683b      	ldr	r3, [r7, #0]
    5fd2:	2204      	movs	r2, #4
    5fd4:	21fa      	movs	r1, #250	; 0xfa
    5fd6:	0018      	movs	r0, r3
    5fd8:	4b23      	ldr	r3, [pc, #140]	; (6068 <i2c_m_scan+0xe0>)
    5fda:	4798      	blx	r3
	
	while (address < 125)
    5fdc:	e037      	b.n	604e <i2c_m_scan+0xc6>
	{
		address++;
    5fde:	2326      	movs	r3, #38	; 0x26
    5fe0:	18fb      	adds	r3, r7, r3
    5fe2:	781a      	ldrb	r2, [r3, #0]
    5fe4:	2326      	movs	r3, #38	; 0x26
    5fe6:	18fb      	adds	r3, r7, r3
    5fe8:	3201      	adds	r2, #1
    5fea:	701a      	strb	r2, [r3, #0]
		msg.addr = address;
    5fec:	2326      	movs	r3, #38	; 0x26
    5fee:	18fb      	adds	r3, r7, r3
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	b29a      	uxth	r2, r3
    5ff4:	230c      	movs	r3, #12
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	801a      	strh	r2, [r3, #0]
		ret = i2c_m_sync_transfer(descr, &msg);
    5ffa:	230c      	movs	r3, #12
    5ffc:	18fa      	adds	r2, r7, r3
    5ffe:	6a3b      	ldr	r3, [r7, #32]
    6000:	0011      	movs	r1, r2
    6002:	0018      	movs	r0, r3
    6004:	4b19      	ldr	r3, [pc, #100]	; (606c <i2c_m_scan+0xe4>)
    6006:	4798      	blx	r3
    6008:	0003      	movs	r3, r0
    600a:	61fb      	str	r3, [r7, #28]
    600c:	2327      	movs	r3, #39	; 0x27
    600e:	18fb      	adds	r3, r7, r3
    6010:	2227      	movs	r2, #39	; 0x27
    6012:	18ba      	adds	r2, r7, r2
    6014:	7812      	ldrb	r2, [r2, #0]
    6016:	701a      	strb	r2, [r3, #0]
		if (!ret)
    6018:	69fb      	ldr	r3, [r7, #28]
    601a:	2b00      	cmp	r3, #0
    601c:	d117      	bne.n	604e <i2c_m_scan+0xc6>
		{
			if (address_counter > sizeof(buffer))
    601e:	2327      	movs	r3, #39	; 0x27
    6020:	18fb      	adds	r3, r7, r3
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	2b04      	cmp	r3, #4
    6026:	d902      	bls.n	602e <i2c_m_scan+0xa6>
			{
				return -1;
    6028:	2301      	movs	r3, #1
    602a:	425b      	negs	r3, r3
    602c:	e018      	b.n	6060 <i2c_m_scan+0xd8>
			}
			buffer[address_counter] = address;
    602e:	2327      	movs	r3, #39	; 0x27
    6030:	18fb      	adds	r3, r7, r3
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	683a      	ldr	r2, [r7, #0]
    6036:	18d3      	adds	r3, r2, r3
    6038:	2226      	movs	r2, #38	; 0x26
    603a:	18ba      	adds	r2, r7, r2
    603c:	7812      	ldrb	r2, [r2, #0]
    603e:	701a      	strb	r2, [r3, #0]
			address_counter++;
    6040:	2327      	movs	r3, #39	; 0x27
    6042:	18fb      	adds	r3, r7, r3
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	2327      	movs	r3, #39	; 0x27
    6048:	18fb      	adds	r3, r7, r3
    604a:	3201      	adds	r2, #1
    604c:	701a      	strb	r2, [r3, #0]
	while (address < 125)
    604e:	2326      	movs	r3, #38	; 0x26
    6050:	18fb      	adds	r3, r7, r3
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	2b7c      	cmp	r3, #124	; 0x7c
    6056:	d9c2      	bls.n	5fde <i2c_m_scan+0x56>
		}
	}
	return address_counter;
    6058:	2327      	movs	r3, #39	; 0x27
    605a:	18fb      	adds	r3, r7, r3
    605c:	781b      	ldrb	r3, [r3, #0]
    605e:	b25b      	sxtb	r3, r3
}
    6060:	0018      	movs	r0, r3
    6062:	46bd      	mov	sp, r7
    6064:	b00a      	add	sp, #40	; 0x28
    6066:	bd80      	pop	{r7, pc}
    6068:	00006fb9 	.word	0x00006fb9
    606c:	0000172d 	.word	0x0000172d

00006070 <read>:

void read() {
    6070:	b580      	push	{r7, lr}
    6072:	4f17      	ldr	r7, [pc, #92]	; (60d0 <read+0x60>)
    6074:	44bd      	add	sp, r7
    6076:	af00      	add	r7, sp, #0
	gpio_set_pin_level(POWER_BLOCK_1, true);
    6078:	2101      	movs	r1, #1
    607a:	200f      	movs	r0, #15
    607c:	4b15      	ldr	r3, [pc, #84]	; (60d4 <read+0x64>)
    607e:	4798      	blx	r3
	gpio_set_pin_level(BLOCK_1_EN, true);
    6080:	2101      	movs	r1, #1
    6082:	2019      	movs	r0, #25
    6084:	4b13      	ldr	r3, [pc, #76]	; (60d4 <read+0x64>)
    6086:	4798      	blx	r3
	
	
	gpio_set_pin_level(POWER_BLOCK_2, true);
    6088:	2101      	movs	r1, #1
    608a:	200e      	movs	r0, #14
    608c:	4b11      	ldr	r3, [pc, #68]	; (60d4 <read+0x64>)
    608e:	4798      	blx	r3
	gpio_set_pin_level(BLOCK_2_EN, true);
    6090:	2101      	movs	r1, #1
    6092:	2018      	movs	r0, #24
    6094:	4b0f      	ldr	r3, [pc, #60]	; (60d4 <read+0x64>)
    6096:	4798      	blx	r3
	int buf[128];
	
	i2c_m_scan(&I2C_OUT, &buf);
    6098:	1d3a      	adds	r2, r7, #4
    609a:	4b0f      	ldr	r3, [pc, #60]	; (60d8 <read+0x68>)
    609c:	0011      	movs	r1, r2
    609e:	0018      	movs	r0, r3
    60a0:	4b0e      	ldr	r3, [pc, #56]	; (60dc <read+0x6c>)
    60a2:	4798      	blx	r3

	float x = temperature_sensor_read(TEMPERATURE_mcp980x);
    60a4:	4b0e      	ldr	r3, [pc, #56]	; (60e0 <read+0x70>)
    60a6:	681b      	ldr	r3, [r3, #0]
    60a8:	0018      	movs	r0, r3
    60aa:	4b0e      	ldr	r3, [pc, #56]	; (60e4 <read+0x74>)
    60ac:	4798      	blx	r3
    60ae:	1c03      	adds	r3, r0, #0
    60b0:	2281      	movs	r2, #129	; 0x81
    60b2:	0092      	lsls	r2, r2, #2
    60b4:	18ba      	adds	r2, r7, r2
    60b6:	6013      	str	r3, [r2, #0]
	delay_ms(1000);
    60b8:	23fa      	movs	r3, #250	; 0xfa
    60ba:	009b      	lsls	r3, r3, #2
    60bc:	0018      	movs	r0, r3
    60be:	4b0a      	ldr	r3, [pc, #40]	; (60e8 <read+0x78>)
    60c0:	4798      	blx	r3
}
    60c2:	46c0      	nop			; (mov r8, r8)
    60c4:	46bd      	mov	sp, r7
    60c6:	2382      	movs	r3, #130	; 0x82
    60c8:	009b      	lsls	r3, r3, #2
    60ca:	449d      	add	sp, r3
    60cc:	bd80      	pop	{r7, pc}
    60ce:	46c0      	nop			; (mov r8, r8)
    60d0:	fffffdf8 	.word	0xfffffdf8
    60d4:	00005f49 	.word	0x00005f49
    60d8:	2000010c 	.word	0x2000010c
    60dc:	00005f89 	.word	0x00005f89
    60e0:	200001c8 	.word	0x200001c8
    60e4:	00005e83 	.word	0x00005e83
    60e8:	00001565 	.word	0x00001565

000060ec <temperature_sensors_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void temperature_sensors_init(void)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	af00      	add	r7, sp, #0
	i2c_m_sync_enable(&I2C_OUT);
    60f0:	4b08      	ldr	r3, [pc, #32]	; (6114 <temperature_sensors_init+0x28>)
    60f2:	0018      	movs	r0, r3
    60f4:	4b08      	ldr	r3, [pc, #32]	; (6118 <temperature_sensors_init+0x2c>)
    60f6:	4798      	blx	r3
	TEMPERATURE_mcp980x = mcp980X_construct(&TEMPERATURE_SENSOR_descr_mcp.parent, &I2C_OUT, CONF_MCP980X_SENSOR_RESOLUTION);
    60f8:	4906      	ldr	r1, [pc, #24]	; (6114 <temperature_sensors_init+0x28>)
    60fa:	4b08      	ldr	r3, [pc, #32]	; (611c <temperature_sensors_init+0x30>)
    60fc:	2202      	movs	r2, #2
    60fe:	0018      	movs	r0, r3
    6100:	4b07      	ldr	r3, [pc, #28]	; (6120 <temperature_sensors_init+0x34>)
    6102:	4798      	blx	r3
    6104:	0002      	movs	r2, r0
    6106:	4b07      	ldr	r3, [pc, #28]	; (6124 <temperature_sensors_init+0x38>)
    6108:	601a      	str	r2, [r3, #0]
	read();
    610a:	4b07      	ldr	r3, [pc, #28]	; (6128 <temperature_sensors_init+0x3c>)
    610c:	4798      	blx	r3
    610e:	46c0      	nop			; (mov r8, r8)
    6110:	46bd      	mov	sp, r7
    6112:	bd80      	pop	{r7, pc}
    6114:	2000010c 	.word	0x2000010c
    6118:	000016cd 	.word	0x000016cd
    611c:	200000b8 	.word	0x200000b8
    6120:	000054b5 	.word	0x000054b5
    6124:	200001c8 	.word	0x200001c8
    6128:	00006071 	.word	0x00006071

0000612c <__udivsi3>:
    612c:	2200      	movs	r2, #0
    612e:	0843      	lsrs	r3, r0, #1
    6130:	428b      	cmp	r3, r1
    6132:	d374      	bcc.n	621e <__udivsi3+0xf2>
    6134:	0903      	lsrs	r3, r0, #4
    6136:	428b      	cmp	r3, r1
    6138:	d35f      	bcc.n	61fa <__udivsi3+0xce>
    613a:	0a03      	lsrs	r3, r0, #8
    613c:	428b      	cmp	r3, r1
    613e:	d344      	bcc.n	61ca <__udivsi3+0x9e>
    6140:	0b03      	lsrs	r3, r0, #12
    6142:	428b      	cmp	r3, r1
    6144:	d328      	bcc.n	6198 <__udivsi3+0x6c>
    6146:	0c03      	lsrs	r3, r0, #16
    6148:	428b      	cmp	r3, r1
    614a:	d30d      	bcc.n	6168 <__udivsi3+0x3c>
    614c:	22ff      	movs	r2, #255	; 0xff
    614e:	0209      	lsls	r1, r1, #8
    6150:	ba12      	rev	r2, r2
    6152:	0c03      	lsrs	r3, r0, #16
    6154:	428b      	cmp	r3, r1
    6156:	d302      	bcc.n	615e <__udivsi3+0x32>
    6158:	1212      	asrs	r2, r2, #8
    615a:	0209      	lsls	r1, r1, #8
    615c:	d065      	beq.n	622a <__udivsi3+0xfe>
    615e:	0b03      	lsrs	r3, r0, #12
    6160:	428b      	cmp	r3, r1
    6162:	d319      	bcc.n	6198 <__udivsi3+0x6c>
    6164:	e000      	b.n	6168 <__udivsi3+0x3c>
    6166:	0a09      	lsrs	r1, r1, #8
    6168:	0bc3      	lsrs	r3, r0, #15
    616a:	428b      	cmp	r3, r1
    616c:	d301      	bcc.n	6172 <__udivsi3+0x46>
    616e:	03cb      	lsls	r3, r1, #15
    6170:	1ac0      	subs	r0, r0, r3
    6172:	4152      	adcs	r2, r2
    6174:	0b83      	lsrs	r3, r0, #14
    6176:	428b      	cmp	r3, r1
    6178:	d301      	bcc.n	617e <__udivsi3+0x52>
    617a:	038b      	lsls	r3, r1, #14
    617c:	1ac0      	subs	r0, r0, r3
    617e:	4152      	adcs	r2, r2
    6180:	0b43      	lsrs	r3, r0, #13
    6182:	428b      	cmp	r3, r1
    6184:	d301      	bcc.n	618a <__udivsi3+0x5e>
    6186:	034b      	lsls	r3, r1, #13
    6188:	1ac0      	subs	r0, r0, r3
    618a:	4152      	adcs	r2, r2
    618c:	0b03      	lsrs	r3, r0, #12
    618e:	428b      	cmp	r3, r1
    6190:	d301      	bcc.n	6196 <__udivsi3+0x6a>
    6192:	030b      	lsls	r3, r1, #12
    6194:	1ac0      	subs	r0, r0, r3
    6196:	4152      	adcs	r2, r2
    6198:	0ac3      	lsrs	r3, r0, #11
    619a:	428b      	cmp	r3, r1
    619c:	d301      	bcc.n	61a2 <__udivsi3+0x76>
    619e:	02cb      	lsls	r3, r1, #11
    61a0:	1ac0      	subs	r0, r0, r3
    61a2:	4152      	adcs	r2, r2
    61a4:	0a83      	lsrs	r3, r0, #10
    61a6:	428b      	cmp	r3, r1
    61a8:	d301      	bcc.n	61ae <__udivsi3+0x82>
    61aa:	028b      	lsls	r3, r1, #10
    61ac:	1ac0      	subs	r0, r0, r3
    61ae:	4152      	adcs	r2, r2
    61b0:	0a43      	lsrs	r3, r0, #9
    61b2:	428b      	cmp	r3, r1
    61b4:	d301      	bcc.n	61ba <__udivsi3+0x8e>
    61b6:	024b      	lsls	r3, r1, #9
    61b8:	1ac0      	subs	r0, r0, r3
    61ba:	4152      	adcs	r2, r2
    61bc:	0a03      	lsrs	r3, r0, #8
    61be:	428b      	cmp	r3, r1
    61c0:	d301      	bcc.n	61c6 <__udivsi3+0x9a>
    61c2:	020b      	lsls	r3, r1, #8
    61c4:	1ac0      	subs	r0, r0, r3
    61c6:	4152      	adcs	r2, r2
    61c8:	d2cd      	bcs.n	6166 <__udivsi3+0x3a>
    61ca:	09c3      	lsrs	r3, r0, #7
    61cc:	428b      	cmp	r3, r1
    61ce:	d301      	bcc.n	61d4 <__udivsi3+0xa8>
    61d0:	01cb      	lsls	r3, r1, #7
    61d2:	1ac0      	subs	r0, r0, r3
    61d4:	4152      	adcs	r2, r2
    61d6:	0983      	lsrs	r3, r0, #6
    61d8:	428b      	cmp	r3, r1
    61da:	d301      	bcc.n	61e0 <__udivsi3+0xb4>
    61dc:	018b      	lsls	r3, r1, #6
    61de:	1ac0      	subs	r0, r0, r3
    61e0:	4152      	adcs	r2, r2
    61e2:	0943      	lsrs	r3, r0, #5
    61e4:	428b      	cmp	r3, r1
    61e6:	d301      	bcc.n	61ec <__udivsi3+0xc0>
    61e8:	014b      	lsls	r3, r1, #5
    61ea:	1ac0      	subs	r0, r0, r3
    61ec:	4152      	adcs	r2, r2
    61ee:	0903      	lsrs	r3, r0, #4
    61f0:	428b      	cmp	r3, r1
    61f2:	d301      	bcc.n	61f8 <__udivsi3+0xcc>
    61f4:	010b      	lsls	r3, r1, #4
    61f6:	1ac0      	subs	r0, r0, r3
    61f8:	4152      	adcs	r2, r2
    61fa:	08c3      	lsrs	r3, r0, #3
    61fc:	428b      	cmp	r3, r1
    61fe:	d301      	bcc.n	6204 <__udivsi3+0xd8>
    6200:	00cb      	lsls	r3, r1, #3
    6202:	1ac0      	subs	r0, r0, r3
    6204:	4152      	adcs	r2, r2
    6206:	0883      	lsrs	r3, r0, #2
    6208:	428b      	cmp	r3, r1
    620a:	d301      	bcc.n	6210 <__udivsi3+0xe4>
    620c:	008b      	lsls	r3, r1, #2
    620e:	1ac0      	subs	r0, r0, r3
    6210:	4152      	adcs	r2, r2
    6212:	0843      	lsrs	r3, r0, #1
    6214:	428b      	cmp	r3, r1
    6216:	d301      	bcc.n	621c <__udivsi3+0xf0>
    6218:	004b      	lsls	r3, r1, #1
    621a:	1ac0      	subs	r0, r0, r3
    621c:	4152      	adcs	r2, r2
    621e:	1a41      	subs	r1, r0, r1
    6220:	d200      	bcs.n	6224 <__udivsi3+0xf8>
    6222:	4601      	mov	r1, r0
    6224:	4152      	adcs	r2, r2
    6226:	4610      	mov	r0, r2
    6228:	4770      	bx	lr
    622a:	e7ff      	b.n	622c <__udivsi3+0x100>
    622c:	b501      	push	{r0, lr}
    622e:	2000      	movs	r0, #0
    6230:	f000 f806 	bl	6240 <__aeabi_idiv0>
    6234:	bd02      	pop	{r1, pc}
    6236:	46c0      	nop			; (mov r8, r8)

00006238 <__aeabi_uidivmod>:
    6238:	2900      	cmp	r1, #0
    623a:	d0f7      	beq.n	622c <__udivsi3+0x100>
    623c:	e776      	b.n	612c <__udivsi3>
    623e:	4770      	bx	lr

00006240 <__aeabi_idiv0>:
    6240:	4770      	bx	lr
    6242:	46c0      	nop			; (mov r8, r8)

00006244 <__aeabi_fmul>:
    6244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6246:	4657      	mov	r7, sl
    6248:	464e      	mov	r6, r9
    624a:	4645      	mov	r5, r8
    624c:	46de      	mov	lr, fp
    624e:	b5e0      	push	{r5, r6, r7, lr}
    6250:	0247      	lsls	r7, r0, #9
    6252:	0046      	lsls	r6, r0, #1
    6254:	4688      	mov	r8, r1
    6256:	0a7f      	lsrs	r7, r7, #9
    6258:	0e36      	lsrs	r6, r6, #24
    625a:	0fc4      	lsrs	r4, r0, #31
    625c:	2e00      	cmp	r6, #0
    625e:	d047      	beq.n	62f0 <__aeabi_fmul+0xac>
    6260:	2eff      	cmp	r6, #255	; 0xff
    6262:	d024      	beq.n	62ae <__aeabi_fmul+0x6a>
    6264:	00fb      	lsls	r3, r7, #3
    6266:	2780      	movs	r7, #128	; 0x80
    6268:	04ff      	lsls	r7, r7, #19
    626a:	431f      	orrs	r7, r3
    626c:	2300      	movs	r3, #0
    626e:	4699      	mov	r9, r3
    6270:	469a      	mov	sl, r3
    6272:	3e7f      	subs	r6, #127	; 0x7f
    6274:	4643      	mov	r3, r8
    6276:	025d      	lsls	r5, r3, #9
    6278:	0058      	lsls	r0, r3, #1
    627a:	0fdb      	lsrs	r3, r3, #31
    627c:	0a6d      	lsrs	r5, r5, #9
    627e:	0e00      	lsrs	r0, r0, #24
    6280:	4698      	mov	r8, r3
    6282:	d043      	beq.n	630c <__aeabi_fmul+0xc8>
    6284:	28ff      	cmp	r0, #255	; 0xff
    6286:	d03b      	beq.n	6300 <__aeabi_fmul+0xbc>
    6288:	00eb      	lsls	r3, r5, #3
    628a:	2580      	movs	r5, #128	; 0x80
    628c:	2200      	movs	r2, #0
    628e:	04ed      	lsls	r5, r5, #19
    6290:	431d      	orrs	r5, r3
    6292:	387f      	subs	r0, #127	; 0x7f
    6294:	1836      	adds	r6, r6, r0
    6296:	1c73      	adds	r3, r6, #1
    6298:	4641      	mov	r1, r8
    629a:	469b      	mov	fp, r3
    629c:	464b      	mov	r3, r9
    629e:	4061      	eors	r1, r4
    62a0:	4313      	orrs	r3, r2
    62a2:	2b0f      	cmp	r3, #15
    62a4:	d864      	bhi.n	6370 <__aeabi_fmul+0x12c>
    62a6:	4875      	ldr	r0, [pc, #468]	; (647c <__aeabi_fmul+0x238>)
    62a8:	009b      	lsls	r3, r3, #2
    62aa:	58c3      	ldr	r3, [r0, r3]
    62ac:	469f      	mov	pc, r3
    62ae:	2f00      	cmp	r7, #0
    62b0:	d142      	bne.n	6338 <__aeabi_fmul+0xf4>
    62b2:	2308      	movs	r3, #8
    62b4:	4699      	mov	r9, r3
    62b6:	3b06      	subs	r3, #6
    62b8:	26ff      	movs	r6, #255	; 0xff
    62ba:	469a      	mov	sl, r3
    62bc:	e7da      	b.n	6274 <__aeabi_fmul+0x30>
    62be:	4641      	mov	r1, r8
    62c0:	2a02      	cmp	r2, #2
    62c2:	d028      	beq.n	6316 <__aeabi_fmul+0xd2>
    62c4:	2a03      	cmp	r2, #3
    62c6:	d100      	bne.n	62ca <__aeabi_fmul+0x86>
    62c8:	e0ce      	b.n	6468 <__aeabi_fmul+0x224>
    62ca:	2a01      	cmp	r2, #1
    62cc:	d000      	beq.n	62d0 <__aeabi_fmul+0x8c>
    62ce:	e0ac      	b.n	642a <__aeabi_fmul+0x1e6>
    62d0:	4011      	ands	r1, r2
    62d2:	2000      	movs	r0, #0
    62d4:	2200      	movs	r2, #0
    62d6:	b2cc      	uxtb	r4, r1
    62d8:	0240      	lsls	r0, r0, #9
    62da:	05d2      	lsls	r2, r2, #23
    62dc:	0a40      	lsrs	r0, r0, #9
    62de:	07e4      	lsls	r4, r4, #31
    62e0:	4310      	orrs	r0, r2
    62e2:	4320      	orrs	r0, r4
    62e4:	bc3c      	pop	{r2, r3, r4, r5}
    62e6:	4690      	mov	r8, r2
    62e8:	4699      	mov	r9, r3
    62ea:	46a2      	mov	sl, r4
    62ec:	46ab      	mov	fp, r5
    62ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62f0:	2f00      	cmp	r7, #0
    62f2:	d115      	bne.n	6320 <__aeabi_fmul+0xdc>
    62f4:	2304      	movs	r3, #4
    62f6:	4699      	mov	r9, r3
    62f8:	3b03      	subs	r3, #3
    62fa:	2600      	movs	r6, #0
    62fc:	469a      	mov	sl, r3
    62fe:	e7b9      	b.n	6274 <__aeabi_fmul+0x30>
    6300:	20ff      	movs	r0, #255	; 0xff
    6302:	2202      	movs	r2, #2
    6304:	2d00      	cmp	r5, #0
    6306:	d0c5      	beq.n	6294 <__aeabi_fmul+0x50>
    6308:	2203      	movs	r2, #3
    630a:	e7c3      	b.n	6294 <__aeabi_fmul+0x50>
    630c:	2d00      	cmp	r5, #0
    630e:	d119      	bne.n	6344 <__aeabi_fmul+0x100>
    6310:	2000      	movs	r0, #0
    6312:	2201      	movs	r2, #1
    6314:	e7be      	b.n	6294 <__aeabi_fmul+0x50>
    6316:	2401      	movs	r4, #1
    6318:	22ff      	movs	r2, #255	; 0xff
    631a:	400c      	ands	r4, r1
    631c:	2000      	movs	r0, #0
    631e:	e7db      	b.n	62d8 <__aeabi_fmul+0x94>
    6320:	0038      	movs	r0, r7
    6322:	f000 fe07 	bl	6f34 <__clzsi2>
    6326:	2676      	movs	r6, #118	; 0x76
    6328:	1f43      	subs	r3, r0, #5
    632a:	409f      	lsls	r7, r3
    632c:	2300      	movs	r3, #0
    632e:	4276      	negs	r6, r6
    6330:	1a36      	subs	r6, r6, r0
    6332:	4699      	mov	r9, r3
    6334:	469a      	mov	sl, r3
    6336:	e79d      	b.n	6274 <__aeabi_fmul+0x30>
    6338:	230c      	movs	r3, #12
    633a:	4699      	mov	r9, r3
    633c:	3b09      	subs	r3, #9
    633e:	26ff      	movs	r6, #255	; 0xff
    6340:	469a      	mov	sl, r3
    6342:	e797      	b.n	6274 <__aeabi_fmul+0x30>
    6344:	0028      	movs	r0, r5
    6346:	f000 fdf5 	bl	6f34 <__clzsi2>
    634a:	1f43      	subs	r3, r0, #5
    634c:	409d      	lsls	r5, r3
    634e:	2376      	movs	r3, #118	; 0x76
    6350:	425b      	negs	r3, r3
    6352:	1a18      	subs	r0, r3, r0
    6354:	2200      	movs	r2, #0
    6356:	e79d      	b.n	6294 <__aeabi_fmul+0x50>
    6358:	2080      	movs	r0, #128	; 0x80
    635a:	2400      	movs	r4, #0
    635c:	03c0      	lsls	r0, r0, #15
    635e:	22ff      	movs	r2, #255	; 0xff
    6360:	e7ba      	b.n	62d8 <__aeabi_fmul+0x94>
    6362:	003d      	movs	r5, r7
    6364:	4652      	mov	r2, sl
    6366:	e7ab      	b.n	62c0 <__aeabi_fmul+0x7c>
    6368:	003d      	movs	r5, r7
    636a:	0021      	movs	r1, r4
    636c:	4652      	mov	r2, sl
    636e:	e7a7      	b.n	62c0 <__aeabi_fmul+0x7c>
    6370:	0c3b      	lsrs	r3, r7, #16
    6372:	469c      	mov	ip, r3
    6374:	042a      	lsls	r2, r5, #16
    6376:	0c12      	lsrs	r2, r2, #16
    6378:	0c2b      	lsrs	r3, r5, #16
    637a:	0014      	movs	r4, r2
    637c:	4660      	mov	r0, ip
    637e:	4665      	mov	r5, ip
    6380:	043f      	lsls	r7, r7, #16
    6382:	0c3f      	lsrs	r7, r7, #16
    6384:	437c      	muls	r4, r7
    6386:	4342      	muls	r2, r0
    6388:	435d      	muls	r5, r3
    638a:	437b      	muls	r3, r7
    638c:	0c27      	lsrs	r7, r4, #16
    638e:	189b      	adds	r3, r3, r2
    6390:	18ff      	adds	r7, r7, r3
    6392:	42ba      	cmp	r2, r7
    6394:	d903      	bls.n	639e <__aeabi_fmul+0x15a>
    6396:	2380      	movs	r3, #128	; 0x80
    6398:	025b      	lsls	r3, r3, #9
    639a:	469c      	mov	ip, r3
    639c:	4465      	add	r5, ip
    639e:	0424      	lsls	r4, r4, #16
    63a0:	043a      	lsls	r2, r7, #16
    63a2:	0c24      	lsrs	r4, r4, #16
    63a4:	1912      	adds	r2, r2, r4
    63a6:	0193      	lsls	r3, r2, #6
    63a8:	1e5c      	subs	r4, r3, #1
    63aa:	41a3      	sbcs	r3, r4
    63ac:	0c3f      	lsrs	r7, r7, #16
    63ae:	0e92      	lsrs	r2, r2, #26
    63b0:	197d      	adds	r5, r7, r5
    63b2:	431a      	orrs	r2, r3
    63b4:	01ad      	lsls	r5, r5, #6
    63b6:	4315      	orrs	r5, r2
    63b8:	012b      	lsls	r3, r5, #4
    63ba:	d504      	bpl.n	63c6 <__aeabi_fmul+0x182>
    63bc:	2301      	movs	r3, #1
    63be:	465e      	mov	r6, fp
    63c0:	086a      	lsrs	r2, r5, #1
    63c2:	401d      	ands	r5, r3
    63c4:	4315      	orrs	r5, r2
    63c6:	0032      	movs	r2, r6
    63c8:	327f      	adds	r2, #127	; 0x7f
    63ca:	2a00      	cmp	r2, #0
    63cc:	dd25      	ble.n	641a <__aeabi_fmul+0x1d6>
    63ce:	076b      	lsls	r3, r5, #29
    63d0:	d004      	beq.n	63dc <__aeabi_fmul+0x198>
    63d2:	230f      	movs	r3, #15
    63d4:	402b      	ands	r3, r5
    63d6:	2b04      	cmp	r3, #4
    63d8:	d000      	beq.n	63dc <__aeabi_fmul+0x198>
    63da:	3504      	adds	r5, #4
    63dc:	012b      	lsls	r3, r5, #4
    63de:	d503      	bpl.n	63e8 <__aeabi_fmul+0x1a4>
    63e0:	0032      	movs	r2, r6
    63e2:	4b27      	ldr	r3, [pc, #156]	; (6480 <__aeabi_fmul+0x23c>)
    63e4:	3280      	adds	r2, #128	; 0x80
    63e6:	401d      	ands	r5, r3
    63e8:	2afe      	cmp	r2, #254	; 0xfe
    63ea:	dc94      	bgt.n	6316 <__aeabi_fmul+0xd2>
    63ec:	2401      	movs	r4, #1
    63ee:	01a8      	lsls	r0, r5, #6
    63f0:	0a40      	lsrs	r0, r0, #9
    63f2:	b2d2      	uxtb	r2, r2
    63f4:	400c      	ands	r4, r1
    63f6:	e76f      	b.n	62d8 <__aeabi_fmul+0x94>
    63f8:	2080      	movs	r0, #128	; 0x80
    63fa:	03c0      	lsls	r0, r0, #15
    63fc:	4207      	tst	r7, r0
    63fe:	d007      	beq.n	6410 <__aeabi_fmul+0x1cc>
    6400:	4205      	tst	r5, r0
    6402:	d105      	bne.n	6410 <__aeabi_fmul+0x1cc>
    6404:	4328      	orrs	r0, r5
    6406:	0240      	lsls	r0, r0, #9
    6408:	0a40      	lsrs	r0, r0, #9
    640a:	4644      	mov	r4, r8
    640c:	22ff      	movs	r2, #255	; 0xff
    640e:	e763      	b.n	62d8 <__aeabi_fmul+0x94>
    6410:	4338      	orrs	r0, r7
    6412:	0240      	lsls	r0, r0, #9
    6414:	0a40      	lsrs	r0, r0, #9
    6416:	22ff      	movs	r2, #255	; 0xff
    6418:	e75e      	b.n	62d8 <__aeabi_fmul+0x94>
    641a:	2401      	movs	r4, #1
    641c:	1aa3      	subs	r3, r4, r2
    641e:	2b1b      	cmp	r3, #27
    6420:	dd05      	ble.n	642e <__aeabi_fmul+0x1ea>
    6422:	400c      	ands	r4, r1
    6424:	2200      	movs	r2, #0
    6426:	2000      	movs	r0, #0
    6428:	e756      	b.n	62d8 <__aeabi_fmul+0x94>
    642a:	465e      	mov	r6, fp
    642c:	e7cb      	b.n	63c6 <__aeabi_fmul+0x182>
    642e:	002a      	movs	r2, r5
    6430:	2020      	movs	r0, #32
    6432:	40da      	lsrs	r2, r3
    6434:	1ac3      	subs	r3, r0, r3
    6436:	409d      	lsls	r5, r3
    6438:	002b      	movs	r3, r5
    643a:	1e5d      	subs	r5, r3, #1
    643c:	41ab      	sbcs	r3, r5
    643e:	4313      	orrs	r3, r2
    6440:	075a      	lsls	r2, r3, #29
    6442:	d004      	beq.n	644e <__aeabi_fmul+0x20a>
    6444:	220f      	movs	r2, #15
    6446:	401a      	ands	r2, r3
    6448:	2a04      	cmp	r2, #4
    644a:	d000      	beq.n	644e <__aeabi_fmul+0x20a>
    644c:	3304      	adds	r3, #4
    644e:	015a      	lsls	r2, r3, #5
    6450:	d504      	bpl.n	645c <__aeabi_fmul+0x218>
    6452:	2401      	movs	r4, #1
    6454:	2201      	movs	r2, #1
    6456:	400c      	ands	r4, r1
    6458:	2000      	movs	r0, #0
    645a:	e73d      	b.n	62d8 <__aeabi_fmul+0x94>
    645c:	2401      	movs	r4, #1
    645e:	019b      	lsls	r3, r3, #6
    6460:	0a58      	lsrs	r0, r3, #9
    6462:	400c      	ands	r4, r1
    6464:	2200      	movs	r2, #0
    6466:	e737      	b.n	62d8 <__aeabi_fmul+0x94>
    6468:	2080      	movs	r0, #128	; 0x80
    646a:	2401      	movs	r4, #1
    646c:	03c0      	lsls	r0, r0, #15
    646e:	4328      	orrs	r0, r5
    6470:	0240      	lsls	r0, r0, #9
    6472:	0a40      	lsrs	r0, r0, #9
    6474:	400c      	ands	r4, r1
    6476:	22ff      	movs	r2, #255	; 0xff
    6478:	e72e      	b.n	62d8 <__aeabi_fmul+0x94>
    647a:	46c0      	nop			; (mov r8, r8)
    647c:	000072c0 	.word	0x000072c0
    6480:	f7ffffff 	.word	0xf7ffffff

00006484 <__aeabi_fsub>:
    6484:	b5f0      	push	{r4, r5, r6, r7, lr}
    6486:	464f      	mov	r7, r9
    6488:	46d6      	mov	lr, sl
    648a:	4646      	mov	r6, r8
    648c:	0044      	lsls	r4, r0, #1
    648e:	b5c0      	push	{r6, r7, lr}
    6490:	0fc2      	lsrs	r2, r0, #31
    6492:	0247      	lsls	r7, r0, #9
    6494:	0248      	lsls	r0, r1, #9
    6496:	0a40      	lsrs	r0, r0, #9
    6498:	4684      	mov	ip, r0
    649a:	4666      	mov	r6, ip
    649c:	0a7b      	lsrs	r3, r7, #9
    649e:	0048      	lsls	r0, r1, #1
    64a0:	0fc9      	lsrs	r1, r1, #31
    64a2:	469a      	mov	sl, r3
    64a4:	0e24      	lsrs	r4, r4, #24
    64a6:	0015      	movs	r5, r2
    64a8:	00db      	lsls	r3, r3, #3
    64aa:	0e00      	lsrs	r0, r0, #24
    64ac:	4689      	mov	r9, r1
    64ae:	00f6      	lsls	r6, r6, #3
    64b0:	28ff      	cmp	r0, #255	; 0xff
    64b2:	d100      	bne.n	64b6 <__aeabi_fsub+0x32>
    64b4:	e08f      	b.n	65d6 <__aeabi_fsub+0x152>
    64b6:	2101      	movs	r1, #1
    64b8:	464f      	mov	r7, r9
    64ba:	404f      	eors	r7, r1
    64bc:	0039      	movs	r1, r7
    64be:	4291      	cmp	r1, r2
    64c0:	d066      	beq.n	6590 <__aeabi_fsub+0x10c>
    64c2:	1a22      	subs	r2, r4, r0
    64c4:	2a00      	cmp	r2, #0
    64c6:	dc00      	bgt.n	64ca <__aeabi_fsub+0x46>
    64c8:	e09d      	b.n	6606 <__aeabi_fsub+0x182>
    64ca:	2800      	cmp	r0, #0
    64cc:	d13d      	bne.n	654a <__aeabi_fsub+0xc6>
    64ce:	2e00      	cmp	r6, #0
    64d0:	d100      	bne.n	64d4 <__aeabi_fsub+0x50>
    64d2:	e08b      	b.n	65ec <__aeabi_fsub+0x168>
    64d4:	1e51      	subs	r1, r2, #1
    64d6:	2900      	cmp	r1, #0
    64d8:	d000      	beq.n	64dc <__aeabi_fsub+0x58>
    64da:	e0b5      	b.n	6648 <__aeabi_fsub+0x1c4>
    64dc:	2401      	movs	r4, #1
    64de:	1b9b      	subs	r3, r3, r6
    64e0:	015a      	lsls	r2, r3, #5
    64e2:	d544      	bpl.n	656e <__aeabi_fsub+0xea>
    64e4:	019b      	lsls	r3, r3, #6
    64e6:	099f      	lsrs	r7, r3, #6
    64e8:	0038      	movs	r0, r7
    64ea:	f000 fd23 	bl	6f34 <__clzsi2>
    64ee:	3805      	subs	r0, #5
    64f0:	4087      	lsls	r7, r0
    64f2:	4284      	cmp	r4, r0
    64f4:	dd00      	ble.n	64f8 <__aeabi_fsub+0x74>
    64f6:	e096      	b.n	6626 <__aeabi_fsub+0x1a2>
    64f8:	1b04      	subs	r4, r0, r4
    64fa:	003a      	movs	r2, r7
    64fc:	2020      	movs	r0, #32
    64fe:	3401      	adds	r4, #1
    6500:	40e2      	lsrs	r2, r4
    6502:	1b04      	subs	r4, r0, r4
    6504:	40a7      	lsls	r7, r4
    6506:	003b      	movs	r3, r7
    6508:	1e5f      	subs	r7, r3, #1
    650a:	41bb      	sbcs	r3, r7
    650c:	2400      	movs	r4, #0
    650e:	4313      	orrs	r3, r2
    6510:	075a      	lsls	r2, r3, #29
    6512:	d004      	beq.n	651e <__aeabi_fsub+0x9a>
    6514:	220f      	movs	r2, #15
    6516:	401a      	ands	r2, r3
    6518:	2a04      	cmp	r2, #4
    651a:	d000      	beq.n	651e <__aeabi_fsub+0x9a>
    651c:	3304      	adds	r3, #4
    651e:	015a      	lsls	r2, r3, #5
    6520:	d527      	bpl.n	6572 <__aeabi_fsub+0xee>
    6522:	3401      	adds	r4, #1
    6524:	2cff      	cmp	r4, #255	; 0xff
    6526:	d100      	bne.n	652a <__aeabi_fsub+0xa6>
    6528:	e079      	b.n	661e <__aeabi_fsub+0x19a>
    652a:	2201      	movs	r2, #1
    652c:	019b      	lsls	r3, r3, #6
    652e:	0a5b      	lsrs	r3, r3, #9
    6530:	b2e4      	uxtb	r4, r4
    6532:	402a      	ands	r2, r5
    6534:	025b      	lsls	r3, r3, #9
    6536:	05e4      	lsls	r4, r4, #23
    6538:	0a58      	lsrs	r0, r3, #9
    653a:	07d2      	lsls	r2, r2, #31
    653c:	4320      	orrs	r0, r4
    653e:	4310      	orrs	r0, r2
    6540:	bc1c      	pop	{r2, r3, r4}
    6542:	4690      	mov	r8, r2
    6544:	4699      	mov	r9, r3
    6546:	46a2      	mov	sl, r4
    6548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    654a:	2cff      	cmp	r4, #255	; 0xff
    654c:	d0e0      	beq.n	6510 <__aeabi_fsub+0x8c>
    654e:	2180      	movs	r1, #128	; 0x80
    6550:	04c9      	lsls	r1, r1, #19
    6552:	430e      	orrs	r6, r1
    6554:	2a1b      	cmp	r2, #27
    6556:	dc7b      	bgt.n	6650 <__aeabi_fsub+0x1cc>
    6558:	0031      	movs	r1, r6
    655a:	2020      	movs	r0, #32
    655c:	40d1      	lsrs	r1, r2
    655e:	1a82      	subs	r2, r0, r2
    6560:	4096      	lsls	r6, r2
    6562:	1e72      	subs	r2, r6, #1
    6564:	4196      	sbcs	r6, r2
    6566:	430e      	orrs	r6, r1
    6568:	1b9b      	subs	r3, r3, r6
    656a:	015a      	lsls	r2, r3, #5
    656c:	d4ba      	bmi.n	64e4 <__aeabi_fsub+0x60>
    656e:	075a      	lsls	r2, r3, #29
    6570:	d1d0      	bne.n	6514 <__aeabi_fsub+0x90>
    6572:	2201      	movs	r2, #1
    6574:	08df      	lsrs	r7, r3, #3
    6576:	402a      	ands	r2, r5
    6578:	2cff      	cmp	r4, #255	; 0xff
    657a:	d133      	bne.n	65e4 <__aeabi_fsub+0x160>
    657c:	2f00      	cmp	r7, #0
    657e:	d100      	bne.n	6582 <__aeabi_fsub+0xfe>
    6580:	e0a8      	b.n	66d4 <__aeabi_fsub+0x250>
    6582:	2380      	movs	r3, #128	; 0x80
    6584:	03db      	lsls	r3, r3, #15
    6586:	433b      	orrs	r3, r7
    6588:	025b      	lsls	r3, r3, #9
    658a:	0a5b      	lsrs	r3, r3, #9
    658c:	24ff      	movs	r4, #255	; 0xff
    658e:	e7d1      	b.n	6534 <__aeabi_fsub+0xb0>
    6590:	1a21      	subs	r1, r4, r0
    6592:	2900      	cmp	r1, #0
    6594:	dd4c      	ble.n	6630 <__aeabi_fsub+0x1ac>
    6596:	2800      	cmp	r0, #0
    6598:	d02a      	beq.n	65f0 <__aeabi_fsub+0x16c>
    659a:	2cff      	cmp	r4, #255	; 0xff
    659c:	d0b8      	beq.n	6510 <__aeabi_fsub+0x8c>
    659e:	2080      	movs	r0, #128	; 0x80
    65a0:	04c0      	lsls	r0, r0, #19
    65a2:	4306      	orrs	r6, r0
    65a4:	291b      	cmp	r1, #27
    65a6:	dd00      	ble.n	65aa <__aeabi_fsub+0x126>
    65a8:	e0af      	b.n	670a <__aeabi_fsub+0x286>
    65aa:	0030      	movs	r0, r6
    65ac:	2720      	movs	r7, #32
    65ae:	40c8      	lsrs	r0, r1
    65b0:	1a79      	subs	r1, r7, r1
    65b2:	408e      	lsls	r6, r1
    65b4:	1e71      	subs	r1, r6, #1
    65b6:	418e      	sbcs	r6, r1
    65b8:	4306      	orrs	r6, r0
    65ba:	199b      	adds	r3, r3, r6
    65bc:	0159      	lsls	r1, r3, #5
    65be:	d5d6      	bpl.n	656e <__aeabi_fsub+0xea>
    65c0:	3401      	adds	r4, #1
    65c2:	2cff      	cmp	r4, #255	; 0xff
    65c4:	d100      	bne.n	65c8 <__aeabi_fsub+0x144>
    65c6:	e085      	b.n	66d4 <__aeabi_fsub+0x250>
    65c8:	2201      	movs	r2, #1
    65ca:	497a      	ldr	r1, [pc, #488]	; (67b4 <__aeabi_fsub+0x330>)
    65cc:	401a      	ands	r2, r3
    65ce:	085b      	lsrs	r3, r3, #1
    65d0:	400b      	ands	r3, r1
    65d2:	4313      	orrs	r3, r2
    65d4:	e79c      	b.n	6510 <__aeabi_fsub+0x8c>
    65d6:	2e00      	cmp	r6, #0
    65d8:	d000      	beq.n	65dc <__aeabi_fsub+0x158>
    65da:	e770      	b.n	64be <__aeabi_fsub+0x3a>
    65dc:	e76b      	b.n	64b6 <__aeabi_fsub+0x32>
    65de:	1e3b      	subs	r3, r7, #0
    65e0:	d1c5      	bne.n	656e <__aeabi_fsub+0xea>
    65e2:	2200      	movs	r2, #0
    65e4:	027b      	lsls	r3, r7, #9
    65e6:	0a5b      	lsrs	r3, r3, #9
    65e8:	b2e4      	uxtb	r4, r4
    65ea:	e7a3      	b.n	6534 <__aeabi_fsub+0xb0>
    65ec:	0014      	movs	r4, r2
    65ee:	e78f      	b.n	6510 <__aeabi_fsub+0x8c>
    65f0:	2e00      	cmp	r6, #0
    65f2:	d04d      	beq.n	6690 <__aeabi_fsub+0x20c>
    65f4:	1e48      	subs	r0, r1, #1
    65f6:	2800      	cmp	r0, #0
    65f8:	d157      	bne.n	66aa <__aeabi_fsub+0x226>
    65fa:	199b      	adds	r3, r3, r6
    65fc:	2401      	movs	r4, #1
    65fe:	015a      	lsls	r2, r3, #5
    6600:	d5b5      	bpl.n	656e <__aeabi_fsub+0xea>
    6602:	2402      	movs	r4, #2
    6604:	e7e0      	b.n	65c8 <__aeabi_fsub+0x144>
    6606:	2a00      	cmp	r2, #0
    6608:	d125      	bne.n	6656 <__aeabi_fsub+0x1d2>
    660a:	1c62      	adds	r2, r4, #1
    660c:	b2d2      	uxtb	r2, r2
    660e:	2a01      	cmp	r2, #1
    6610:	dd72      	ble.n	66f8 <__aeabi_fsub+0x274>
    6612:	1b9f      	subs	r7, r3, r6
    6614:	017a      	lsls	r2, r7, #5
    6616:	d535      	bpl.n	6684 <__aeabi_fsub+0x200>
    6618:	1af7      	subs	r7, r6, r3
    661a:	000d      	movs	r5, r1
    661c:	e764      	b.n	64e8 <__aeabi_fsub+0x64>
    661e:	2201      	movs	r2, #1
    6620:	2300      	movs	r3, #0
    6622:	402a      	ands	r2, r5
    6624:	e786      	b.n	6534 <__aeabi_fsub+0xb0>
    6626:	003b      	movs	r3, r7
    6628:	4a63      	ldr	r2, [pc, #396]	; (67b8 <__aeabi_fsub+0x334>)
    662a:	1a24      	subs	r4, r4, r0
    662c:	4013      	ands	r3, r2
    662e:	e76f      	b.n	6510 <__aeabi_fsub+0x8c>
    6630:	2900      	cmp	r1, #0
    6632:	d16c      	bne.n	670e <__aeabi_fsub+0x28a>
    6634:	1c61      	adds	r1, r4, #1
    6636:	b2c8      	uxtb	r0, r1
    6638:	2801      	cmp	r0, #1
    663a:	dd4e      	ble.n	66da <__aeabi_fsub+0x256>
    663c:	29ff      	cmp	r1, #255	; 0xff
    663e:	d049      	beq.n	66d4 <__aeabi_fsub+0x250>
    6640:	199b      	adds	r3, r3, r6
    6642:	085b      	lsrs	r3, r3, #1
    6644:	000c      	movs	r4, r1
    6646:	e763      	b.n	6510 <__aeabi_fsub+0x8c>
    6648:	2aff      	cmp	r2, #255	; 0xff
    664a:	d041      	beq.n	66d0 <__aeabi_fsub+0x24c>
    664c:	000a      	movs	r2, r1
    664e:	e781      	b.n	6554 <__aeabi_fsub+0xd0>
    6650:	2601      	movs	r6, #1
    6652:	1b9b      	subs	r3, r3, r6
    6654:	e789      	b.n	656a <__aeabi_fsub+0xe6>
    6656:	2c00      	cmp	r4, #0
    6658:	d01c      	beq.n	6694 <__aeabi_fsub+0x210>
    665a:	28ff      	cmp	r0, #255	; 0xff
    665c:	d021      	beq.n	66a2 <__aeabi_fsub+0x21e>
    665e:	2480      	movs	r4, #128	; 0x80
    6660:	04e4      	lsls	r4, r4, #19
    6662:	4252      	negs	r2, r2
    6664:	4323      	orrs	r3, r4
    6666:	2a1b      	cmp	r2, #27
    6668:	dd00      	ble.n	666c <__aeabi_fsub+0x1e8>
    666a:	e096      	b.n	679a <__aeabi_fsub+0x316>
    666c:	001c      	movs	r4, r3
    666e:	2520      	movs	r5, #32
    6670:	40d4      	lsrs	r4, r2
    6672:	1aaa      	subs	r2, r5, r2
    6674:	4093      	lsls	r3, r2
    6676:	1e5a      	subs	r2, r3, #1
    6678:	4193      	sbcs	r3, r2
    667a:	4323      	orrs	r3, r4
    667c:	1af3      	subs	r3, r6, r3
    667e:	0004      	movs	r4, r0
    6680:	000d      	movs	r5, r1
    6682:	e72d      	b.n	64e0 <__aeabi_fsub+0x5c>
    6684:	2f00      	cmp	r7, #0
    6686:	d000      	beq.n	668a <__aeabi_fsub+0x206>
    6688:	e72e      	b.n	64e8 <__aeabi_fsub+0x64>
    668a:	2200      	movs	r2, #0
    668c:	2400      	movs	r4, #0
    668e:	e7a9      	b.n	65e4 <__aeabi_fsub+0x160>
    6690:	000c      	movs	r4, r1
    6692:	e73d      	b.n	6510 <__aeabi_fsub+0x8c>
    6694:	2b00      	cmp	r3, #0
    6696:	d058      	beq.n	674a <__aeabi_fsub+0x2c6>
    6698:	43d2      	mvns	r2, r2
    669a:	2a00      	cmp	r2, #0
    669c:	d0ee      	beq.n	667c <__aeabi_fsub+0x1f8>
    669e:	28ff      	cmp	r0, #255	; 0xff
    66a0:	d1e1      	bne.n	6666 <__aeabi_fsub+0x1e2>
    66a2:	0033      	movs	r3, r6
    66a4:	24ff      	movs	r4, #255	; 0xff
    66a6:	000d      	movs	r5, r1
    66a8:	e732      	b.n	6510 <__aeabi_fsub+0x8c>
    66aa:	29ff      	cmp	r1, #255	; 0xff
    66ac:	d010      	beq.n	66d0 <__aeabi_fsub+0x24c>
    66ae:	0001      	movs	r1, r0
    66b0:	e778      	b.n	65a4 <__aeabi_fsub+0x120>
    66b2:	2b00      	cmp	r3, #0
    66b4:	d06e      	beq.n	6794 <__aeabi_fsub+0x310>
    66b6:	24ff      	movs	r4, #255	; 0xff
    66b8:	2e00      	cmp	r6, #0
    66ba:	d100      	bne.n	66be <__aeabi_fsub+0x23a>
    66bc:	e728      	b.n	6510 <__aeabi_fsub+0x8c>
    66be:	2280      	movs	r2, #128	; 0x80
    66c0:	4651      	mov	r1, sl
    66c2:	03d2      	lsls	r2, r2, #15
    66c4:	4211      	tst	r1, r2
    66c6:	d003      	beq.n	66d0 <__aeabi_fsub+0x24c>
    66c8:	4661      	mov	r1, ip
    66ca:	4211      	tst	r1, r2
    66cc:	d100      	bne.n	66d0 <__aeabi_fsub+0x24c>
    66ce:	0033      	movs	r3, r6
    66d0:	24ff      	movs	r4, #255	; 0xff
    66d2:	e71d      	b.n	6510 <__aeabi_fsub+0x8c>
    66d4:	24ff      	movs	r4, #255	; 0xff
    66d6:	2300      	movs	r3, #0
    66d8:	e72c      	b.n	6534 <__aeabi_fsub+0xb0>
    66da:	2c00      	cmp	r4, #0
    66dc:	d1e9      	bne.n	66b2 <__aeabi_fsub+0x22e>
    66de:	2b00      	cmp	r3, #0
    66e0:	d063      	beq.n	67aa <__aeabi_fsub+0x326>
    66e2:	2e00      	cmp	r6, #0
    66e4:	d100      	bne.n	66e8 <__aeabi_fsub+0x264>
    66e6:	e713      	b.n	6510 <__aeabi_fsub+0x8c>
    66e8:	199b      	adds	r3, r3, r6
    66ea:	015a      	lsls	r2, r3, #5
    66ec:	d400      	bmi.n	66f0 <__aeabi_fsub+0x26c>
    66ee:	e73e      	b.n	656e <__aeabi_fsub+0xea>
    66f0:	4a31      	ldr	r2, [pc, #196]	; (67b8 <__aeabi_fsub+0x334>)
    66f2:	000c      	movs	r4, r1
    66f4:	4013      	ands	r3, r2
    66f6:	e70b      	b.n	6510 <__aeabi_fsub+0x8c>
    66f8:	2c00      	cmp	r4, #0
    66fa:	d11e      	bne.n	673a <__aeabi_fsub+0x2b6>
    66fc:	2b00      	cmp	r3, #0
    66fe:	d12f      	bne.n	6760 <__aeabi_fsub+0x2dc>
    6700:	2e00      	cmp	r6, #0
    6702:	d04f      	beq.n	67a4 <__aeabi_fsub+0x320>
    6704:	0033      	movs	r3, r6
    6706:	000d      	movs	r5, r1
    6708:	e702      	b.n	6510 <__aeabi_fsub+0x8c>
    670a:	2601      	movs	r6, #1
    670c:	e755      	b.n	65ba <__aeabi_fsub+0x136>
    670e:	2c00      	cmp	r4, #0
    6710:	d11f      	bne.n	6752 <__aeabi_fsub+0x2ce>
    6712:	2b00      	cmp	r3, #0
    6714:	d043      	beq.n	679e <__aeabi_fsub+0x31a>
    6716:	43c9      	mvns	r1, r1
    6718:	2900      	cmp	r1, #0
    671a:	d00b      	beq.n	6734 <__aeabi_fsub+0x2b0>
    671c:	28ff      	cmp	r0, #255	; 0xff
    671e:	d039      	beq.n	6794 <__aeabi_fsub+0x310>
    6720:	291b      	cmp	r1, #27
    6722:	dc44      	bgt.n	67ae <__aeabi_fsub+0x32a>
    6724:	001c      	movs	r4, r3
    6726:	2720      	movs	r7, #32
    6728:	40cc      	lsrs	r4, r1
    672a:	1a79      	subs	r1, r7, r1
    672c:	408b      	lsls	r3, r1
    672e:	1e59      	subs	r1, r3, #1
    6730:	418b      	sbcs	r3, r1
    6732:	4323      	orrs	r3, r4
    6734:	199b      	adds	r3, r3, r6
    6736:	0004      	movs	r4, r0
    6738:	e740      	b.n	65bc <__aeabi_fsub+0x138>
    673a:	2b00      	cmp	r3, #0
    673c:	d11a      	bne.n	6774 <__aeabi_fsub+0x2f0>
    673e:	2e00      	cmp	r6, #0
    6740:	d124      	bne.n	678c <__aeabi_fsub+0x308>
    6742:	2780      	movs	r7, #128	; 0x80
    6744:	2200      	movs	r2, #0
    6746:	03ff      	lsls	r7, r7, #15
    6748:	e71b      	b.n	6582 <__aeabi_fsub+0xfe>
    674a:	0033      	movs	r3, r6
    674c:	0004      	movs	r4, r0
    674e:	000d      	movs	r5, r1
    6750:	e6de      	b.n	6510 <__aeabi_fsub+0x8c>
    6752:	28ff      	cmp	r0, #255	; 0xff
    6754:	d01e      	beq.n	6794 <__aeabi_fsub+0x310>
    6756:	2480      	movs	r4, #128	; 0x80
    6758:	04e4      	lsls	r4, r4, #19
    675a:	4249      	negs	r1, r1
    675c:	4323      	orrs	r3, r4
    675e:	e7df      	b.n	6720 <__aeabi_fsub+0x29c>
    6760:	2e00      	cmp	r6, #0
    6762:	d100      	bne.n	6766 <__aeabi_fsub+0x2e2>
    6764:	e6d4      	b.n	6510 <__aeabi_fsub+0x8c>
    6766:	1b9f      	subs	r7, r3, r6
    6768:	017a      	lsls	r2, r7, #5
    676a:	d400      	bmi.n	676e <__aeabi_fsub+0x2ea>
    676c:	e737      	b.n	65de <__aeabi_fsub+0x15a>
    676e:	1af3      	subs	r3, r6, r3
    6770:	000d      	movs	r5, r1
    6772:	e6cd      	b.n	6510 <__aeabi_fsub+0x8c>
    6774:	24ff      	movs	r4, #255	; 0xff
    6776:	2e00      	cmp	r6, #0
    6778:	d100      	bne.n	677c <__aeabi_fsub+0x2f8>
    677a:	e6c9      	b.n	6510 <__aeabi_fsub+0x8c>
    677c:	2280      	movs	r2, #128	; 0x80
    677e:	4650      	mov	r0, sl
    6780:	03d2      	lsls	r2, r2, #15
    6782:	4210      	tst	r0, r2
    6784:	d0a4      	beq.n	66d0 <__aeabi_fsub+0x24c>
    6786:	4660      	mov	r0, ip
    6788:	4210      	tst	r0, r2
    678a:	d1a1      	bne.n	66d0 <__aeabi_fsub+0x24c>
    678c:	0033      	movs	r3, r6
    678e:	000d      	movs	r5, r1
    6790:	24ff      	movs	r4, #255	; 0xff
    6792:	e6bd      	b.n	6510 <__aeabi_fsub+0x8c>
    6794:	0033      	movs	r3, r6
    6796:	24ff      	movs	r4, #255	; 0xff
    6798:	e6ba      	b.n	6510 <__aeabi_fsub+0x8c>
    679a:	2301      	movs	r3, #1
    679c:	e76e      	b.n	667c <__aeabi_fsub+0x1f8>
    679e:	0033      	movs	r3, r6
    67a0:	0004      	movs	r4, r0
    67a2:	e6b5      	b.n	6510 <__aeabi_fsub+0x8c>
    67a4:	2700      	movs	r7, #0
    67a6:	2200      	movs	r2, #0
    67a8:	e71c      	b.n	65e4 <__aeabi_fsub+0x160>
    67aa:	0033      	movs	r3, r6
    67ac:	e6b0      	b.n	6510 <__aeabi_fsub+0x8c>
    67ae:	2301      	movs	r3, #1
    67b0:	e7c0      	b.n	6734 <__aeabi_fsub+0x2b0>
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	7dffffff 	.word	0x7dffffff
    67b8:	fbffffff 	.word	0xfbffffff

000067bc <__aeabi_f2iz>:
    67bc:	0241      	lsls	r1, r0, #9
    67be:	0043      	lsls	r3, r0, #1
    67c0:	0fc2      	lsrs	r2, r0, #31
    67c2:	0a49      	lsrs	r1, r1, #9
    67c4:	0e1b      	lsrs	r3, r3, #24
    67c6:	2000      	movs	r0, #0
    67c8:	2b7e      	cmp	r3, #126	; 0x7e
    67ca:	dd0d      	ble.n	67e8 <__aeabi_f2iz+0x2c>
    67cc:	2b9d      	cmp	r3, #157	; 0x9d
    67ce:	dc0c      	bgt.n	67ea <__aeabi_f2iz+0x2e>
    67d0:	2080      	movs	r0, #128	; 0x80
    67d2:	0400      	lsls	r0, r0, #16
    67d4:	4301      	orrs	r1, r0
    67d6:	2b95      	cmp	r3, #149	; 0x95
    67d8:	dc0a      	bgt.n	67f0 <__aeabi_f2iz+0x34>
    67da:	2096      	movs	r0, #150	; 0x96
    67dc:	1ac3      	subs	r3, r0, r3
    67de:	40d9      	lsrs	r1, r3
    67e0:	4248      	negs	r0, r1
    67e2:	2a00      	cmp	r2, #0
    67e4:	d100      	bne.n	67e8 <__aeabi_f2iz+0x2c>
    67e6:	0008      	movs	r0, r1
    67e8:	4770      	bx	lr
    67ea:	4b03      	ldr	r3, [pc, #12]	; (67f8 <__aeabi_f2iz+0x3c>)
    67ec:	18d0      	adds	r0, r2, r3
    67ee:	e7fb      	b.n	67e8 <__aeabi_f2iz+0x2c>
    67f0:	3b96      	subs	r3, #150	; 0x96
    67f2:	4099      	lsls	r1, r3
    67f4:	e7f4      	b.n	67e0 <__aeabi_f2iz+0x24>
    67f6:	46c0      	nop			; (mov r8, r8)
    67f8:	7fffffff 	.word	0x7fffffff

000067fc <__aeabi_i2f>:
    67fc:	b570      	push	{r4, r5, r6, lr}
    67fe:	2800      	cmp	r0, #0
    6800:	d030      	beq.n	6864 <__aeabi_i2f+0x68>
    6802:	17c3      	asrs	r3, r0, #31
    6804:	18c4      	adds	r4, r0, r3
    6806:	405c      	eors	r4, r3
    6808:	0fc5      	lsrs	r5, r0, #31
    680a:	0020      	movs	r0, r4
    680c:	f000 fb92 	bl	6f34 <__clzsi2>
    6810:	239e      	movs	r3, #158	; 0x9e
    6812:	1a1b      	subs	r3, r3, r0
    6814:	2b96      	cmp	r3, #150	; 0x96
    6816:	dc0d      	bgt.n	6834 <__aeabi_i2f+0x38>
    6818:	2296      	movs	r2, #150	; 0x96
    681a:	1ad2      	subs	r2, r2, r3
    681c:	4094      	lsls	r4, r2
    681e:	002a      	movs	r2, r5
    6820:	0264      	lsls	r4, r4, #9
    6822:	0a64      	lsrs	r4, r4, #9
    6824:	b2db      	uxtb	r3, r3
    6826:	0264      	lsls	r4, r4, #9
    6828:	05db      	lsls	r3, r3, #23
    682a:	0a60      	lsrs	r0, r4, #9
    682c:	07d2      	lsls	r2, r2, #31
    682e:	4318      	orrs	r0, r3
    6830:	4310      	orrs	r0, r2
    6832:	bd70      	pop	{r4, r5, r6, pc}
    6834:	2b99      	cmp	r3, #153	; 0x99
    6836:	dc19      	bgt.n	686c <__aeabi_i2f+0x70>
    6838:	2299      	movs	r2, #153	; 0x99
    683a:	1ad2      	subs	r2, r2, r3
    683c:	2a00      	cmp	r2, #0
    683e:	dd29      	ble.n	6894 <__aeabi_i2f+0x98>
    6840:	4094      	lsls	r4, r2
    6842:	0022      	movs	r2, r4
    6844:	4c14      	ldr	r4, [pc, #80]	; (6898 <__aeabi_i2f+0x9c>)
    6846:	4014      	ands	r4, r2
    6848:	0751      	lsls	r1, r2, #29
    684a:	d004      	beq.n	6856 <__aeabi_i2f+0x5a>
    684c:	210f      	movs	r1, #15
    684e:	400a      	ands	r2, r1
    6850:	2a04      	cmp	r2, #4
    6852:	d000      	beq.n	6856 <__aeabi_i2f+0x5a>
    6854:	3404      	adds	r4, #4
    6856:	0162      	lsls	r2, r4, #5
    6858:	d413      	bmi.n	6882 <__aeabi_i2f+0x86>
    685a:	01a4      	lsls	r4, r4, #6
    685c:	0a64      	lsrs	r4, r4, #9
    685e:	b2db      	uxtb	r3, r3
    6860:	002a      	movs	r2, r5
    6862:	e7e0      	b.n	6826 <__aeabi_i2f+0x2a>
    6864:	2200      	movs	r2, #0
    6866:	2300      	movs	r3, #0
    6868:	2400      	movs	r4, #0
    686a:	e7dc      	b.n	6826 <__aeabi_i2f+0x2a>
    686c:	2205      	movs	r2, #5
    686e:	0021      	movs	r1, r4
    6870:	1a12      	subs	r2, r2, r0
    6872:	40d1      	lsrs	r1, r2
    6874:	22b9      	movs	r2, #185	; 0xb9
    6876:	1ad2      	subs	r2, r2, r3
    6878:	4094      	lsls	r4, r2
    687a:	1e62      	subs	r2, r4, #1
    687c:	4194      	sbcs	r4, r2
    687e:	430c      	orrs	r4, r1
    6880:	e7da      	b.n	6838 <__aeabi_i2f+0x3c>
    6882:	4b05      	ldr	r3, [pc, #20]	; (6898 <__aeabi_i2f+0x9c>)
    6884:	002a      	movs	r2, r5
    6886:	401c      	ands	r4, r3
    6888:	239f      	movs	r3, #159	; 0x9f
    688a:	01a4      	lsls	r4, r4, #6
    688c:	1a1b      	subs	r3, r3, r0
    688e:	0a64      	lsrs	r4, r4, #9
    6890:	b2db      	uxtb	r3, r3
    6892:	e7c8      	b.n	6826 <__aeabi_i2f+0x2a>
    6894:	0022      	movs	r2, r4
    6896:	e7d5      	b.n	6844 <__aeabi_i2f+0x48>
    6898:	fbffffff 	.word	0xfbffffff

0000689c <__aeabi_dmul>:
    689c:	b5f0      	push	{r4, r5, r6, r7, lr}
    689e:	4657      	mov	r7, sl
    68a0:	4645      	mov	r5, r8
    68a2:	46de      	mov	lr, fp
    68a4:	464e      	mov	r6, r9
    68a6:	b5e0      	push	{r5, r6, r7, lr}
    68a8:	030c      	lsls	r4, r1, #12
    68aa:	4698      	mov	r8, r3
    68ac:	004e      	lsls	r6, r1, #1
    68ae:	0b23      	lsrs	r3, r4, #12
    68b0:	b087      	sub	sp, #28
    68b2:	0007      	movs	r7, r0
    68b4:	4692      	mov	sl, r2
    68b6:	469b      	mov	fp, r3
    68b8:	0d76      	lsrs	r6, r6, #21
    68ba:	0fcd      	lsrs	r5, r1, #31
    68bc:	2e00      	cmp	r6, #0
    68be:	d06b      	beq.n	6998 <__aeabi_dmul+0xfc>
    68c0:	4b6d      	ldr	r3, [pc, #436]	; (6a78 <__aeabi_dmul+0x1dc>)
    68c2:	429e      	cmp	r6, r3
    68c4:	d035      	beq.n	6932 <__aeabi_dmul+0x96>
    68c6:	2480      	movs	r4, #128	; 0x80
    68c8:	465b      	mov	r3, fp
    68ca:	0f42      	lsrs	r2, r0, #29
    68cc:	0424      	lsls	r4, r4, #16
    68ce:	00db      	lsls	r3, r3, #3
    68d0:	4314      	orrs	r4, r2
    68d2:	431c      	orrs	r4, r3
    68d4:	00c3      	lsls	r3, r0, #3
    68d6:	4699      	mov	r9, r3
    68d8:	4b68      	ldr	r3, [pc, #416]	; (6a7c <__aeabi_dmul+0x1e0>)
    68da:	46a3      	mov	fp, r4
    68dc:	469c      	mov	ip, r3
    68de:	2300      	movs	r3, #0
    68e0:	2700      	movs	r7, #0
    68e2:	4466      	add	r6, ip
    68e4:	9302      	str	r3, [sp, #8]
    68e6:	4643      	mov	r3, r8
    68e8:	031c      	lsls	r4, r3, #12
    68ea:	005a      	lsls	r2, r3, #1
    68ec:	0fdb      	lsrs	r3, r3, #31
    68ee:	4650      	mov	r0, sl
    68f0:	0b24      	lsrs	r4, r4, #12
    68f2:	0d52      	lsrs	r2, r2, #21
    68f4:	4698      	mov	r8, r3
    68f6:	d100      	bne.n	68fa <__aeabi_dmul+0x5e>
    68f8:	e076      	b.n	69e8 <__aeabi_dmul+0x14c>
    68fa:	4b5f      	ldr	r3, [pc, #380]	; (6a78 <__aeabi_dmul+0x1dc>)
    68fc:	429a      	cmp	r2, r3
    68fe:	d06d      	beq.n	69dc <__aeabi_dmul+0x140>
    6900:	2380      	movs	r3, #128	; 0x80
    6902:	0f41      	lsrs	r1, r0, #29
    6904:	041b      	lsls	r3, r3, #16
    6906:	430b      	orrs	r3, r1
    6908:	495c      	ldr	r1, [pc, #368]	; (6a7c <__aeabi_dmul+0x1e0>)
    690a:	00e4      	lsls	r4, r4, #3
    690c:	468c      	mov	ip, r1
    690e:	431c      	orrs	r4, r3
    6910:	00c3      	lsls	r3, r0, #3
    6912:	2000      	movs	r0, #0
    6914:	4462      	add	r2, ip
    6916:	4641      	mov	r1, r8
    6918:	18b6      	adds	r6, r6, r2
    691a:	4069      	eors	r1, r5
    691c:	1c72      	adds	r2, r6, #1
    691e:	9101      	str	r1, [sp, #4]
    6920:	4694      	mov	ip, r2
    6922:	4307      	orrs	r7, r0
    6924:	2f0f      	cmp	r7, #15
    6926:	d900      	bls.n	692a <__aeabi_dmul+0x8e>
    6928:	e0b0      	b.n	6a8c <__aeabi_dmul+0x1f0>
    692a:	4a55      	ldr	r2, [pc, #340]	; (6a80 <__aeabi_dmul+0x1e4>)
    692c:	00bf      	lsls	r7, r7, #2
    692e:	59d2      	ldr	r2, [r2, r7]
    6930:	4697      	mov	pc, r2
    6932:	465b      	mov	r3, fp
    6934:	4303      	orrs	r3, r0
    6936:	4699      	mov	r9, r3
    6938:	d000      	beq.n	693c <__aeabi_dmul+0xa0>
    693a:	e087      	b.n	6a4c <__aeabi_dmul+0x1b0>
    693c:	2300      	movs	r3, #0
    693e:	469b      	mov	fp, r3
    6940:	3302      	adds	r3, #2
    6942:	2708      	movs	r7, #8
    6944:	9302      	str	r3, [sp, #8]
    6946:	e7ce      	b.n	68e6 <__aeabi_dmul+0x4a>
    6948:	4642      	mov	r2, r8
    694a:	9201      	str	r2, [sp, #4]
    694c:	2802      	cmp	r0, #2
    694e:	d067      	beq.n	6a20 <__aeabi_dmul+0x184>
    6950:	2803      	cmp	r0, #3
    6952:	d100      	bne.n	6956 <__aeabi_dmul+0xba>
    6954:	e20e      	b.n	6d74 <__aeabi_dmul+0x4d8>
    6956:	2801      	cmp	r0, #1
    6958:	d000      	beq.n	695c <__aeabi_dmul+0xc0>
    695a:	e162      	b.n	6c22 <__aeabi_dmul+0x386>
    695c:	2300      	movs	r3, #0
    695e:	2400      	movs	r4, #0
    6960:	2200      	movs	r2, #0
    6962:	4699      	mov	r9, r3
    6964:	9901      	ldr	r1, [sp, #4]
    6966:	4001      	ands	r1, r0
    6968:	b2cd      	uxtb	r5, r1
    696a:	2100      	movs	r1, #0
    696c:	0312      	lsls	r2, r2, #12
    696e:	0d0b      	lsrs	r3, r1, #20
    6970:	0b12      	lsrs	r2, r2, #12
    6972:	051b      	lsls	r3, r3, #20
    6974:	4313      	orrs	r3, r2
    6976:	4a43      	ldr	r2, [pc, #268]	; (6a84 <__aeabi_dmul+0x1e8>)
    6978:	0524      	lsls	r4, r4, #20
    697a:	4013      	ands	r3, r2
    697c:	431c      	orrs	r4, r3
    697e:	0064      	lsls	r4, r4, #1
    6980:	07ed      	lsls	r5, r5, #31
    6982:	0864      	lsrs	r4, r4, #1
    6984:	432c      	orrs	r4, r5
    6986:	4648      	mov	r0, r9
    6988:	0021      	movs	r1, r4
    698a:	b007      	add	sp, #28
    698c:	bc3c      	pop	{r2, r3, r4, r5}
    698e:	4690      	mov	r8, r2
    6990:	4699      	mov	r9, r3
    6992:	46a2      	mov	sl, r4
    6994:	46ab      	mov	fp, r5
    6996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6998:	4303      	orrs	r3, r0
    699a:	4699      	mov	r9, r3
    699c:	d04f      	beq.n	6a3e <__aeabi_dmul+0x1a2>
    699e:	465b      	mov	r3, fp
    69a0:	2b00      	cmp	r3, #0
    69a2:	d100      	bne.n	69a6 <__aeabi_dmul+0x10a>
    69a4:	e189      	b.n	6cba <__aeabi_dmul+0x41e>
    69a6:	4658      	mov	r0, fp
    69a8:	f000 fac4 	bl	6f34 <__clzsi2>
    69ac:	0003      	movs	r3, r0
    69ae:	3b0b      	subs	r3, #11
    69b0:	2b1c      	cmp	r3, #28
    69b2:	dd00      	ble.n	69b6 <__aeabi_dmul+0x11a>
    69b4:	e17a      	b.n	6cac <__aeabi_dmul+0x410>
    69b6:	221d      	movs	r2, #29
    69b8:	1ad3      	subs	r3, r2, r3
    69ba:	003a      	movs	r2, r7
    69bc:	0001      	movs	r1, r0
    69be:	465c      	mov	r4, fp
    69c0:	40da      	lsrs	r2, r3
    69c2:	3908      	subs	r1, #8
    69c4:	408c      	lsls	r4, r1
    69c6:	0013      	movs	r3, r2
    69c8:	408f      	lsls	r7, r1
    69ca:	4323      	orrs	r3, r4
    69cc:	469b      	mov	fp, r3
    69ce:	46b9      	mov	r9, r7
    69d0:	2300      	movs	r3, #0
    69d2:	4e2d      	ldr	r6, [pc, #180]	; (6a88 <__aeabi_dmul+0x1ec>)
    69d4:	2700      	movs	r7, #0
    69d6:	1a36      	subs	r6, r6, r0
    69d8:	9302      	str	r3, [sp, #8]
    69da:	e784      	b.n	68e6 <__aeabi_dmul+0x4a>
    69dc:	4653      	mov	r3, sl
    69de:	4323      	orrs	r3, r4
    69e0:	d12a      	bne.n	6a38 <__aeabi_dmul+0x19c>
    69e2:	2400      	movs	r4, #0
    69e4:	2002      	movs	r0, #2
    69e6:	e796      	b.n	6916 <__aeabi_dmul+0x7a>
    69e8:	4653      	mov	r3, sl
    69ea:	4323      	orrs	r3, r4
    69ec:	d020      	beq.n	6a30 <__aeabi_dmul+0x194>
    69ee:	2c00      	cmp	r4, #0
    69f0:	d100      	bne.n	69f4 <__aeabi_dmul+0x158>
    69f2:	e157      	b.n	6ca4 <__aeabi_dmul+0x408>
    69f4:	0020      	movs	r0, r4
    69f6:	f000 fa9d 	bl	6f34 <__clzsi2>
    69fa:	0003      	movs	r3, r0
    69fc:	3b0b      	subs	r3, #11
    69fe:	2b1c      	cmp	r3, #28
    6a00:	dd00      	ble.n	6a04 <__aeabi_dmul+0x168>
    6a02:	e149      	b.n	6c98 <__aeabi_dmul+0x3fc>
    6a04:	211d      	movs	r1, #29
    6a06:	1acb      	subs	r3, r1, r3
    6a08:	4651      	mov	r1, sl
    6a0a:	0002      	movs	r2, r0
    6a0c:	40d9      	lsrs	r1, r3
    6a0e:	4653      	mov	r3, sl
    6a10:	3a08      	subs	r2, #8
    6a12:	4094      	lsls	r4, r2
    6a14:	4093      	lsls	r3, r2
    6a16:	430c      	orrs	r4, r1
    6a18:	4a1b      	ldr	r2, [pc, #108]	; (6a88 <__aeabi_dmul+0x1ec>)
    6a1a:	1a12      	subs	r2, r2, r0
    6a1c:	2000      	movs	r0, #0
    6a1e:	e77a      	b.n	6916 <__aeabi_dmul+0x7a>
    6a20:	2501      	movs	r5, #1
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	4c14      	ldr	r4, [pc, #80]	; (6a78 <__aeabi_dmul+0x1dc>)
    6a26:	401d      	ands	r5, r3
    6a28:	2300      	movs	r3, #0
    6a2a:	2200      	movs	r2, #0
    6a2c:	4699      	mov	r9, r3
    6a2e:	e79c      	b.n	696a <__aeabi_dmul+0xce>
    6a30:	2400      	movs	r4, #0
    6a32:	2200      	movs	r2, #0
    6a34:	2001      	movs	r0, #1
    6a36:	e76e      	b.n	6916 <__aeabi_dmul+0x7a>
    6a38:	4653      	mov	r3, sl
    6a3a:	2003      	movs	r0, #3
    6a3c:	e76b      	b.n	6916 <__aeabi_dmul+0x7a>
    6a3e:	2300      	movs	r3, #0
    6a40:	469b      	mov	fp, r3
    6a42:	3301      	adds	r3, #1
    6a44:	2704      	movs	r7, #4
    6a46:	2600      	movs	r6, #0
    6a48:	9302      	str	r3, [sp, #8]
    6a4a:	e74c      	b.n	68e6 <__aeabi_dmul+0x4a>
    6a4c:	2303      	movs	r3, #3
    6a4e:	4681      	mov	r9, r0
    6a50:	270c      	movs	r7, #12
    6a52:	9302      	str	r3, [sp, #8]
    6a54:	e747      	b.n	68e6 <__aeabi_dmul+0x4a>
    6a56:	2280      	movs	r2, #128	; 0x80
    6a58:	2300      	movs	r3, #0
    6a5a:	2500      	movs	r5, #0
    6a5c:	0312      	lsls	r2, r2, #12
    6a5e:	4699      	mov	r9, r3
    6a60:	4c05      	ldr	r4, [pc, #20]	; (6a78 <__aeabi_dmul+0x1dc>)
    6a62:	e782      	b.n	696a <__aeabi_dmul+0xce>
    6a64:	465c      	mov	r4, fp
    6a66:	464b      	mov	r3, r9
    6a68:	9802      	ldr	r0, [sp, #8]
    6a6a:	e76f      	b.n	694c <__aeabi_dmul+0xb0>
    6a6c:	465c      	mov	r4, fp
    6a6e:	464b      	mov	r3, r9
    6a70:	9501      	str	r5, [sp, #4]
    6a72:	9802      	ldr	r0, [sp, #8]
    6a74:	e76a      	b.n	694c <__aeabi_dmul+0xb0>
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	000007ff 	.word	0x000007ff
    6a7c:	fffffc01 	.word	0xfffffc01
    6a80:	00007300 	.word	0x00007300
    6a84:	800fffff 	.word	0x800fffff
    6a88:	fffffc0d 	.word	0xfffffc0d
    6a8c:	464a      	mov	r2, r9
    6a8e:	4649      	mov	r1, r9
    6a90:	0c17      	lsrs	r7, r2, #16
    6a92:	0c1a      	lsrs	r2, r3, #16
    6a94:	041b      	lsls	r3, r3, #16
    6a96:	0c1b      	lsrs	r3, r3, #16
    6a98:	0408      	lsls	r0, r1, #16
    6a9a:	0019      	movs	r1, r3
    6a9c:	0c00      	lsrs	r0, r0, #16
    6a9e:	4341      	muls	r1, r0
    6aa0:	0015      	movs	r5, r2
    6aa2:	4688      	mov	r8, r1
    6aa4:	0019      	movs	r1, r3
    6aa6:	437d      	muls	r5, r7
    6aa8:	4379      	muls	r1, r7
    6aaa:	9503      	str	r5, [sp, #12]
    6aac:	4689      	mov	r9, r1
    6aae:	0029      	movs	r1, r5
    6ab0:	0015      	movs	r5, r2
    6ab2:	4345      	muls	r5, r0
    6ab4:	444d      	add	r5, r9
    6ab6:	9502      	str	r5, [sp, #8]
    6ab8:	4645      	mov	r5, r8
    6aba:	0c2d      	lsrs	r5, r5, #16
    6abc:	46aa      	mov	sl, r5
    6abe:	9d02      	ldr	r5, [sp, #8]
    6ac0:	4455      	add	r5, sl
    6ac2:	45a9      	cmp	r9, r5
    6ac4:	d906      	bls.n	6ad4 <__aeabi_dmul+0x238>
    6ac6:	468a      	mov	sl, r1
    6ac8:	2180      	movs	r1, #128	; 0x80
    6aca:	0249      	lsls	r1, r1, #9
    6acc:	4689      	mov	r9, r1
    6ace:	44ca      	add	sl, r9
    6ad0:	4651      	mov	r1, sl
    6ad2:	9103      	str	r1, [sp, #12]
    6ad4:	0c29      	lsrs	r1, r5, #16
    6ad6:	9104      	str	r1, [sp, #16]
    6ad8:	4641      	mov	r1, r8
    6ada:	0409      	lsls	r1, r1, #16
    6adc:	042d      	lsls	r5, r5, #16
    6ade:	0c09      	lsrs	r1, r1, #16
    6ae0:	4688      	mov	r8, r1
    6ae2:	0029      	movs	r1, r5
    6ae4:	0c25      	lsrs	r5, r4, #16
    6ae6:	0424      	lsls	r4, r4, #16
    6ae8:	4441      	add	r1, r8
    6aea:	0c24      	lsrs	r4, r4, #16
    6aec:	9105      	str	r1, [sp, #20]
    6aee:	0021      	movs	r1, r4
    6af0:	4341      	muls	r1, r0
    6af2:	4688      	mov	r8, r1
    6af4:	0021      	movs	r1, r4
    6af6:	4379      	muls	r1, r7
    6af8:	468a      	mov	sl, r1
    6afa:	4368      	muls	r0, r5
    6afc:	4641      	mov	r1, r8
    6afe:	4450      	add	r0, sl
    6b00:	4681      	mov	r9, r0
    6b02:	0c08      	lsrs	r0, r1, #16
    6b04:	4448      	add	r0, r9
    6b06:	436f      	muls	r7, r5
    6b08:	4582      	cmp	sl, r0
    6b0a:	d903      	bls.n	6b14 <__aeabi_dmul+0x278>
    6b0c:	2180      	movs	r1, #128	; 0x80
    6b0e:	0249      	lsls	r1, r1, #9
    6b10:	4689      	mov	r9, r1
    6b12:	444f      	add	r7, r9
    6b14:	0c01      	lsrs	r1, r0, #16
    6b16:	4689      	mov	r9, r1
    6b18:	0039      	movs	r1, r7
    6b1a:	4449      	add	r1, r9
    6b1c:	9102      	str	r1, [sp, #8]
    6b1e:	4641      	mov	r1, r8
    6b20:	040f      	lsls	r7, r1, #16
    6b22:	9904      	ldr	r1, [sp, #16]
    6b24:	0c3f      	lsrs	r7, r7, #16
    6b26:	4688      	mov	r8, r1
    6b28:	0400      	lsls	r0, r0, #16
    6b2a:	19c0      	adds	r0, r0, r7
    6b2c:	4480      	add	r8, r0
    6b2e:	4641      	mov	r1, r8
    6b30:	9104      	str	r1, [sp, #16]
    6b32:	4659      	mov	r1, fp
    6b34:	0c0f      	lsrs	r7, r1, #16
    6b36:	0409      	lsls	r1, r1, #16
    6b38:	0c09      	lsrs	r1, r1, #16
    6b3a:	4688      	mov	r8, r1
    6b3c:	4359      	muls	r1, r3
    6b3e:	468a      	mov	sl, r1
    6b40:	0039      	movs	r1, r7
    6b42:	4351      	muls	r1, r2
    6b44:	4689      	mov	r9, r1
    6b46:	4641      	mov	r1, r8
    6b48:	434a      	muls	r2, r1
    6b4a:	4651      	mov	r1, sl
    6b4c:	0c09      	lsrs	r1, r1, #16
    6b4e:	468b      	mov	fp, r1
    6b50:	437b      	muls	r3, r7
    6b52:	18d2      	adds	r2, r2, r3
    6b54:	445a      	add	r2, fp
    6b56:	4293      	cmp	r3, r2
    6b58:	d903      	bls.n	6b62 <__aeabi_dmul+0x2c6>
    6b5a:	2380      	movs	r3, #128	; 0x80
    6b5c:	025b      	lsls	r3, r3, #9
    6b5e:	469b      	mov	fp, r3
    6b60:	44d9      	add	r9, fp
    6b62:	4651      	mov	r1, sl
    6b64:	0409      	lsls	r1, r1, #16
    6b66:	0c09      	lsrs	r1, r1, #16
    6b68:	468a      	mov	sl, r1
    6b6a:	4641      	mov	r1, r8
    6b6c:	4361      	muls	r1, r4
    6b6e:	437c      	muls	r4, r7
    6b70:	0c13      	lsrs	r3, r2, #16
    6b72:	0412      	lsls	r2, r2, #16
    6b74:	444b      	add	r3, r9
    6b76:	4452      	add	r2, sl
    6b78:	46a1      	mov	r9, r4
    6b7a:	468a      	mov	sl, r1
    6b7c:	003c      	movs	r4, r7
    6b7e:	4641      	mov	r1, r8
    6b80:	436c      	muls	r4, r5
    6b82:	434d      	muls	r5, r1
    6b84:	4651      	mov	r1, sl
    6b86:	444d      	add	r5, r9
    6b88:	0c0f      	lsrs	r7, r1, #16
    6b8a:	197d      	adds	r5, r7, r5
    6b8c:	45a9      	cmp	r9, r5
    6b8e:	d903      	bls.n	6b98 <__aeabi_dmul+0x2fc>
    6b90:	2180      	movs	r1, #128	; 0x80
    6b92:	0249      	lsls	r1, r1, #9
    6b94:	4688      	mov	r8, r1
    6b96:	4444      	add	r4, r8
    6b98:	9f04      	ldr	r7, [sp, #16]
    6b9a:	9903      	ldr	r1, [sp, #12]
    6b9c:	46b8      	mov	r8, r7
    6b9e:	4441      	add	r1, r8
    6ba0:	468b      	mov	fp, r1
    6ba2:	4583      	cmp	fp, r0
    6ba4:	4180      	sbcs	r0, r0
    6ba6:	4241      	negs	r1, r0
    6ba8:	4688      	mov	r8, r1
    6baa:	4651      	mov	r1, sl
    6bac:	0408      	lsls	r0, r1, #16
    6bae:	042f      	lsls	r7, r5, #16
    6bb0:	0c00      	lsrs	r0, r0, #16
    6bb2:	183f      	adds	r7, r7, r0
    6bb4:	4658      	mov	r0, fp
    6bb6:	9902      	ldr	r1, [sp, #8]
    6bb8:	1810      	adds	r0, r2, r0
    6bba:	4689      	mov	r9, r1
    6bbc:	4290      	cmp	r0, r2
    6bbe:	4192      	sbcs	r2, r2
    6bc0:	444f      	add	r7, r9
    6bc2:	46ba      	mov	sl, r7
    6bc4:	4252      	negs	r2, r2
    6bc6:	4699      	mov	r9, r3
    6bc8:	4693      	mov	fp, r2
    6bca:	44c2      	add	sl, r8
    6bcc:	44d1      	add	r9, sl
    6bce:	44cb      	add	fp, r9
    6bd0:	428f      	cmp	r7, r1
    6bd2:	41bf      	sbcs	r7, r7
    6bd4:	45c2      	cmp	sl, r8
    6bd6:	4189      	sbcs	r1, r1
    6bd8:	4599      	cmp	r9, r3
    6bda:	419b      	sbcs	r3, r3
    6bdc:	4593      	cmp	fp, r2
    6bde:	4192      	sbcs	r2, r2
    6be0:	427f      	negs	r7, r7
    6be2:	4249      	negs	r1, r1
    6be4:	0c2d      	lsrs	r5, r5, #16
    6be6:	4252      	negs	r2, r2
    6be8:	430f      	orrs	r7, r1
    6bea:	425b      	negs	r3, r3
    6bec:	4313      	orrs	r3, r2
    6bee:	197f      	adds	r7, r7, r5
    6bf0:	18ff      	adds	r7, r7, r3
    6bf2:	465b      	mov	r3, fp
    6bf4:	193c      	adds	r4, r7, r4
    6bf6:	0ddb      	lsrs	r3, r3, #23
    6bf8:	9a05      	ldr	r2, [sp, #20]
    6bfa:	0264      	lsls	r4, r4, #9
    6bfc:	431c      	orrs	r4, r3
    6bfe:	0243      	lsls	r3, r0, #9
    6c00:	4313      	orrs	r3, r2
    6c02:	1e5d      	subs	r5, r3, #1
    6c04:	41ab      	sbcs	r3, r5
    6c06:	465a      	mov	r2, fp
    6c08:	0dc0      	lsrs	r0, r0, #23
    6c0a:	4303      	orrs	r3, r0
    6c0c:	0252      	lsls	r2, r2, #9
    6c0e:	4313      	orrs	r3, r2
    6c10:	01e2      	lsls	r2, r4, #7
    6c12:	d556      	bpl.n	6cc2 <__aeabi_dmul+0x426>
    6c14:	2001      	movs	r0, #1
    6c16:	085a      	lsrs	r2, r3, #1
    6c18:	4003      	ands	r3, r0
    6c1a:	4313      	orrs	r3, r2
    6c1c:	07e2      	lsls	r2, r4, #31
    6c1e:	4313      	orrs	r3, r2
    6c20:	0864      	lsrs	r4, r4, #1
    6c22:	485a      	ldr	r0, [pc, #360]	; (6d8c <__aeabi_dmul+0x4f0>)
    6c24:	4460      	add	r0, ip
    6c26:	2800      	cmp	r0, #0
    6c28:	dd4d      	ble.n	6cc6 <__aeabi_dmul+0x42a>
    6c2a:	075a      	lsls	r2, r3, #29
    6c2c:	d009      	beq.n	6c42 <__aeabi_dmul+0x3a6>
    6c2e:	220f      	movs	r2, #15
    6c30:	401a      	ands	r2, r3
    6c32:	2a04      	cmp	r2, #4
    6c34:	d005      	beq.n	6c42 <__aeabi_dmul+0x3a6>
    6c36:	1d1a      	adds	r2, r3, #4
    6c38:	429a      	cmp	r2, r3
    6c3a:	419b      	sbcs	r3, r3
    6c3c:	425b      	negs	r3, r3
    6c3e:	18e4      	adds	r4, r4, r3
    6c40:	0013      	movs	r3, r2
    6c42:	01e2      	lsls	r2, r4, #7
    6c44:	d504      	bpl.n	6c50 <__aeabi_dmul+0x3b4>
    6c46:	2080      	movs	r0, #128	; 0x80
    6c48:	4a51      	ldr	r2, [pc, #324]	; (6d90 <__aeabi_dmul+0x4f4>)
    6c4a:	00c0      	lsls	r0, r0, #3
    6c4c:	4014      	ands	r4, r2
    6c4e:	4460      	add	r0, ip
    6c50:	4a50      	ldr	r2, [pc, #320]	; (6d94 <__aeabi_dmul+0x4f8>)
    6c52:	4290      	cmp	r0, r2
    6c54:	dd00      	ble.n	6c58 <__aeabi_dmul+0x3bc>
    6c56:	e6e3      	b.n	6a20 <__aeabi_dmul+0x184>
    6c58:	2501      	movs	r5, #1
    6c5a:	08db      	lsrs	r3, r3, #3
    6c5c:	0762      	lsls	r2, r4, #29
    6c5e:	431a      	orrs	r2, r3
    6c60:	0264      	lsls	r4, r4, #9
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	4691      	mov	r9, r2
    6c66:	0b22      	lsrs	r2, r4, #12
    6c68:	0544      	lsls	r4, r0, #21
    6c6a:	0d64      	lsrs	r4, r4, #21
    6c6c:	401d      	ands	r5, r3
    6c6e:	e67c      	b.n	696a <__aeabi_dmul+0xce>
    6c70:	2280      	movs	r2, #128	; 0x80
    6c72:	4659      	mov	r1, fp
    6c74:	0312      	lsls	r2, r2, #12
    6c76:	4211      	tst	r1, r2
    6c78:	d008      	beq.n	6c8c <__aeabi_dmul+0x3f0>
    6c7a:	4214      	tst	r4, r2
    6c7c:	d106      	bne.n	6c8c <__aeabi_dmul+0x3f0>
    6c7e:	4322      	orrs	r2, r4
    6c80:	0312      	lsls	r2, r2, #12
    6c82:	0b12      	lsrs	r2, r2, #12
    6c84:	4645      	mov	r5, r8
    6c86:	4699      	mov	r9, r3
    6c88:	4c43      	ldr	r4, [pc, #268]	; (6d98 <__aeabi_dmul+0x4fc>)
    6c8a:	e66e      	b.n	696a <__aeabi_dmul+0xce>
    6c8c:	465b      	mov	r3, fp
    6c8e:	431a      	orrs	r2, r3
    6c90:	0312      	lsls	r2, r2, #12
    6c92:	0b12      	lsrs	r2, r2, #12
    6c94:	4c40      	ldr	r4, [pc, #256]	; (6d98 <__aeabi_dmul+0x4fc>)
    6c96:	e668      	b.n	696a <__aeabi_dmul+0xce>
    6c98:	0003      	movs	r3, r0
    6c9a:	4654      	mov	r4, sl
    6c9c:	3b28      	subs	r3, #40	; 0x28
    6c9e:	409c      	lsls	r4, r3
    6ca0:	2300      	movs	r3, #0
    6ca2:	e6b9      	b.n	6a18 <__aeabi_dmul+0x17c>
    6ca4:	f000 f946 	bl	6f34 <__clzsi2>
    6ca8:	3020      	adds	r0, #32
    6caa:	e6a6      	b.n	69fa <__aeabi_dmul+0x15e>
    6cac:	0003      	movs	r3, r0
    6cae:	3b28      	subs	r3, #40	; 0x28
    6cb0:	409f      	lsls	r7, r3
    6cb2:	2300      	movs	r3, #0
    6cb4:	46bb      	mov	fp, r7
    6cb6:	4699      	mov	r9, r3
    6cb8:	e68a      	b.n	69d0 <__aeabi_dmul+0x134>
    6cba:	f000 f93b 	bl	6f34 <__clzsi2>
    6cbe:	3020      	adds	r0, #32
    6cc0:	e674      	b.n	69ac <__aeabi_dmul+0x110>
    6cc2:	46b4      	mov	ip, r6
    6cc4:	e7ad      	b.n	6c22 <__aeabi_dmul+0x386>
    6cc6:	2501      	movs	r5, #1
    6cc8:	1a2a      	subs	r2, r5, r0
    6cca:	2a38      	cmp	r2, #56	; 0x38
    6ccc:	dd06      	ble.n	6cdc <__aeabi_dmul+0x440>
    6cce:	9b01      	ldr	r3, [sp, #4]
    6cd0:	2400      	movs	r4, #0
    6cd2:	401d      	ands	r5, r3
    6cd4:	2300      	movs	r3, #0
    6cd6:	2200      	movs	r2, #0
    6cd8:	4699      	mov	r9, r3
    6cda:	e646      	b.n	696a <__aeabi_dmul+0xce>
    6cdc:	2a1f      	cmp	r2, #31
    6cde:	dc21      	bgt.n	6d24 <__aeabi_dmul+0x488>
    6ce0:	2520      	movs	r5, #32
    6ce2:	0020      	movs	r0, r4
    6ce4:	1aad      	subs	r5, r5, r2
    6ce6:	001e      	movs	r6, r3
    6ce8:	40ab      	lsls	r3, r5
    6cea:	40a8      	lsls	r0, r5
    6cec:	40d6      	lsrs	r6, r2
    6cee:	1e5d      	subs	r5, r3, #1
    6cf0:	41ab      	sbcs	r3, r5
    6cf2:	4330      	orrs	r0, r6
    6cf4:	4318      	orrs	r0, r3
    6cf6:	40d4      	lsrs	r4, r2
    6cf8:	0743      	lsls	r3, r0, #29
    6cfa:	d009      	beq.n	6d10 <__aeabi_dmul+0x474>
    6cfc:	230f      	movs	r3, #15
    6cfe:	4003      	ands	r3, r0
    6d00:	2b04      	cmp	r3, #4
    6d02:	d005      	beq.n	6d10 <__aeabi_dmul+0x474>
    6d04:	0003      	movs	r3, r0
    6d06:	1d18      	adds	r0, r3, #4
    6d08:	4298      	cmp	r0, r3
    6d0a:	419b      	sbcs	r3, r3
    6d0c:	425b      	negs	r3, r3
    6d0e:	18e4      	adds	r4, r4, r3
    6d10:	0223      	lsls	r3, r4, #8
    6d12:	d521      	bpl.n	6d58 <__aeabi_dmul+0x4bc>
    6d14:	2501      	movs	r5, #1
    6d16:	9b01      	ldr	r3, [sp, #4]
    6d18:	2401      	movs	r4, #1
    6d1a:	401d      	ands	r5, r3
    6d1c:	2300      	movs	r3, #0
    6d1e:	2200      	movs	r2, #0
    6d20:	4699      	mov	r9, r3
    6d22:	e622      	b.n	696a <__aeabi_dmul+0xce>
    6d24:	251f      	movs	r5, #31
    6d26:	0021      	movs	r1, r4
    6d28:	426d      	negs	r5, r5
    6d2a:	1a28      	subs	r0, r5, r0
    6d2c:	40c1      	lsrs	r1, r0
    6d2e:	0008      	movs	r0, r1
    6d30:	2a20      	cmp	r2, #32
    6d32:	d01d      	beq.n	6d70 <__aeabi_dmul+0x4d4>
    6d34:	355f      	adds	r5, #95	; 0x5f
    6d36:	1aaa      	subs	r2, r5, r2
    6d38:	4094      	lsls	r4, r2
    6d3a:	4323      	orrs	r3, r4
    6d3c:	1e5c      	subs	r4, r3, #1
    6d3e:	41a3      	sbcs	r3, r4
    6d40:	2507      	movs	r5, #7
    6d42:	4303      	orrs	r3, r0
    6d44:	401d      	ands	r5, r3
    6d46:	2200      	movs	r2, #0
    6d48:	2d00      	cmp	r5, #0
    6d4a:	d009      	beq.n	6d60 <__aeabi_dmul+0x4c4>
    6d4c:	220f      	movs	r2, #15
    6d4e:	2400      	movs	r4, #0
    6d50:	401a      	ands	r2, r3
    6d52:	0018      	movs	r0, r3
    6d54:	2a04      	cmp	r2, #4
    6d56:	d1d6      	bne.n	6d06 <__aeabi_dmul+0x46a>
    6d58:	0003      	movs	r3, r0
    6d5a:	0765      	lsls	r5, r4, #29
    6d5c:	0264      	lsls	r4, r4, #9
    6d5e:	0b22      	lsrs	r2, r4, #12
    6d60:	08db      	lsrs	r3, r3, #3
    6d62:	432b      	orrs	r3, r5
    6d64:	2501      	movs	r5, #1
    6d66:	4699      	mov	r9, r3
    6d68:	9b01      	ldr	r3, [sp, #4]
    6d6a:	2400      	movs	r4, #0
    6d6c:	401d      	ands	r5, r3
    6d6e:	e5fc      	b.n	696a <__aeabi_dmul+0xce>
    6d70:	2400      	movs	r4, #0
    6d72:	e7e2      	b.n	6d3a <__aeabi_dmul+0x49e>
    6d74:	2280      	movs	r2, #128	; 0x80
    6d76:	2501      	movs	r5, #1
    6d78:	0312      	lsls	r2, r2, #12
    6d7a:	4322      	orrs	r2, r4
    6d7c:	9901      	ldr	r1, [sp, #4]
    6d7e:	0312      	lsls	r2, r2, #12
    6d80:	0b12      	lsrs	r2, r2, #12
    6d82:	400d      	ands	r5, r1
    6d84:	4699      	mov	r9, r3
    6d86:	4c04      	ldr	r4, [pc, #16]	; (6d98 <__aeabi_dmul+0x4fc>)
    6d88:	e5ef      	b.n	696a <__aeabi_dmul+0xce>
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	000003ff 	.word	0x000003ff
    6d90:	feffffff 	.word	0xfeffffff
    6d94:	000007fe 	.word	0x000007fe
    6d98:	000007ff 	.word	0x000007ff

00006d9c <__aeabi_i2d>:
    6d9c:	b570      	push	{r4, r5, r6, lr}
    6d9e:	2800      	cmp	r0, #0
    6da0:	d030      	beq.n	6e04 <__aeabi_i2d+0x68>
    6da2:	17c3      	asrs	r3, r0, #31
    6da4:	18c4      	adds	r4, r0, r3
    6da6:	405c      	eors	r4, r3
    6da8:	0fc5      	lsrs	r5, r0, #31
    6daa:	0020      	movs	r0, r4
    6dac:	f000 f8c2 	bl	6f34 <__clzsi2>
    6db0:	4b17      	ldr	r3, [pc, #92]	; (6e10 <__aeabi_i2d+0x74>)
    6db2:	4a18      	ldr	r2, [pc, #96]	; (6e14 <__aeabi_i2d+0x78>)
    6db4:	1a1b      	subs	r3, r3, r0
    6db6:	1ad2      	subs	r2, r2, r3
    6db8:	2a1f      	cmp	r2, #31
    6dba:	dd18      	ble.n	6dee <__aeabi_i2d+0x52>
    6dbc:	4a16      	ldr	r2, [pc, #88]	; (6e18 <__aeabi_i2d+0x7c>)
    6dbe:	1ad2      	subs	r2, r2, r3
    6dc0:	4094      	lsls	r4, r2
    6dc2:	2200      	movs	r2, #0
    6dc4:	0324      	lsls	r4, r4, #12
    6dc6:	055b      	lsls	r3, r3, #21
    6dc8:	0b24      	lsrs	r4, r4, #12
    6dca:	0d5b      	lsrs	r3, r3, #21
    6dcc:	2100      	movs	r1, #0
    6dce:	0010      	movs	r0, r2
    6dd0:	0324      	lsls	r4, r4, #12
    6dd2:	0d0a      	lsrs	r2, r1, #20
    6dd4:	0b24      	lsrs	r4, r4, #12
    6dd6:	0512      	lsls	r2, r2, #20
    6dd8:	4322      	orrs	r2, r4
    6dda:	4c10      	ldr	r4, [pc, #64]	; (6e1c <__aeabi_i2d+0x80>)
    6ddc:	051b      	lsls	r3, r3, #20
    6dde:	4022      	ands	r2, r4
    6de0:	4313      	orrs	r3, r2
    6de2:	005b      	lsls	r3, r3, #1
    6de4:	07ed      	lsls	r5, r5, #31
    6de6:	085b      	lsrs	r3, r3, #1
    6de8:	432b      	orrs	r3, r5
    6dea:	0019      	movs	r1, r3
    6dec:	bd70      	pop	{r4, r5, r6, pc}
    6dee:	0021      	movs	r1, r4
    6df0:	4091      	lsls	r1, r2
    6df2:	000a      	movs	r2, r1
    6df4:	210b      	movs	r1, #11
    6df6:	1a08      	subs	r0, r1, r0
    6df8:	40c4      	lsrs	r4, r0
    6dfa:	055b      	lsls	r3, r3, #21
    6dfc:	0324      	lsls	r4, r4, #12
    6dfe:	0b24      	lsrs	r4, r4, #12
    6e00:	0d5b      	lsrs	r3, r3, #21
    6e02:	e7e3      	b.n	6dcc <__aeabi_i2d+0x30>
    6e04:	2500      	movs	r5, #0
    6e06:	2300      	movs	r3, #0
    6e08:	2400      	movs	r4, #0
    6e0a:	2200      	movs	r2, #0
    6e0c:	e7de      	b.n	6dcc <__aeabi_i2d+0x30>
    6e0e:	46c0      	nop			; (mov r8, r8)
    6e10:	0000041e 	.word	0x0000041e
    6e14:	00000433 	.word	0x00000433
    6e18:	00000413 	.word	0x00000413
    6e1c:	800fffff 	.word	0x800fffff

00006e20 <__aeabi_d2f>:
    6e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e22:	004c      	lsls	r4, r1, #1
    6e24:	0d64      	lsrs	r4, r4, #21
    6e26:	030b      	lsls	r3, r1, #12
    6e28:	1c62      	adds	r2, r4, #1
    6e2a:	0f45      	lsrs	r5, r0, #29
    6e2c:	0a5b      	lsrs	r3, r3, #9
    6e2e:	0552      	lsls	r2, r2, #21
    6e30:	432b      	orrs	r3, r5
    6e32:	0fc9      	lsrs	r1, r1, #31
    6e34:	00c5      	lsls	r5, r0, #3
    6e36:	0d52      	lsrs	r2, r2, #21
    6e38:	2a01      	cmp	r2, #1
    6e3a:	dd28      	ble.n	6e8e <__aeabi_d2f+0x6e>
    6e3c:	4a3a      	ldr	r2, [pc, #232]	; (6f28 <__aeabi_d2f+0x108>)
    6e3e:	18a6      	adds	r6, r4, r2
    6e40:	2efe      	cmp	r6, #254	; 0xfe
    6e42:	dc1b      	bgt.n	6e7c <__aeabi_d2f+0x5c>
    6e44:	2e00      	cmp	r6, #0
    6e46:	dd3e      	ble.n	6ec6 <__aeabi_d2f+0xa6>
    6e48:	0180      	lsls	r0, r0, #6
    6e4a:	0002      	movs	r2, r0
    6e4c:	1e50      	subs	r0, r2, #1
    6e4e:	4182      	sbcs	r2, r0
    6e50:	0f6d      	lsrs	r5, r5, #29
    6e52:	432a      	orrs	r2, r5
    6e54:	00db      	lsls	r3, r3, #3
    6e56:	4313      	orrs	r3, r2
    6e58:	075a      	lsls	r2, r3, #29
    6e5a:	d004      	beq.n	6e66 <__aeabi_d2f+0x46>
    6e5c:	220f      	movs	r2, #15
    6e5e:	401a      	ands	r2, r3
    6e60:	2a04      	cmp	r2, #4
    6e62:	d000      	beq.n	6e66 <__aeabi_d2f+0x46>
    6e64:	3304      	adds	r3, #4
    6e66:	2280      	movs	r2, #128	; 0x80
    6e68:	04d2      	lsls	r2, r2, #19
    6e6a:	401a      	ands	r2, r3
    6e6c:	d05a      	beq.n	6f24 <__aeabi_d2f+0x104>
    6e6e:	3601      	adds	r6, #1
    6e70:	2eff      	cmp	r6, #255	; 0xff
    6e72:	d003      	beq.n	6e7c <__aeabi_d2f+0x5c>
    6e74:	019b      	lsls	r3, r3, #6
    6e76:	0a5b      	lsrs	r3, r3, #9
    6e78:	b2f4      	uxtb	r4, r6
    6e7a:	e001      	b.n	6e80 <__aeabi_d2f+0x60>
    6e7c:	24ff      	movs	r4, #255	; 0xff
    6e7e:	2300      	movs	r3, #0
    6e80:	0258      	lsls	r0, r3, #9
    6e82:	05e4      	lsls	r4, r4, #23
    6e84:	0a40      	lsrs	r0, r0, #9
    6e86:	07c9      	lsls	r1, r1, #31
    6e88:	4320      	orrs	r0, r4
    6e8a:	4308      	orrs	r0, r1
    6e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e8e:	2c00      	cmp	r4, #0
    6e90:	d007      	beq.n	6ea2 <__aeabi_d2f+0x82>
    6e92:	431d      	orrs	r5, r3
    6e94:	d0f2      	beq.n	6e7c <__aeabi_d2f+0x5c>
    6e96:	2080      	movs	r0, #128	; 0x80
    6e98:	00db      	lsls	r3, r3, #3
    6e9a:	0480      	lsls	r0, r0, #18
    6e9c:	4303      	orrs	r3, r0
    6e9e:	26ff      	movs	r6, #255	; 0xff
    6ea0:	e7da      	b.n	6e58 <__aeabi_d2f+0x38>
    6ea2:	432b      	orrs	r3, r5
    6ea4:	d003      	beq.n	6eae <__aeabi_d2f+0x8e>
    6ea6:	2305      	movs	r3, #5
    6ea8:	08db      	lsrs	r3, r3, #3
    6eaa:	2cff      	cmp	r4, #255	; 0xff
    6eac:	d003      	beq.n	6eb6 <__aeabi_d2f+0x96>
    6eae:	025b      	lsls	r3, r3, #9
    6eb0:	0a5b      	lsrs	r3, r3, #9
    6eb2:	b2e4      	uxtb	r4, r4
    6eb4:	e7e4      	b.n	6e80 <__aeabi_d2f+0x60>
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d032      	beq.n	6f20 <__aeabi_d2f+0x100>
    6eba:	2080      	movs	r0, #128	; 0x80
    6ebc:	03c0      	lsls	r0, r0, #15
    6ebe:	4303      	orrs	r3, r0
    6ec0:	025b      	lsls	r3, r3, #9
    6ec2:	0a5b      	lsrs	r3, r3, #9
    6ec4:	e7dc      	b.n	6e80 <__aeabi_d2f+0x60>
    6ec6:	0032      	movs	r2, r6
    6ec8:	3217      	adds	r2, #23
    6eca:	db14      	blt.n	6ef6 <__aeabi_d2f+0xd6>
    6ecc:	2280      	movs	r2, #128	; 0x80
    6ece:	271e      	movs	r7, #30
    6ed0:	0412      	lsls	r2, r2, #16
    6ed2:	4313      	orrs	r3, r2
    6ed4:	1bbf      	subs	r7, r7, r6
    6ed6:	2f1f      	cmp	r7, #31
    6ed8:	dc0f      	bgt.n	6efa <__aeabi_d2f+0xda>
    6eda:	4a14      	ldr	r2, [pc, #80]	; (6f2c <__aeabi_d2f+0x10c>)
    6edc:	4694      	mov	ip, r2
    6ede:	4464      	add	r4, ip
    6ee0:	002a      	movs	r2, r5
    6ee2:	40a5      	lsls	r5, r4
    6ee4:	002e      	movs	r6, r5
    6ee6:	40a3      	lsls	r3, r4
    6ee8:	1e75      	subs	r5, r6, #1
    6eea:	41ae      	sbcs	r6, r5
    6eec:	40fa      	lsrs	r2, r7
    6eee:	4333      	orrs	r3, r6
    6ef0:	4313      	orrs	r3, r2
    6ef2:	2600      	movs	r6, #0
    6ef4:	e7b0      	b.n	6e58 <__aeabi_d2f+0x38>
    6ef6:	2400      	movs	r4, #0
    6ef8:	e7d5      	b.n	6ea6 <__aeabi_d2f+0x86>
    6efa:	2202      	movs	r2, #2
    6efc:	4252      	negs	r2, r2
    6efe:	1b96      	subs	r6, r2, r6
    6f00:	001a      	movs	r2, r3
    6f02:	40f2      	lsrs	r2, r6
    6f04:	2f20      	cmp	r7, #32
    6f06:	d009      	beq.n	6f1c <__aeabi_d2f+0xfc>
    6f08:	4809      	ldr	r0, [pc, #36]	; (6f30 <__aeabi_d2f+0x110>)
    6f0a:	4684      	mov	ip, r0
    6f0c:	4464      	add	r4, ip
    6f0e:	40a3      	lsls	r3, r4
    6f10:	432b      	orrs	r3, r5
    6f12:	1e5d      	subs	r5, r3, #1
    6f14:	41ab      	sbcs	r3, r5
    6f16:	2600      	movs	r6, #0
    6f18:	4313      	orrs	r3, r2
    6f1a:	e79d      	b.n	6e58 <__aeabi_d2f+0x38>
    6f1c:	2300      	movs	r3, #0
    6f1e:	e7f7      	b.n	6f10 <__aeabi_d2f+0xf0>
    6f20:	2300      	movs	r3, #0
    6f22:	e7ad      	b.n	6e80 <__aeabi_d2f+0x60>
    6f24:	0034      	movs	r4, r6
    6f26:	e7bf      	b.n	6ea8 <__aeabi_d2f+0x88>
    6f28:	fffffc80 	.word	0xfffffc80
    6f2c:	fffffc82 	.word	0xfffffc82
    6f30:	fffffca2 	.word	0xfffffca2

00006f34 <__clzsi2>:
    6f34:	211c      	movs	r1, #28
    6f36:	2301      	movs	r3, #1
    6f38:	041b      	lsls	r3, r3, #16
    6f3a:	4298      	cmp	r0, r3
    6f3c:	d301      	bcc.n	6f42 <__clzsi2+0xe>
    6f3e:	0c00      	lsrs	r0, r0, #16
    6f40:	3910      	subs	r1, #16
    6f42:	0a1b      	lsrs	r3, r3, #8
    6f44:	4298      	cmp	r0, r3
    6f46:	d301      	bcc.n	6f4c <__clzsi2+0x18>
    6f48:	0a00      	lsrs	r0, r0, #8
    6f4a:	3908      	subs	r1, #8
    6f4c:	091b      	lsrs	r3, r3, #4
    6f4e:	4298      	cmp	r0, r3
    6f50:	d301      	bcc.n	6f56 <__clzsi2+0x22>
    6f52:	0900      	lsrs	r0, r0, #4
    6f54:	3904      	subs	r1, #4
    6f56:	a202      	add	r2, pc, #8	; (adr r2, 6f60 <__clzsi2+0x2c>)
    6f58:	5c10      	ldrb	r0, [r2, r0]
    6f5a:	1840      	adds	r0, r0, r1
    6f5c:	4770      	bx	lr
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	02020304 	.word	0x02020304
    6f64:	01010101 	.word	0x01010101
	...

00006f70 <__libc_init_array>:
    6f70:	b570      	push	{r4, r5, r6, lr}
    6f72:	2600      	movs	r6, #0
    6f74:	4d0c      	ldr	r5, [pc, #48]	; (6fa8 <__libc_init_array+0x38>)
    6f76:	4c0d      	ldr	r4, [pc, #52]	; (6fac <__libc_init_array+0x3c>)
    6f78:	1b64      	subs	r4, r4, r5
    6f7a:	10a4      	asrs	r4, r4, #2
    6f7c:	42a6      	cmp	r6, r4
    6f7e:	d109      	bne.n	6f94 <__libc_init_array+0x24>
    6f80:	2600      	movs	r6, #0
    6f82:	f000 f9dd 	bl	7340 <_init>
    6f86:	4d0a      	ldr	r5, [pc, #40]	; (6fb0 <__libc_init_array+0x40>)
    6f88:	4c0a      	ldr	r4, [pc, #40]	; (6fb4 <__libc_init_array+0x44>)
    6f8a:	1b64      	subs	r4, r4, r5
    6f8c:	10a4      	asrs	r4, r4, #2
    6f8e:	42a6      	cmp	r6, r4
    6f90:	d105      	bne.n	6f9e <__libc_init_array+0x2e>
    6f92:	bd70      	pop	{r4, r5, r6, pc}
    6f94:	00b3      	lsls	r3, r6, #2
    6f96:	58eb      	ldr	r3, [r5, r3]
    6f98:	4798      	blx	r3
    6f9a:	3601      	adds	r6, #1
    6f9c:	e7ee      	b.n	6f7c <__libc_init_array+0xc>
    6f9e:	00b3      	lsls	r3, r6, #2
    6fa0:	58eb      	ldr	r3, [r5, r3]
    6fa2:	4798      	blx	r3
    6fa4:	3601      	adds	r6, #1
    6fa6:	e7f2      	b.n	6f8e <__libc_init_array+0x1e>
    6fa8:	0000734c 	.word	0x0000734c
    6fac:	0000734c 	.word	0x0000734c
    6fb0:	0000734c 	.word	0x0000734c
    6fb4:	00007350 	.word	0x00007350

00006fb8 <memset>:
    6fb8:	0003      	movs	r3, r0
    6fba:	1882      	adds	r2, r0, r2
    6fbc:	4293      	cmp	r3, r2
    6fbe:	d100      	bne.n	6fc2 <memset+0xa>
    6fc0:	4770      	bx	lr
    6fc2:	7019      	strb	r1, [r3, #0]
    6fc4:	3301      	adds	r3, #1
    6fc6:	e7f9      	b.n	6fbc <memset+0x4>
    6fc8:	682f2e2e 	.word	0x682f2e2e
    6fcc:	702f6c70 	.word	0x702f6c70
    6fd0:	2f74726f 	.word	0x2f74726f
    6fd4:	5f6c7068 	.word	0x5f6c7068
    6fd8:	6f697067 	.word	0x6f697067
    6fdc:	7361625f 	.word	0x7361625f
    6fe0:	00682e65 	.word	0x00682e65
    6fe4:	682f2e2e 	.word	0x682f2e2e
    6fe8:	692f6c61 	.word	0x692f6c61
    6fec:	756c636e 	.word	0x756c636e
    6ff0:	682f6564 	.word	0x682f6564
    6ff4:	775f6c61 	.word	0x775f6c61
    6ff8:	682e7464 	.word	0x682e7464
    6ffc:	00000000 	.word	0x00000000
    7000:	00000fe4 	.word	0x00000fe4
    7004:	00000fae 	.word	0x00000fae
    7008:	00000fb4 	.word	0x00000fb4
    700c:	00000fae 	.word	0x00000fae
    7010:	00000fba 	.word	0x00000fba
    7014:	00000fae 	.word	0x00000fae
    7018:	00000fba 	.word	0x00000fba
    701c:	00000fae 	.word	0x00000fae
    7020:	00000fae 	.word	0x00000fae
    7024:	00000fba 	.word	0x00000fba
    7028:	00000fae 	.word	0x00000fae
    702c:	00000fba 	.word	0x00000fba
    7030:	00000fae 	.word	0x00000fae
    7034:	00000fe8 	.word	0x00000fe8
    7038:	00000fd2 	.word	0x00000fd2
    703c:	00000fd8 	.word	0x00000fd8
    7040:	00000fd2 	.word	0x00000fd2
    7044:	00000fde 	.word	0x00000fde
    7048:	00000fd2 	.word	0x00000fd2
    704c:	00000fde 	.word	0x00000fde
    7050:	00000fd2 	.word	0x00000fd2
    7054:	00000fd2 	.word	0x00000fd2
    7058:	00000fde 	.word	0x00000fde
    705c:	00000fd2 	.word	0x00000fd2
    7060:	00000fde 	.word	0x00000fde
    7064:	00000fd2 	.word	0x00000fd2
    7068:	0000135a 	.word	0x0000135a
    706c:	000012ce 	.word	0x000012ce
    7070:	000012de 	.word	0x000012de
    7074:	000012f4 	.word	0x000012f4
    7078:	00001308 	.word	0x00001308
    707c:	0000132c 	.word	0x0000132c
    7080:	00001478 	.word	0x00001478
    7084:	000013d8 	.word	0x000013d8
    7088:	0000140c 	.word	0x0000140c
    708c:	00001436 	.word	0x00001436
    7090:	00001456 	.word	0x00001456
    7094:	0000146c 	.word	0x0000146c
    7098:	00001478 	.word	0x00001478
    709c:	682f2e2e 	.word	0x682f2e2e
    70a0:	732f6c61 	.word	0x732f6c61
    70a4:	682f6372 	.word	0x682f6372
    70a8:	635f6c61 	.word	0x635f6c61
    70ac:	6e656c61 	.word	0x6e656c61
    70b0:	2e726164 	.word	0x2e726164
    70b4:	00000063 	.word	0x00000063
    70b8:	682f2e2e 	.word	0x682f2e2e
    70bc:	732f6c61 	.word	0x732f6c61
    70c0:	682f6372 	.word	0x682f6372
    70c4:	695f6c61 	.word	0x695f6c61
    70c8:	6d5f6332 	.word	0x6d5f6332
    70cc:	6e79735f 	.word	0x6e79735f
    70d0:	00632e63 	.word	0x00632e63
    70d4:	682f2e2e 	.word	0x682f2e2e
    70d8:	732f6c61 	.word	0x732f6c61
    70dc:	682f6372 	.word	0x682f6372
    70e0:	695f6c61 	.word	0x695f6c61
    70e4:	735f6332 	.word	0x735f6332
    70e8:	7973615f 	.word	0x7973615f
    70ec:	632e636e 	.word	0x632e636e
    70f0:	00000000 	.word	0x00000000
    70f4:	682f2e2e 	.word	0x682f2e2e
    70f8:	732f6c61 	.word	0x732f6c61
    70fc:	682f6372 	.word	0x682f6372
    7100:	695f6c61 	.word	0x695f6c61
    7104:	00632e6f 	.word	0x00632e6f
    7108:	682f2e2e 	.word	0x682f2e2e
    710c:	732f6c61 	.word	0x732f6c61
    7110:	682f6372 	.word	0x682f6372
    7114:	745f6c61 	.word	0x745f6c61
    7118:	72656d69 	.word	0x72656d69
    711c:	0000632e 	.word	0x0000632e
    7120:	682f2e2e 	.word	0x682f2e2e
    7124:	732f6c61 	.word	0x732f6c61
    7128:	682f6372 	.word	0x682f6372
    712c:	755f6c61 	.word	0x755f6c61
    7130:	74726173 	.word	0x74726173
    7134:	7973615f 	.word	0x7973615f
    7138:	632e636e 	.word	0x632e636e
    713c:	00000000 	.word	0x00000000
    7140:	682f2e2e 	.word	0x682f2e2e
    7144:	752f6c61 	.word	0x752f6c61
    7148:	736c6974 	.word	0x736c6974
    714c:	6372732f 	.word	0x6372732f
    7150:	6974752f 	.word	0x6974752f
    7154:	655f736c 	.word	0x655f736c
    7158:	746e6576 	.word	0x746e6576
    715c:	0000632e 	.word	0x0000632e
    7160:	682f2e2e 	.word	0x682f2e2e
    7164:	752f6c61 	.word	0x752f6c61
    7168:	736c6974 	.word	0x736c6974
    716c:	6372732f 	.word	0x6372732f
    7170:	6974752f 	.word	0x6974752f
    7174:	6c5f736c 	.word	0x6c5f736c
    7178:	2e747369 	.word	0x2e747369
    717c:	00000063 	.word	0x00000063
    7180:	682f2e2e 	.word	0x682f2e2e
    7184:	752f6c61 	.word	0x752f6c61
    7188:	736c6974 	.word	0x736c6974
    718c:	6372732f 	.word	0x6372732f
    7190:	6974752f 	.word	0x6974752f
    7194:	725f736c 	.word	0x725f736c
    7198:	62676e69 	.word	0x62676e69
    719c:	65666675 	.word	0x65666675
    71a0:	00632e72 	.word	0x00632e72
    71a4:	682f2e2e 	.word	0x682f2e2e
    71a8:	632f6c70 	.word	0x632f6c70
    71ac:	2f65726f 	.word	0x2f65726f
    71b0:	5f6c7068 	.word	0x5f6c7068
    71b4:	65726f63 	.word	0x65726f63
    71b8:	70306d5f 	.word	0x70306d5f
    71bc:	5f73756c 	.word	0x5f73756c
    71c0:	65736162 	.word	0x65736162
    71c4:	0000632e 	.word	0x0000632e
    71c8:	0000250a 	.word	0x0000250a
    71cc:	000024e8 	.word	0x000024e8
    71d0:	000024c6 	.word	0x000024c6
    71d4:	000024a4 	.word	0x000024a4
    71d8:	00002482 	.word	0x00002482
    71dc:	000025f6 	.word	0x000025f6
    71e0:	000025d4 	.word	0x000025d4
    71e4:	000025c0 	.word	0x000025c0
    71e8:	000025a2 	.word	0x000025a2
    71ec:	0000258a 	.word	0x0000258a
    71f0:	682f2e2e 	.word	0x682f2e2e
    71f4:	722f6c70 	.word	0x722f6c70
    71f8:	682f6374 	.word	0x682f6374
    71fc:	725f6c70 	.word	0x725f6c70
    7200:	632e6374 	.word	0x632e6374
    7204:	00000000 	.word	0x00000000
    7208:	682f2e2e 	.word	0x682f2e2e
    720c:	732f6c70 	.word	0x732f6c70
    7210:	6f637265 	.word	0x6f637265
    7214:	70682f6d 	.word	0x70682f6d
    7218:	65735f6c 	.word	0x65735f6c
    721c:	6d6f6372 	.word	0x6d6f6372
    7220:	0000632e 	.word	0x0000632e

00007224 <sercomspi_regs>:
	...
    7238:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    7248:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    7258:	775f6c70 632e7464 00000000 00005222     pl_wdt.c...."R..
    7268:	00005228 0000522e 00005234 0000523a     (R...R..4R..:R..
    7278:	00005240 00005248 00005250 00005258     @R..HR..PR..XR..
    7288:	00005260 00005268 00005270 732f2e2e     `R..hR..pR..../s
    7298:	7065656c 6e616d5f 72656761 656c732f     leep_manager/sle
    72a8:	6d5f7065 67616e61 632e7265 00000000     ep_manager.c....

000072b8 <mcp980x_interface>:
    72b8:	000054fd 000055c9 00006370 000062c0     .T...U..pc...b..
    72c8:	000062c0 000062be 00006362 00006362     .b...b..bc..bc..
    72d8:	00006358 000062be 00006362 00006358     Xc...b..bc..Xc..
    72e8:	00006362 000062be 00006368 00006368     bc...b..hc..hc..
    72f8:	00006368 000063f8 00006a8c 0000694c     hc...c...j..Li..
    7308:	0000694c 00006948 00006a64 00006a64     Li..Hi..dj..dj..
    7318:	00006a56 00006948 00006a64 00006a56     Vj..Hi..dj..Vj..
    7328:	00006a64 00006948 00006a6c 00006a6c     dj..Hi..lj..lj..
    7338:	00006a6c 00006c70                       lj..pl..

00007340 <_init>:
    7340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7346:	bc08      	pop	{r3}
    7348:	469e      	mov	lr, r3
    734a:	4770      	bx	lr

0000734c <__init_array_start>:
    734c:	000000dd 	.word	0x000000dd

00007350 <_fini>:
    7350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7356:	bc08      	pop	{r3}
    7358:	469e      	mov	lr, r3
    735a:	4770      	bx	lr

0000735c <__fini_array_start>:
    735c:	000000b5 	.word	0x000000b5
